{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\n\nimport \"./IERC20Permit.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/AddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/IAddressesProvider.sol';\nimport './libraries/Errors.sol';\n\ncontract AddressesProvider is Ownable, IAddressesProvider {\n\n    bytes32 private constant ROLE_MANAGER = 'ROLE_MANAGER';\n    bytes32 private constant PRICE_ORACLE = 'PRICE_ORACLE';\n    bytes32 private constant INDEX_PRICE_ORACLE = 'INDEX_PRICE_ORACLE';\n\n    mapping(bytes32 => address) private _addresses;\n\n    function getAddress(bytes32 id) public view override returns (address) {\n        return _addresses[id];\n    }\n\n    function setAddress(bytes32 id, address newAddress) public override onlyOwner {\n        address oldAddress = _addresses[id];\n        _addresses[id] = newAddress;\n        emit AddressSet(id, oldAddress, newAddress);\n    }\n\n    function getPriceOracle() external view override returns (address) {\n        return getAddress(PRICE_ORACLE);\n    }\n\n    function setPriceOracle(address newPriceOracle) external override onlyOwner {\n        address oldPriceOracle = _addresses[PRICE_ORACLE];\n        _addresses[PRICE_ORACLE] = newPriceOracle;\n        emit AddressSet(PRICE_ORACLE, oldPriceOracle, newPriceOracle);\n    }\n\n    function getIndexPriceOracle() external view override returns (address) {\n        return getAddress(INDEX_PRICE_ORACLE);\n    }\n\n    function setIndexPriceOracle(address newIndexPriceOracle) external override onlyOwner {\n        address oldIndexPriceOracle = _addresses[INDEX_PRICE_ORACLE];\n        _addresses[INDEX_PRICE_ORACLE] = newIndexPriceOracle;\n        emit AddressSet(INDEX_PRICE_ORACLE, oldIndexPriceOracle, newIndexPriceOracle);\n    }\n\n    function getRoleManager() external view override returns (address) {\n        return getAddress(ROLE_MANAGER);\n    }\n\n    function setRolManager(address newAddress) external override onlyOwner {\n        require(newAddress != address(0), Errors.NOT_ADDRESS_ZERO);\n        address oldAclManager = _addresses[ROLE_MANAGER];\n        setAddress(ROLE_MANAGER, newAddress);\n        emit AddressSet(ROLE_MANAGER, oldAclManager, newAddress);\n    }\n\n}\n"
    },
    "contracts/interfaces/IAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\ninterface IAddressesProvider {\n\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address newPriceOracle) external;\n\n    function getIndexPriceOracle() external view returns (address);\n\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\n\n    function getRoleManager() external view returns (address);\n\n    function setRolManager(address) external;\n\n}\n"
    },
    "contracts/interfaces/IChainlinkFlags.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IChainlinkFlags {\n  function getFlag(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IExecutor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../libraries/type/TradingTypes.sol\";\n\ninterface IExecutor {\n\n    event UpdateExecuteRouter(address oldAddress, address newAddress);\n\n    function increaseMarketOrderStartIndex() external view returns (uint256);\n\n    function decreaseMarketOrderStartIndex() external view returns (uint256);\n\n    function setPricesAndExecuteMarketOrders(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        uint256 increaseEndIndex,\n        uint256 decreaseEndIndex\n    ) external;\n\n    function setPricesAndExecuteLimitOrders(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        uint256[] memory increaseOrderIds,\n        uint256[] memory decreaseOrderIds\n    ) external;\n\n    function executeIncreaseMarketOrders(uint256 endIndex) external;\n\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external;\n\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\n\n    function executeDecreaseMarketOrders(uint256 endIndex) external;\n\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external;\n\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\n\n    function setPricesAndLiquidatePositions(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        bytes32[] memory positionKeys\n    ) external;\n\n    function liquidatePositions(bytes32[] memory positionKeys) external;\n\n    function setPricesAndExecuteADL(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        bytes32[] memory positionKeys,\n        uint256[] memory sizeAmounts,\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) external;\n\n    function executeADLAndDecreaseOrder(\n        bytes32[] memory positionKeys,\n        uint256[] memory sizeAmounts,\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) external;\n}\n"
    },
    "contracts/interfaces/IIndexPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IIndexPriceFeed {\n    event PriceUpdate(address token, uint256 price, address priceFeed);\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\n    function lastUpdatedAt() external view returns (uint256);\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\n}\n"
    },
    "contracts/interfaces/IOraclePrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IOraclePrice {\n    function getPrice(address _token) external  view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IOrderManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../libraries/type/TradingTypes.sol\";\n\ninterface IOrderManager {\n\n    event UpdatePositionManager(address oldAddress, address newAddress);\n\n    event CreateIncreaseOrder(\n        address account,\n        uint256 orderId,\n        uint256 pairIndex,\n        TradingTypes.TradeType tradeType,\n        int256 collateral,\n        uint256 openPrice,\n        bool isLong,\n        uint256 sizeAmount,\n        uint256 tpPrice,\n        uint256 tpAmount,\n        uint256 slPrice,\n        uint256 slAmount\n    );\n\n    event CreateDecreaseOrder(\n        address account,\n        uint256 orderId,\n        TradingTypes.TradeType tradeType,\n        int256 collateral,\n        uint256 pairIndex,\n        uint256 openPrice,\n        uint256 sizeAmount,\n        bool isLong,\n        bool abovePrice\n    );\n\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\n\n    struct PositionOrder {\n        address account;\n        uint256 pairIndex;\n        bool isLong;\n        bool isIncrease;\n        TradingTypes.TradeType tradeType;\n        uint256 orderId;\n        uint256 sizeAmount;\n    }\n\n    function increaseMarketOrdersIndex() external view returns(uint256);\n    function decreaseMarketOrdersIndex() external view returns(uint256);\n    function increaseLimitOrdersIndex() external view returns(uint256);\n    function decreaseLimitOrdersIndex() external view returns(uint256);\n\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\n\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\n\n    function updatePositionManager(address newAddress) external;\n\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\n\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\n\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\n\n    function addOrderToPosition(PositionOrder memory order) external;\n    function removeOrderFromPosition(PositionOrder memory order) external;\n\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\n\n    function removeIncreaseMarketOrders(uint256 orderId) external;\n    function removeIncreaseLimitOrders(uint256 orderId) external;\n    function removeDecreaseMarketOrders(uint256 orderId) external;\n    function removeDecreaseLimitOrders(uint256 orderId) external;\n\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\n}\n"
    },
    "contracts/interfaces/IPositionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../libraries/type/TradingTypes.sol\";\n\ninterface IPositionManager {\n\n    event ExecuteIncreaseOrder(\n        address account,\n        uint256 orderId,\n        uint256 pairIndex,\n        TradingTypes.TradeType tradeType,\n        int256 collateral,\n        bool isLong,\n        uint256 sizeAmount,\n        uint256 price,\n        uint256 tradingFee,\n        int256 fundingFee\n    );\n\n    event ExecuteDecreaseOrder(\n        address account,\n        uint256 orderId,\n        uint256 pairIndex,\n        TradingTypes.TradeType tradeType,\n        bool isLong,\n        uint256 sizeAmount,\n        uint256 price,\n        int256 pnl,\n        bool needADL,\n        uint256 tradingFee,\n        int256 fundingFee\n    );\n\n    event LiquidatePosition(\n        bytes32 positionKey,\n        address account,\n        uint256 pairIndex,\n        bool isLong,\n        uint256 sizeAmount,\n        uint256 collateral,\n        uint256 price,\n        uint256 orderId\n    );\n\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\n\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\n\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\n\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\n\n    function setPricesAndLiquidatePositions(\n        address[] memory _tokens,\n        uint256[] memory _prices,\n        uint256 _timestamp,\n        bytes32[] memory _positionKeys\n    ) external;\n\n    function liquidatePositions(bytes32[] memory _positionKeys) external;\n\n    function executeADLAndDecreaseOrder(\n        bytes32[] memory _positionKeys,\n        uint256[] memory _sizeAmounts,\n        uint256 _orderId,\n        TradingTypes.TradeType _tradeType\n    ) external;\n\n    function getValidPrice(uint256 _pairIndex, bool _isLong) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPriceFeed {\n    function description() external view returns (string memory);\n    function aggregator() external view returns (address);\n    function latestAnswer() external view returns (int256);\n    function latestRound() external view returns (uint80);\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\n    \n}\n"
    },
    "contracts/interfaces/IRoleManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\ninterface IRoleManager {\n\n    function contractWhiteList(address) external view returns (bool);\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n\n    function addAdmin(address) external;\n\n    function removeAdmin(address) external;\n\n    function isAdmin(address) external view returns (bool);\n\n    function addPoolAdmin(address poolAdmin) external;\n\n    function removePoolAdmin(address poolAdmin) external;\n\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\n\n    function addOperator(address operator) external;\n\n    function removeOperator(address operator) external;\n\n    function isOperator(address operator) external view returns (bool);\n\n    function addTreasurer(address treasurer) external;\n\n    function removeTreasurer(address treasurer) external;\n\n    function isTreasurer(address treasurer) external view returns (bool);\n\n    function addKeeper(address) external;\n\n    function removeKeeper(address) external;\n\n    function isKeeper(address) external view returns (bool);\n\n    function addContractWhiteList(address target) external;\n\n    function removeContractWhiteList(address target) external;\n}\n"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../libraries/type/TradingTypes.sol\";\n\ninterface IRouter {\n\n    event UpdateTradingRouter(address oldAddress, address newAddress);\n\n    function createIncreaseOrder(TradingTypes.IncreasePositionRequest memory request) external returns (uint256);\n\n    function createDecreaseOrder(TradingTypes.DecreasePositionRequest memory request) external returns (uint256);\n\n    function cancelIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\n\n    function cancelDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\n\n    function cancelAllPositionOrders(uint256 pairIndex, bool isLong) external;\n\n    function cancelOrders(uint256 pairIndex, bool isLong, bool isIncrease) external;\n\n    function createTpSl(TradingTypes.CreateTpSlRequest memory request) external returns (uint256 tpOrderId, uint256 slOrderId);\n\n}\n"
    },
    "contracts/interfaces/ITradingVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport '../libraries/Position.sol';\n\ninterface ITradingVault {\n\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\n\n    event UpdatePairVault(address oldPairVault, address newPairVault);\n\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\n\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\n\n    event IncreasePosition(\n        bytes32 positionKey,\n        address account,\n        uint256 pairIndex,\n        int256 collateral,\n        bool isLong,\n        uint256 sizeAmount,\n        uint256 price,\n        uint256 tradingFee,\n        int256 fundingFee,\n        uint256 transferOut\n    );\n\n    event DecreasePosition(\n        bytes32 positionKey,\n        address account,\n        uint256 pairIndex,\n        bool isLong,\n        int256 collateral,\n        uint256 sizeAmount,\n        uint256 price,\n        uint256 tradingFee,\n        int256 fundingFee,\n        int256 realisedPnl,\n        uint256 transferOut\n    );\n\n    event UpdatePosition(\n        bytes32 positionKey,\n        address account,\n        uint256 pairIndex,\n        bool isLong,\n        uint256 collateral,\n        uint256 positionAmount,\n        uint256 averagePrice,\n        int256 entryFundingRate,\n        uint256 entryFundingTime,\n        int256 realisedPnl,\n        uint256 price\n    );\n\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\n\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\n\n    function isFrozen(address account) external view returns (bool);\n\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\n\n    function longTracker(uint256 pairIndex) external view returns (uint256);\n\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\n\n    function updatePairInfo(address newPairInfo) external;\n\n    function updatePairVault(address newPairVault) external;\n\n    function updateTradingFeeReceiver(address newReceiver) external;\n\n    function updateFundingInterval(uint256 newInterval) external;\n\n    function increasePosition(\n        address _account,\n        uint256 _pairIndex,\n        int256 _collateral,\n        uint256 _sizeAmount,\n        bool _isLong,\n        uint256 _price\n    ) external returns (uint256 tradingFee, int256 fundingFee);\n\n    function decreasePosition(\n        address _account,\n        uint256 _pairIndex,\n        int256 _collateral,\n        uint256 _sizeAmount,\n        bool _isLong,\n        uint256 _price\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\n\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\n\n    function buyIndexToken(uint256 _pairIndex, uint256 _amount) external;\n\n    function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\n\n    function getFundingFee(\n        bool _increase,\n        address _account,\n        uint256 _pairIndex,\n        bool _isLong,\n        uint256 _sizeAmount\n    ) external view returns (int256);\n\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\n\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\n\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\n\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\n\n}\n"
    },
    "contracts/interfaces/IVaultPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVaultPriceFeed {\n\n    function getPrice(address _token) external view returns (uint256);\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\n\n\n    function getPrimaryPrice(address _token) external view returns (uint256);\n    function setTokenConfig(\n        address _token,\n        address _priceFeed,\n        uint256 _priceDecimals\n    ) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity =0.8.17;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\npragma solidity ^0.8.0;\n\nabstract contract Governable is Initializable {\n    address public gov;\n\n    modifier onlyGov() {\n        require(msg.sender == gov, \"Governable: forbidden\");\n        _;\n    }\n\n    function __Governable_init() internal onlyInitializing {\n        gov = msg.sender;\n    }\n\n    function setGov(address _gov) external onlyGov {\n        gov = _gov;\n    }\n}\n"
    },
    "contracts/libraries/Handleable.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"./Governable.sol\";\nimport \"../../interfaces/IAddressesProvider.sol\";\nimport \"../../interfaces/IRoleManager.sol\";\n\npragma solidity ^0.8.0;\n\nabstract contract Handleable {\n\n    mapping(address => bool) public isHandler;\n\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\n\n    modifier onlyHandler() {\n        require(msg.sender == address(this) || isHandler[msg.sender], \"Handleable: forbidden\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), \"onlyAdmin\");\n        _;\n    }\n\n    modifier onlyPoolAdmin() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \"onlyPoolAdmin\");\n        _;\n    }\n\n    constructor(IAddressesProvider addressProvider) {\n        isHandler[msg.sender] = true;\n        ADDRESS_PROVIDER = addressProvider;\n    }\n\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\n        isHandler[_handler] = _isHandler;\n    }\n}\n"
    },
    "contracts/libraries/AMMUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nlibrary AMMUtils {\n\n    function getReserve(\n        uint256 k,\n        uint256 price,\n        uint256 pricePrecision\n    ) internal pure returns (uint256 reserveA, uint256 reserveB) {\n        require(price > 0, \"Invalid price\");\n        require(k > 0, \"Invalid k\");\n\n        reserveB = Math.sqrt(Math.mulDiv(k, price, pricePrecision));\n        reserveA = k / reserveB;\n        return (reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"Invalid amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"Invalid reserve\");\n        amountOut = Math.mulDiv(amountIn, reserveOut, reserveIn + amountIn);\n    }\n\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    string public constant CALLER_NOT_POOL_ADMIN = 'onlyPoolAdmin'; // The caller of the function is not a pool admin\n    string public constant NOT_ADDRESS_ZERO = 'is 0'; // The caller of the function is not a pool admin\n\n}\n"
    },
    "contracts/libraries/Int256Utils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Int256Utils {\n\n    using Strings for uint256;\n\n    function abs(int256 amount) internal pure returns(uint256) {\n        return amount >= 0 ? uint256(amount) : uint256(- amount);\n    }\n\n    function toString(int256 amount) internal pure returns(string memory) {\n        return string.concat(amount >= 0 ? \"\" : \"-\", abs(amount).toString());\n    }\n\n}\n"
    },
    "contracts/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../libraries/Int256Utils.sol\";\nimport \"../libraries/type/TradingTypes.sol\";\nimport \"../libraries/PositionKey.sol\";\n\nlibrary Position {\n    using Int256Utils for int256;\n    using Math for uint256;\n    using PrecisionUtils for uint256;\n\n    struct Info {\n        bytes32 key;\n        address account;\n        uint256 pairIndex;\n        bool isLong;\n        uint256 collateral;\n        uint256 positionAmount;\n        uint256 averagePrice;\n        int256 entryFundingRate;\n        uint256 entryFundingTime;\n        int256 realisedPnl;\n    }\n\n     function get(\n        mapping(bytes32 => Info) storage self,\n       address _account, uint256 _pairIndex, bool _isLong\n    ) internal view returns (Position.Info storage position) {\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\n    }\n\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\n         position = self[key];\n\n    }\n\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\n        if (price == self.averagePrice) {return 0;}\n        if (self.isLong) {\n            if (price > self.averagePrice) {\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\n            } else {\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\n            }\n        } else {\n            if (self.averagePrice > price) {\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\n            } else {\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\n            }\n        }\n\n        return pnl;\n    }\n\n    function validLeverage(\n        Info memory self,\n        uint256  price,\n        int256 _collateral,\n        uint256 _sizeAmount,\n        bool _increase,\n        uint256 minLeverage,\n        uint256 maxLeverage,\n        uint256 maxPositionAmount\n    ) internal view returns (uint256, uint256) {\n        // console.log(\"validLeverage sizeAmount\", _sizeAmount, \"collateral\", _collateral.toString());\n\n        // bytes32 key = PositionKey.getPositionKey(account, pairIndex, isLong);\n        // Position.Info memory position = tradingVault.getPositionByKey(key);\n        // IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\n        // uint256 price = getPrice(pair.indexToken);\n\n        // IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\n        // position >= decrease size\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \"decrease amount exceed position\");\n\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\n\n        // close position\n        if (afterPosition == 0) {\n            return (0, 0);\n        }\n\n        // check collateral\n        int256 totalCollateral = int256(self.collateral) + _collateral;\n        require(totalCollateral >= 0, \"collateral not enough for decrease\");\n\n        // pnl\n        if (self.positionAmount > 0) {\n            // uint256 price = getPrice(pair.indexToken);\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\n        }\n\n        // console.log(\"validLeverage totalCollateral\", totalCollateral.toString());\n        require(totalCollateral >= 0, \"collateral not enough for pnl\");\n\n        // console.log(\"validLeverage afterPosition\", afterPosition, \"collateralDelta\", totalCollateral.abs().divPrice(price));\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \"leverage incorrect\");\n        require(afterPosition <= maxPositionAmount, \"exceed max position\");\n\n        return (afterPosition, totalCollateral.abs());\n    }\n\n\n}\n"
    },
    "contracts/libraries/PositionKey.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../libraries/type/TradingTypes.sol\";\n\nlibrary PositionKey {\n\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\n    }\n\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\n    }\n\n}\n"
    },
    "contracts/libraries/PrecisionUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nlibrary PrecisionUtils {\n\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\n    uint256 public constant PRICE_PRECISION = 1e30;\n\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\n    }\n\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\n    }\n\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\n    }\n\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\n    }\n\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\n    }\n\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\n    }\n\n    function oneHundredPercentage() internal pure returns (uint256) {\n        return ONE_HUNDRED_PERCENTAGE;\n    }\n\n    function fundingRatePrecision() internal pure returns (uint256) {\n        return FUNDING_RATE_PRECISION;\n    }\n\n    function pricePrecision() internal pure returns (uint256) {\n        return PRICE_PRECISION;\n    }\n}\n"
    },
    "contracts/libraries/type/TradingTypes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary TradingTypes {\n\n    enum TradeType {MARKET, LIMIT, TP, SL}\n\n    struct CreateOrderRequest {\n        address account;\n        uint256 pairIndex;             // pair index\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\n        int256 collateral;             // 1e18 collateral amount，negative number is withdrawal\n        uint256 openPrice;             // 1e30, price\n        bool isLong;                   // long or short\n        int256 sizeAmount;             // size\n        uint256 tpPrice;               // 1e30, tp price\n        uint256 tp;                    // tp size\n        uint256 slPrice;               // 1e30, sl price\n        uint256 sl;                    // sl size\n    }\n\n    struct IncreasePositionRequest {\n        address account;\n        uint256 pairIndex;             // pair index\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\n        int256 collateral;             // 1e18 collateral amount，negative number is withdrawal\n        uint256 openPrice;             // 1e30, price\n        bool isLong;                   // long or short\n        uint256 sizeAmount;            // size\n        uint256 tpPrice;               // 1e30, tp price\n        uint256 tp;                    // tp size\n        uint256 slPrice;               // 1e30, sl price\n        uint256 sl;                    // sl size\n    }\n\n    struct DecreasePositionRequest {\n        address account;\n        uint256 pairIndex;\n        TradeType tradeType;\n        int256 collateral;             // 1e18 collateral amount，negative number is withdrawal\n        uint256 triggerPrice;          // 1e30, price\n        uint256 sizeAmount;            // size\n        bool isLong;\n    }\n    struct CreateTpSlRequest {\n        address account;\n        uint256 pairIndex;              // pair index\n        bool isLong;\n        uint256 tpPrice;                // Stop profit price 1e30\n        uint256 tp;                     // The number of profit stops\n        uint256 slPrice;                // Stop price 1e30\n        uint256 sl;                     // Stop loss quantity\n    }\n\n    struct IncreasePositionOrder {\n        uint256 orderId;\n        address account;\n        uint256 pairIndex;              // pair index\n        TradeType tradeType;            // 0: MARKET, 1: LIMIT\n        int256 collateral;              // 1e18 Margin amount\n        uint256 openPrice;              // 1e30 Market acceptable price/Limit opening price\n        bool isLong;                    // Long/short\n        uint256 sizeAmount;             // Number of positions\n        uint256 tpPrice;                // Stop profit price 1e30\n        uint256 tp;                     // The number of profit stops\n        uint256 slPrice;                // Stop price 1e30\n        uint256 sl;                     // Stop loss quantity\n        uint256 blockTime;\n    }\n\n    struct DecreasePositionOrder {\n        uint256 orderId;\n        address account;\n        uint256 pairIndex;\n        TradeType tradeType;\n        int256 collateral;              // 1e18 Margin amount\n        uint256 triggerPrice;            // Limit trigger price\n        uint256 sizeAmount;              // Number of customs documents\n        bool isLong;\n        bool abovePrice;                 // Above or below the trigger price\n        // Market order: open long true empty false\n        // Limit order: open multiple false empty true\n        // Stop profit: multiple single false empty single true\n        // Stop loss: multiple orders true and short orders false\n        uint256 blockTime;\n        bool needADL;\n    }\n}\n"
    },
    "contracts/mock/ERC20Faucet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {IERC20Permit} from '@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol';\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Faucet is IERC20Permit, ERC20 {\n    bytes public constant EIP712_REVISION = bytes('1');\n    bytes32 internal constant EIP712_DOMAIN =\n        keccak256(\n            'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\n        );\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\n        );\n\n    // Map of address nonces (address => nonce)\n    mapping(address => uint256) internal _nonces;\n\n    bytes32 public DOMAIN_SEPARATOR;\n\n    constructor() ERC20('ERC20Faucet', 'ERC20Faucet') {\n        uint256 chainId = block.chainid;\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                EIP712_DOMAIN,\n                keccak256(bytes('ERC20Faucet')),\n                keccak256(EIP712_REVISION),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    \n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(owner != address(0), 'INVALID_OWNER');\n        //solium-disable-next-line\n        require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n        uint256 currentValidNonce = _nonces[owner];\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline)\n                )\n            )\n        );\n        require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n        _nonces[owner] = currentValidNonce + 1;\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(uint256 value) public returns (bool) {\n        _mint(_msgSender(), value);\n        return true;\n    }\n\n    /**\n     * @dev Function to mint tokens to address\n     * @param account The account to mint tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address account, uint256 value) public returns (bool) {\n        _mint(account, value);\n        return true;\n    }\n\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n}\n"
    },
    "contracts/mock/MockPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IPriceFeed.sol\";\n\ncontract MockPriceFeed is IPriceFeed {\n    int256 public answer;\n    uint80 public roundId;\n    string public override description = \"MockPriceFeed\";\n    address public override aggregator;\n\n    uint256 public decimals;\n\n    address public gov;\n\n    mapping (uint80 => int256) public answers;\n    mapping (address => bool) public isAdmin;\n\n    constructor()  {\n        gov = msg.sender;\n        isAdmin[msg.sender] = true;\n    }\n\n    function setAdmin(address _account, bool _isAdmin) public {\n        require(msg.sender == gov, \"PriceFeed: forbidden\");\n        isAdmin[_account] = _isAdmin;\n    }\n\n    function latestAnswer() public override view returns (int256) {\n        return answer;\n    }\n\n    function latestRound() public override view returns (uint80) {\n        return roundId;\n    }\n\n    function setLatestAnswer(int256 _answer) public {\n        require(isAdmin[msg.sender], \"PriceFeed: forbidden\");\n        roundId = roundId + 1;\n        answer = _answer;\n        answers[roundId] = _answer;\n    }\n\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\n    function getRoundData(uint80 _roundId) public override view\n        returns (uint80, int256, uint256, uint256, uint80)\n    {\n        return (_roundId, answers[_roundId], 0, 0, 0);\n    }\n\n    // function getPrice(address _token) external  view returns (uint256){\n    //    return 1e8; \n    // }\n}\n"
    },
    "contracts/mock/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract Token is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name) public {\n        _name = name;\n        _symbol = name;\n        _decimals = 18;\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function withdrawToken(address token, address account, uint256 amount) public {\n        IERC20(token).transfer(account, amount);\n    }\n\n    function deposit() public payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_balances[msg.sender] >= amount, \"Token: insufficient balance\");\n        _burn(msg.sender, amount);\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"unable to withdraw\");\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        console.log(\"transfer, sender: %s, recipient: %s, this: %s\",\n            sender, recipient, amount);\n        console.log(\"transfer, token: %s, _msgSender: %s, balance: %s\", address(this), _msgSender(), balanceOf(sender));\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n}\n"
    },
    "contracts/mock/WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract WETH is IERC20 {\n    using SafeMath for uint256;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    ) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function deposit() public payable {\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_balances[msg.sender] >= amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"unable to withdraw\");\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n}\n"
    },
    "contracts/pair/interfaces/IPairInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IPairInfo {\n\n    struct Pair {\n        address indexToken;\n        address stableToken;\n        address pairToken;\n        bool enable;\n        uint256 kOfSwap;\n        uint256 expectIndexTokenP; //  10000 for 100%\n        uint256 addLpFeeP;\n    }\n\n    struct TradingConfig {\n        uint256 minLeverage;\n        uint256 maxLeverage;\n        uint256 minTradeAmount;\n        uint256 maxTradeAmount;\n        uint256 maxPositionAmount;\n        uint256 maintainMarginRate; // 10000 for 100%\n        uint256 priceSlipP;\n        uint256 maxPriceDeviationP;\n    }\n\n    struct TradingFeeConfig {\n        // fee\n        uint256 takerFeeP;\n        uint256 makerFeeP;\n        // Distribute\n        uint256 lpDistributeP;\n        uint256 keeperDistributeP;\n        uint256 treasuryDistributeP;\n        uint256 refererDistributeP;\n    }\n\n    struct FundingFeeConfig {\n        // factor\n        uint256 minFundingRate;             // 最小资金费率   1000000 for 100%\n        uint256 maxFundingRate;             // 最大资金费率   1000000 for 100%\n        uint256 fundingWeightFactor;        // 多空双方资金费率权重系数 10000 for 100%\n        uint256 liquidityPremiumFactor;     // 流动性对于溢价的系数  10000 for 100%\n        uint256 interest;\n        // Distribute\n        uint256 lpDistributeP;\n        uint256 userDistributeP;\n        uint256 treasuryDistributeP;\n    }\n\n    function getPair(uint256) external view returns(Pair memory);\n\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\n\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\n\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\n\n}\n"
    },
    "contracts/pair/interfaces/IPairLiquidity.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\ninterface IPairLiquidity {\n}\n"
    },
    "contracts/pair/interfaces/IPairVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\ninterface IPairVault {\n    struct Vault {\n        uint256 indexTotalAmount;               // total amount of tokens\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\n        uint256 stableTotalAmount;\n        uint256 stableReservedAmount;\n        uint256 averagePrice;\n        int256 realisedPnl;\n    }\n\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\n    function transferTokenTo(address token, address to, uint256 amount) external;\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit, uint256 _price) external;\n}\n"
    },
    "contracts/pair/PairInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"../libraries/Handleable.sol\";\nimport \"../token/interfaces/IPairToken.sol\";\nimport \"../token/PairToken.sol\";\nimport './interfaces/IPairInfo.sol';\nimport './interfaces/IPairLiquidity.sol';\nimport \"./interfaces/IPairInfo.sol\";\n\npragma solidity 0.8.17;\n\ncontract PairInfo is IPairInfo, Handleable {\n\n    uint256 public constant PERCENTAGE = 10000;\n\n    uint256 public pairsCount;\n\n    mapping(address => mapping(address => uint256)) public pairIndexes;\n\n    mapping(uint256 => Pair) public pairs;\n\n    mapping(uint256 => TradingConfig) public tradingConfigs;\n\n    mapping(uint256 => TradingFeeConfig) public tradingFeeConfigs;\n\n    mapping(uint256 => FundingFeeConfig) public fundingFeeConfigs;\n\n    mapping(address => mapping(address => bool)) public isPairListed;\n\n\n    // Events\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\n\n    constructor(\n        IAddressesProvider addressProvider\n    ) Handleable(addressProvider) {\n    }\n\n    // Manage pairs\n    function addPair(\n        address _indexToken,\n        address _stableToken,\n        address _pairLiquidity\n    ) external onlyPoolAdmin {\n\n        require(_indexToken != _stableToken, \"identical address\");\n        require(_indexToken != address(0) && _stableToken != address(0), \"zero address\");\n        require(!isPairListed[_indexToken][_stableToken], 'pair already listed');\n\n        address pairToken = _createPair(_indexToken, _stableToken, _pairLiquidity);\n\n        isPairListed[_indexToken][_stableToken] = true;\n        pairIndexes[_indexToken][_stableToken] = pairsCount;\n\n        Pair storage pair = pairs[pairsCount];\n        pair.indexToken = _indexToken;\n        pair.stableToken = _stableToken;\n        pair.pairToken = pairToken;\n\n        emit PairAdded(_indexToken, _stableToken, pairToken, pairsCount++);\n    }\n\n    function _createPair(address indexToken, address stableToken, address pairLiquidity) private returns (address) {\n        bytes memory bytecode = abi.encodePacked(type(PairToken).creationCode, abi.encode(indexToken, stableToken));\n        bytes32 salt = keccak256(abi.encodePacked(indexToken, stableToken));\n        address pairToken;\n        assembly {\n            pairToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IPairToken(pairToken).setMiner(pairLiquidity, true);\n        return pairToken;\n    }\n\n    function updatePair(uint256 _pairIndex, Pair calldata _pair) external onlyPoolAdmin {\n        Pair storage pair = pairs[_pairIndex];\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), \"pair not existed\");\n\n        pair.enable = _pair.enable;\n        pair.kOfSwap = _pair.kOfSwap;\n        pair.expectIndexTokenP = _pair.expectIndexTokenP;\n        pair.addLpFeeP = _pair.addLpFeeP;\n    }\n\n    function updateTradingConfig(uint256 _pairIndex, TradingConfig calldata _tradingConfig) external onlyPoolAdmin {\n        tradingConfigs[_pairIndex] = _tradingConfig;\n    }\n\n    function updateTradingFeeConfig(uint256 _pairIndex, TradingFeeConfig calldata _tradingFeeConfig) external onlyPoolAdmin {\n        require(_tradingFeeConfig.lpDistributeP + _tradingFeeConfig.keeperDistributeP + _tradingFeeConfig.treasuryDistributeP\n            + _tradingFeeConfig.refererDistributeP == PERCENTAGE, \"percentage exceed 100%\");\n        tradingFeeConfigs[_pairIndex] = _tradingFeeConfig;\n    }\n\n    function updateFundingFeeConfig(uint256 _pairIndex, FundingFeeConfig calldata _fundingFeeConfig) external onlyPoolAdmin {\n        require(_fundingFeeConfig.lpDistributeP + _fundingFeeConfig.userDistributeP + _fundingFeeConfig.treasuryDistributeP == PERCENTAGE,\n            \"percentage exceed 100%\");\n        fundingFeeConfigs[_pairIndex] = _fundingFeeConfig;\n    }\n\n    function updatePairMiner(uint256 _pairIndex, address _account, bool _enable) external onlyPoolAdmin {\n        Pair memory pair = pairs[_pairIndex];\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), \"pair not existed\");\n\n        IPairToken(pair.pairToken).setMiner(_account, _enable);\n    }\n\n    function getPair(uint256 _pairIndex) external view override returns(Pair memory) {\n        return pairs[_pairIndex];\n    }\n\n    function getTradingConfig(uint256 _pairIndex) external view override returns(TradingConfig memory) {\n        return tradingConfigs[_pairIndex];\n    }\n\n    function getTradingFeeConfig(uint256 _pairIndex) external view override returns(TradingFeeConfig memory) {\n        return tradingFeeConfigs[_pairIndex];\n    }\n\n    function getFundingFeeConfig(uint256 _pairIndex) external view override returns(FundingFeeConfig memory) {\n        return fundingFeeConfigs[_pairIndex];\n    }\n\n}\n"
    },
    "contracts/pair/PairLiquidity.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/IWETH.sol\";\nimport \"./interfaces/IPairInfo.sol\";\nimport \"./interfaces/IPairLiquidity.sol\";\nimport \"./interfaces/IPairVault.sol\";\nimport \"../libraries/Handleable.sol\";\nimport \"../libraries/AMMUtils.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../token/PairToken.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract PairLiquidity is IPairLiquidity, Handleable {\n\n    using PrecisionUtils for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    uint256 public constant PRICE_PRECISION = 1e30;\n\n    IPairInfo public pairInfo;\n    IPairVault public pairVault;\n    IVaultPriceFeed public vaultPriceFeed;\n\n    address public feeReceiver;\n\n    address public slipReceiver;\n\n    address public weth;\n\n    // pairToken => user => amount\n    mapping(address => mapping(address => uint256)) public userPairTokens;\n\n    event AddLiquidity(\n        address indexed account,\n        uint256 indexed pairIndex,\n        uint256 indexAmount,\n        uint256 stableAmount,\n        uint256 lpAmount\n    );\n\n    event RemoveLiquidity(\n        address indexed account,\n        uint256 indexed pairIndex,\n        uint256 indexAmount,\n        uint256 stableAmount,\n        uint256 lpAmount\n    );\n\n    constructor(\n        IAddressesProvider addressProvider,\n        IPairInfo _pairInfo,\n        IPairVault _pairVault,\n        IVaultPriceFeed _vaultPriceFeed,\n        address _feeReceiver,\n        address _slipReceiver,\n        address _weth\n    ) Handleable(addressProvider) {\n        pairInfo = _pairInfo;\n        pairVault = _pairVault;\n        vaultPriceFeed = _vaultPriceFeed;\n        feeReceiver = _feeReceiver;\n        slipReceiver = _slipReceiver;\n        weth = _weth;\n    }\n\n    function setContract(IPairInfo _pairStorage, IPairVault _pairVault) external onlyPoolAdmin {\n        pairInfo = _pairStorage;\n        pairVault = _pairVault;\n    }\n\n    function setReceiver(address _feeReceiver, address _slipReceiver) external onlyPoolAdmin {\n        feeReceiver = _feeReceiver;\n        slipReceiver = _slipReceiver;\n    }\n\n    function addLiquidity(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external returns (uint256) {\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, _indexAmount, _stableAmount);\n    }\n\n    function addLiquidityETH(uint256 _pairIndex, uint256 _stableAmount) external payable returns (uint256) {\n        IWETH(weth).deposit{value: msg.value}();\n        IWETH(weth).transfer(msg.sender, msg.value);\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, msg.value, _stableAmount);\n    }\n\n    function addLiquidityForAccount(address _funder, address _account, uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler returns (uint256) {\n        return _addLiquidity(_funder, _account, _pairIndex, _indexAmount, _stableAmount);\n    }\n\n    function removeLiquidity(uint256 _pairIndex, uint256 _amount) external returns (uint256 receivedIndexAmount, uint256 receivedStableAmount) {\n        (receivedIndexAmount, receivedStableAmount) = _removeLiquidity(msg.sender, msg.sender, _pairIndex, _amount);\n        if (receivedIndexAmount > 0 && pairInfo.getPair(_pairIndex).indexToken == weth) {\n            IWETH(weth).withdraw(receivedIndexAmount);\n            payable(msg.sender).sendValue(receivedIndexAmount);\n        }\n        return (receivedIndexAmount, receivedStableAmount);\n    }\n\n    function removeLiquidityForAccount(address _account, address _receiver, uint256 _pairIndex, uint256 _amount) external onlyHandler returns (uint256, uint256) {\n        return _removeLiquidity(_account, _receiver, _pairIndex, _amount);\n    }\n\n    function _addLiquidity(address _funder, address _account, uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) private returns (uint256 mintAmount) {\n        require(_indexAmount > 0 || _stableAmount > 0, \"invalid amount\");\n\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.pairToken != address(0), \"invalid pair\");\n\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n\n        console.log(\"addLiquidity indexAmount\", _indexAmount, \"stableAmount\", _stableAmount);\n        // transfer token\n        IERC20(pair.indexToken).safeTransferFrom(_funder, address(this), _indexAmount);\n        IERC20(pair.stableToken).safeTransferFrom(_funder, address(this), _stableAmount);\n\n        // fee\n        uint256 afterFeeIndexAmount;\n        uint256 afterFeeStableAmount;\n\n        {\n            // transfer fee\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\n            console.log(\"addLiquidity indexFeeAmount\", indexFeeAmount, \"stableFeeAmount\", stableFeeAmount);\n\n            IERC20(pair.indexToken).safeTransfer(feeReceiver, indexFeeAmount);\n            IERC20(pair.stableToken).safeTransfer(feeReceiver, stableFeeAmount);\n\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\n        }\n\n        // usdt value of reserve\n        {\n            uint256 price = _getPrice(pair.indexToken);\n            require(price > 0, \"invalid price\");\n\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\n\n            // usdt value of deposit\n            uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\n\n            // calculate deposit usdt value without slippage\n            uint256 slipDelta;\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\n\n                // after deposit\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\n                console.log(\"addLiquidity indexTotalDelta\", indexTotalDelta, \"stableTotalDelta\", stableTotalDelta);\n\n                // expect delta\n                uint256 expectIndexDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(pair.expectIndexTokenP);\n                uint256 expectStableDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\n                console.log(\"addLiquidity expectIndexDelta\", expectIndexDelta, \"expectStableDelta\", expectStableDelta);\n\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\n                if (indexTotalDelta > expectIndexDelta) {\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta ? (indexDepositDelta - needSwapIndexDelta) : indexDepositDelta;\n                    console.log(\"addLiquidity needSwapIndexDelta\", needSwapIndexDelta, \"swapIndexDelta\", swapIndexDelta);\n\n                    slipDelta =  AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\n                    uint256 slipAmount = _getAmount(slipDelta, price);\n\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\n                    IERC20(pair.indexToken).safeTransfer(slipReceiver, slipAmount);\n                    console.log(\"addLiquidity slipDelta\", slipDelta, \"afterFeeIndexAmount\", afterFeeIndexAmount);\n                } else if (stableTotalDelta > expectStableDelta) {\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta ? (afterFeeStableAmount - needSwapStableDelta) : afterFeeStableAmount;\n                    console.log(\"addLiquidity needSwapStableDelta\", needSwapStableDelta, \"swapStableDelta\", swapStableDelta);\n\n                    slipDelta = swapStableDelta - _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\n\n                    afterFeeStableAmount = afterFeeStableAmount - slipDelta;\n                    IERC20(pair.stableToken).safeTransfer(slipReceiver, slipDelta);\n                    console.log(\"addLiquidity slipDelta\", slipDelta, \"afterFeeStableAmount\", afterFeeStableAmount);\n                }\n            }\n            // mint lp\n            mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\n            console.log(\"addLiquidity indexDepositDelta\", indexDepositDelta, \"afterFeeStableAmount\", afterFeeStableAmount);\n        }\n        IPairToken(pair.pairToken).mint(address(this), mintAmount);\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] + mintAmount;\n\n        pairVault.increaseTotalAmount(_pairIndex, afterFeeIndexAmount, afterFeeStableAmount);\n\n        IERC20(pair.indexToken).safeTransfer(address(pairVault), afterFeeIndexAmount);\n        IERC20(pair.stableToken).safeTransfer(address(pairVault), afterFeeStableAmount);\n        console.log(\"addLiquidity afterFeeIndexAmount\", afterFeeIndexAmount, \"afterFeeStableAmount\", afterFeeStableAmount);\n\n        emit AddLiquidity(_account, _pairIndex, _indexAmount, _stableAmount, mintAmount);\n\n        return mintAmount;\n    }\n\n    function _removeLiquidity(address _account, address _receiver, uint256 _pairIndex, uint256 _amount) private\n    returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\n        require(_amount > 0, \"invalid amount\");\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.pairToken != address(0), \"invalid pair\");\n\n        require(userPairTokens[pair.pairToken][_account] >= _amount, \"insufficient balance\");\n\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n\n        (receiveIndexTokenAmount, receiveStableTokenAmount) = getReceivedAmount(_pairIndex, _amount);\n\n        require(receiveIndexTokenAmount <= vault.indexTotalAmount - vault.indexReservedAmount, \"insufficient indexToken amount\");\n        require(receiveStableTokenAmount <= vault.stableTotalAmount - vault.stableReservedAmount, \"insufficient stableToken amount\");\n\n        pairVault.decreaseTotalAmount(_pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount);\n\n        IPairToken(pair.pairToken).burn(address(this), _amount);\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] - _amount;\n\n        pairVault.transferTokenTo(pair.indexToken, _receiver, receiveIndexTokenAmount);\n        pairVault.transferTokenTo(pair.stableToken, _receiver, receiveStableTokenAmount);\n\n        emit RemoveLiquidity(_account, _pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount, _amount);\n\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\n    }\n\n    function lpFairPrice(uint256 _pairIndex) public view returns(uint256) {\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n        uint256 price = _getPrice(pair.indexToken);\n        uint256 lpFairDelta = _getDelta(vault.indexTotalAmount, price) + vault.stableTotalAmount;\n        return lpFairDelta > 0 ? Math.mulDiv(lpFairDelta, PRICE_PRECISION, IERC20(pair.pairToken).totalSupply()) : 1 * PRICE_PRECISION;\n    }\n\n    function _getDelta(uint256 amount, uint256 price) internal pure returns(uint256) {\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\n    }\n\n    function _getAmount(uint256 delta, uint256 price) internal pure returns(uint256) {\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\n    }\n\n    // calculate lp amount for add liquidity\n    function getMintLpAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external view returns(uint256 mintAmount, address slipToken, uint256 slipAmount) {\n        require(_indexAmount > 0 || _stableAmount > 0, \"invalid amount\");\n\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.pairToken != address(0), \"invalid pair\");\n\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n\n        console.log(\"getMintLpAmount indexAmount\", _indexAmount, \"stableAmount\", _stableAmount);\n\n        uint256 afterFeeIndexAmount;\n        uint256 afterFeeStableAmount;\n\n        {\n            // transfer fee\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\n\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\n        }\n\n        uint256 price = _getPrice(pair.indexToken);\n        require(price > 0, \"invalid price\");\n\n        // calculate deposit usdt value without slippage\n        uint256 slipDelta;\n\n        // usdt value of deposit\n        uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\n        console.log(\"getMintLpAmount indexDepositDelta\", indexDepositDelta);\n\n        {\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\n\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\n\n                // after deposit\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\n                console.log(\"getMintLpAmount indexTotalDelta\", indexTotalDelta, \"stableTotalDelta\", stableTotalDelta);\n\n                uint256 expectIndexDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(pair.expectIndexTokenP);\n                uint256 expectStableDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\n                console.log(\"getMintLpAmount expectIndexDelta\", expectIndexDelta, \"expectStableDelta\", expectStableDelta);\n\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\n                if (indexTotalDelta > expectIndexDelta) {\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta ? (indexDepositDelta - needSwapIndexDelta) : indexDepositDelta;\n                    console.log(\"getMintLpAmount needSwapIndexDelta\", needSwapIndexDelta, \"swapIndexDelta\", swapIndexDelta);\n\n                    slipDelta =  AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\n                    slipAmount = _getAmount(slipDelta, price);\n                    slipToken = pair.indexToken;\n\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\n                    console.log(\"getMintLpAmount slipDelta\", slipDelta, \"afterFeeIndexAmount\", afterFeeIndexAmount);\n                } else if (stableTotalDelta > expectStableDelta) {\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta ? (afterFeeStableAmount - needSwapStableDelta) : afterFeeStableAmount;\n                    console.log(\"getMintLpAmount needSwapStableDelta\", needSwapStableDelta, \"swapStableDelta\", swapStableDelta);\n\n                    slipDelta = swapStableDelta - _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\n                    slipAmount = slipDelta;\n                    slipToken = pair.stableToken;\n\n                    afterFeeStableAmount = afterFeeStableAmount - slipAmount;\n                    console.log(\"getMintLpAmount slipDelta\", slipDelta, \"afterFeeStableAmount\", afterFeeStableAmount);\n                }\n            }\n        }\n        console.log(\"getMintLpAmount afterFeeIndexAmount\", afterFeeIndexAmount, \"afterFeeStableAmount\", afterFeeStableAmount);\n        // mint lp\n        mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\n        console.log(\"getMintLpAmount indexDepositDelta\", indexDepositDelta, \"afterFeeStableAmount\", afterFeeStableAmount);\n        return (mintAmount, slipToken, slipAmount);\n    }\n\n    // calculate deposit amount for add liquidity\n    function getDepositAmount(uint256 _pairIndex, uint256 _lpAmount) external view returns(uint256 depositIndexAmount, uint256 depositStableAmount) {\n        require(_lpAmount > 0, \"invalid amount\");\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.pairToken != address(0), \"invalid pair\");\n\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n\n        uint256 price = _getPrice(pair.indexToken);\n        require(price > 0, \"invalid price\");\n\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\n        uint256 stableReserveDelta = vault.stableTotalAmount;\n        uint256 depositDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\n        console.log(\"getMintLpAmount depositDelta\", depositDelta);\n\n        // expect delta\n        uint256 expectIndexDelta = (indexReserveDelta + stableReserveDelta + depositDelta).mulPercentage(pair.expectIndexTokenP);\n        uint256 expectStableDelta = (indexReserveDelta + stableReserveDelta + depositDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\n        console.log(\"getDepositAmount expectIndexDelta\", expectIndexDelta, \"expectStableDelta\", expectStableDelta);\n\n        uint256 depositIndexTokenDelta;\n        uint256 depositStableTokenDelta;\n\n        if (expectIndexDelta >= indexReserveDelta) {\n            uint256 extraIndexReserveDelta = expectIndexDelta - indexReserveDelta;\n            if (extraIndexReserveDelta >= depositDelta) {\n                depositIndexTokenDelta = depositDelta;\n            } else {\n                depositIndexTokenDelta = extraIndexReserveDelta;\n                depositStableTokenDelta = depositDelta - extraIndexReserveDelta;\n            }\n            console.log(\"getDepositAmount depositIndexTokenDelta\", depositIndexTokenDelta, \"depositStableTokenDelta\", depositStableTokenDelta);\n        } else {\n            uint256 extraStableReserveDelta = expectStableDelta - stableReserveDelta;\n            if (extraStableReserveDelta >= depositDelta) {\n                depositStableTokenDelta = depositDelta;\n            } else {\n                depositIndexTokenDelta = depositDelta - extraStableReserveDelta;\n                depositStableTokenDelta = extraStableReserveDelta;\n            }\n            console.log(\"getDepositAmount depositIndexTokenDelta\", depositIndexTokenDelta, \"depositStableTokenDelta\", depositStableTokenDelta);\n        }\n        depositIndexAmount = _getAmount(depositIndexTokenDelta, price);\n        depositStableAmount = depositStableTokenDelta;\n        console.log(\"getDepositAmount depositIndexAmount\", depositIndexAmount, \"depositStableAmount\", depositStableAmount);\n\n        // add fee\n        depositIndexAmount = depositIndexAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\n        depositStableAmount = depositStableAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\n        console.log(\"getDepositAmount depositIndexAmount\", depositIndexAmount, \"depositStableAmount\", depositStableAmount);\n        return (depositIndexAmount, depositStableAmount);\n    }\n\n    // calculate amount for remove liquidity\n    function getReceivedAmount(uint256 _pairIndex, uint256 _lpAmount) public view returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\n        require(_lpAmount > 0, \"invalid amount\");\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.pairToken != address(0), \"invalid pair\");\n\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\n\n        // usdt value of reserve\n        uint256 price = _getPrice(pair.indexToken);\n        require(price > 0, \"invalid price\");\n\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\n        uint256 stableReserveDelta = vault.stableTotalAmount;\n\n        uint256 receiveDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\n        console.log(\"getReceivedAmount receiveDelta\", receiveDelta);\n\n        // expect delta\n        uint256 expectIndexDelta = (indexReserveDelta + stableReserveDelta - receiveDelta).mulPercentage(pair.expectIndexTokenP);\n        uint256 expectStableDelta = (indexReserveDelta + stableReserveDelta - receiveDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\n        console.log(\"getReceivedAmount expectIndexDelta\", expectIndexDelta, \"expectStableDelta\", expectStableDelta);\n\n        // received delta of indexToken and stableToken\n        uint256 receiveIndexTokenDelta;\n        uint256 receiveStableTokenDelta;\n\n        if (indexReserveDelta > expectIndexDelta) {\n            uint256 extraIndexReserveDelta = indexReserveDelta - expectIndexDelta;\n            if (extraIndexReserveDelta >= receiveDelta) {\n                receiveIndexTokenDelta = receiveDelta;\n            } else {\n                receiveIndexTokenDelta = extraIndexReserveDelta;\n                receiveStableTokenDelta = receiveDelta - extraIndexReserveDelta;\n            }\n            console.log(\"getReceivedAmount receiveIndexTokenDelta\", receiveIndexTokenDelta, \"receiveStableTokenDelta\", receiveStableTokenDelta);\n        } else {\n            uint256 extraStableReserveDelta = stableReserveDelta - expectStableDelta;\n            if (extraStableReserveDelta >= receiveDelta) {\n                receiveStableTokenDelta = receiveDelta;\n            } else {\n                receiveIndexTokenDelta = receiveDelta - extraStableReserveDelta;\n                receiveStableTokenDelta = extraStableReserveDelta;\n            }\n            console.log(\"getReceivedAmount receiveIndexTokenDelta\", receiveIndexTokenDelta, \"receiveStableTokenDelta\", receiveStableTokenDelta);\n        }\n        receiveIndexTokenAmount = _getAmount(receiveIndexTokenDelta, price);\n        receiveStableTokenAmount = receiveStableTokenDelta;\n        console.log(\"getReceivedAmount receiveIndexTokenAmount\", receiveIndexTokenAmount, \"receiveStableTokenAmount\", receiveStableTokenAmount);\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\n    }\n\n    function _getPrice(address _token) internal view returns (uint256) {\n        return vaultPriceFeed.getPrice(_token);\n    }\n}\n"
    },
    "contracts/pair/PairVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../libraries/Handleable.sol\";\nimport \"../libraries/AMMUtils.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../token/PairToken.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nimport \"./interfaces/IPairInfo.sol\";\nimport \"./interfaces/IPairVault.sol\";\nimport \"hardhat/console.sol\";\nimport \"../libraries/Int256Utils.sol\";\n\ncontract PairVault is IPairVault, Handleable {\n\n    using PrecisionUtils for uint256;\n    using SafeERC20 for IERC20;\n    using Int256Utils for int256;\n\n    IPairInfo public pairInfo;\n\n    mapping(uint256 => Vault) public vaults;\n\n    constructor(\n        IAddressesProvider addressProvider,\n        IPairInfo _pairInfo\n    ) Handleable(addressProvider) {\n        pairInfo = _pairInfo;\n    }\n\n    function setPairInfo(IPairInfo _pairInfo) external onlyPoolAdmin {\n        pairInfo = _pairInfo;\n    }\n\n    function increaseTotalAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"increaseTotalAmount before indexTotalAmount\", vault.indexTotalAmount, \"stableTotalAmount\", vault.stableTotalAmount);\n        console.log(\"increaseTotalAmount _indexAmount\", _indexAmount, \"_stableAmount\", _stableAmount);\n        vault.indexTotalAmount = vault.indexTotalAmount + _indexAmount;\n        vault.stableTotalAmount = vault.stableTotalAmount + _stableAmount;\n        console.log(\"increaseTotalAmount after indexTotalAmount\", vault.indexTotalAmount, \"stableTotalAmount\", vault.stableTotalAmount);\n    }\n\n    function decreaseTotalAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"decreaseTotalAmount before indexTotalAmount\", vault.indexTotalAmount, \"stableTotalAmount\", vault.stableTotalAmount);\n        console.log(\"decreaseTotalAmount _indexAmount\", _indexAmount, \"_stableAmount\", _stableAmount);\n        vault.indexTotalAmount = vault.indexTotalAmount - _indexAmount;\n        vault.stableTotalAmount = vault.stableTotalAmount - _stableAmount;\n        console.log(\"decreaseTotalAmount after indexTotalAmount\", vault.indexTotalAmount, \"stableTotalAmount\", vault.stableTotalAmount);\n    }\n\n    function increaseReserveAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"increaseReserveAmount before indexReservedAmount\", vault.indexReservedAmount, \"stableReservedAmount\", vault.stableReservedAmount);\n        console.log(\"increaseReserveAmount _indexAmount\", _indexAmount, \"_stableAmount\", _stableAmount);\n        vault.indexReservedAmount = vault.indexReservedAmount + _indexAmount;\n        vault.stableReservedAmount = vault.stableReservedAmount + _stableAmount;\n        console.log(\"increaseReserveAmount after indexReservedAmount\", vault.indexReservedAmount, \"stableReservedAmount\", vault.stableReservedAmount);\n    }\n\n    function decreaseReserveAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"decreaseReserveAmount before indexReservedAmount\", vault.indexReservedAmount, \"stableReservedAmount\", vault.stableReservedAmount);\n        console.log(\"decreaseReserveAmount _indexAmount\", _indexAmount, \"_stableAmount\", _stableAmount);\n        vault.indexReservedAmount = vault.indexReservedAmount - _indexAmount;\n        vault.stableReservedAmount = vault.stableReservedAmount - _stableAmount;\n        console.log(\"decreaseReserveAmount after indexReservedAmount\", vault.indexReservedAmount, \"stableReservedAmount\", vault.stableReservedAmount);\n    }\n\n    function transferTokenTo(address token, address to, uint256 amount) external onlyHandler {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault) {\n        return vaults[_pairIndex];\n    }\n\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external onlyHandler {\n        console.log(\"updateAveragePrice _pairIndex\", _pairIndex, \"_averagePrice\", _averagePrice);\n        vaults[_pairIndex].averagePrice = _averagePrice;\n    }\n\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"increaseProfit _pairIndex\", _pairIndex, \"_profit\", _profit);\n        console.log(\"increaseProfit indexTotalAmount\", vault.indexTotalAmount, \"indexReservedAmount\", vault.indexReservedAmount);\n        console.log(\"increaseProfit indexToken balance\", IERC20(pairInfo.getPair(_pairIndex).indexToken).balanceOf(address(this)),\n            \"stableToken balance\", IERC20(pairInfo.getPair(_pairIndex).stableToken).balanceOf(address(this)));\n        vault.stableTotalAmount += _profit;\n        vault.realisedPnl += int256(_profit);\n        console.log(\"decreaseReserveAmount after stableTotalAmount\", vault.stableTotalAmount, \"realisedPnl\", vault.realisedPnl.toString());\n    }\n\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit, uint256 _price) external onlyHandler {\n        Vault storage vault = vaults[_pairIndex];\n        console.log(\"decreaseProfit _pairIndex\", _pairIndex, \"_profit\", _profit);\n        console.log(\"decreaseProfit indexTotalAmount\", vault.indexTotalAmount, \"indexReservedAmount\", vault.indexReservedAmount);\n        console.log(\"increaseProfit indexToken balance\", IERC20(pairInfo.getPair(_pairIndex).indexToken).balanceOf(address(this)),\n            \"stableToken balance\", IERC20(pairInfo.getPair(_pairIndex).stableToken).balanceOf(address(this)));\n        uint256 availableStable = vault.stableTotalAmount - vault.stableReservedAmount;\n        if (_profit <= availableStable) {\n            IERC20(pairInfo.getPair(_pairIndex).stableToken).safeTransfer(msg.sender, _profit);\n            vault.stableTotalAmount -= _profit;\n        } else {\n            IERC20(pairInfo.getPair(_pairIndex).stableToken).safeTransfer(msg.sender, availableStable);\n            vault.stableTotalAmount -= availableStable;\n\n            uint256 diffIndexAmount = (_profit - availableStable).divPrice(_price);\n            IERC20(pairInfo.getPair(_pairIndex).stableToken).safeTransfer(msg.sender, diffIndexAmount);\n            vault.indexTotalAmount -= diffIndexAmount;\n        }\n        vault.realisedPnl -= int256(_profit);\n        console.log(\"decreaseReserveAmount after stableTotalAmount %s indexTotalAmount %s realisedPnl %s\",\n            vault.stableTotalAmount, vault.indexTotalAmount, vault.realisedPnl.toString());\n    }\n\n}\n"
    },
    "contracts/price/IndexPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport '../interfaces/IAddressesProvider.sol';\nimport '../interfaces/IRoleManager.sol';\nimport \"../interfaces/IIndexPriceFeed.sol\";\n\n\nimport \"hardhat/console.sol\";\n\npragma solidity 0.8.17;\n\ncontract IndexPriceFeed is IIndexPriceFeed {\n    using SafeMath for uint256;\n\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\n\n    uint256 public constant MAX_REF_PRICE = type(uint160).max;\n\n    // uint256(~0) is 256 bits of 1s\n    // shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\n    uint256 constant public BITMASK_32 = uint256(~uint256(0)) >> (256 - 32);\n\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\n\n    uint256 public constant MAX_PRICE_DURATION = 30 minutes;\n\n    uint256 public override lastUpdatedAt;\n\n    uint256 public maxTimeDeviation;\n\n    mapping(address => uint256) public prices;\n\n    address[] public tokens;\n    // array of tokenPrecisions used in setCompactedPrices, saves L1 calldata gas costs\n    // if the token price will be sent with 3 decimals, then tokenPrecision for that token\n    // should be 10 ** 3\n    uint256[] public tokenPrecisions;\n\n    IAddressesProvider addressProvider;\n\n    constructor(IAddressesProvider _addressProvider)  {\n        addressProvider = _addressProvider;\n    }\n    modifier onlyKeeper() {\n        require(IRoleManager(addressProvider.getRoleManager()).isKeeper(msg.sender), \"onlyKeeper\");\n        _;\n    }\n\n    modifier onlyPoolAdmin() {\n        require(IRoleManager(addressProvider.getRoleManager()).isPoolAdmin(msg.sender), \"onlyPoolAdmin\");\n        _;\n    }\n\n\n\n    function setMaxTimeDeviation(uint256 _maxTimeDeviation) external onlyPoolAdmin {\n        maxTimeDeviation = _maxTimeDeviation;\n    }\n\n    function setLastUpdatedAt(uint256 _lastUpdatedAt) external onlyPoolAdmin {\n        lastUpdatedAt = _lastUpdatedAt;\n    }\n\n    function setTokens(address[] memory _tokens, uint256[] memory _tokenPrecisions) external onlyPoolAdmin {\n        require(_tokens.length == _tokenPrecisions.length, \"invalid lengths\");\n        tokens = _tokens;\n        tokenPrecisions = _tokenPrecisions;\n    }\n\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external onlyKeeper {\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\n\n        if (shouldUpdate) {\n\n            for (uint256 i = 0; i < _tokens.length; i++) {\n                address token = _tokens[i];\n                _setPrice(token, _prices[i]);\n            }\n        }\n    }\n\n    function setCompactedPrices(uint256[] memory _priceBitArray, uint256 _timestamp) external onlyKeeper {\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\n\n        if (shouldUpdate) {\n            for (uint256 i = 0; i < _priceBitArray.length; i++) {\n                uint256 priceBits = _priceBitArray[i];\n\n                for (uint256 j = 0; j < 8; j++) {\n                    uint256 index = i * 8 + j;\n                    if (index >= tokens.length) {return;}\n\n                    uint256 startBit = 32 * j;\n                    uint256 price = (priceBits >> startBit) & BITMASK_32;\n\n                    address token = tokens[i * 8 + j];\n                    uint256 tokenPrecision = tokenPrecisions[i * 8 + j];\n                    uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\n\n                    _setPrice(token, adjustedPrice);\n                }\n            }\n        }\n    }\n\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external onlyKeeper {\n        _setPricesWithBits(_priceBits, _timestamp);\n    }\n\n    function getPrice(address _token) external  view returns (uint256) {\n        return prices[_token];\n    }\n\n    function _setPricesWithBits(uint256 _priceBits, uint256 _timestamp) private {\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\n\n        if (shouldUpdate) {\n\n            for (uint256 j = 0; j < 8; j++) {\n                uint256 index = j;\n                if (index >= tokens.length) {return;}\n\n                uint256 startBit = 32 * j;\n                uint256 price = (_priceBits >> startBit) & BITMASK_32;\n\n                address token = tokens[j];\n                uint256 tokenPrecision = tokenPrecisions[j];\n                uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\n\n                _setPrice(token, adjustedPrice);\n            }\n        }\n    }\n\n    function _setPrice(address _token, uint256 _price) private {\n        console.log(\"setPrice token %s price %s \", _token, _price);\n\n        prices[_token] = _price;\n        emit PriceUpdate(_token, _price, msg.sender);\n    }\n\n    function _setLastUpdatedValues(uint256 _timestamp) private returns (bool) {\n\n        uint256 _maxTimeDeviation = maxTimeDeviation;\n        require(_timestamp > block.timestamp.sub(_maxTimeDeviation), \"ts below range\");\n        require(_timestamp < block.timestamp.add(_maxTimeDeviation), \"ts exceeds range\");\n\n        // do not update prices if _timestamp is before the current lastUpdatedAt value\n        if (_timestamp < lastUpdatedAt) {\n            return false;\n        }\n        lastUpdatedAt = _timestamp;\n        return true;\n    }\n}\n"
    },
    "contracts/price/OraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/IOraclePrice.sol\";\nimport \"../interfaces/IChainlinkFlags.sol\";\nimport '../interfaces/IAddressesProvider.sol';\nimport '../interfaces/IRoleManager.sol';\n\nimport \"hardhat/console.sol\";\n\npragma solidity 0.8.17;\n\ncontract OraclePriceFeed is  IVaultPriceFeed {\n    using SafeMath for uint256;\n\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\n\n    // Identifier of the Sequencer offline flag on the Flags contract\n    address constant private FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\"chainlink.flags.arbitrum-seq-offline\")) - 1)));\n\n    address public chainlinkFlags;\n\n    address public indexPriceFeed;\n\n    IAddressesProvider addressProvider;\n\n    mapping (address => address) public priceFeeds;\n    mapping (address => uint256) public priceDecimals;\n\n\n    constructor(IAddressesProvider _addressProvider)  {\n        addressProvider = _addressProvider;\n    }\n\n    modifier onlyKeeper() {\n        require(IRoleManager(addressProvider.getRoleManager()).isKeeper(msg.sender), \"onlyKeeper\");\n        _;\n    }\n\n    modifier onlyPoolAdmin() {\n        require(IRoleManager(addressProvider.getRoleManager()).isPoolAdmin(msg.sender), \"onlyPoolAdmin\");\n        _;\n    }\n\n    function setChainlinkFlags(address _chainlinkFlags) external onlyPoolAdmin {\n        chainlinkFlags = _chainlinkFlags;\n    }\n\n    function setIndexPriceFeed(address _secondaryPriceFeed) external onlyPoolAdmin {\n        indexPriceFeed = _secondaryPriceFeed;\n    }\n\n    function setTokenConfig(\n        address _token,\n        address _priceFeed,\n        uint256 _priceDecimals\n    ) external override onlyPoolAdmin {\n        priceFeeds[_token] = _priceFeed;\n        priceDecimals[_token] = _priceDecimals;\n\n    }\n\n    function getPrice(address _token) public override view returns (uint256) {\n        uint256 price = getPrimaryPrice(_token);\n        return price;\n    }\n\n    function getPrimaryPrice(address _token) public override view returns (uint256) {\n        address priceFeedAddress = priceFeeds[_token];\n        require(priceFeedAddress != address(0), \"invalid price feed\");\n\n        if (chainlinkFlags != address(0)) {\n            bool isRaised = IChainlinkFlags(chainlinkFlags).getFlag(FLAG_ARBITRUM_SEQ_OFFLINE);\n            if (isRaised) {\n                    // If flag is raised we shouldn't perform any critical operations\n                revert(\"Chainlink feeds are not being updated\");\n            }\n        }\n\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\n\n        uint256 price = 0;\n        int256 _p = priceFeed.latestAnswer();\n        require(_p > 0, \"invalid price\");\n        price = uint256(_p);\n\n        require(price > 0, \"could not fetch price\");\n\n        uint256 _priceDecimals = priceDecimals[_token];\n        return price.mul(PRICE_PRECISION).div(10 ** _priceDecimals);\n    }\n\n    function getIndexPrice(address _token, uint256 _referencePrice) public view returns (uint256) {\n        if (indexPriceFeed == address(0)) { return _referencePrice; }\n        return IOraclePrice(indexPriceFeed).getPrice(_token);\n    }\n}\n"
    },
    "contracts/RoleManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.17;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport  './interfaces/IRoleManager.sol';\n\ncontract RoleManager is AccessControl, IRoleManager {\n\n    bytes32 public constant POOL_ADMIN_ROLE = keccak256('POOL_ADMIN');\n    bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');\n    bytes32 public constant TREASURER_ROLE = keccak256('TREASURER_ROLE');\n    bytes32 public constant KEEPER_ROLE = keccak256('KEEPER_ROLE');\n\n    using Address for address;\n\n    mapping(address => bool) public override contractWhiteList;\n\n    constructor(Ownable provider) {\n        require(provider.owner() != address(0), \"is 0\");\n        _setupRole(DEFAULT_ADMIN_ROLE, provider.owner());\n    }\n\n    function setRoleAdmin(\n        bytes32 role,\n        bytes32 adminRole\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setRoleAdmin(role, adminRole);\n    }\n\n    function addAdmin(address admin) external override {\n        grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function removeAdmin(address admin) external override {\n        revokeRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function isAdmin(address admin) external view override returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function addPoolAdmin(address poolAdmin) external override {\n        grantRole(POOL_ADMIN_ROLE, poolAdmin);\n    }\n\n    function removePoolAdmin(address poolAdmin) external override {\n        revokeRole(POOL_ADMIN_ROLE, poolAdmin);\n    }\n\n    function isPoolAdmin(address poolAdmin) external view override returns (bool) {\n        return hasRole(POOL_ADMIN_ROLE, poolAdmin);\n    }\n\n    function addOperator(address operator) external override {\n        grantRole(OPERATOR_ROLE, operator);\n    }\n\n    function removeOperator(address operator) external override {\n        revokeRole(OPERATOR_ROLE, operator);\n    }\n\n    function isOperator(address operator) external view override returns (bool) {\n        return hasRole(OPERATOR_ROLE, operator);\n    }\n\n    function addTreasurer(address treasurer) external override {\n        grantRole(TREASURER_ROLE, treasurer);\n    }\n\n    function removeTreasurer(address treasurer) external override {\n        revokeRole(TREASURER_ROLE, treasurer);\n    }\n\n    function isTreasurer(address treasurer) external view override returns (bool) {\n        return hasRole(TREASURER_ROLE, treasurer);\n    }\n\n    function addKeeper(address keeper) external override {\n        grantRole(KEEPER_ROLE, keeper);\n    }\n\n    function removeKeeper(address keeper) external override {\n        revokeRole(KEEPER_ROLE, keeper);\n    }\n\n    function isKeeper(address keeper) external view override returns (bool) {\n        return hasRole(KEEPER_ROLE, keeper);\n    }\n\n    function addContractWhiteList(address target) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        contractWhiteList[target] = true;\n    }\n\n    function removeContractWhiteList(address target) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        delete contractWhiteList[target];\n    }\n\n}\n"
    },
    "contracts/token/interfaces/IPairToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IPairToken {\n    function mint(address to, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function setMiner(address account, bool enable) external;\n}\n"
    },
    "contracts/token/PairToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IPairToken.sol\";\n\ncontract PairToken is IPairToken, ERC20, Ownable {\n\n    address public token0;\n    address public token1;\n\n    mapping(address => bool) public miners;\n\n    constructor(address _token0, address _token1) ERC20(\"MYX LPs\", \"MYX-LP\") {\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    modifier onlyMiner() {\n        require(miners[msg.sender], 'miner forbidden');\n        _;\n    }\n\n    function mint(address to, uint256 amount) external onlyMiner {\n        _mint(to, amount);\n    }\n\n    function burn(address account, uint256 amount) external onlyMiner {\n        _burn(account, amount);\n    }\n\n    function setMiner(address account, bool enable) external onlyOwner {\n        miners[account] = enable;\n    }\n\n}\n"
    },
    "contracts/trading/Executor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"../interfaces/IExecutor.sol\";\nimport \"../interfaces/IAddressesProvider.sol\";\nimport \"../interfaces/IRoleManager.sol\";\nimport \"../interfaces/IOrderManager.sol\";\nimport \"../interfaces/IPositionManager.sol\";\nimport \"../interfaces/IIndexPriceFeed.sol\";\nimport \"hardhat/console.sol\";\n\ncontract Executor is IExecutor {\n\n    uint256 public increaseMarketOrderStartIndex;\n    uint256 public decreaseMarketOrderStartIndex;\n\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\n\n    IOrderManager public orderManager;\n    IPositionManager public positionManager;\n\n    constructor(IAddressesProvider addressProvider, IOrderManager _orderManager, IPositionManager _positionManager) {\n        ADDRESS_PROVIDER = addressProvider;\n        orderManager = _orderManager;\n        positionManager = _positionManager;\n    }\n\n    modifier onlyPoolAdmin() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \"onlyPoolAdmin\");\n        _;\n    }\n\n    modifier onlyPositionKeeper() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), \"onlyPositionKeeper\");\n        _;\n    }\n\n    function setPricesAndExecuteMarketOrders(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        uint256 increaseEndIndex,\n        uint256 decreaseEndIndex\n    ) external onlyPositionKeeper {\n        require(tokens.length == prices.length && tokens.length >= 0, \"invalid params\");\n\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\n\n        this.executeIncreaseMarketOrders(increaseEndIndex);\n        this.executeDecreaseMarketOrders(decreaseEndIndex);\n    }\n\n    function setPricesAndExecuteLimitOrders(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        uint256[] memory increaseOrderIds,\n        uint256[] memory decreaseOrderIds\n    ) external onlyPositionKeeper {\n        require(tokens.length == prices.length && tokens.length >= 0, \"invalid params\");\n\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\n\n        this.executeIncreaseLimitOrders(increaseOrderIds);\n        this.executeDecreaseLimitOrders(decreaseOrderIds);\n    }\n\n    function executeIncreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\n        console.log(\"executeIncreaseMarketOrders endIndex\", endIndex, \"timestamp\", block.timestamp);\n        uint256 index = increaseMarketOrderStartIndex;\n        uint256 length = orderManager.increaseMarketOrdersIndex();\n\n        if (index >= length) {\n            return;\n        }\n        if (endIndex > length) {\n            endIndex = length;\n        }\n\n        while (index < endIndex) {\n            try positionManager.executeIncreaseOrder(index, TradingTypes.TradeType.MARKET) {\n                console.log();\n            } catch Error(string memory reason) {\n                console.log(\"executeIncreaseMarketOrder error \", reason);\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, true);\n            }\n            increaseMarketOrderStartIndex++;\n        }\n    }\n\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\n        console.log(\"executeIncreaseLimitOrders timestamp\", block.timestamp);\n\n        for (uint256 i = 0; i < orderIds.length; i++) {\n            try positionManager.executeIncreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\n                console.log();\n            } catch Error(string memory reason) {\n                console.log(\"executeIncreaseLimitOrders error \", reason);\n            }\n        }\n    }\n\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external onlyPositionKeeper {\n        positionManager.executeIncreaseOrder(orderId, tradeType);\n    }\n\n    function executeDecreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\n        console.log(\"executeDecreaseMarketOrders endIndex\", endIndex, \"timestamp\", block.timestamp);\n        uint256 index = decreaseMarketOrderStartIndex;\n        uint256 length = orderManager.decreaseMarketOrdersIndex();\n        if (index >= length) {\n            return;\n        }\n        if (endIndex > length) {\n            endIndex = length;\n        }\n\n        while (index < endIndex) {\n            try positionManager.executeDecreaseOrder(index, TradingTypes.TradeType.MARKET) {\n                console.log(\"executeDecreaseMarketOrders success index\", index, \"endIndex\", endIndex);\n            } catch Error(string memory reason) {\n                console.log(\"executeDecreaseMarketOrders error \", reason);\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, false);\n            }\n            decreaseMarketOrderStartIndex++;\n        }\n    }\n\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\n        console.log(\"executeDecreaseLimitOrders timestamp\", block.timestamp);\n\n        for (uint256 i = 0; i < orderIds.length; i++) {\n            try positionManager.executeDecreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\n                console.log(\"executeDecreaseLimitOrders success index\", orderIds[i]);\n            } catch Error(string memory reason) {\n                console.log(\"executeDecreaseLimitOrders error \", reason);\n            }\n        }\n    }\n\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external onlyPositionKeeper {\n        positionManager.executeDecreaseOrder(orderId, tradeType);\n    }\n\n    function setPricesAndLiquidatePositions(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        bytes32[] memory positionKeys\n    ) external onlyPositionKeeper {\n        require(tokens.length == prices.length && tokens.length >= 0, \"invalid params\");\n\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\n\n        positionManager.liquidatePositions(positionKeys);\n    }\n\n    function liquidatePositions(bytes32[] memory positionKeys) external onlyPositionKeeper {\n        positionManager.liquidatePositions(positionKeys);\n    }\n\n    function setPricesAndExecuteADL(\n        address[] memory tokens,\n        uint256[] memory prices,\n        uint256 timestamp,\n        bytes32[] memory positionKeys,\n        uint256[] memory sizeAmounts,\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) external onlyPositionKeeper {\n        require(tokens.length == prices.length && tokens.length >= 0, \"invalid params\");\n\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\n\n        positionManager.executeADLAndDecreaseOrder(positionKeys, sizeAmounts, orderId, tradeType);\n    }\n\n    function executeADLAndDecreaseOrder(\n        bytes32[] memory positionKeys,\n        uint256[] memory sizeAmounts,\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) public onlyPositionKeeper {\n        positionManager.executeADLAndDecreaseOrder(\n            positionKeys,\n            sizeAmounts,\n            orderId,\n            tradeType\n        );\n    }\n\n}\n"
    },
    "contracts/trading/OrderManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../pair/interfaces/IPairInfo.sol\";\nimport \"../pair/interfaces/IPairVault.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../libraries/PositionKey.sol\";\nimport \"../libraries/Int256Utils.sol\";\nimport \"../libraries/Handleable.sol\";\nimport \"../libraries/type/TradingTypes.sol\";\n\nimport \"../interfaces/ITradingVault.sol\";\nimport \"hardhat/console.sol\";\nimport \"../interfaces/IOrderManager.sol\";\nimport \"../interfaces/IAddressesProvider.sol\";\nimport \"../interfaces/IRoleManager.sol\";\nimport \"../interfaces/IPositionManager.sol\";\n\ncontract OrderManager is IOrderManager, ReentrancyGuardUpgradeable, Handleable {\n    using SafeERC20 for IERC20;\n    using PrecisionUtils for uint256;\n    using Math for uint256;\n    using Int256Utils for int256;\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseMarketOrders;\n    uint256 public override increaseMarketOrdersIndex;\n\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseMarketOrders;\n    uint256 public override decreaseMarketOrdersIndex;\n\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseLimitOrders;\n    uint256 public override increaseLimitOrdersIndex;\n\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseLimitOrders;\n    uint256 public override decreaseLimitOrdersIndex;\n\n    mapping(bytes32 => PositionOrder[]) public positionOrders;\n    mapping(bytes32 => mapping(bytes32 => uint256)) public positionOrderIndex;\n\n    mapping(bytes32 => uint256) public positionDecreaseTotalAmount;\n\n    mapping(bytes32 => mapping(TradingTypes.TradeType => bool)) public positionHasTpSl; // PositionKey -> TradeType -> bool\n\n    IPairInfo public pairInfo;\n    IPairVault public pairVault;\n    ITradingVault public tradingVault;\n    IVaultPriceFeed public vaultPriceFeed;\n    IPositionManager public positionManager;\n\n    constructor(\n        IAddressesProvider addressProvider,\n        IPairInfo _pairInfo,\n        IPairVault _pairVault,\n        ITradingVault _tradingVault,\n        IVaultPriceFeed _vaultPriceFeed\n    ) Handleable(addressProvider) {\n        pairInfo = _pairInfo;\n        pairVault = _pairVault;\n        tradingVault = _tradingVault;\n        vaultPriceFeed = _vaultPriceFeed;\n    }\n\n    modifier onlyWhiteListOrSelf(address account) {\n        require(\n            IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || account == msg.sender, \"no access\");\n        _;\n    }\n\n    function getPositionOrders(bytes32 key) public view override returns (PositionOrder[] memory) {\n        return positionOrders[key];\n    }\n\n    function updatePositionManager(address newAddress) external onlyPoolAdmin {\n        address oldAddress = address(positionManager);\n        positionManager = IPositionManager(newAddress);\n        emit UpdatePositionManager(oldAddress, newAddress);\n    }\n\n    function createOrder(\n        TradingTypes.CreateOrderRequest memory request\n    ) public nonReentrant onlyWhiteListOrSelf(request.account) returns (uint256 orderId) {\n        require(address(positionManager) != address(0), \"zero address\");\n\n        address account = request.account;\n        require(!tradingVault.isFrozen(account), \"account is frozen\");\n\n        IPairInfo.Pair memory pair = pairInfo.getPair(request.pairIndex);\n        require(pair.enable, \"trade pair not supported\");\n\n        if (request.tradeType == TradingTypes.TradeType.MARKET || request.tradeType == TradingTypes.TradeType.LIMIT) {\n            // check size\n            require(request.sizeAmount == 0 || _checkTradingAmount(request.pairIndex, request.sizeAmount.abs()), \"invalid trade size\");\n\n            bytes32 positionKey = PositionKey.getPositionKey(account, request.pairIndex, request.isLong);\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\n            uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\n            IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\n            //TODO if size = 0\n            if (request.sizeAmount >= 0) {\n                // check leverage\n                (uint256 afterPosition,) = position.validLeverage(price, request.collateral, uint256(request.sizeAmount), true, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\n                // (uint256 afterPosition,) = tradingUtils.validLeverage(account, request.pairIndex, request.isLong, request.collateral, uint256(request.sizeAmount), true);\n                require(afterPosition > 0, \"zero position amount\");\n\n                // check tp sl\n                require(request.tp <= afterPosition && request.sl <= afterPosition, \"tp/sl exceeds max size\");\n                require(request.tp == 0 || !positionHasTpSl[positionKey][TradingTypes.TradeType.TP], \"tp already exists\");\n                require(request.sl == 0 || !positionHasTpSl[positionKey][TradingTypes.TradeType.SL], \"sl already exists\");\n            }\n            if (request.sizeAmount <= 0) {\n                // check leverage\n                position.validLeverage(price, request.collateral, uint256(request.sizeAmount.abs()), false, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\n\n                //TODO if request size exceed position size, can calculate the max size\n                require(uint256(request.sizeAmount.abs()) <= position.positionAmount - positionDecreaseTotalAmount[positionKey], \"decrease amount exceed position\");\n            }\n\n            // transfer collateral\n            if (request.collateral > 0) {\n                IERC20(pair.stableToken).safeTransferFrom(account, address(positionManager), request.collateral.abs());\n            }\n        }\n\n        if (request.tradeType == TradingTypes.TradeType.TP || request.tradeType == TradingTypes.TradeType.SL) {\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\n            require(request.tp <= position.positionAmount && request.sl <= position.positionAmount, \"tp/sl exceeds max size\");\n            require(request.collateral == 0, \"no collateral required\");\n        }\n\n        if (request.sizeAmount > 0) {\n            return _createIncreaseOrder(\n                TradingTypes.IncreasePositionRequest({\n                    account: account,\n                    pairIndex: request.pairIndex,\n                    tradeType: request.tradeType,\n                    collateral: request.collateral,\n                    openPrice: request.openPrice,\n                    isLong: request.isLong,\n                    sizeAmount: uint256(request.sizeAmount),\n                    tpPrice: request.tpPrice,\n                    tp: request.tp,\n                    slPrice: request.slPrice,\n                    sl: request.sl\n                })\n            );\n        } else if (request.sizeAmount < 0) {\n            return _createDecreaseOrder(\n                TradingTypes.DecreasePositionRequest({\n                    account: account,\n                    pairIndex: request.pairIndex,\n                    tradeType: request.tradeType,\n                    collateral: request.collateral,\n                    triggerPrice: request.openPrice,\n                    sizeAmount: uint256(request.sizeAmount.abs()),\n                    isLong: request.isLong\n                })\n            );\n        } else {\n            //todo\n            revert('size eq 0');\n        }\n        return 0;\n    }\n\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) public nonReentrant {\n        console.log(\"cancelIncreaseOrder orderId\", orderId, \"tradeType\", uint8(tradeType));\n        console.log(\"cancelIncreaseOrder orderId\", orderId, \"isIncrease\", isIncrease);\n\n        if (isIncrease) {\n            TradingTypes.IncreasePositionOrder memory order = getIncreaseOrder(orderId, tradeType);\n            if (order.account == address(0)) {\n                return;\n            }\n            require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || order.account == msg.sender, \"no access\");\n\n            _cancelIncreaseOrder(order);\n        } else {\n            TradingTypes.DecreasePositionOrder memory order = getDecreaseOrder(orderId, tradeType);\n            if (order.account == address(0)) {\n                return;\n            }\n            require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || order.account == msg.sender, \"no access\");\n\n            _cancelDecreaseOrder(order);\n        }\n    }\n\n    function _checkTradingAmount(uint256 pairIndex, uint256 size) public returns (bool) {\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\n        return size >= tradingConfig.minTradeAmount && size <= tradingConfig.maxTradeAmount;\n    }\n\n    function _createIncreaseOrder(TradingTypes.IncreasePositionRequest memory _request) internal returns (uint256) {\n        TradingTypes.IncreasePositionOrder memory order = TradingTypes.IncreasePositionOrder(\n            0,\n            _request.account,\n            _request.pairIndex,\n            _request.tradeType,\n            _request.collateral,\n            _request.openPrice,\n            _request.isLong,\n            _request.sizeAmount,\n            _request.tpPrice,\n            _request.tp,\n            _request.slPrice,\n            _request.sl,\n            block.timestamp\n        );\n\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\n            order.orderId = increaseMarketOrdersIndex;\n\n            increaseMarketOrders[increaseMarketOrdersIndex++] = order;\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\n            order.orderId = increaseLimitOrdersIndex;\n\n            increaseLimitOrders[increaseLimitOrdersIndex++] = order;\n            console.log(\"orderId\", order.orderId, \"increaseLimitOrdersIndex\", increaseLimitOrdersIndex);\n        } else {\n            revert(\"invalid trade type\");\n        }\n\n        this.addOrderToPosition(\n            PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                true,\n                order.tradeType,\n                order.orderId,\n                order.sizeAmount\n            ));\n\n        emit CreateIncreaseOrder(\n            order.account,\n            order.orderId,\n            _request.pairIndex,\n            _request.tradeType,\n            _request.collateral,\n            _request.openPrice,\n            _request.isLong,\n            _request.sizeAmount,\n            _request.tpPrice,\n            _request.tp,\n            _request.slPrice,\n            _request.sl\n        );\n        return order.orderId;\n    }\n\n    function _createDecreaseOrder(TradingTypes.DecreasePositionRequest memory _request) internal returns (uint256) {\n        TradingTypes.DecreasePositionOrder memory order = TradingTypes.DecreasePositionOrder(\n            0, // orderId\n            _request.account,\n            _request.pairIndex,\n            _request.tradeType,\n            _request.collateral,\n            _request.triggerPrice,\n            _request.sizeAmount,\n            _request.isLong,\n            false, // abovePrice\n            block.timestamp,\n            false\n        );\n\n        // abovePrice\n        // market：long: true,  short: false\n        //  limit：long: false, short: true\n        //     tp：long: false, short: true\n        //     sl：long: true,  short: false\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\n            order.orderId = decreaseMarketOrdersIndex;\n            order.abovePrice = _request.isLong;\n\n            decreaseMarketOrders[decreaseMarketOrdersIndex++] = order;\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\n            order.orderId = decreaseLimitOrdersIndex;\n            order.abovePrice = !_request.isLong;\n\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\n        } else if (_request.tradeType == TradingTypes.TradeType.TP) {\n            order.orderId = decreaseLimitOrdersIndex;\n            order.abovePrice = !_request.isLong;\n\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\n\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\n            positionHasTpSl[positionKey][TradingTypes.TradeType.TP] = true;\n        } else if (_request.tradeType == TradingTypes.TradeType.SL) {\n            order.orderId = decreaseLimitOrdersIndex;\n            order.abovePrice = _request.isLong;\n\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\n\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\n            positionHasTpSl[positionKey][TradingTypes.TradeType.SL] = true;\n        } else {\n            revert(\"invalid trade type\");\n        }\n\n        // add decrease order\n        this.addOrderToPosition(\n            PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                false,\n                order.tradeType,\n                order.orderId,\n                order.sizeAmount\n            ));\n\n        emit CreateDecreaseOrder(\n            order.account,\n            order.orderId,\n            _request.tradeType,\n            _request.collateral,\n            _request.pairIndex,\n            _request.triggerPrice,\n            _request.sizeAmount,\n            _request.isLong,\n            order.abovePrice\n        );\n        return order.orderId;\n    }\n\n    function _cancelIncreaseOrder(TradingTypes.IncreasePositionOrder memory order) internal {\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\n\n        if (order.collateral > 0) {\n            IERC20(pair.stableToken).safeTransfer(order.account, order.collateral.abs());\n        }\n\n        this.removeOrderFromPosition(\n            PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                true,\n                order.tradeType,\n                order.orderId,\n                order.sizeAmount\n            ));\n\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\n            delete increaseMarketOrders[order.orderId];\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\n            delete increaseLimitOrders[order.orderId];\n        }\n\n        emit CancelIncreaseOrder(order.account, order.orderId, order.tradeType);\n    }\n\n    function _cancelDecreaseOrder(TradingTypes.DecreasePositionOrder memory order) internal {\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\n\n        if (order.collateral > 0) {\n            IERC20(pair.stableToken).safeTransfer(order.account, order.collateral.abs());\n        }\n\n        this.removeOrderFromPosition(\n            PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                false,\n                order.tradeType,\n                order.orderId,\n                order.sizeAmount\n            ));\n\n        bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\n\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\n            delete decreaseMarketOrders[order.orderId];\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\n            delete decreaseLimitOrders[order.orderId];\n        } else {\n            positionHasTpSl[key][order.tradeType] = false;\n            delete decreaseLimitOrders[order.orderId];\n        }\n\n        emit CancelDecreaseOrder(order.account, order.orderId, order.tradeType);\n    }\n\n    function getIncreaseOrder(\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) public view returns (TradingTypes.IncreasePositionOrder memory order) {\n        if (tradeType == TradingTypes.TradeType.MARKET) {\n            order = increaseMarketOrders[orderId];\n        } else if (tradeType == TradingTypes.TradeType.LIMIT) {\n            order = increaseLimitOrders[orderId];\n        } else {\n            revert(\"invalid trade type\");\n        }\n        return order;\n    }\n\n    function getDecreaseOrder(\n        uint256 orderId,\n        TradingTypes.TradeType tradeType\n    ) public view returns (TradingTypes.DecreasePositionOrder memory order) {\n        if (tradeType == TradingTypes.TradeType.MARKET) {\n            order = decreaseMarketOrders[orderId];\n        } else {\n            order = decreaseLimitOrders[orderId];\n        }\n        return order;\n    }\n\n    function addOrderToPosition(PositionOrder memory order) public onlyHandler {\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\n        positionOrderIndex[positionKey][orderKey] = positionOrders[positionKey].length;\n        positionOrders[positionKey].push(order);\n        console.log(\"positionOrders add orderId\", order.orderId, \"tradeType\", uint8(order.tradeType));\n\n        if (!order.isIncrease && (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)) {\n            positionDecreaseTotalAmount[positionKey] += order.sizeAmount;\n        }\n    }\n\n    function removeOrderFromPosition(PositionOrder memory order) public onlyHandler {\n        console.log(\"removeOrderFromPosition account %s orderId %s tradeType %s \", order.account, order.orderId, uint8(order.tradeType));\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\n\n        uint256 index = positionOrderIndex[positionKey][orderKey];\n        uint256 lastIndex = positionOrders[positionKey].length - 1;\n\n        if (index < lastIndex) {\n            // swap last order\n            PositionOrder memory lastOrder = positionOrders[positionKey][positionOrders[positionKey].length - 1];\n            bytes32 lastOrderKey = PositionKey.getOrderKey(lastOrder.isIncrease, lastOrder.tradeType, lastOrder.orderId);\n\n            positionOrders[positionKey][index] = lastOrder;\n            positionOrderIndex[positionKey][lastOrderKey] = index;\n        }\n        delete positionOrderIndex[positionKey][orderKey];\n        positionOrders[positionKey].pop();\n        console.log(\"positionOrders remove orderId\", order.orderId, \"tradeType\", uint8(order.tradeType));\n\n        if (!order.isIncrease && (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)) {\n            positionDecreaseTotalAmount[positionKey] -= order.sizeAmount;\n        }\n    }\n\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) public onlyHandler {\n        positionHasTpSl[key][tradeType] = has;\n    }\n\n    function removeIncreaseMarketOrders(uint256 orderId) public onlyHandler {\n        delete increaseMarketOrders[orderId];\n    }\n\n    function removeIncreaseLimitOrders(uint256 orderId) public onlyHandler {\n        delete increaseLimitOrders[orderId];\n    }\n\n    function removeDecreaseMarketOrders(uint256 orderId) public onlyHandler {\n        delete decreaseMarketOrders[orderId];\n    }\n\n    function removeDecreaseLimitOrders(uint256 orderId) public onlyHandler {\n        delete decreaseLimitOrders[orderId];\n    }\n\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) public onlyHandler {\n        TradingTypes.DecreasePositionOrder storage order;\n        if (tradeType == TradingTypes.TradeType.MARKET) {\n            order = decreaseMarketOrders[orderId];\n        } else {\n            order = decreaseLimitOrders[orderId];\n            require(order.tradeType == tradeType, \"trade type not match\");\n        }\n        order.needADL = needADL;\n    }\n}\n"
    },
    "contracts/trading/PositionManager.sol": {
      "content": "pragma solidity 0.8.17;\n\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/IIndexPriceFeed.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../interfaces/IPositionManager.sol\";\nimport \"../interfaces/ITradingVault.sol\";\nimport \"../interfaces/IRoleManager.sol\";\n\nimport \"../libraries/Position.sol\";\nimport \"../libraries/Handleable.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../libraries/Int256Utils.sol\";\nimport \"../pair/interfaces/IPairInfo.sol\";\nimport \"../pair/interfaces/IPairVault.sol\";\nimport '../interfaces/IAddressesProvider.sol';\nimport \"hardhat/console.sol\";\nimport \"../interfaces/IOrderManager.sol\";\n\ncontract PositionManager is IPositionManager, ReentrancyGuard, Handleable {\n\n    using SafeERC20 for IERC20;\n    using PrecisionUtils for uint256;\n    using Math for uint256;\n    using Int256Utils for int256;\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n\n    uint256 public maxTimeDelay;\n\n    IPairInfo public pairInfo;\n    IPairVault public pairVault;\n    ITradingVault public tradingVault;\n    IIndexPriceFeed public fastPriceFeed;\n    IVaultPriceFeed public vaultPriceFeed;\n    IOrderManager public orderManager;\n\n    constructor(\n        IAddressesProvider addressProvider,\n        IPairInfo _pairInfo,\n        IPairVault _pairVault,\n        ITradingVault _tradingVault,\n        IVaultPriceFeed _vaultPriceFeed,\n        IIndexPriceFeed _fastPriceFeed,\n        uint256 _maxTimeDelay,\n        IOrderManager _orderManager\n    ) Handleable (addressProvider) {\n        maxTimeDelay = _maxTimeDelay;\n        pairInfo = _pairInfo;\n        pairVault = _pairVault;\n        tradingVault = _tradingVault;\n        fastPriceFeed = _fastPriceFeed;\n        vaultPriceFeed = _vaultPriceFeed;\n        orderManager = _orderManager;\n    }\n\n    modifier onlyWhitelistOrKeeper() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender)\n        || IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender),\n            \"onlyKeeper\");\n        _;\n    }\n\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external override onlyPoolAdmin {\n        uint256 oldDelay = maxTimeDelay;\n        maxTimeDelay = newMaxTimeDelay;\n        emit UpdateMaxTimeDelay(oldDelay, newMaxTimeDelay);\n    }\n\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) public nonReentrant onlyWhitelistOrKeeper {\n        console.log(\"executeIncreaseOrder account %s orderId %s tradeType %s\", msg.sender, _orderId, uint8(_tradeType));\n\n        TradingTypes.IncreasePositionOrder memory order = orderManager.getIncreaseOrder(_orderId, _tradeType);\n\n        if (order.account == address(0)) {\n            console.log(\"executeIncreaseOrder not exists\", _orderId);\n            return;\n        }\n\n        // expire\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\n            require(order.blockTime + maxTimeDelay >= block.timestamp, \"order expired\");\n        }\n\n        // check pair enable\n        uint256 pairIndex = order.pairIndex;\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\n        require(pair.enable, \"trade pair not supported\");\n\n        // check account enable\n        require(!tradingVault.isFrozen(order.account), \"account is frozen\");\n\n        // check trading amount\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\n        require(order.sizeAmount == 0 || (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount), \"invalid trade size\");\n\n        // check price\n        uint256 price = getValidPrice(pairIndex, order.isLong);\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\n            require(order.isLong ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <= order.openPrice\n                : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >= order.openPrice, \"not reach trigger price\");\n        } else {\n            require(order.isLong ? price >= order.openPrice : price <= order.openPrice, \"not reach trigger price\");\n        }\n\n        // compare openPrice and oraclePrice\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\n            if (order.isLong) {\n                price = order.openPrice.min(price);\n            } else {\n                price = order.openPrice.max(price);\n            }\n        }\n\n        // get position\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\n\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\n        console.log(\"executeIncreaseOrder sizeAmount\", order.sizeAmount, \"sizeDelta\", sizeDelta);\n\n        // check position and leverage\n        (uint256 afterPosition,) = position.validLeverage(price, order.collateral, order.sizeAmount, true, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\n        require(afterPosition > 0, \"zero position amount\");\n\n        // check tp sl\n        require(order.tp == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.TP), \"tp already exists\");\n        require(order.sl == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.SL), \"sl already exists\");\n\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\n\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\n        console.log(\"executeIncreaseOrder preNetExposureAmountChecker\", preNetExposureAmountChecker.abs());\n        if (preNetExposureAmountChecker >= 0) {\n            if (order.isLong) {\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\n                console.log(\"executeIncreaseOrder availableIndex\", availableIndex);\n                require(order.sizeAmount <= availableIndex, \"lp index token not enough\");\n            } else {\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\n                console.log(\"executeIncreaseOrder availableStable\", availableStable);\n                require(order.sizeAmount <= uint256(preNetExposureAmountChecker) + availableStable.divPrice(price), \"lp stable token not enough\");\n            }\n        } else {\n            if (order.isLong) {\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\n                console.log(\"executeIncreaseOrder availableIndex\", availableIndex);\n                require(order.sizeAmount <= uint256(- preNetExposureAmountChecker) + availableIndex, \"lp index token not enough\");\n            } else {\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\n                console.log(\"executeIncreaseOrder availableStable\", availableStable);\n                require(order.sizeAmount <= availableStable.divPrice(price), \"lp stable token not enough\");\n            }\n        }\n\n        // transfer collateral\n        if (order.collateral > 0) {\n            IERC20(pair.stableToken).safeTransfer(address(tradingVault), order.collateral.abs());\n        }\n        (uint256 tradingFee, int256 fundingFee) = tradingVault.increasePosition(order.account, pairIndex, order.collateral, order.sizeAmount, order.isLong, price);\n\n        orderManager.removeOrderFromPosition(\n            IOrderManager.PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                true,\n                order.tradeType,\n                _orderId,\n                order.sizeAmount\n            ));\n\n        if (order.tp > 0) {\n            orderManager.createOrder(TradingTypes.CreateOrderRequest({\n                account: order.account,\n                pairIndex: order.pairIndex,\n                tradeType: TradingTypes.TradeType.TP,\n                collateral: 0,\n                openPrice: order.tpPrice,\n                isLong: order.isLong,\n                sizeAmount: - int256(order.tp),\n                tpPrice: 0,\n                tp: 0,\n                slPrice: 0,\n                sl: 0\n            }));\n        }\n        if (order.sl > 0) {\n            orderManager.createOrder(TradingTypes.CreateOrderRequest({\n                account: order.account,\n                pairIndex: order.pairIndex,\n                tradeType: TradingTypes.TradeType.SL,\n                collateral: 0,\n                openPrice: order.slPrice,\n                isLong: order.isLong,\n                sizeAmount: - int256(order.sl),\n                tpPrice: 0,\n                tp: 0,\n                slPrice: 0,\n                sl: 0\n            }));\n        }\n\n        // delete order\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\n            orderManager.removeIncreaseMarketOrders(_orderId);\n        } else if (_tradeType == TradingTypes.TradeType.LIMIT) {\n            orderManager.removeIncreaseLimitOrders(_orderId);\n        }\n\n        emit ExecuteIncreaseOrder(\n            order.account,\n            _orderId,\n            pairIndex,\n            _tradeType,\n            order.collateral,\n            order.isLong,\n            order.sizeAmount,\n            price,\n            tradingFee,\n            fundingFee\n        );\n    }\n\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external nonReentrant onlyWhitelistOrKeeper {\n        _executeDecreaseOrder(_orderId, _tradeType);\n    }\n\n    function _executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) internal {\n        console.log(\"executeDecreaseOrder account %s orderId %s tradeType %s\", msg.sender, _orderId, uint8(_tradeType));\n\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\n\n        if (order.account == address(0)) {\n            console.log(\"executeDecreaseOrder not exists\", _orderId);\n            return;\n        }\n\n        // expire\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\n            require(order.blockTime + maxTimeDelay >= block.timestamp, \"order expired\");\n        }\n\n        // get pair\n        uint256 pairIndex = order.pairIndex;\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\n\n        // get position\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\n        if (position.positionAmount == 0) {\n            console.log(\"position already closed\", _orderId);\n            return;\n        }\n\n        // check trading amount\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\n\n        order.sizeAmount = order.sizeAmount.min(position.positionAmount);\n        require(order.sizeAmount == 0 || (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount), \"invalid trade size\");\n\n        // check price\n        uint256 price = getValidPrice(pairIndex, order.isLong);\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\n            require(order.abovePrice ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <= order.triggerPrice\n                : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >= order.triggerPrice, \"not reach trigger price\");\n        } else {\n            require(order.abovePrice ? price <= order.triggerPrice : price >= order.triggerPrice, \"not reach trigger price\");\n        }\n\n        // compare openPrice and oraclePrice\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\n            if (!order.isLong) {\n                price = order.triggerPrice.min(price);\n            } else {\n                price = order.triggerPrice.max(price);\n            }\n        }\n\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\n        console.log(\"executeDecreaseOrder sizeAmount\", order.sizeAmount, \"sizeDelta\", sizeDelta);\n\n        // check position and leverage\n        position.validLeverage(price, order.collateral, order.sizeAmount, false, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\n\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\n\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\n        console.log(\"executeDecreaseOrder preNetExposureAmountChecker\", preNetExposureAmountChecker.toString());\n        bool needADL;\n        if (preNetExposureAmountChecker >= 0) {\n            if (!order.isLong) {\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\n                console.log(\"executeDecreaseOrder availableIndex\", availableIndex);\n                needADL = order.sizeAmount > availableIndex;\n            } else {\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\n                console.log(\"executeDecreaseOrder availableStable\", availableStable);\n                needADL = order.sizeAmount > uint256(preNetExposureAmountChecker) + availableStable.divPrice(price);\n            }\n        } else {\n            if (!order.isLong) {\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\n                console.log(\"executeDecreaseOrder availableIndex\", availableIndex);\n                needADL = order.sizeAmount > uint256(- preNetExposureAmountChecker) + availableIndex;\n            } else {\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\n                console.log(\"executeDecreaseOrder availableStable\", availableStable);\n                needADL = order.sizeAmount > availableStable.divPrice(price);\n            }\n        }\n\n        if (needADL) {\n            console.log(\"executeDecreaseOrder needADL\");\n            orderManager.setOrderNeedADL(_orderId, order.tradeType, needADL);\n\n            emit ExecuteDecreaseOrder(\n                order.account,\n                _orderId,\n                pairIndex,\n                order.tradeType,\n                order.isLong,\n                order.sizeAmount,\n                price,\n                0,\n                needADL,\n                0,\n                0\n            );\n            return;\n        }\n\n        // transfer collateral\n        if (order.collateral > 0) {\n            IPairInfo.Pair memory pair = pairInfo.getPair(position.pairIndex);\n            IERC20(pair.stableToken).safeTransfer(address(tradingVault), order.collateral.abs());\n        }\n        (uint256 tradingFee, int256 fundingFee, int256 pnl) = tradingVault.decreasePosition(order.account, pairIndex, order.collateral, order.sizeAmount, order.isLong, price);\n\n        // delete order\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\n            orderManager.removeDecreaseMarketOrders(_orderId);\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\n            orderManager.removeDecreaseLimitOrders(_orderId);\n        } else {\n            orderManager.setPositionHasTpSl(position.key, order.tradeType, false);\n            orderManager.removeDecreaseLimitOrders(_orderId);\n        }\n\n        // remove decrease order\n        orderManager.removeOrderFromPosition(\n            IOrderManager.PositionOrder(\n                order.account,\n                order.pairIndex,\n                order.isLong,\n                false,\n                order.tradeType,\n                order.orderId,\n                order.sizeAmount\n            ));\n\n        position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\n\n        if (position.positionAmount == 0) {\n            // cancel all decrease order\n            bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\n            IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\n\n            for (uint256 i = 0; i < orders.length; i++) {\n                IOrderManager.PositionOrder memory positionOrder = orders[i];\n                if (!positionOrder.isIncrease) {\n                    orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\n                }\n            }\n        }\n\n        emit ExecuteDecreaseOrder(\n            order.account,\n            _orderId,\n            pairIndex,\n            order.tradeType,\n            order.isLong,\n            order.sizeAmount,\n            price,\n            pnl,\n            needADL,\n            tradingFee,\n            fundingFee\n        );\n    }\n\n    function setPricesAndLiquidatePositions(\n        address[] memory _tokens,\n        uint256[] memory _prices,\n        uint256 _timestamp,\n        bytes32[] memory _positionKeys\n    ) external onlyWhitelistOrKeeper {\n        console.log(\"setPricesAndLiquidatePositions timestamp\", block.timestamp);\n        fastPriceFeed.setPrices(_tokens, _prices, _timestamp);\n        this.liquidatePositions(_positionKeys);\n    }\n\n    function liquidatePositions(bytes32[] memory _positionKeys) external nonReentrant onlyWhitelistOrKeeper {\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\n            _liquidatePosition(_positionKeys[i]);\n        }\n    }\n\n    function executeADLAndDecreaseOrder(\n        bytes32[] memory _positionKeys,\n        uint256[] memory _sizeAmounts,\n        uint256 _orderId,\n        TradingTypes.TradeType _tradeType\n    ) external nonReentrant onlyWhitelistOrKeeper {\n        console.log(\"executeADLAndDecreaseOrder\");\n\n        require(_positionKeys.length == _sizeAmounts.length, \"length not match\");\n\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\n        require(order.needADL, \"no need ADL\");\n\n\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(order.pairIndex);\n\n        Position.Info[] memory adlPositions = new Position.Info[](_positionKeys.length);\n        uint256 sumAmount;\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\n            Position.Info memory position = tradingVault.getPositionByKey(_positionKeys[i]);\n            require(_sizeAmounts[i] <= position.positionAmount, \"ADL size exceeds position\");\n            require(_sizeAmounts[i] <= tradingConfig.maxTradeAmount, \"exceeds max trade amount\");\n            sumAmount += _sizeAmounts[i];\n            adlPositions[i] = position;\n        }\n\n        require(sumAmount == order.sizeAmount, \"ADL position amount not match decrease order\");\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\n\n        uint256 price = getValidPrice(order.pairIndex, !order.isLong);\n\n        for (uint256 i = 0; i < adlPositions.length; i++) {\n            Position.Info memory adlPosition = adlPositions[i];\n            uint256 orderId = orderManager.createOrder(TradingTypes.CreateOrderRequest({\n                account: adlPosition.account,\n                pairIndex: adlPosition.pairIndex,\n                tradeType: TradingTypes.TradeType.MARKET,\n                collateral: 0,\n                openPrice: price,\n                isLong: adlPosition.isLong,\n                sizeAmount: - int256(adlPosition.positionAmount),\n                tpPrice: 0,\n                tp: 0,\n                slPrice: 0,\n                sl: 0\n            }));\n            _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\n        }\n        _executeDecreaseOrder(_orderId, order.tradeType);\n    }\n\n    function _liquidatePosition(bytes32 _positionKey) internal {\n        console.log(\"liquidatePosition start\");\n        Position.Info memory position = tradingVault.getPositionByKey(_positionKey);\n\n        if (position.positionAmount == 0) {\n            console.log(\"position not exists\");\n            return;\n        }\n\n        uint256 price = getValidPrice(position.pairIndex, position.isLong);\n\n        int256 unrealizedPnl;\n        if (position.isLong) {\n            if (price > position.averagePrice) {\n                unrealizedPnl = int256(position.positionAmount.mulPrice(price - position.averagePrice));\n            } else {\n                unrealizedPnl = - int256(position.positionAmount.mulPrice(position.averagePrice - price));\n            }\n        } else {\n            if (position.averagePrice > price) {\n                unrealizedPnl = int256(position.positionAmount.mulPrice(position.averagePrice - price));\n            } else {\n                unrealizedPnl = - int256(position.positionAmount.mulPrice(price - position.averagePrice));\n            }\n        }\n        console.log(\"liquidatePosition averagePrice %s unrealizedPnl %s\", position.averagePrice, unrealizedPnl.toString());\n\n        int256 exposureAsset = int256(position.collateral) + unrealizedPnl;\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\n\n        bool needLiquidate;\n        if (exposureAsset <= 0) {\n            needLiquidate = true;\n        } else {\n            uint256 riskRate = position.positionAmount.mulPrice(price)\n                .mulPercentage(tradingConfig.maintainMarginRate)\n                .calculatePercentage(uint256(exposureAsset));\n            needLiquidate = riskRate >= PrecisionUtils.oneHundredPercentage();\n            console.log(\"liquidatePosition riskRate %s positionAmount %s exposureAsset %s\", riskRate, position.positionAmount, exposureAsset.toString());\n        }\n        console.log(\"liquidatePosition needLiquidate\", needLiquidate);\n\n        if (!needLiquidate) {\n            return;\n        }\n\n        //TODO positionManager\n        // cancelAllPositionOrders\n//        tradingRouter.cancelAllPositionOrders(position.account, position.pairIndex, position.isLong);\n\n        uint256 orderId = orderManager.createOrder(TradingTypes.CreateOrderRequest({\n            account: position.account,\n            pairIndex: position.pairIndex,\n            tradeType: TradingTypes.TradeType.MARKET,\n            collateral: 0,\n            openPrice: price,\n            isLong: position.isLong,\n            sizeAmount: - int256(position.positionAmount),\n            tpPrice: 0,\n            tp: 0,\n            slPrice: 0,\n            sl: 0\n        }));\n\n        _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\n\n        emit LiquidatePosition(\n            _positionKey,\n            position.account,\n            position.pairIndex,\n            position.isLong,\n            position.positionAmount,\n            position.collateral,\n            price,\n            orderId\n        );\n    }\n\n    function getValidPrice(uint256 _pairIndex, bool _isLong) public view returns (uint256) {\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        uint256 oraclePrice = vaultPriceFeed.getPrice(pair.indexToken);\n        console.log(\"getValidPrice pairIndex %s isLong %s \", _pairIndex, _isLong);\n\n        uint256 indexPrice = vaultPriceFeed.getIndexPrice(pair.indexToken, 0);\n        console.log(\"getValidPrice oraclePrice %s indexPrice %s\", oraclePrice, indexPrice);\n\n        uint256 diffP = oraclePrice > indexPrice ? oraclePrice - indexPrice : indexPrice - oraclePrice;\n        diffP = diffP.calculatePercentage(oraclePrice);\n\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\n        console.log(\"getValidPrice diffP %s maxPriceDeviationP %s\", diffP, tradingConfig.maxPriceDeviationP);\n        require(diffP <= tradingConfig.maxPriceDeviationP, \"exceed max price deviation\");\n        return oraclePrice;\n    }\n\n}\n"
    },
    "contracts/trading/Router.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"../interfaces/IRouter.sol\";\nimport \"../interfaces/IAddressesProvider.sol\";\nimport \"../interfaces/IRoleManager.sol\";\nimport \"../interfaces/IOrderManager.sol\";\nimport \"../libraries/PositionKey.sol\";\nimport \"hardhat/console.sol\";\n\ncontract Router is IRouter {\n\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\n\n    IOrderManager public orderManager;\n\n    modifier onlyPoolAdmin() {\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \"onlyPoolAdmin\");\n        _;\n    }\n\n    constructor(IAddressesProvider addressProvider, IOrderManager _orderManager) {\n        ADDRESS_PROVIDER = addressProvider;\n        orderManager = _orderManager;\n    }\n\n    function createIncreaseOrder(TradingTypes.IncreasePositionRequest memory request) external returns (uint256) {\n        //TODO decoupling tp sl\n\n        return orderManager.createOrder(TradingTypes.CreateOrderRequest({\n            account: request.account,\n            pairIndex: request.pairIndex,\n            tradeType: request.tradeType,\n            collateral: request.collateral,\n            openPrice: request.openPrice,\n            isLong: request.isLong,\n            sizeAmount: int256(request.sizeAmount),\n            tpPrice: request.tpPrice,\n            tp: request.tp,\n            slPrice: request.slPrice,\n            sl: request.sl\n        }));\n    }\n\n    function createDecreaseOrder(TradingTypes.DecreasePositionRequest memory request) external returns (uint256) {\n        return orderManager.createOrder(TradingTypes.CreateOrderRequest({\n            account: request.account,\n            pairIndex: request.pairIndex,\n            tradeType: request.tradeType,\n            collateral: request.collateral,\n            openPrice: request.triggerPrice,\n            isLong: request.isLong,\n            sizeAmount: - int256(request.sizeAmount),\n            tpPrice: 0,\n            tp: 0,\n            slPrice: 0,\n            sl: 0\n        }));\n    }\n\n    function cancelIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external {\n        orderManager.cancelOrder(orderId, tradeType, true);\n    }\n\n    function cancelDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external {\n        orderManager.cancelOrder(orderId, tradeType, false);\n    }\n\n    function cancelAllPositionOrders(uint256 pairIndex, bool isLong) external {\n        bytes32 key = PositionKey.getPositionKey(msg.sender, pairIndex, isLong);\n        IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\n\n        while (orders.length > 0) {\n            uint256 lastIndex = orders.length - 1;\n            IOrderManager.PositionOrder memory positionOrder = orders[lastIndex];\n            console.log(\"positionOrder lastIndex\", lastIndex, \"orderId\", positionOrder.orderId);\n            console.log(\"positionOrder tradeType\", uint8(positionOrder.tradeType), \"isIncrease\", positionOrder.isIncrease);\n            if (positionOrder.isIncrease) {\n                orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, true);\n            } else {\n                orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\n            }\n        }\n    }\n\n    function cancelOrders(uint256 pairIndex, bool isLong, bool isIncrease) external {\n        bytes32 key = PositionKey.getPositionKey(msg.sender, pairIndex, isLong);\n        IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            IOrderManager.PositionOrder memory positionOrder = orders[i];\n            console.log(\"positionOrder index\", i, \"orderId\", positionOrder.orderId);\n            console.log(\"positionOrder tradeType\", uint8(positionOrder.tradeType), \"isIncrease\", positionOrder.isIncrease);\n            if (isIncrease && positionOrder.isIncrease) {\n                orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, true);\n            } else if (!isIncrease && !positionOrder.isIncrease) {\n                orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\n            }\n        }\n    }\n\n    function createTpSl(TradingTypes.CreateTpSlRequest memory request) external returns (uint256 tpOrderId, uint256 slOrderId) {\n        bytes32 key = PositionKey.getPositionKey(msg.sender, request.pairIndex, request.isLong);\n        require(request.tp == 0 || !orderManager.positionHasTpSl(key, TradingTypes.TradeType.TP), \"tp already exists\");\n        require(request.sl == 0 || !orderManager.positionHasTpSl(key, TradingTypes.TradeType.SL), \"sl already exists\");\n\n        if (request.tp > 0) {\n            tpOrderId = orderManager.createOrder(TradingTypes.CreateOrderRequest({\n                account: msg.sender,\n                pairIndex: request.pairIndex,\n                tradeType: TradingTypes.TradeType.TP,\n                collateral: 0,\n                openPrice: request.tpPrice,\n                isLong: request.isLong,\n                sizeAmount: - int256(request.tp),\n                tpPrice: 0,\n                tp: 0,\n                slPrice: 0,\n                sl: 0\n            }));\n        }\n        if (request.sl > 0) {\n            slOrderId = orderManager.createOrder(TradingTypes.CreateOrderRequest({\n                account: msg.sender,\n                pairIndex: request.pairIndex,\n                tradeType: TradingTypes.TradeType.SL,\n                collateral: 0,\n                openPrice: request.slPrice,\n                isLong: request.isLong,\n                sizeAmount: - int256(request.sl),\n                tpPrice: 0,\n                tp: 0,\n                slPrice: 0,\n                sl: 0\n            }));\n        }\n        return (tpOrderId, slOrderId);\n    }\n\n}\n"
    },
    "contracts/trading/TradingVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../libraries/Position.sol\";\nimport \"../libraries/PositionKey.sol\";\nimport \"../interfaces/ITradingVault.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../libraries/PrecisionUtils.sol\";\nimport \"../libraries/Int256Utils.sol\";\nimport \"../libraries/Handleable.sol\";\nimport \"../pair/interfaces/IPairInfo.sol\";\nimport \"../pair/interfaces/IPairVault.sol\";\nimport \"hardhat/console.sol\";\nimport \"../interfaces/IAddressesProvider.sol\";\nimport \"../interfaces/IRoleManager.sol\";\n\ncontract TradingVault is ITradingVault, ReentrancyGuard, Handleable {\n    using SafeERC20 for IERC20;\n    using PrecisionUtils for uint256;\n    using Math for uint256;\n    using Int256Utils for int256;\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n\n    mapping(bytes32 => Position.Info) public positions;\n\n    mapping(address => bool) public override isFrozen;\n\n    mapping(uint256 => int256) public override netExposureAmountChecker;\n    mapping(uint256 => uint256) public override longTracker;\n    mapping(uint256 => uint256) public override shortTracker;\n\n    // cumulativeFundingRates tracks the funding rates based on utilization\n    mapping(uint256 => int256) public cumulativeFundingRates;\n    mapping(uint256 => int256) public lastFundingRates;\n    // lastFundingTimes tracks the last time funding was updated for a token\n    mapping(uint256 => uint256) public lastFundingTimes;\n\n    uint256 public fundingInterval;\n\n    IPairInfo public pairInfo;\n    IPairVault public pairVault;\n    address public tradingFeeReceiver;\n    IVaultPriceFeed public vaultPriceFeed;\n\n    constructor (\n        IAddressesProvider addressProvider,\n        IPairInfo _pairInfo,\n        IPairVault _pairVault,\n        IVaultPriceFeed _vaultPriceFeed,\n        address _tradingFeeReceiver,\n        uint256 _fundingInterval\n    ) Handleable(addressProvider) {\n        pairInfo = _pairInfo;\n        pairVault = _pairVault;\n        vaultPriceFeed = _vaultPriceFeed;\n        tradingFeeReceiver = _tradingFeeReceiver;\n        fundingInterval = _fundingInterval;\n    }\n\n    function updatePairInfo(address newPairInfo) external onlyPoolAdmin {\n        address oldPairInfo = address(pairInfo);\n        pairInfo = IPairInfo(newPairInfo);\n        emit UpdatePairInfo(oldPairInfo, newPairInfo);\n    }\n\n    function updatePairVault(address newPairVault) external onlyPoolAdmin {\n        address oldPairVault = address(pairVault);\n        pairVault = IPairVault(newPairVault);\n        emit UpdatePairVault(oldPairVault, newPairVault);\n    }\n\n    function updateTradingFeeReceiver(address newReceiver) external onlyPoolAdmin {\n        address oldReceiver = tradingFeeReceiver;\n        tradingFeeReceiver = newReceiver;\n        emit UpdateTradingFeeReceiver(oldReceiver, newReceiver);\n    }\n\n    function updateFundingInterval(uint256 newInterval) external onlyPoolAdmin {\n        uint256 oldInterval = fundingInterval;\n        fundingInterval = newInterval;\n        emit UpdateFundingInterval(oldInterval, newInterval);\n    }\n\n    function increasePosition(\n        address _account,\n        uint256 _pairIndex,\n        int256 _collateral,\n        uint256 _sizeAmount,\n        bool _isLong,\n        uint256 _price\n    ) external nonReentrant onlyHandler returns (uint256 tradingFee, int256 fundingFee) {\n\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        require(pair.enable, \"trade pair not supported\");\n\n        // get position\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\n        Position.Info storage position = positions[positionKey];\n        position.key = positionKey;\n\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\n        console.log(\"increasePosition sizeAmount\", _sizeAmount, \"sizeDelta\", sizeDelta);\n\n        // 修改仓位\n        if (position.positionAmount == 0) {\n            position.account = _account;\n            position.pairIndex = _pairIndex;\n            position.isLong = _isLong;\n            position.averagePrice = _price;\n        }\n\n        if (position.positionAmount > 0 && sizeDelta > 0) {\n            position.averagePrice = (position.positionAmount.mulPrice(position.averagePrice) + sizeDelta).mulDiv(PrecisionUtils.pricePrecision(), (position.positionAmount + _sizeAmount));\n        }\n\n        position.collateral = (int256(position.collateral) + _collateral).abs();\n        position.positionAmount = position.positionAmount + _sizeAmount;\n\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\n\n        // funding fee\n        updateCumulativeFundingRate(_pairIndex, _price);\n        fundingFee = getFundingFee(true, _account, _pairIndex, _isLong, _sizeAmount);\n        console.log(\"increasePosition lastFundingTimes\", lastFundingTimes[_pairIndex]);\n        console.log(\"increasePosition cumulativeFundingRates\", cumulativeFundingRates[_pairIndex].toString());\n        console.log(\"increasePosition fundingFee\", fundingFee.toString());\n\n        if (fundingFee >= 0) {\n            uint256 absFundingFee = uint256(fundingFee);\n            if (_isLong) {\n                require(position.collateral >= absFundingFee, \"collateral not enough for funding fee\");\n                position.collateral -= absFundingFee;\n                console.log(\"increasePosition long pay funding fee\");\n            } else {\n                transferOut += absFundingFee;  // todo distribute\n                console.log(\"increasePosition long take funding fee\");\n            }\n        } else {\n            uint256 absFundingFee = uint256(- fundingFee);\n            if (!_isLong) {\n                require(position.collateral >= absFundingFee, \"collateral not enough for funding fee\");\n                position.collateral = position.collateral - absFundingFee;\n                console.log(\"increasePosition short pay funding fee\");\n            } else {\n                transferOut += absFundingFee;  // todo distribute\n                console.log(\"increasePosition short take funding fee\");\n            }\n        }\n\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\n\n        // trading fee\n        tradingFee = _tradingFee(_pairIndex, _isLong, _sizeAmount, _price);\n        require(position.collateral + transferOut >= tradingFee, \"collateral not enough for trading fee\");\n\n        if (transferOut >= tradingFee) {\n\n            transferOut -= tradingFee;\n        } else {\n\n            transferOut == 0;\n            position.collateral -= tradingFee - transferOut;\n        }\n        // todo distribute\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\n        console.log(\"increasePosition tradingFee\", tradingFee);\n\n\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\n        netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? int256(_sizeAmount) : - int256(_sizeAmount));\n        if (_isLong) {\n            longTracker[_pairIndex] += _sizeAmount;\n        } else {\n            shortTracker[_pairIndex] += _sizeAmount;\n        }\n\n        console.log(\"increasePosition prevNetExposureAmountChecker\", prevNetExposureAmountChecker.toString());\n        console.log(\"increasePosition netExposureAmountChecker\", netExposureAmountChecker[_pairIndex].toString());\n        console.log(\"increasePosition longTracker\", longTracker[_pairIndex], \"shortTracker\", shortTracker[_pairIndex]);\n\n\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\n        console.log(\"increasePosition lp averagePrice\", lpVault.averagePrice, \"price\", _price);\n        if (prevNetExposureAmountChecker > 0) {\n\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\n                console.log(\"increasePosition BTO long increase\");\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\n\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\n                    .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\n                console.log(\"increasePosition BTO update averagePrice\", averagePrice);\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\n\n                console.log(\"increasePosition STO long decrease\");\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\n\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"increasePosition STO decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"increasePosition STO increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n            } else {\n                console.log(\"increasePosition STO long to short\");\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"increasePosition STO decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"increasePosition STO increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price));\n                console.log(\"increasePosition STO Long to Short update averagePrice\", _price);\n                pairVault.updateAveragePrice(_pairIndex, _price);\n            }\n        } else if (prevNetExposureAmountChecker < 0) {\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\n                console.log(\"increasePosition STO short increase\");\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\n\n                uint256 averagePrice = (uint256(- prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\n                    .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\n                console.log(\"increasePosition STO update averagePrice\", averagePrice);\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\n                console.log(\"increasePosition BTO short decrease\");\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\n\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"increasePosition BTO decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"increasePosition BTO increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n            } else {\n                console.log(\"increasePosition BTO short to long\");\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"increasePosition BTO increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"increasePosition BTO decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                }\n\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(- prevNetExposureAmountChecker)).mulPrice(_price));\n                console.log(\"increasePosition BTO Long to Short update averagePrice\", _price);\n                pairVault.updateAveragePrice(_pairIndex, _price);\n            }\n        } else {\n\n            if (netExposureAmountChecker[_pairIndex] > 0) {\n                console.log(\"increasePosition BTO zero to long\");\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\n            } else {\n                console.log(\"increasePosition STO zero to short\");\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\n            }\n            pairVault.updateAveragePrice(_pairIndex, _price);\n        }\n\n        if (transferOut > 0) {\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\n        }\n\n        emit IncreasePosition(\n            positionKey,\n            _account,\n            _pairIndex,\n            _collateral,\n            _isLong,\n            _sizeAmount,\n            _price,\n            tradingFee,\n            fundingFee,\n            transferOut\n        );\n\n        emit UpdatePosition(\n            positionKey,\n            _account,\n            _pairIndex,\n            _isLong,\n            position.collateral,\n            position.positionAmount,\n            position.averagePrice,\n            position.entryFundingRate,\n            position.entryFundingTime,\n            position.realisedPnl,\n            _price\n        );\n\n        console.log(\"increase position finish\");\n    }\n\n    function decreasePosition(\n        address _account,\n        uint256 _pairIndex,\n        int256 _collateral,\n        uint256 _sizeAmount,\n        bool _isLong,\n        uint256 _price\n    ) external onlyHandler nonReentrant returns (uint256 tradingFee, int256 fundingFee, int256 pnl) {\n\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n\n        // check trading amount\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\n        require(_sizeAmount >= tradingConfig.minTradeAmount && _sizeAmount <= tradingConfig.maxTradeAmount, \"invalid size\");\n\n        // get position\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\n        Position.Info storage position = positions[positionKey];\n        require(position.account != address(0), \"position already closed\");\n\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\n        console.log(\"decreasePosition sizeAmount\", _sizeAmount, \"sizeDelta\", sizeDelta);\n\n        // 修改仓位\n        if (position.positionAmount > 0 && sizeDelta > 0) {\n            position.averagePrice = (position.positionAmount.mulPrice(position.averagePrice) + sizeDelta).mulDiv(PrecisionUtils.pricePrecision(), (position.positionAmount + _sizeAmount));\n        }\n\n        position.collateral = (int256(position.collateral) + _collateral).abs();\n        position.positionAmount -= _sizeAmount;\n        console.log(\"decreasePosition position collateral\", position.collateral, \"positionAmount\", position.positionAmount);\n\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\n\n        // funding fee\n        updateCumulativeFundingRate(_pairIndex, _price);\n        fundingFee = getFundingFee(false, _account, _pairIndex, _isLong, _sizeAmount);\n        console.log(\"decreasePosition lastFundingTimes\", lastFundingTimes[_pairIndex]);\n        console.log(\"decreasePosition cumulativeFundingRates\", cumulativeFundingRates[_pairIndex].toString());\n        console.log(\"decreasePosition fundingFee\", fundingFee.toString());\n\n        if (fundingFee >= 0) {\n            uint256 absFundingFee = uint256(fundingFee);\n            if (_isLong) {\n                require(position.collateral >= absFundingFee, \"collateral not enough for funding fee\");\n                position.collateral -= absFundingFee;\n                console.log(\"decreasePosition long pay funding fee\");\n            } else {\n                transferOut += absFundingFee;  // todo distribute\n                console.log(\"decreasePosition long take funding fee\");\n            }\n        } else {\n            uint256 absFundingFee = uint256(- fundingFee);\n            if (!_isLong) {\n                require(position.collateral >= absFundingFee, \"collateral not enough for funding fee\");\n                position.collateral = position.collateral - absFundingFee;\n                console.log(\"decreasePosition short pay funding fee\");\n            } else {\n                transferOut += absFundingFee;  // todo distribute\n                console.log(\"decreasePosition short take funding fee\");\n            }\n        }\n\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\n\n        // trading fee\n        tradingFee = _tradingFee(_pairIndex, _isLong, _sizeAmount, _price);\n        require(position.collateral + transferOut >= tradingFee, \"collateral not enough for trading fee\");\n\n        if (transferOut >= tradingFee) {\n\n            transferOut -= tradingFee;\n        } else {\n\n            transferOut == 0;\n            position.collateral -= tradingFee - transferOut;\n        }\n        // todo fee distribute\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\n        console.log(\"decreasePosition tradingFee\", tradingFee);\n\n\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\n        netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? - int256(_sizeAmount) : int256(_sizeAmount));\n        if (_isLong) {\n            longTracker[_pairIndex] -= _sizeAmount;\n        } else {\n            shortTracker[_pairIndex] -= _sizeAmount;\n        }\n\n        console.log(\"decreasePosition prevNetExposureAmountChecker\", prevNetExposureAmountChecker.toString());\n        console.log(\"decreasePosition netExposureAmountChecker\", netExposureAmountChecker[_pairIndex].toString());\n        console.log(\"decreasePosition longTracker\", longTracker[_pairIndex], \"shortTracker\", shortTracker[_pairIndex]);\n\n\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\n        if (prevNetExposureAmountChecker > 0) {\n\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\n                console.log(\"decreasePosition STC long increase\");\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\n                    .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\n                console.log(\"decreasePosition STC update averagePrice\", averagePrice);\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\n\n                console.log(\"decreasePosition BTC long decrease\");\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\n\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"decreasePosition BTC decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"decreasePosition BTC increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n            } else {\n                console.log(\"decreasePosition BTC long to short\");\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"decreasePosition BTC decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"decreasePosition BTC increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price));\n                console.log(\"decreasePosition BTC Long to Short update averagePrice\", _price);\n                pairVault.updateAveragePrice(_pairIndex, _price);\n            }\n        } else if (prevNetExposureAmountChecker < 0) {\n\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\n                console.log(\"decreasePosition BTC short increase\");\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\n\n                uint256 averagePrice = (uint256(- prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\n                    .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\n                console.log(\"decreasePosition BTC update averagePrice\", averagePrice);\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\n\n                console.log(\"decreasePosition STC short decrease\");\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\n\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"decreasePosition STC decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"decreasePosition STC increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                }\n            } else {\n                console.log(\"decreasePosition STC short to long\");\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\n                if (_price > lpVault.averagePrice) {\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\n                    console.log(\"decreasePosition STC increaseProfit\", profit);\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\n                    pairVault.increaseProfit(_pairIndex, profit);\n                } else {\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\n                    console.log(\"decreasePosition STC decreaseProfit\", profit);\n                    pairVault.decreaseProfit(_pairIndex, profit, _price);\n                }\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(- prevNetExposureAmountChecker)).mulPrice(_price));\n                console.log(\"decreasePosition STC Long to Short update averagePrice\", _price);\n                pairVault.updateAveragePrice(_pairIndex, _price);\n            }\n        } else {\n\n            if (netExposureAmountChecker[_pairIndex] > 0) {\n                console.log(\"decreasePosition STC zero to long\");\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\n            } else {\n                console.log(\"decreasePosition BTC zero to short\");\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\n            }\n            pairVault.updateAveragePrice(_pairIndex, _price);\n        }\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\n        pnl = position.getUnrealizedPnl(_sizeAmount, price);\n        console.log(\"decreasePosition pnl\", pnl.toString());\n\n        if (pnl > 0) {\n            transferOut += pnl.abs();\n        } else {\n            position.collateral -= position.collateral.min(uint256(- pnl));\n        }\n        position.realisedPnl += pnl;\n\n        console.log(\"decreasePosition collateral\", position.collateral);\n\n        if (transferOut > 0) {\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\n        }\n\n\n        if (position.positionAmount == 0) {\n\n            if (position.collateral > 0) {\n                IERC20(pair.stableToken).safeTransfer(position.account, position.collateral);\n            }\n\n            console.log(\"decreasePosition position close\");\n            delete positions[positionKey];\n            emit ClosePosition(\n                positionKey,\n                _account,\n                _pairIndex,\n                _isLong\n            );\n        }\n\n        emit DecreasePosition(\n            positionKey,\n            _account,\n            _pairIndex,\n            _isLong,\n            _collateral,\n            _sizeAmount,\n            _price,\n            tradingFee,\n            fundingFee,\n            pnl,\n            transferOut\n        );\n\n        emit UpdatePosition(\n            positionKey,\n            _account,\n            _pairIndex,\n            _isLong,\n            position.collateral,\n            position.positionAmount,\n            position.averagePrice,\n            position.entryFundingRate,\n            position.entryFundingTime,\n            position.realisedPnl,\n            _price\n        );\n    }\n\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) public {\n        if (lastFundingTimes[_pairIndex] == 0) {\n            lastFundingTimes[_pairIndex] = block.timestamp / fundingInterval * fundingInterval;\n            return;\n        }\n\n        if (block.timestamp - lastFundingTimes[_pairIndex] < fundingInterval) {\n            console.log(\"updateCumulativeFundingRate no need update\");\n            return;\n        }\n\n        uint256 intervals = (block.timestamp - lastFundingTimes[_pairIndex]) / fundingInterval;\n        int256 nextFundingRate = _currentFundingRate(_pairIndex, _price);\n\n        lastFundingRates[_pairIndex] = nextFundingRate;\n        cumulativeFundingRates[_pairIndex] = cumulativeFundingRates[_pairIndex] + nextFundingRate * int256(intervals);\n        lastFundingTimes[_pairIndex] = block.timestamp / fundingInterval * fundingInterval;\n\n        emit UpdateFundingRate(_pairIndex, cumulativeFundingRates[_pairIndex], lastFundingTimes[_pairIndex]);\n    }\n\n    function buyIndexToken(uint256 _pairIndex, uint256 _amount) public onlyHandler {\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\n        uint256 stableAmount = _amount.mulPrice(price);\n\n\n        IERC20(pair.stableToken).safeTransferFrom(msg.sender, address(this), stableAmount);\n        IERC20(pair.indexToken).safeTransfer(msg.sender, _amount);\n    }\n\n    function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external override view returns (uint256 tradingFee) {\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\n        return _tradingFee(_pairIndex, _isLong, _sizeAmount, price);\n    }\n\n    function _tradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount, uint256 _price) internal view returns (uint256 tradingFee) {\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\n\n        IPairInfo.TradingFeeConfig memory tradingFeeConfig = pairInfo.getTradingFeeConfig(_pairIndex);\n        if (netExposureAmountChecker[_pairIndex] >= 0) {\n\n            if (_isLong) {\n                // fee\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\n            } else {\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\n            }\n        } else {\n\n            if (_isLong) {\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\n            } else {\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\n            }\n        }\n        return tradingFee;\n    }\n\n    function getFundingFee(\n        bool _increase,\n        address _account,\n        uint256 _pairIndex,\n        bool _isLong,\n        uint256 _sizeAmount\n    ) public override view returns (int256) {\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\n\n        uint256 interval = block.timestamp - position.entryFundingTime;\n        if (interval < fundingInterval) {\n            if (!_increase) {\n                int256 fundingRate = lastFundingRates[_pairIndex] * int256(interval) / int256(fundingInterval);\n                return int256(_sizeAmount) * fundingRate / int256(PrecisionUtils.fundingRatePrecision());\n            }\n        }\n\n        int256 fundingRate = cumulativeFundingRates[_pairIndex] - position.entryFundingRate;\n        return int256(position.positionAmount) * fundingRate / int256(PrecisionUtils.fundingRatePrecision());\n    }\n\n    function getCurrentFundingRate(uint256 _pairIndex) external override view returns (int256) {\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\n        return _currentFundingRate(_pairIndex, price);\n    }\n\n    function _currentFundingRate(uint256 _pairIndex, uint256 _price) internal view returns (int256) {\n        IPairInfo.FundingFeeConfig memory fundingFeeConfig = pairInfo.getFundingFeeConfig(_pairIndex);\n\n        uint256 absNetExposure = netExposureAmountChecker[_pairIndex] >= 0 ? uint256(netExposureAmountChecker[_pairIndex]) : uint256(- netExposureAmountChecker[_pairIndex]);\n        uint256 w = fundingFeeConfig.fundingWeightFactor;\n        uint256 q = longTracker[_pairIndex] + shortTracker[_pairIndex];\n        uint256 k = fundingFeeConfig.liquidityPremiumFactor;\n\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\n        uint256 l = (lpVault.indexTotalAmount - lpVault.indexReservedAmount).mulPrice(_price) + (lpVault.stableTotalAmount - lpVault.stableReservedAmount);\n\n        uint256 fundingRate = w * absNetExposure * PrecisionUtils.fundingRatePrecision() / (k * q)\n            + (PrecisionUtils.fundingRatePrecision() - w) * absNetExposure / (k * l);\n\n        fundingRate = fundingRate >= fundingFeeConfig.interest ?\n            (fundingRate - fundingFeeConfig.interest).min(fundingFeeConfig.minFundingRate).max(fundingFeeConfig.maxFundingRate) :\n            (fundingFeeConfig.interest - fundingRate).min(fundingFeeConfig.minFundingRate).max(fundingFeeConfig.maxFundingRate);\n        console.log(\"getCurrentFundingRate fundingRate\", fundingRate);\n\n        return netExposureAmountChecker[_pairIndex] >= 0 ? int256(fundingRate) : - int256(fundingRate);\n    }\n\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) public view returns (Position.Info memory) {\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\n        return position;\n\n    }\n\n    function getPositionByKey(bytes32 key) public view returns (Position.Info memory) {\n        Position.Info memory position = positions[key];\n        return position;\n    }\n\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) public pure returns (bytes32) {\n        return PositionKey.getPositionKey(_account, _pairIndex, _isLong);\n    }\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
