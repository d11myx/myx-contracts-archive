{
  "address": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "_vaultPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_slipReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "getMintLpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "slipToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slipAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getReceivedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveIndexTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiveStableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "lpFairPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "_pairStorage",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isHandler",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_slipReceiver",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slipReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPairTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPriceFeed",
      "outputs": [
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x31a760266830d3665b4ac9a6cc5d9e58c519d4cce55188fa068083b8cd183d16",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
    "transactionIndex": 0,
    "gasUsed": "3099490",
    "logsBloom": "0x
    "blockHash": "0x3500c34a6552049dd050560e4331e823c867533886cd82efd8ce6b4069c8e67d",
    "transactionHash": "0x31a760266830d3665b4ac9a6cc5d9e58c519d4cce55188fa068083b8cd183d16",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "3099490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
  ],
  "numDeployments": 1,
  "solcInputHash": "88b9facc694daac1217da6c3f2e56500",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slipReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"getMintLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"slipToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slipAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getReceivedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveIndexTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveStableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"lpFairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairStorage\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isHandler\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slipReceiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slipReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPairTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/PairLiquidity.sol\":\"PairLiquidity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function contractWhiteList(address) external view returns (bool);\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n    function addContractWhiteList(address target) external;\\n\\n    function removeContractWhiteList(address target) external;\\n}\\n\",\"keccak256\":\"0xbdc36b44d3b4f20937e76a8d72a334dee7a12c98ad888fb77a8a98494ef8cb6b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x18a2c6a576dc0459631a8e1c013d54f82016cb315f5565be2a03c15cc9c55c52\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity =0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdcae9624c1d487eb9400e4c9d4a875b65c7d6741170690b6a62d6aa8a45399f3\"},\"contracts/libraries/AMMUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary AMMUtils {\\n\\n    function getReserve(\\n        uint256 k,\\n        uint256 price,\\n        uint256 pricePrecision\\n    ) internal pure returns (uint256 reserveA, uint256 reserveB) {\\n        require(price > 0, \\\"Invalid price\\\");\\n        require(k > 0, \\\"Invalid k\\\");\\n\\n        reserveB = Math.sqrt(Math.mulDiv(k, price, pricePrecision));\\n        reserveA = k / reserveB;\\n        return (reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"Invalid reserve\\\");\\n        amountOut = Math.mulDiv(amountIn, reserveOut, reserveIn + amountIn);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7deaa3c41f439533f8489c46b379cf7af0c0c03ad39eac45ca93252214e7588a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable is Initializable {\\n    address public gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function __Governable_init() internal onlyInitializing {\\n        gov = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x31fc5e583be08ae049f33ed30bc71e48c0aafaa26d47bccb2f9754e5aa0bc7c8\",\"license\":\"MIT\"},\"contracts/libraries/Handleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./Governable.sol\\\";\\nimport \\\"../../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../../interfaces/IRoleManager.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Handleable {\\n\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    modifier onlyHandler() {\\n        require(msg.sender == address(this) || isHandler[msg.sender], \\\"Handleable: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\\n        isHandler[_handler] = _isHandler;\\n    }\\n}\\n\",\"keccak256\":\"0x33560372f60bb0f7446191a7dbcb9ce2108162c057d2fd3908cc0cc731d0673c\",\"license\":\"MIT\"},\"contracts/pair/PairLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IPairInfo.sol\\\";\\nimport \\\"./interfaces/IPairLiquidity.sol\\\";\\nimport \\\"./interfaces/IPairVault.sol\\\";\\nimport \\\"../libraries/Handleable.sol\\\";\\nimport \\\"../libraries/AMMUtils.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../interfaces/IOraclePriceFeed.sol\\\";\\nimport \\\"../token/PairToken.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PairLiquidity is IPairLiquidity, Handleable {\\n\\n    using PrecisionUtils for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    IOraclePriceFeed public vaultPriceFeed;\\n\\n    address public feeReceiver;\\n\\n    address public slipReceiver;\\n\\n    address public weth;\\n\\n    // pairToken => user => amount\\n    mapping(address => mapping(address => uint256)) public userPairTokens;\\n\\n    event AddLiquidity(\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        IOraclePriceFeed _vaultPriceFeed,\\n        address _feeReceiver,\\n        address _slipReceiver,\\n        address _weth\\n    ) Handleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        vaultPriceFeed = _vaultPriceFeed;\\n        feeReceiver = _feeReceiver;\\n        slipReceiver = _slipReceiver;\\n        weth = _weth;\\n    }\\n\\n    function setContract(IPairInfo _pairStorage, IPairVault _pairVault) external onlyPoolAdmin {\\n        pairInfo = _pairStorage;\\n        pairVault = _pairVault;\\n    }\\n\\n    function setReceiver(address _feeReceiver, address _slipReceiver) external onlyPoolAdmin {\\n        feeReceiver = _feeReceiver;\\n        slipReceiver = _slipReceiver;\\n    }\\n\\n    function addLiquidity(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external returns (uint256) {\\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function addLiquidityETH(uint256 _pairIndex, uint256 _stableAmount) external payable returns (uint256) {\\n        IWETH(weth).deposit{value: msg.value}();\\n        IWETH(weth).transfer(msg.sender, msg.value);\\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, msg.value, _stableAmount);\\n    }\\n\\n    function addLiquidityForAccount(address _funder, address _account, uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external onlyHandler returns (uint256) {\\n        return _addLiquidity(_funder, _account, _pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function removeLiquidity(uint256 _pairIndex, uint256 _amount) external returns (uint256 receivedIndexAmount, uint256 receivedStableAmount) {\\n        (receivedIndexAmount, receivedStableAmount) = _removeLiquidity(msg.sender, msg.sender, _pairIndex, _amount);\\n        if (receivedIndexAmount > 0 && pairInfo.getPair(_pairIndex).indexToken == weth) {\\n            IWETH(weth).withdraw(receivedIndexAmount);\\n            payable(msg.sender).sendValue(receivedIndexAmount);\\n        }\\n        return (receivedIndexAmount, receivedStableAmount);\\n    }\\n\\n    function removeLiquidityForAccount(address _account, address _receiver, uint256 _pairIndex, uint256 _amount) external onlyHandler returns (uint256, uint256) {\\n        return _removeLiquidity(_account, _receiver, _pairIndex, _amount);\\n    }\\n\\n    function _addLiquidity(address _funder, address _account, uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) private returns (uint256 mintAmount) {\\n        require(_indexAmount > 0 || _stableAmount > 0, \\\"invalid amount\\\");\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), \\\"invalid pair\\\");\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        console.log(\\\"addLiquidity indexAmount\\\", _indexAmount, \\\"stableAmount\\\", _stableAmount);\\n        // transfer token\\n        IERC20(pair.indexToken).safeTransferFrom(_funder, address(this), _indexAmount);\\n        IERC20(pair.stableToken).safeTransferFrom(_funder, address(this), _stableAmount);\\n\\n        // fee\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        {\\n            // transfer fee\\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n            console.log(\\\"addLiquidity indexFeeAmount\\\", indexFeeAmount, \\\"stableFeeAmount\\\", stableFeeAmount);\\n\\n            IERC20(pair.indexToken).safeTransfer(feeReceiver, indexFeeAmount);\\n            IERC20(pair.stableToken).safeTransfer(feeReceiver, stableFeeAmount);\\n\\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n        }\\n\\n        // usdt value of reserve\\n        {\\n            uint256 price = _getPrice(pair.indexToken);\\n            require(price > 0, \\\"invalid price\\\");\\n\\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n            // usdt value of deposit\\n            uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n\\n            // calculate deposit usdt value without slippage\\n            uint256 slipDelta;\\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n\\n                // after deposit\\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n                console.log(\\\"addLiquidity indexTotalDelta\\\", indexTotalDelta, \\\"stableTotalDelta\\\", stableTotalDelta);\\n\\n                // expect delta\\n                uint256 expectIndexDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(pair.expectIndexTokenP);\\n                uint256 expectStableDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\\n                console.log(\\\"addLiquidity expectIndexDelta\\\", expectIndexDelta, \\\"expectStableDelta\\\", expectStableDelta);\\n\\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n                if (indexTotalDelta > expectIndexDelta) {\\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta ? (indexDepositDelta - needSwapIndexDelta) : indexDepositDelta;\\n                    console.log(\\\"addLiquidity needSwapIndexDelta\\\", needSwapIndexDelta, \\\"swapIndexDelta\\\", swapIndexDelta);\\n\\n                    slipDelta =  AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                    uint256 slipAmount = _getAmount(slipDelta, price);\\n\\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                    IERC20(pair.indexToken).safeTransfer(slipReceiver, slipAmount);\\n                    console.log(\\\"addLiquidity slipDelta\\\", slipDelta, \\\"afterFeeIndexAmount\\\", afterFeeIndexAmount);\\n                } else if (stableTotalDelta > expectStableDelta) {\\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta ? (afterFeeStableAmount - needSwapStableDelta) : afterFeeStableAmount;\\n                    console.log(\\\"addLiquidity needSwapStableDelta\\\", needSwapStableDelta, \\\"swapStableDelta\\\", swapStableDelta);\\n\\n                    slipDelta = swapStableDelta - _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n\\n                    afterFeeStableAmount = afterFeeStableAmount - slipDelta;\\n                    IERC20(pair.stableToken).safeTransfer(slipReceiver, slipDelta);\\n                    console.log(\\\"addLiquidity slipDelta\\\", slipDelta, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n                }\\n            }\\n            // mint lp\\n            mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n            console.log(\\\"addLiquidity indexDepositDelta\\\", indexDepositDelta, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n        }\\n        IPairToken(pair.pairToken).mint(address(this), mintAmount);\\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] + mintAmount;\\n\\n        pairVault.increaseTotalAmount(_pairIndex, afterFeeIndexAmount, afterFeeStableAmount);\\n\\n        IERC20(pair.indexToken).safeTransfer(address(pairVault), afterFeeIndexAmount);\\n        IERC20(pair.stableToken).safeTransfer(address(pairVault), afterFeeStableAmount);\\n        console.log(\\\"addLiquidity afterFeeIndexAmount\\\", afterFeeIndexAmount, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n\\n        emit AddLiquidity(_account, _pairIndex, _indexAmount, _stableAmount, mintAmount);\\n\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(address _account, address _receiver, uint256 _pairIndex, uint256 _amount) private\\n    returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), \\\"invalid pair\\\");\\n\\n        require(userPairTokens[pair.pairToken][_account] >= _amount, \\\"insufficient balance\\\");\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        (receiveIndexTokenAmount, receiveStableTokenAmount) = getReceivedAmount(_pairIndex, _amount);\\n\\n        require(receiveIndexTokenAmount <= vault.indexTotalAmount - vault.indexReservedAmount, \\\"insufficient indexToken amount\\\");\\n        require(receiveStableTokenAmount <= vault.stableTotalAmount - vault.stableReservedAmount, \\\"insufficient stableToken amount\\\");\\n\\n        pairVault.decreaseTotalAmount(_pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount);\\n\\n        IPairToken(pair.pairToken).burn(address(this), _amount);\\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] - _amount;\\n\\n        pairVault.transferTokenTo(pair.indexToken, _receiver, receiveIndexTokenAmount);\\n        pairVault.transferTokenTo(pair.stableToken, _receiver, receiveStableTokenAmount);\\n\\n        emit RemoveLiquidity(_account, _pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount, _amount);\\n\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function lpFairPrice(uint256 _pairIndex) public view returns(uint256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n        uint256 price = _getPrice(pair.indexToken);\\n        uint256 lpFairDelta = _getDelta(vault.indexTotalAmount, price) + vault.stableTotalAmount;\\n        return lpFairDelta > 0 ? Math.mulDiv(lpFairDelta, PRICE_PRECISION, IERC20(pair.pairToken).totalSupply()) : 1 * PRICE_PRECISION;\\n    }\\n\\n    function _getDelta(uint256 amount, uint256 price) internal pure returns(uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function _getAmount(uint256 delta, uint256 price) internal pure returns(uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    // calculate lp amount for add liquidity\\n    function getMintLpAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external view returns(uint256 mintAmount, address slipToken, uint256 slipAmount) {\\n        require(_indexAmount > 0 || _stableAmount > 0, \\\"invalid amount\\\");\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), \\\"invalid pair\\\");\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        console.log(\\\"getMintLpAmount indexAmount\\\", _indexAmount, \\\"stableAmount\\\", _stableAmount);\\n\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        {\\n            // transfer fee\\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n\\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n        }\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        // calculate deposit usdt value without slippage\\n        uint256 slipDelta;\\n\\n        // usdt value of deposit\\n        uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n        console.log(\\\"getMintLpAmount indexDepositDelta\\\", indexDepositDelta);\\n\\n        {\\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n\\n                // after deposit\\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n                console.log(\\\"getMintLpAmount indexTotalDelta\\\", indexTotalDelta, \\\"stableTotalDelta\\\", stableTotalDelta);\\n\\n                uint256 expectIndexDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(pair.expectIndexTokenP);\\n                uint256 expectStableDelta = (indexTotalDelta + stableTotalDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\\n                console.log(\\\"getMintLpAmount expectIndexDelta\\\", expectIndexDelta, \\\"expectStableDelta\\\", expectStableDelta);\\n\\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n                if (indexTotalDelta > expectIndexDelta) {\\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta ? (indexDepositDelta - needSwapIndexDelta) : indexDepositDelta;\\n                    console.log(\\\"getMintLpAmount needSwapIndexDelta\\\", needSwapIndexDelta, \\\"swapIndexDelta\\\", swapIndexDelta);\\n\\n                    slipDelta =  AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                    slipAmount = _getAmount(slipDelta, price);\\n                    slipToken = pair.indexToken;\\n\\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                    console.log(\\\"getMintLpAmount slipDelta\\\", slipDelta, \\\"afterFeeIndexAmount\\\", afterFeeIndexAmount);\\n                } else if (stableTotalDelta > expectStableDelta) {\\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta ? (afterFeeStableAmount - needSwapStableDelta) : afterFeeStableAmount;\\n                    console.log(\\\"getMintLpAmount needSwapStableDelta\\\", needSwapStableDelta, \\\"swapStableDelta\\\", swapStableDelta);\\n\\n                    slipDelta = swapStableDelta - _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n                    slipAmount = slipDelta;\\n                    slipToken = pair.stableToken;\\n\\n                    afterFeeStableAmount = afterFeeStableAmount - slipAmount;\\n                    console.log(\\\"getMintLpAmount slipDelta\\\", slipDelta, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n                }\\n            }\\n        }\\n        console.log(\\\"getMintLpAmount afterFeeIndexAmount\\\", afterFeeIndexAmount, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n        // mint lp\\n        mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n        console.log(\\\"getMintLpAmount indexDepositDelta\\\", indexDepositDelta, \\\"afterFeeStableAmount\\\", afterFeeStableAmount);\\n        return (mintAmount, slipToken, slipAmount);\\n    }\\n\\n    // calculate deposit amount for add liquidity\\n    function getDepositAmount(uint256 _pairIndex, uint256 _lpAmount) external view returns(uint256 depositIndexAmount, uint256 depositStableAmount) {\\n        require(_lpAmount > 0, \\\"invalid amount\\\");\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), \\\"invalid pair\\\");\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n        uint256 depositDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n        console.log(\\\"getMintLpAmount depositDelta\\\", depositDelta);\\n\\n        // expect delta\\n        uint256 expectIndexDelta = (indexReserveDelta + stableReserveDelta + depositDelta).mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = (indexReserveDelta + stableReserveDelta + depositDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\\n        console.log(\\\"getDepositAmount expectIndexDelta\\\", expectIndexDelta, \\\"expectStableDelta\\\", expectStableDelta);\\n\\n        uint256 depositIndexTokenDelta;\\n        uint256 depositStableTokenDelta;\\n\\n        if (expectIndexDelta >= indexReserveDelta) {\\n            uint256 extraIndexReserveDelta = expectIndexDelta - indexReserveDelta;\\n            if (extraIndexReserveDelta >= depositDelta) {\\n                depositIndexTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = extraIndexReserveDelta;\\n                depositStableTokenDelta = depositDelta - extraIndexReserveDelta;\\n            }\\n            console.log(\\\"getDepositAmount depositIndexTokenDelta\\\", depositIndexTokenDelta, \\\"depositStableTokenDelta\\\", depositStableTokenDelta);\\n        } else {\\n            uint256 extraStableReserveDelta = expectStableDelta - stableReserveDelta;\\n            if (extraStableReserveDelta >= depositDelta) {\\n                depositStableTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = depositDelta - extraStableReserveDelta;\\n                depositStableTokenDelta = extraStableReserveDelta;\\n            }\\n            console.log(\\\"getDepositAmount depositIndexTokenDelta\\\", depositIndexTokenDelta, \\\"depositStableTokenDelta\\\", depositStableTokenDelta);\\n        }\\n        depositIndexAmount = _getAmount(depositIndexTokenDelta, price);\\n        depositStableAmount = depositStableTokenDelta;\\n        console.log(\\\"getDepositAmount depositIndexAmount\\\", depositIndexAmount, \\\"depositStableAmount\\\", depositStableAmount);\\n\\n        // add fee\\n        depositIndexAmount = depositIndexAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\\n        depositStableAmount = depositStableAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\\n        console.log(\\\"getDepositAmount depositIndexAmount\\\", depositIndexAmount, \\\"depositStableAmount\\\", depositStableAmount);\\n        return (depositIndexAmount, depositStableAmount);\\n    }\\n\\n    // calculate amount for remove liquidity\\n    function getReceivedAmount(uint256 _pairIndex, uint256 _lpAmount) public view returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        require(_lpAmount > 0, \\\"invalid amount\\\");\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), \\\"invalid pair\\\");\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        // usdt value of reserve\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n\\n        uint256 receiveDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n        console.log(\\\"getReceivedAmount receiveDelta\\\", receiveDelta);\\n\\n        // expect delta\\n        uint256 expectIndexDelta = (indexReserveDelta + stableReserveDelta - receiveDelta).mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = (indexReserveDelta + stableReserveDelta - receiveDelta).mulPercentage(PrecisionUtils.oneHundredPercentage() - pair.expectIndexTokenP);\\n        console.log(\\\"getReceivedAmount expectIndexDelta\\\", expectIndexDelta, \\\"expectStableDelta\\\", expectStableDelta);\\n\\n        // received delta of indexToken and stableToken\\n        uint256 receiveIndexTokenDelta;\\n        uint256 receiveStableTokenDelta;\\n\\n        if (indexReserveDelta > expectIndexDelta) {\\n            uint256 extraIndexReserveDelta = indexReserveDelta - expectIndexDelta;\\n            if (extraIndexReserveDelta >= receiveDelta) {\\n                receiveIndexTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = extraIndexReserveDelta;\\n                receiveStableTokenDelta = receiveDelta - extraIndexReserveDelta;\\n            }\\n            console.log(\\\"getReceivedAmount receiveIndexTokenDelta\\\", receiveIndexTokenDelta, \\\"receiveStableTokenDelta\\\", receiveStableTokenDelta);\\n        } else {\\n            uint256 extraStableReserveDelta = stableReserveDelta - expectStableDelta;\\n            if (extraStableReserveDelta >= receiveDelta) {\\n                receiveStableTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = receiveDelta - extraStableReserveDelta;\\n                receiveStableTokenDelta = extraStableReserveDelta;\\n            }\\n            console.log(\\\"getReceivedAmount receiveIndexTokenDelta\\\", receiveIndexTokenDelta, \\\"receiveStableTokenDelta\\\", receiveStableTokenDelta);\\n        }\\n        receiveIndexTokenAmount = _getAmount(receiveIndexTokenDelta, price);\\n        receiveStableTokenAmount = receiveStableTokenDelta;\\n        console.log(\\\"getReceivedAmount receiveIndexTokenAmount\\\", receiveIndexTokenAmount, \\\"receiveStableTokenAmount\\\", receiveStableTokenAmount);\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function _getPrice(address _token) internal view returns (uint256) {\\n        return vaultPriceFeed.getPrice(_token);\\n    }\\n}\\n\",\"keccak256\":\"0x45049649b8882759b34e245af94f21123bc98d33fe65821cd070252691f4a458\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap;\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP;\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // 10000 for 100%\\n        uint256 priceSlipP;\\n        uint256 maxPriceDeviationP;\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        uint256 minFundingRate;             // \\u6700\\u5c0f\\u8d44\\u91d1\\u8d39\\u7387   1000000 for 100%\\n        uint256 maxFundingRate;             // \\u6700\\u5927\\u8d44\\u91d1\\u8d39\\u7387   1000000 for 100%\\n        uint256 fundingWeightFactor;        // \\u591a\\u7a7a\\u53cc\\u65b9\\u8d44\\u91d1\\u8d39\\u7387\\u6743\\u91cd\\u7cfb\\u6570 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // \\u6d41\\u52a8\\u6027\\u5bf9\\u4e8e\\u6ea2\\u4ef7\\u7684\\u7cfb\\u6570  10000 for 100%\\n        uint256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0xb40fee3ca5f9b665947d7f34df1a477b7a70be8c09b86371b295371176b4609c\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairLiquidity {\\n}\\n\",\"keccak256\":\"0xca001ad063d0448953eeb8d5ac2c234c60592ac55269edf94f19dccc9e8dd3b8\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit, uint256 _price) external;\\n}\\n\",\"keccak256\":\"0xc76f797033b96609795fd3c21753f4c0764ea40720682f6c12f2e4369151b759\",\"license\":\"UNLICENSED\"},\"contracts/token/PairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPairToken.sol\\\";\\n\\ncontract PairToken is IPairToken, ERC20, Ownable {\\n\\n    address public token0;\\n    address public token1;\\n\\n    mapping(address => bool) public miners;\\n\\n    constructor(address _token0, address _token1) ERC20(\\\"MYX LPs\\\", \\\"MYX-LP\\\") {\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(miners[msg.sender], 'miner forbidden');\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyMiner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMiner {\\n        _burn(account, amount);\\n    }\\n\\n    function setMiner(address account, bool enable) external onlyOwner {\\n        miners[account] = enable;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x978b0fd6de1e1aa8f389df15f59875fb9146108ad9b7aacd46509a6652fd48ae\",\"license\":\"UNLICENSED\"},\"contracts/token/interfaces/IPairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPairToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0x78bc94988822f8020827c58cde53509198946381e496e2b23c737cc0f51f5a85\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200014557601f620035c038819003918201601f19168301916001600160401b038311848410176200014a5780849260e094604052833981010312620001455780516001600160a01b0390818116810362000145576020830151928284168094036200014557604081015190838216809203620001455760608101518481168091036200014557849283916200009b6080850162000160565b91620000b860c0620000b060a0880162000160565b960162000160565b963360005260006020526040600020600160ff1982541617905560805260018060a01b03199889600154161760015588600254161760025587600354161760035516856004541617600455168360055416176005551690600654161760065560405161344a90816200017682396080518181816104c601528181610789015281816112c201526113df0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001455756fe60e0806040526004908136101561001557600080fd5b60009160e08335811c928363055241511461140e575082631848effa146113c95782632bf6e0a514611276578263346d5d7514610f495782633fc8cef314610f20578263422f104314610f0457826346ea87af14610ec65782634b57f96e14610ea75782634c3c0f58146108e9578263653c45e61461088557826386dcb95e146107465782638ffc80a11461063957826392771c3c1461061f57826395082d25146105f75782639cb7de4b1461047c5782639d7de6b31461027c57508163a31a7b4414610253578163b3f006741461022757508063bef77c59146101d8578063e05def241461016c578063eeaa783a146101435763fc2a5b1d1461011857600080fd5b346101405780600319360112610140576001546040516001600160a01b039091168152602090f35b80fd5b50346101405780600319360112610140576003546040516001600160a01b039091168152602090f35b5034610140576080366003190112610140576101b660409161018c611468565b6101a961019761147e565b923033149081156101c2575b5061158c565b6064359160443591612892565b82519182526020820152f35b60ff9150869033815280602052205416386101a3565b5034610140576040366003190112610140576101f2611468565b60406101fc61147e565b9260018060a01b03809316815260076020522091166000526020526020604060002054604051908152f35b90503461024f578160031936011261024f57546040516001600160a01b039091168152602090f35b5080fd5b82346101405780600319360112610140576002546040516001600160a01b039091168152602090f35b909150346104785761029c919261029236611433565b8194913333612892565b92909384151591826103ec575b50506102c0575b6040838382519182526020820152f35b6006546001600160a01b0316803b1561024f57818091602460405180948193632e1a7d4d60e01b8352898b8401525af180156103e1579082916103cd575b50508247106103895780808085335af1610316611658565b501561032257826102b0565b60405162461bcd60e51b8152602081850152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608490fd5b60405162461bcd60e51b8152602081860152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b6103d690611494565b6101405780386102fe565b6040513d84823e3d90fd5b600154604051632f7ce47360e21b8152888101939093526001600160a01b03935090919082908290602490829087165afa91821561046d57908392918592610440575b5050511690600654161438806102a9565b61045f9250803d10610466575b61045781836114f3565b8101906115d0565b388061042f565b503d61044d565b6040513d86823e3d90fd5b8280fd5b83823461024f57604036600319011261024f57610497611468565b90602435918215158093036105f3576040516351331ad760e01b81526020926001600160a01b039291848183817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156105b1578491869189916105bc575b50602460405180948193630935e01b60e21b83523388840152165afa9081156105b1578791610578575b501561054857509084929116825252604082209060ff8019835416911617905580f35b60405162461bcd60e51b8152908101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508481813d83116105aa575b61058f81836114f3565b810103126105a6576105a090611528565b87610525565b8680fd5b503d610585565b6040513d89823e3d90fd5b92505081813d83116105ec575b6105d381836114f3565b810103126105a657846105e68592611514565b896104fb565b503d6105c9565b8380fd5b833461014057806003193601126101405760405168327cb2734119d3b7a9601e1b8152602090f35b83346101405760406101b661063336611433565b90612fd3565b508261064436611433565b60065490939192906001600160a01b03908116803b156104785782849160405192838092630d0e30db60e41b825234905af1801561073b57610723575b506106ad8293602092600654169060405195868094819363a9059cbb60e01b8352349033908401611571565b03925af18015610716576106d3575b60206106cb853486338061195a565b604051908152f35b6020823d821161070e575b816106eb602093836114f3565b810103126101405750916106cb91610704602094611528565b50918193506106bc565b3d91506106de565b50604051903d90823e3d90fd5b602091926107336106ad92611494565b929150610681565b6040513d85823e3d90fd5b83823461024f57604036600319011261024f57610761611468565b9061076a61147e565b6040516351331ad760e01b81526001600160a01b0392906020808284817f000000000000000000000000000000000000000000000000000000000000000089165afa80156105b1578592889161084c575b508190602460405180958193637be53ca160e01b83523389840152165afa9081156105b1578791610811575b506107f29150611535565b8260018060a01b03199416848254161790551690600554161760055580f35b905081813d8311610845575b61082781836114f3565b810103126108415761083b6107f291611528565b876107e7565b8580fd5b503d61081d565b809350828092503d831161087e575b61086581836114f3565b810103126105a657806108788693611514565b906107bb565b503d61085b565b83346101405760a0366003190112610140576106cb6020916108a5611468565b906108c26108b161147e565b913033149081156108d3575061158c565b60843591606435916044359161195a565b60ff9150604090338152808852205416866101a3565b90915034610478576024926108fd3661144e565b91949092809281958515801590610e9e575b61091890611697565b600154604051632f7ce47360e21b81528581018a90529982918b919082906001600160a01b03165afa98891561073b576024989984608052610e7e575b505060805160400151610972906001600160a01b031615156116d4565b600254604051632500ed8d60e21b81528481018a90529760c09189919082906001600160a01b03165afa9687156103e1578297610e4e575b50610a1d604051956109bb876114bd565b601b87526109f8836020987a19d95d135a5b9d131c105b5bdd5b9d081a5b99195e105b5bdd5b9d602a1b8a820152836109f2611771565b916133b3565b610a1760c060805101610a17610a0f8251856124c4565b9151866124c4565b92611799565b92610a40610a3560018060a01b0360805151166132e1565b8060a05215156117bc565b82610a4d60a0518461240a565b98610a5f8a610a5a612dee565b61335b565b6040610a6e60a051835161240a565b910190610a7c8251826117f8565b610b2b575b50505050606097610afa610af48594610ae5610b1297610b009660405190610aa8826114d8565b602382527f6765744d696e744c70416d6f756e74206166746572466565496e646578416d6f8d830152621d5b9d60ea1b60408301526109f26118bb565b610aef868c6117f8565b611799565b91612c83565b9061252c565b95610b09612dee565b906109f26118bb565b60405193845260018060a01b0316908301526040820152f35b86610b408c610b47939e9c979a95969e6117f8565b92516117f8565b93610b8a85604051610b58816114bd565b601f81527f6765744d696e744c70416d6f756e7420696e646578546f74616c44656c7461008c820152846109f2611805565b610b9485836117f8565b92610ba760a060805101948551906124c4565b93610bb287856117f8565b905190612710918203918211610e3b5760609e5090610bd0916124c4565b96610c13888c7f6765744d696e744c70416d6f756e7420657870656374496e64657844656c746160405191610c04836114bd565b808352820152876109f2611831565b610c2460a051608080510151612376565b98909786861115610d1b57505050505092610cbc88610cb3610cc195610c52610b129a9996610b0099611799565b90508d8180821115610d1257610c6791611799565b9283915b7f6765744d696e744c70416d6f756e74206e65656453776170496e64657844656c60405192610c99846114d8565b6022845283015261746160f01b60408301526109f26118eb565b60a0519061252c565b6127f3565b95610afa610af4610cd460a0518a61252c565b98610ae586610cef8c60018060a01b0360805151169b611799565b610d0481610cfb612e31565b866109f2611915565b965050509495839b50610a81565b50928391610c6b565b81939b97949d999650809298955011610d4d575b505050505091610afa610af4610b0093610ae587610b129897610d04565b610dec95979b50610b12989950610b00965092610dd78b9593610d76610de194610de697611799565b9050808c1115610e3257610d8a818d611799565b9687915b7f6765744d696e744c70416d6f756e74206e65656453776170537461626c65446560405192610dbc846114d8565b60238452830152626c746160e81b60408301526109f261185e565b60a05192856127f3565b61240a565b90611799565b95610afa610af488610ae5610e0f8260018060a01b038c6080510151169a611799565b8097610e2682610e1d612e31565b866109f26118bb565b95979850829650610d2f565b8b968791610d8e565b634e487b7160e01b875260118f52602487fd5b610e7091975060c03d8111610e77575b610e6881836114f3565b81019061170f565b95386109aa565b503d610e5e565b81610e9492903d106104665761045781836114f3565b6080523880610955565b5081151561090f565b5082346101405760203660031901126101405760206106cb8335612c83565b83346101405760203660031901126101405760209060ff906040906001600160a01b03610ef1611468565b1681528084522054166040519015158152f35b83346101405760206106cb610f183661144e565b91333361195a565b83346101405780600319360112610140576006546040516001600160a01b039091168152602090f35b83903461024f57610f5936611433565b92610f65841515611697565b600154604051632f7ce47360e21b81528681018490526001600160a01b0395918590829060249082908a165afa94851561073b578395611254575b505084610fb78596604060249701511615156116d4565b60c0816002541660405196878092632500ed8d60e21b8252888c8301525afa94851561073b57839561122c575b50610ff461101f918751166132e1565b916110008315156117bc565b611019604061101085895161240a565b97015195612c83565b9061240a565b61105d8160405161102f816114bd565b601c81527b6765744d696e744c70416d6f756e74206465706f73697444656c746160201b602082015261335b565b6110708161106b86886117f8565b6117f8565b9461108160a08801968751906124c4565b61108f8361106b88856117f8565b9651966127109788039088821161121957906110aa916124c4565b956110f8876040516110bb816114d8565b602181527f6765744465706f736974416d6f756e7420657870656374496e64657844656c746020820152606160f81b6040820152846109f2611831565b9495869586918484106111d7575050509061111291611799565b8181106111bd575060c09161113c915b6111378661112e612e66565b836109f2612eaf565b61252c565b9461115284611149612ee2565b886109f2612f27565b019384518403908482116111aa579061116a916125c0565b935183039283116111975760408461118285856125c0565b6101b68161118e612ee2565b846109f2612f27565b634e487b7160e01b815260118552602490fd5b634e487b7160e01b835260118752602483fd5b61113c919450916111d18360c09496611799565b94611122565b91975091506111e69250611799565b818110611202575060c09161113c91946111378661112e612e66565b935060c0916112148561113c93611799565b611122565b634e487b7160e01b875260118b52602487fd5b61101f91955061124c610ff49160c03d8111610e7757610e6881836114f3565b959150610fe4565b60249550908161126f92903d106104665761045781836114f3565b9387610fa0565b83823461024f57604036600319011261024f5780356001600160a01b03818116918290036105f357602435928184168094036113c5576040516351331ad760e01b8152602091828282817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156105b1578392889261138b575b506024906040519586938492637be53ca160e01b84523390840152165afa908115611380578591611349575b5061132c9150611535565b60018060a01b031990816001541617600155600254161760025580f35b905081813d8311611379575b61135f81836114f3565b810103126105f35761137361132c91611528565b85611321565b503d611355565b6040513d87823e3d90fd5b8381949293503d83116113be575b6113a381836114f3565b810103126105a65760246113b78493611514565b91906112f5565b503d611399565b8480fd5b83346101405780600319360112610140576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b84903461024f578160031936011261024f576005546001600160a01b03168152602090f35b6040906003190112611449576004359060243590565b600080fd5b606090600319011261144957600435906024359060443590565b600435906001600160a01b038216820361144957565b602435906001600160a01b038216820361144957565b6001600160401b0381116114a757604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176114a757604052565b606081019081106001600160401b038211176114a757604052565b90601f801991011681019081106001600160401b038211176114a757604052565b51906001600160a01b038216820361144957565b5190811515820361144957565b1561153c57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b1561159357565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b908160e0910312611449576040519060e08201908282106001600160401b038311176114a75760c09160405261160581611514565b835261161360208201611514565b602084015261162460408201611514565b604084015261163560608201611528565b60608401526080810151608084015260a081015160a0840152015160c082015290565b3d15611692573d906001600160401b0382116114a75760405191611686601f8201601f1916602001846114f3565b82523d6000602084013e565b606090565b1561169e57565b60405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b156116db57565b60405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103830b4b960a11b6044820152606490fd5b908160c0910312611449576040519060c08201908282106001600160401b038311176114a75760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b6040519061177e826114bd565b600c82526b1cdd18589b19505b5bdd5b9d60a21b6020830152565b919082039182116117a657565b634e487b7160e01b600052601160045260246000fd5b156117c357565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606490fd5b919082018092116117a657565b60405190611812826114bd565b601082526f737461626c65546f74616c44656c746160801b6020830152565b6040519061183e826114bd565b6011825270657870656374537461626c6544656c746160781b6020830152565b6040519061186b826114bd565b600f82526e73776170537461626c6544656c746160881b6020830152565b60405190611896826114bd565b60168252756164644c697175696469747920736c697044656c746160501b6020830152565b604051906118c8826114bd565b601482527318599d195c91995954dd18589b19505b5bdd5b9d60621b6020830152565b604051906118f8826114bd565b600e82526d73776170496e64657844656c746160901b6020830152565b60405190611922826114bd565b601382527218599d195c919959525b99195e105b5bdd5b9d606a1b6020830152565b6040919493926060820195825260208201520152565b93909192602460009582158015906120fd575b61197690611697565b600154604051632f7ce47360e21b8152600481018890529260e09184919082906001600160a01b03165afa9182156105b157906024929188926120dd575b5060408201516119ce906001600160a01b031615156116d4565b600254604051632500ed8d60e21b8152600481018990529360c09185919082906001600160a01b03165afa9283156120d25790859189946120ab575b5090611a7e91611a4e82604051611a20816114bd565b6018815277185919131a5c5d5a591a5d1e481a5b99195e105b5bdd5b9d60421b6020820152886109f2611771565b8351611a68908790309084906001600160a01b0316612164565b60208401513091906001600160a01b0316612164565b60c0810190611b51611b4a611a9f611a978551886124c4565b9451886124c4565b93611b0785604051611ab0816114bd565b601b81527a185919131a5c5d5a591a5d1e481a5b99195e119959505b5bdd5b9d602a1b60208201528360405191611ae6836114bd565b600f83526e1cdd18589b19519959505b5bdd5b9d608a1b60208401526133b3565b8351600454611b249183916001600160a01b039081169116612106565b6020840151600454611b449187916001600160a01b039081169116612106565b86611799565b9286611799565b8151909390611b68906001600160a01b03166132e1565b90611b748215156117bc565b611b7f82825161240a565b611b89838661240a565b60c0528560408c930191611b9e8351826117f8565b611ddd575b50611bc49350611bbb929150610aef9060c0516117f8565b610afa89612c83565b97611c1184604051611bd5816114bd565b601e81527f6164644c697175696469747920696e6465784465706f73697444656c746100006020820152611c076118bb565b9060c051906133b3565b60408201516001600160a01b0316803b1561024f5781611c4a81928c6040519485809481936340c10f1960e01b83523060048401611571565b03925af180156103e157611dce575b5060018060a01b0360408301511681526007602052604081209660018060a01b03169687600052602052611c92896040600020546117f8565b60018060a01b0360408401511682526007602052604082208860005260205260406000205560018060a01b0360025416803b1561024f578185611cef9286838d60405196879586948593633431529d60e21b855260048501611944565b03925af180156103e157611dba575b50509181611d65827fd92dda7384b5f0fa573be9bbf63d63ac81a5bbb08ebc31f00c0f066e50239609979695611d4c611da49660018060a01b0383511660018060a01b036002541690612106565b602001516002546001600160a01b039081169116612106565b60405190611d72826114bd565b602082527f6164644c6971756964697479206166746572466565496e646578416d6f756e7460208301526109f26118bb565b611db48660405193849384611944565b0390a390565b611dc48291611494565b6101405780611cfe565b611dd790611494565b38611c59565b90610b40611dee9260c051906117f8565b90611e3182604051611dff816114bd565b601c81527b6164644c697175696469747920696e646578546f74616c44656c746160201b6020820152836109f2611805565b611e3b82826117f8565b90611e4c60a08701928351906124c4565b91611e5784836117f8565b9051612710808281031161209657928f92611e7f90611bbb989693611bc49a989603906124c4565b94611ec386604051611e90816114bd565b601d81527f6164644c697175696469747920657870656374496e64657844656c74610000006020820152856109f2611831565b611ed18760808c0151612376565b96909584841115611fa75750505093611f6893610cbc87611f6195611efc611f5a96611f829a611799565b905061113760c05182808211600014611f9f57611f1891611799565b80925b60405190611f28826114bd565b601f82527f6164644c6971756964697479206e65656453776170496e64657844656c74610060208301526109f26118eb565b938461252c565b8097611799565b85516005549197916001600160a01b039081169116612106565b611f9785611f8e611889565b836109f2611915565b908538611ba3565b508092611f1b565b809298969597945081935011611fc3575b505050505050611f97565b612047965092612040959492611fdf610de193610de696611799565b9550858d8181111561208a5761203a91611ff891611799565b80975b60405190612008826114bd565b602082527f6164644c6971756964697479206e65656453776170537461626c6544656c746160208301526109f261185e565b856127f3565b8096611799565b602084015160055491969161206a9183916001600160a01b039081169116612106565b61207f86612076611889565b836109f26118bb565b8a3880808080611fb8565b61203a91508097611ffb565b50634e487b7160e01b8f52601160045260248ffd5b611a7e929194506120ca9060c03d60c011610e7757610e6881836114f3565b939091611a0a565b6040513d8a823e3d90fd5b6120f691925060e03d81116104665761045781836114f3565b90386119b4565b5083151561196d565b61213b612140939261212d60405194859263a9059cbb60e01b602085015260248401611571565b03601f1981018452836114f3565b61218c565b565b6001600160a01b03918216815291166020820152604081019190915260600190565b9061213b9061212d612140956040519586936323b872dd60e01b602086015260248501612142565b6040516121ea916001600160a01b03166121a5826114bd565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16121e4611658565b91612279565b805182811591821561225a575b50509050156122035750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b838092935001031261144957816122719101611528565b8082386121f7565b919290156122db575081511561228d575090565b3b156122965790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122ee5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612312906024830190612316565b0390fd5b919082519283825260005b848110612342575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612321565b8115612360570490565b634e487b7160e01b600052601260045260246000fd5b919080156123d55782156123a4576123996123946123a0928561240a565b6126b0565b8093612356565b9190565b60405162461bcd60e51b8152602060048201526009602482015268496e76616c6964206b60b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606490fd5b90600019818309818302918280831092039180830392146124ae5768327cb2734119d3b7a9601e1b9082821115612471577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9060001981830981830291828083109203918083039214612521576127109082821115612471577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906125bd9250612356565b90565b906127109060001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b9160001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b80156127ed5761277b816000908360801c806127e1575b508060401c806127d4575b508060201c806127c7575b508060101c806127ba575b508060081c806127ad575b508060041c806127a0575b508060021c80612793575b50600191828092811c61278c575b1c1b6127238185612356565b01811c6127308185612356565b01811c61273d8185612356565b01811c61274a8185612356565b01811c6127578185612356565b01811c6127648185612356565b01811c6127718185612356565b01901c8092612356565b80821015612787575090565b905090565b0181612717565b6002915091019038612709565b60049150910190386126fe565b60089150910190386126f3565b60109150910190386126e8565b60209150910190386126dd565b60409150910190386126d2565b915050608090386126c7565b50600090565b9091811561285c5782151580612853575b1561281c57612816826125bd946117f8565b9161263a565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207265736572766560881b6044820152606490fd5b50801515612804565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b90939260006128a2821515611697565b60015460408051632f7ce47360e21b815260048082018890529198926001600160a01b03929060e0908390602490829087165afa918215612c79578592612c59575b50898201926128f78185511615156116d4565b80845116865260209360078552818c88209916988988528552878c88205410612c1f5791818a999897959360c09d979593600254169d8e60248a519e8f928391632500ed8d60e21b8352888301525afa9b8c15612c1557879c612bf5575b50612960898c612fd3565b9e909c8d61297382518984015190611799565b10612bb2578f908060608c61298d93015191015190611799565b10612b6f57803b15612b4457878f6129be928f8f84908e5196879586948593631a8c15b360e21b85528d8501611944565b03925af18015612b3a57612b5c575b5081815116803b15612b4457876129fb81928c8c51948580948193632770a7eb60e21b8352308c8401611571565b03925af18015612b3a57908891612b48575b5050818151168752600785528787208a600052855281612a318a8a60002054611799565b9151168752600785528787208a600052855287600020558060025416938184511694803b15612b4457878d612a7e9289838d51809681958294630d172a0160e01b9e8f85528d8501612142565b03925af18015612b3a57908891612b26575b505081600254169301511692823b1561084157908580949392612abf8f8a519889978896879586528501612142565b03925af18015612b1c57612b08575b5050517f0c7095efab4844307a2d270e6feda743289e3f8bd8a4fa71bc0006ef39bb7793918190612b0190898884611944565b0390a39190565b612b128291611494565b6101405780612ace565b83513d84823e3d90fd5b612b2f90611494565b6105a6578638612a90565b89513d8a823e3d90fd5b8780fd5b612b5190611494565b6105a6578638612a0d565b612b6890979197611494565b95386129cd565b885162461bcd60e51b8152808501879052601f60248201527f696e73756666696369656e7420737461626c65546f6b656e20616d6f756e74006044820152606490fd5b895162461bcd60e51b8152808601889052601e60248201527f696e73756666696369656e7420696e646578546f6b656e20616d6f756e7400006044820152606490fd5b612c0e919c5060c03d8111610e7757610e6881836114f3565b9a38612955565b88513d89823e3d90fd5b8b5162461bcd60e51b81528084018690526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606490fd5b612c7291925060e03d81116104665761045781836114f3565b90386128e4565b8a513d87823e3d90fd5b90602460018060a01b0380600154169360e0604095865194858092632f7ce47360e21b82528560048301525afa928315612dc357600093612dce575b5060c08260025416916024875180948193632500ed8d60e21b835260048301525afa8015612dc357612d1491600091612da5575b5085612d0b612d04858751166132e1565b835161240a565b910151906117f8565b918215612d915784015184516318160ddd60e01b81529160209183916004918391165afa938415612d875750600093612d54575b50916125bd919261252c565b6020813d8211612d7f575b81612d6c602093836114f3565b810103126105f3575192506125bd612d48565b3d9150612d5f565b513d6000823e3d90fd5b5068327cb2734119d3b7a9601e1b93505050565b612dbd915060c03d8111610e7757610e6881836114f3565b38612cf3565b85513d6000823e3d90fd5b612de791935060e03d81116104665761045781836114f3565b9138612cbf565b60405190612dfb826114d8565b60218252606160f81b6040837f6765744d696e744c70416d6f756e7420696e6465784465706f73697444656c7460208201520152565b60405190612e3e826114bd565b60198252786765744d696e744c70416d6f756e7420736c697044656c746160381b6020830152565b60405190612e73826114d8565b6027825266656e44656c746160c81b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578546f6b60208201520152565b60405190612ebc826114bd565b60178252766465706f736974537461626c65546f6b656e44656c746160481b6020830152565b60405190612eef826114d8565b60238252621d5b9d60ea1b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578416d6f60208201520152565b60405190612f34826114bd565b601382527219195c1bdcda5d14dd18589b19505b5bdd5b9d606a1b6020830152565b60405190612f63826114d8565b60288252676b656e44656c746160c01b6040837f6765745265636569766564416d6f756e742072656365697665496e646578546f60208201520152565b60405190612fad826114bd565b601782527672656365697665537461626c65546f6b656e44656c746160481b6020830152565b9190612fe0811515611697565b60015460408051632f7ce47360e21b8152600481018690529092916001600160a01b039060e0908390602490829085165afa9182156132d65790602492916000926132b6575b5061303781868401511615156116d4565b60c08160025416865194858092632500ed8d60e21b82528b60048301525afa928315612dc35760009361328e575b50613075613099918351166132e1565b936130818515156117bc565b6110198661309087875161240a565b95015198612c83565b916130d88386516130a9816114bd565b601e81527f6765745265636569766564416d6f756e74207265636569766544656c74610000602082015261335b565b6130f660a06130eb85610aef8b866117f8565b9301928351906124c4565b9161310584610aef8a856117f8565b90516127109081039081116117a65761311d916124c4565b61316981875161312c816114d8565b602281527f6765745265636569766564416d6f756e7420657870656374496e64657844656c602082015261746160f01b89820152856109f2611831565b6000908198848411600014613246575050509061318591611799565b81811061322a57506131ac6123a09286925b611137846131a3612f56565b836109f2612fa0565b92838151916131ba836114d8565b602983527f6765745265636569766564416d6f756e742072656365697665496e646578546f6020840152681ad95b905b5bdd5b9d60ba1b818401525191613200836114bd565b60188352771c9958d95a5d9954dd18589b19551bdad95b905b5bdd5b9d60421b60208401526133b3565b6123a092955061323e816131ac9293611799565b958692613197565b90919493506123a095985061325b9250611799565b81811061327657506131ac90958692611137846131a3612f56565b9150613285826131ac92611799565b91958692613197565b6130999193506132ae6130759160c03d8111610e7757610e6881836114f3565b939150613065565b6132cf91925060e03d81116104665761045781836114f3565b9038613026565b84513d6000823e3d90fd5b6003546040516341976e0960e01b81526001600160a01b0392831660048201529160209183916024918391165afa90811561334f57600091613321575090565b906020823d8211613347575b8161333a602093836114f3565b8101031261014057505190565b3d915061332d565b6040513d6000823e3d90fd5b6000919082916133a0604051809261338c6020830195632d839cb360e21b8752604060248501526064840190612316565b90604483015203601f1981018352826114f3565b51906a636f6e736f6c652e6c6f675afa50565b906133a06000949385946134006040519485936133e9602086019863c67ea9d160e01b8a526080602488015260a4870190612316565b916044860152602319858303016064860152612316565b90608483015203601f1981018352826114f356fea2646970667358221220cdb03fcbca06cd8cea5cae90e2a562471c1bfbb57bab80b5c8f556e33843cd7e64736f6c63430008110033",
  "deployedBytecode": "0x60e0806040526004908136101561001557600080fd5b60009160e08335811c928363055241511461140e575082631848effa146113c95782632bf6e0a514611276578263346d5d7514610f495782633fc8cef314610f20578263422f104314610f0457826346ea87af14610ec65782634b57f96e14610ea75782634c3c0f58146108e9578263653c45e61461088557826386dcb95e146107465782638ffc80a11461063957826392771c3c1461061f57826395082d25146105f75782639cb7de4b1461047c5782639d7de6b31461027c57508163a31a7b4414610253578163b3f006741461022757508063bef77c59146101d8578063e05def241461016c578063eeaa783a146101435763fc2a5b1d1461011857600080fd5b346101405780600319360112610140576001546040516001600160a01b039091168152602090f35b80fd5b50346101405780600319360112610140576003546040516001600160a01b039091168152602090f35b5034610140576080366003190112610140576101b660409161018c611468565b6101a961019761147e565b923033149081156101c2575b5061158c565b6064359160443591612892565b82519182526020820152f35b60ff9150869033815280602052205416386101a3565b5034610140576040366003190112610140576101f2611468565b60406101fc61147e565b9260018060a01b03809316815260076020522091166000526020526020604060002054604051908152f35b90503461024f578160031936011261024f57546040516001600160a01b039091168152602090f35b5080fd5b82346101405780600319360112610140576002546040516001600160a01b039091168152602090f35b909150346104785761029c919261029236611433565b8194913333612892565b92909384151591826103ec575b50506102c0575b6040838382519182526020820152f35b6006546001600160a01b0316803b1561024f57818091602460405180948193632e1a7d4d60e01b8352898b8401525af180156103e1579082916103cd575b50508247106103895780808085335af1610316611658565b501561032257826102b0565b60405162461bcd60e51b8152602081850152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608490fd5b60405162461bcd60e51b8152602081860152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b6103d690611494565b6101405780386102fe565b6040513d84823e3d90fd5b600154604051632f7ce47360e21b8152888101939093526001600160a01b03935090919082908290602490829087165afa91821561046d57908392918592610440575b5050511690600654161438806102a9565b61045f9250803d10610466575b61045781836114f3565b8101906115d0565b388061042f565b503d61044d565b6040513d86823e3d90fd5b8280fd5b83823461024f57604036600319011261024f57610497611468565b90602435918215158093036105f3576040516351331ad760e01b81526020926001600160a01b039291848183817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156105b1578491869189916105bc575b50602460405180948193630935e01b60e21b83523388840152165afa9081156105b1578791610578575b501561054857509084929116825252604082209060ff8019835416911617905580f35b60405162461bcd60e51b8152908101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508481813d83116105aa575b61058f81836114f3565b810103126105a6576105a090611528565b87610525565b8680fd5b503d610585565b6040513d89823e3d90fd5b92505081813d83116105ec575b6105d381836114f3565b810103126105a657846105e68592611514565b896104fb565b503d6105c9565b8380fd5b833461014057806003193601126101405760405168327cb2734119d3b7a9601e1b8152602090f35b83346101405760406101b661063336611433565b90612fd3565b508261064436611433565b60065490939192906001600160a01b03908116803b156104785782849160405192838092630d0e30db60e41b825234905af1801561073b57610723575b506106ad8293602092600654169060405195868094819363a9059cbb60e01b8352349033908401611571565b03925af18015610716576106d3575b60206106cb853486338061195a565b604051908152f35b6020823d821161070e575b816106eb602093836114f3565b810103126101405750916106cb91610704602094611528565b50918193506106bc565b3d91506106de565b50604051903d90823e3d90fd5b602091926107336106ad92611494565b929150610681565b6040513d85823e3d90fd5b83823461024f57604036600319011261024f57610761611468565b9061076a61147e565b6040516351331ad760e01b81526001600160a01b0392906020808284817f000000000000000000000000000000000000000000000000000000000000000089165afa80156105b1578592889161084c575b508190602460405180958193637be53ca160e01b83523389840152165afa9081156105b1578791610811575b506107f29150611535565b8260018060a01b03199416848254161790551690600554161760055580f35b905081813d8311610845575b61082781836114f3565b810103126108415761083b6107f291611528565b876107e7565b8580fd5b503d61081d565b809350828092503d831161087e575b61086581836114f3565b810103126105a657806108788693611514565b906107bb565b503d61085b565b83346101405760a0366003190112610140576106cb6020916108a5611468565b906108c26108b161147e565b913033149081156108d3575061158c565b60843591606435916044359161195a565b60ff9150604090338152808852205416866101a3565b90915034610478576024926108fd3661144e565b91949092809281958515801590610e9e575b61091890611697565b600154604051632f7ce47360e21b81528581018a90529982918b919082906001600160a01b03165afa98891561073b576024989984608052610e7e575b505060805160400151610972906001600160a01b031615156116d4565b600254604051632500ed8d60e21b81528481018a90529760c09189919082906001600160a01b03165afa9687156103e1578297610e4e575b50610a1d604051956109bb876114bd565b601b87526109f8836020987a19d95d135a5b9d131c105b5bdd5b9d081a5b99195e105b5bdd5b9d602a1b8a820152836109f2611771565b916133b3565b610a1760c060805101610a17610a0f8251856124c4565b9151866124c4565b92611799565b92610a40610a3560018060a01b0360805151166132e1565b8060a05215156117bc565b82610a4d60a0518461240a565b98610a5f8a610a5a612dee565b61335b565b6040610a6e60a051835161240a565b910190610a7c8251826117f8565b610b2b575b50505050606097610afa610af48594610ae5610b1297610b009660405190610aa8826114d8565b602382527f6765744d696e744c70416d6f756e74206166746572466565496e646578416d6f8d830152621d5b9d60ea1b60408301526109f26118bb565b610aef868c6117f8565b611799565b91612c83565b9061252c565b95610b09612dee565b906109f26118bb565b60405193845260018060a01b0316908301526040820152f35b86610b408c610b47939e9c979a95969e6117f8565b92516117f8565b93610b8a85604051610b58816114bd565b601f81527f6765744d696e744c70416d6f756e7420696e646578546f74616c44656c7461008c820152846109f2611805565b610b9485836117f8565b92610ba760a060805101948551906124c4565b93610bb287856117f8565b905190612710918203918211610e3b5760609e5090610bd0916124c4565b96610c13888c7f6765744d696e744c70416d6f756e7420657870656374496e64657844656c746160405191610c04836114bd565b808352820152876109f2611831565b610c2460a051608080510151612376565b98909786861115610d1b57505050505092610cbc88610cb3610cc195610c52610b129a9996610b0099611799565b90508d8180821115610d1257610c6791611799565b9283915b7f6765744d696e744c70416d6f756e74206e65656453776170496e64657844656c60405192610c99846114d8565b6022845283015261746160f01b60408301526109f26118eb565b60a0519061252c565b6127f3565b95610afa610af4610cd460a0518a61252c565b98610ae586610cef8c60018060a01b0360805151169b611799565b610d0481610cfb612e31565b866109f2611915565b965050509495839b50610a81565b50928391610c6b565b81939b97949d999650809298955011610d4d575b505050505091610afa610af4610b0093610ae587610b129897610d04565b610dec95979b50610b12989950610b00965092610dd78b9593610d76610de194610de697611799565b9050808c1115610e3257610d8a818d611799565b9687915b7f6765744d696e744c70416d6f756e74206e65656453776170537461626c65446560405192610dbc846114d8565b60238452830152626c746160e81b60408301526109f261185e565b60a05192856127f3565b61240a565b90611799565b95610afa610af488610ae5610e0f8260018060a01b038c6080510151169a611799565b8097610e2682610e1d612e31565b866109f26118bb565b95979850829650610d2f565b8b968791610d8e565b634e487b7160e01b875260118f52602487fd5b610e7091975060c03d8111610e77575b610e6881836114f3565b81019061170f565b95386109aa565b503d610e5e565b81610e9492903d106104665761045781836114f3565b6080523880610955565b5081151561090f565b5082346101405760203660031901126101405760206106cb8335612c83565b83346101405760203660031901126101405760209060ff906040906001600160a01b03610ef1611468565b1681528084522054166040519015158152f35b83346101405760206106cb610f183661144e565b91333361195a565b83346101405780600319360112610140576006546040516001600160a01b039091168152602090f35b83903461024f57610f5936611433565b92610f65841515611697565b600154604051632f7ce47360e21b81528681018490526001600160a01b0395918590829060249082908a165afa94851561073b578395611254575b505084610fb78596604060249701511615156116d4565b60c0816002541660405196878092632500ed8d60e21b8252888c8301525afa94851561073b57839561122c575b50610ff461101f918751166132e1565b916110008315156117bc565b611019604061101085895161240a565b97015195612c83565b9061240a565b61105d8160405161102f816114bd565b601c81527b6765744d696e744c70416d6f756e74206465706f73697444656c746160201b602082015261335b565b6110708161106b86886117f8565b6117f8565b9461108160a08801968751906124c4565b61108f8361106b88856117f8565b9651966127109788039088821161121957906110aa916124c4565b956110f8876040516110bb816114d8565b602181527f6765744465706f736974416d6f756e7420657870656374496e64657844656c746020820152606160f81b6040820152846109f2611831565b9495869586918484106111d7575050509061111291611799565b8181106111bd575060c09161113c915b6111378661112e612e66565b836109f2612eaf565b61252c565b9461115284611149612ee2565b886109f2612f27565b019384518403908482116111aa579061116a916125c0565b935183039283116111975760408461118285856125c0565b6101b68161118e612ee2565b846109f2612f27565b634e487b7160e01b815260118552602490fd5b634e487b7160e01b835260118752602483fd5b61113c919450916111d18360c09496611799565b94611122565b91975091506111e69250611799565b818110611202575060c09161113c91946111378661112e612e66565b935060c0916112148561113c93611799565b611122565b634e487b7160e01b875260118b52602487fd5b61101f91955061124c610ff49160c03d8111610e7757610e6881836114f3565b959150610fe4565b60249550908161126f92903d106104665761045781836114f3565b9387610fa0565b83823461024f57604036600319011261024f5780356001600160a01b03818116918290036105f357602435928184168094036113c5576040516351331ad760e01b8152602091828282817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156105b1578392889261138b575b506024906040519586938492637be53ca160e01b84523390840152165afa908115611380578591611349575b5061132c9150611535565b60018060a01b031990816001541617600155600254161760025580f35b905081813d8311611379575b61135f81836114f3565b810103126105f35761137361132c91611528565b85611321565b503d611355565b6040513d87823e3d90fd5b8381949293503d83116113be575b6113a381836114f3565b810103126105a65760246113b78493611514565b91906112f5565b503d611399565b8480fd5b83346101405780600319360112610140576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b84903461024f578160031936011261024f576005546001600160a01b03168152602090f35b6040906003190112611449576004359060243590565b600080fd5b606090600319011261144957600435906024359060443590565b600435906001600160a01b038216820361144957565b602435906001600160a01b038216820361144957565b6001600160401b0381116114a757604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176114a757604052565b606081019081106001600160401b038211176114a757604052565b90601f801991011681019081106001600160401b038211176114a757604052565b51906001600160a01b038216820361144957565b5190811515820361144957565b1561153c57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b1561159357565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b908160e0910312611449576040519060e08201908282106001600160401b038311176114a75760c09160405261160581611514565b835261161360208201611514565b602084015261162460408201611514565b604084015261163560608201611528565b60608401526080810151608084015260a081015160a0840152015160c082015290565b3d15611692573d906001600160401b0382116114a75760405191611686601f8201601f1916602001846114f3565b82523d6000602084013e565b606090565b1561169e57565b60405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b156116db57565b60405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103830b4b960a11b6044820152606490fd5b908160c0910312611449576040519060c08201908282106001600160401b038311176114a75760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b6040519061177e826114bd565b600c82526b1cdd18589b19505b5bdd5b9d60a21b6020830152565b919082039182116117a657565b634e487b7160e01b600052601160045260246000fd5b156117c357565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606490fd5b919082018092116117a657565b60405190611812826114bd565b601082526f737461626c65546f74616c44656c746160801b6020830152565b6040519061183e826114bd565b6011825270657870656374537461626c6544656c746160781b6020830152565b6040519061186b826114bd565b600f82526e73776170537461626c6544656c746160881b6020830152565b60405190611896826114bd565b60168252756164644c697175696469747920736c697044656c746160501b6020830152565b604051906118c8826114bd565b601482527318599d195c91995954dd18589b19505b5bdd5b9d60621b6020830152565b604051906118f8826114bd565b600e82526d73776170496e64657844656c746160901b6020830152565b60405190611922826114bd565b601382527218599d195c919959525b99195e105b5bdd5b9d606a1b6020830152565b6040919493926060820195825260208201520152565b93909192602460009582158015906120fd575b61197690611697565b600154604051632f7ce47360e21b8152600481018890529260e09184919082906001600160a01b03165afa9182156105b157906024929188926120dd575b5060408201516119ce906001600160a01b031615156116d4565b600254604051632500ed8d60e21b8152600481018990529360c09185919082906001600160a01b03165afa9283156120d25790859189946120ab575b5090611a7e91611a4e82604051611a20816114bd565b6018815277185919131a5c5d5a591a5d1e481a5b99195e105b5bdd5b9d60421b6020820152886109f2611771565b8351611a68908790309084906001600160a01b0316612164565b60208401513091906001600160a01b0316612164565b60c0810190611b51611b4a611a9f611a978551886124c4565b9451886124c4565b93611b0785604051611ab0816114bd565b601b81527a185919131a5c5d5a591a5d1e481a5b99195e119959505b5bdd5b9d602a1b60208201528360405191611ae6836114bd565b600f83526e1cdd18589b19519959505b5bdd5b9d608a1b60208401526133b3565b8351600454611b249183916001600160a01b039081169116612106565b6020840151600454611b449187916001600160a01b039081169116612106565b86611799565b9286611799565b8151909390611b68906001600160a01b03166132e1565b90611b748215156117bc565b611b7f82825161240a565b611b89838661240a565b60c0528560408c930191611b9e8351826117f8565b611ddd575b50611bc49350611bbb929150610aef9060c0516117f8565b610afa89612c83565b97611c1184604051611bd5816114bd565b601e81527f6164644c697175696469747920696e6465784465706f73697444656c746100006020820152611c076118bb565b9060c051906133b3565b60408201516001600160a01b0316803b1561024f5781611c4a81928c6040519485809481936340c10f1960e01b83523060048401611571565b03925af180156103e157611dce575b5060018060a01b0360408301511681526007602052604081209660018060a01b03169687600052602052611c92896040600020546117f8565b60018060a01b0360408401511682526007602052604082208860005260205260406000205560018060a01b0360025416803b1561024f578185611cef9286838d60405196879586948593633431529d60e21b855260048501611944565b03925af180156103e157611dba575b50509181611d65827fd92dda7384b5f0fa573be9bbf63d63ac81a5bbb08ebc31f00c0f066e50239609979695611d4c611da49660018060a01b0383511660018060a01b036002541690612106565b602001516002546001600160a01b039081169116612106565b60405190611d72826114bd565b602082527f6164644c6971756964697479206166746572466565496e646578416d6f756e7460208301526109f26118bb565b611db48660405193849384611944565b0390a390565b611dc48291611494565b6101405780611cfe565b611dd790611494565b38611c59565b90610b40611dee9260c051906117f8565b90611e3182604051611dff816114bd565b601c81527b6164644c697175696469747920696e646578546f74616c44656c746160201b6020820152836109f2611805565b611e3b82826117f8565b90611e4c60a08701928351906124c4565b91611e5784836117f8565b9051612710808281031161209657928f92611e7f90611bbb989693611bc49a989603906124c4565b94611ec386604051611e90816114bd565b601d81527f6164644c697175696469747920657870656374496e64657844656c74610000006020820152856109f2611831565b611ed18760808c0151612376565b96909584841115611fa75750505093611f6893610cbc87611f6195611efc611f5a96611f829a611799565b905061113760c05182808211600014611f9f57611f1891611799565b80925b60405190611f28826114bd565b601f82527f6164644c6971756964697479206e65656453776170496e64657844656c74610060208301526109f26118eb565b938461252c565b8097611799565b85516005549197916001600160a01b039081169116612106565b611f9785611f8e611889565b836109f2611915565b908538611ba3565b508092611f1b565b809298969597945081935011611fc3575b505050505050611f97565b612047965092612040959492611fdf610de193610de696611799565b9550858d8181111561208a5761203a91611ff891611799565b80975b60405190612008826114bd565b602082527f6164644c6971756964697479206e65656453776170537461626c6544656c746160208301526109f261185e565b856127f3565b8096611799565b602084015160055491969161206a9183916001600160a01b039081169116612106565b61207f86612076611889565b836109f26118bb565b8a3880808080611fb8565b61203a91508097611ffb565b50634e487b7160e01b8f52601160045260248ffd5b611a7e929194506120ca9060c03d60c011610e7757610e6881836114f3565b939091611a0a565b6040513d8a823e3d90fd5b6120f691925060e03d81116104665761045781836114f3565b90386119b4565b5083151561196d565b61213b612140939261212d60405194859263a9059cbb60e01b602085015260248401611571565b03601f1981018452836114f3565b61218c565b565b6001600160a01b03918216815291166020820152604081019190915260600190565b9061213b9061212d612140956040519586936323b872dd60e01b602086015260248501612142565b6040516121ea916001600160a01b03166121a5826114bd565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16121e4611658565b91612279565b805182811591821561225a575b50509050156122035750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b838092935001031261144957816122719101611528565b8082386121f7565b919290156122db575081511561228d575090565b3b156122965790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122ee5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612312906024830190612316565b0390fd5b919082519283825260005b848110612342575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612321565b8115612360570490565b634e487b7160e01b600052601260045260246000fd5b919080156123d55782156123a4576123996123946123a0928561240a565b6126b0565b8093612356565b9190565b60405162461bcd60e51b8152602060048201526009602482015268496e76616c6964206b60b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606490fd5b90600019818309818302918280831092039180830392146124ae5768327cb2734119d3b7a9601e1b9082821115612471577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9060001981830981830291828083109203918083039214612521576127109082821115612471577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906125bd9250612356565b90565b906127109060001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b9160001982840992828102928380861095039480860395146125b05784831115612471578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b80156127ed5761277b816000908360801c806127e1575b508060401c806127d4575b508060201c806127c7575b508060101c806127ba575b508060081c806127ad575b508060041c806127a0575b508060021c80612793575b50600191828092811c61278c575b1c1b6127238185612356565b01811c6127308185612356565b01811c61273d8185612356565b01811c61274a8185612356565b01811c6127578185612356565b01811c6127648185612356565b01811c6127718185612356565b01901c8092612356565b80821015612787575090565b905090565b0181612717565b6002915091019038612709565b60049150910190386126fe565b60089150910190386126f3565b60109150910190386126e8565b60209150910190386126dd565b60409150910190386126d2565b915050608090386126c7565b50600090565b9091811561285c5782151580612853575b1561281c57612816826125bd946117f8565b9161263a565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207265736572766560881b6044820152606490fd5b50801515612804565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b90939260006128a2821515611697565b60015460408051632f7ce47360e21b815260048082018890529198926001600160a01b03929060e0908390602490829087165afa918215612c79578592612c59575b50898201926128f78185511615156116d4565b80845116865260209360078552818c88209916988988528552878c88205410612c1f5791818a999897959360c09d979593600254169d8e60248a519e8f928391632500ed8d60e21b8352888301525afa9b8c15612c1557879c612bf5575b50612960898c612fd3565b9e909c8d61297382518984015190611799565b10612bb2578f908060608c61298d93015191015190611799565b10612b6f57803b15612b4457878f6129be928f8f84908e5196879586948593631a8c15b360e21b85528d8501611944565b03925af18015612b3a57612b5c575b5081815116803b15612b4457876129fb81928c8c51948580948193632770a7eb60e21b8352308c8401611571565b03925af18015612b3a57908891612b48575b5050818151168752600785528787208a600052855281612a318a8a60002054611799565b9151168752600785528787208a600052855287600020558060025416938184511694803b15612b4457878d612a7e9289838d51809681958294630d172a0160e01b9e8f85528d8501612142565b03925af18015612b3a57908891612b26575b505081600254169301511692823b1561084157908580949392612abf8f8a519889978896879586528501612142565b03925af18015612b1c57612b08575b5050517f0c7095efab4844307a2d270e6feda743289e3f8bd8a4fa71bc0006ef39bb7793918190612b0190898884611944565b0390a39190565b612b128291611494565b6101405780612ace565b83513d84823e3d90fd5b612b2f90611494565b6105a6578638612a90565b89513d8a823e3d90fd5b8780fd5b612b5190611494565b6105a6578638612a0d565b612b6890979197611494565b95386129cd565b885162461bcd60e51b8152808501879052601f60248201527f696e73756666696369656e7420737461626c65546f6b656e20616d6f756e74006044820152606490fd5b895162461bcd60e51b8152808601889052601e60248201527f696e73756666696369656e7420696e646578546f6b656e20616d6f756e7400006044820152606490fd5b612c0e919c5060c03d8111610e7757610e6881836114f3565b9a38612955565b88513d89823e3d90fd5b8b5162461bcd60e51b81528084018690526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606490fd5b612c7291925060e03d81116104665761045781836114f3565b90386128e4565b8a513d87823e3d90fd5b90602460018060a01b0380600154169360e0604095865194858092632f7ce47360e21b82528560048301525afa928315612dc357600093612dce575b5060c08260025416916024875180948193632500ed8d60e21b835260048301525afa8015612dc357612d1491600091612da5575b5085612d0b612d04858751166132e1565b835161240a565b910151906117f8565b918215612d915784015184516318160ddd60e01b81529160209183916004918391165afa938415612d875750600093612d54575b50916125bd919261252c565b6020813d8211612d7f575b81612d6c602093836114f3565b810103126105f3575192506125bd612d48565b3d9150612d5f565b513d6000823e3d90fd5b5068327cb2734119d3b7a9601e1b93505050565b612dbd915060c03d8111610e7757610e6881836114f3565b38612cf3565b85513d6000823e3d90fd5b612de791935060e03d81116104665761045781836114f3565b9138612cbf565b60405190612dfb826114d8565b60218252606160f81b6040837f6765744d696e744c70416d6f756e7420696e6465784465706f73697444656c7460208201520152565b60405190612e3e826114bd565b60198252786765744d696e744c70416d6f756e7420736c697044656c746160381b6020830152565b60405190612e73826114d8565b6027825266656e44656c746160c81b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578546f6b60208201520152565b60405190612ebc826114bd565b60178252766465706f736974537461626c65546f6b656e44656c746160481b6020830152565b60405190612eef826114d8565b60238252621d5b9d60ea1b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578416d6f60208201520152565b60405190612f34826114bd565b601382527219195c1bdcda5d14dd18589b19505b5bdd5b9d606a1b6020830152565b60405190612f63826114d8565b60288252676b656e44656c746160c01b6040837f6765745265636569766564416d6f756e742072656365697665496e646578546f60208201520152565b60405190612fad826114bd565b601782527672656365697665537461626c65546f6b656e44656c746160481b6020830152565b9190612fe0811515611697565b60015460408051632f7ce47360e21b8152600481018690529092916001600160a01b039060e0908390602490829085165afa9182156132d65790602492916000926132b6575b5061303781868401511615156116d4565b60c08160025416865194858092632500ed8d60e21b82528b60048301525afa928315612dc35760009361328e575b50613075613099918351166132e1565b936130818515156117bc565b6110198661309087875161240a565b95015198612c83565b916130d88386516130a9816114bd565b601e81527f6765745265636569766564416d6f756e74207265636569766544656c74610000602082015261335b565b6130f660a06130eb85610aef8b866117f8565b9301928351906124c4565b9161310584610aef8a856117f8565b90516127109081039081116117a65761311d916124c4565b61316981875161312c816114d8565b602281527f6765745265636569766564416d6f756e7420657870656374496e64657844656c602082015261746160f01b89820152856109f2611831565b6000908198848411600014613246575050509061318591611799565b81811061322a57506131ac6123a09286925b611137846131a3612f56565b836109f2612fa0565b92838151916131ba836114d8565b602983527f6765745265636569766564416d6f756e742072656365697665496e646578546f6020840152681ad95b905b5bdd5b9d60ba1b818401525191613200836114bd565b60188352771c9958d95a5d9954dd18589b19551bdad95b905b5bdd5b9d60421b60208401526133b3565b6123a092955061323e816131ac9293611799565b958692613197565b90919493506123a095985061325b9250611799565b81811061327657506131ac90958692611137846131a3612f56565b9150613285826131ac92611799565b91958692613197565b6130999193506132ae6130759160c03d8111610e7757610e6881836114f3565b939150613065565b6132cf91925060e03d81116104665761045781836114f3565b9038613026565b84513d6000823e3d90fd5b6003546040516341976e0960e01b81526001600160a01b0392831660048201529160209183916024918391165afa90811561334f57600091613321575090565b906020823d8211613347575b8161333a602093836114f3565b8101031261014057505190565b3d915061332d565b6040513d6000823e3d90fd5b6000919082916133a0604051809261338c6020830195632d839cb360e21b8752604060248501526064840190612316565b90604483015203601f1981018352826114f3565b51906a636f6e736f6c652e6c6f675afa50565b906133a06000949385946134006040519485936133e9602086019863c67ea9d160e01b8a526080602488015260a4870190612316565b916044860152602319858303016064860152612316565b90608483015203601f1981018352826114f356fea2646970667358221220cdb03fcbca06cd8cea5cae90e2a562471c1bfbb57bab80b5c8f556e33843cd7e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6539,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "isHandler",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8817,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "pairInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPairInfo)11580"
      },
      {
        "astId": 8820,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "pairVault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPairVault)11675"
      },
      {
        "astId": 8823,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "vaultPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOraclePriceFeed)5810"
      },
      {
        "astId": 8825,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8827,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "slipReceiver",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8829,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "weth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8835,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "userPairTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPairInfo)11580": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)11675": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(IOraclePriceFeed)5810": {
        "encoding": "inplace",
        "label": "contract IOraclePriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
