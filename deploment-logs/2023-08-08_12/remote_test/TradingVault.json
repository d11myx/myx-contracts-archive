{
  "address": "0x638A246F0Ec8883eF68280293FFE8Cfbabe61B44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "_vaultPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradingFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fundingInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "DecreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "IncreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "NeedBuyIndexToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairInfo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "UpdatePairInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "UpdatePairVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "UpdateTradingFeeReceiver",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getCurrentFundingRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPositionByKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "longTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "netExposureAmountChecker",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isHandler",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shortTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateCumulativeFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "updateFundingInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "updatePairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "updatePairVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "updateTradingFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPriceFeed",
      "outputs": [
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4da6eaf977be0cabe6c1033f6fec8e4d9686970d1cc2de6d7ecd05a8fd916d5c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x638A246F0Ec8883eF68280293FFE8Cfbabe61B44",
    "transactionIndex": 0,
    "gasUsed": "5450740",
    "logsBloom": "0x
    "blockHash": "0xc024245a9240c3e138063ed4929f1fdd98f927bfb6ff98d65841b45c396e4cd8",
    "transactionHash": "0x4da6eaf977be0cabe6c1033f6fec8e4d9686970d1cc2de6d7ecd05a8fd916d5c",
    "logs": [],
    "blockNumber": 151,
    "cumulativeGasUsed": "5450740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD471836031dc5108809D173A067e8486B9047A3",
    "0x32EEce76C2C2e8758584A83Ee2F522D4788feA0f",
    "0x01c1DeF3b91672704716159C9041Aeca392DdFfb",
    "0xb9bEECD1A582768711dE1EE7B0A1d582D9d72a6C",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    28800
  ],
  "numDeployments": 1,
  "solcInputHash": "dbd8b9bdf15109328226d3d4a4bdaf81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"DecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"IncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"NeedBuyIndexToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairInfo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"UpdatePairInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"UpdatePairVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"UpdateTradingFeeReceiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentFundingRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPositionByKey\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"netExposureAmountChecker\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isHandler\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"updateFundingInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"updatePairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"updatePairVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateTradingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/TradingVault.sol\":\"TradingVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function contractWhiteList(address) external view returns (bool);\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n    function addContractWhiteList(address target) external;\\n\\n    function removeContractWhiteList(address target) external;\\n}\\n\",\"keccak256\":\"0xbdc36b44d3b4f20937e76a8d72a334dee7a12c98ad888fb77a8a98494ef8cb6b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface ITradingVault {\\n\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x539119867e54e212f5c041dc6f002d8ecdcf336575bf2ac3eb1a3e8ca5c218b7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x18a2c6a576dc0459631a8e1c013d54f82016cb315f5565be2a03c15cc9c55c52\",\"license\":\"MIT\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice) {return 0;}\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (self.positionAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc72550ccdb1038a98b46bd7ea35e21dcf8b32922cd1280e50d467fe3e7184ccd\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x071cef1c2606341079c97f436be603234dab04022e60ff8034d8bdec1a63829d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable is Initializable {\\n    address public gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function __Governable_init() internal onlyInitializing {\\n        gov = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x31fc5e583be08ae049f33ed30bc71e48c0aafaa26d47bccb2f9754e5aa0bc7c8\",\"license\":\"MIT\"},\"contracts/libraries/Handleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./Governable.sol\\\";\\nimport \\\"../../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../../interfaces/IRoleManager.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Handleable {\\n\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    modifier onlyHandler() {\\n        require(msg.sender == address(this) || isHandler[msg.sender], \\\"Handleable: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\\n        isHandler[_handler] = _isHandler;\\n    }\\n}\\n\",\"keccak256\":\"0x33560372f60bb0f7446191a7dbcb9ce2108162c057d2fd3908cc0cc731d0673c\",\"license\":\"MIT\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n\\n    enum TradeType {MARKET, LIMIT, TP, SL}\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        int256 sizeAmount;             // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        uint256 sizeAmount;            // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice;          // 1e30, price\\n        uint256 sizeAmount;            // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        bool isLong;\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        TradeType tradeType;            // 0: MARKET, 1: LIMIT\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 openPrice;              // 1e30 Market acceptable price/Limit opening price\\n        bool isLong;                    // Long/short\\n        uint256 sizeAmount;             // Number of positions\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 triggerPrice;            // Limit trigger price\\n        uint256 sizeAmount;              // Number of customs documents\\n        bool isLong;\\n        bool abovePrice;                 // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0xae53ed399a2f12c87f4476563e06ba5ff839db466d17b17690453c63bae65fc8\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external returns (uint256 diffIndexAmount);\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0xa031e4c72c52f9a8fd5f8adb314245bf5e3298e07c30902335253738f3316273\",\"license\":\"UNLICENSED\"},\"contracts/trading/TradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../libraries/Position.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\nimport \\\"../interfaces/ITradingVault.sol\\\";\\nimport \\\"../interfaces/IOraclePriceFeed.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/Handleable.sol\\\";\\nimport \\\"../pair/interfaces/IPairInfo.sol\\\";\\nimport \\\"../pair/interfaces/IPairVault.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../interfaces/IRoleManager.sol\\\";\\n\\ncontract TradingVault is ITradingVault, ReentrancyGuard, Handleable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    mapping(bytes32 => Position.Info) public positions;\\n\\n    mapping(address => bool) public override isFrozen;\\n\\n    mapping(uint256 => int256) public override netExposureAmountChecker;\\n    mapping(uint256 => uint256) public override longTracker;\\n    mapping(uint256 => uint256) public override shortTracker;\\n\\n    // cumulativeFundingRates tracks the funding rates based on utilization\\n    mapping(uint256 => int256) public cumulativeFundingRates;\\n    mapping(uint256 => int256) public lastFundingRates;\\n    // lastFundingTimes tracks the last time funding was updated for a token\\n    mapping(uint256 => uint256) public lastFundingTimes;\\n\\n    uint256 public fundingInterval;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    address public tradingFeeReceiver;\\n    IOraclePriceFeed public vaultPriceFeed;\\n\\n    constructor (\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        IOraclePriceFeed _vaultPriceFeed,\\n        address _tradingFeeReceiver,\\n        uint256 _fundingInterval\\n    ) Handleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        vaultPriceFeed = _vaultPriceFeed;\\n        tradingFeeReceiver = _tradingFeeReceiver;\\n        fundingInterval = _fundingInterval;\\n    }\\n\\n    function updatePairInfo(address newPairInfo) external onlyPoolAdmin {\\n        address oldPairInfo = address(pairInfo);\\n        pairInfo = IPairInfo(newPairInfo);\\n        emit UpdatePairInfo(oldPairInfo, newPairInfo);\\n    }\\n\\n    function updatePairVault(address newPairVault) external onlyPoolAdmin {\\n        address oldPairVault = address(pairVault);\\n        pairVault = IPairVault(newPairVault);\\n        emit UpdatePairVault(oldPairVault, newPairVault);\\n    }\\n\\n    function updateTradingFeeReceiver(address newReceiver) external onlyPoolAdmin {\\n        address oldReceiver = tradingFeeReceiver;\\n        tradingFeeReceiver = newReceiver;\\n        emit UpdateTradingFeeReceiver(oldReceiver, newReceiver);\\n    }\\n\\n    function updateFundingInterval(uint256 newInterval) external onlyPoolAdmin {\\n        uint256 oldInterval = fundingInterval;\\n        fundingInterval = newInterval;\\n        emit UpdateFundingInterval(oldInterval, newInterval);\\n    }\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external nonReentrant onlyHandler returns (uint256 tradingFee, int256 fundingFee) {\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.enable, \\\"trade pair not supported\\\");\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        position.key = positionKey;\\n\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n        console.log(\\\"increasePosition sizeAmount\\\", _sizeAmount, \\\"sizeDelta\\\", sizeDelta);\\n\\n        // \\u4fee\\u6539\\u4ed3\\u4f4d\\n        if (position.positionAmount == 0) {\\n            position.account = _account;\\n            position.pairIndex = _pairIndex;\\n            position.isLong = _isLong;\\n            position.averagePrice = _price;\\n        }\\n\\n        if (position.positionAmount > 0 && sizeDelta > 0) {\\n            position.averagePrice = (position.positionAmount.mulPrice(position.averagePrice) + sizeDelta).mulDiv(PrecisionUtils.pricePrecision(), (position.positionAmount + _sizeAmount));\\n        }\\n        console.log(\\\"increasePosition averagePrice\\\", position.averagePrice);\\n\\n        position.collateral = (int256(position.collateral) + _collateral).abs();\\n        position.positionAmount = position.positionAmount + _sizeAmount;\\n\\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(true, _account, _pairIndex, _isLong, _sizeAmount);\\n        console.log(\\\"increasePosition lastFundingTimes\\\", lastFundingTimes[_pairIndex]);\\n        console.log(\\\"increasePosition cumulativeFundingRates\\\", cumulativeFundingRates[_pairIndex].toString());\\n        console.log(\\\"increasePosition fundingFee\\\", fundingFee.toString());\\n\\n        if (fundingFee >= 0) {\\n            uint256 absFundingFee = uint256(fundingFee);\\n            if (_isLong) {\\n                require(position.collateral >= absFundingFee, \\\"collateral not enough for funding fee\\\");\\n                position.collateral -= absFundingFee;\\n                console.log(\\\"increasePosition long pay funding fee\\\");\\n            } else {\\n                transferOut += absFundingFee;  // todo distribute\\n                console.log(\\\"increasePosition long take funding fee\\\");\\n            }\\n        } else {\\n            uint256 absFundingFee = uint256(- fundingFee);\\n            if (!_isLong) {\\n                require(position.collateral >= absFundingFee, \\\"collateral not enough for funding fee\\\");\\n                position.collateral = position.collateral - absFundingFee;\\n                console.log(\\\"increasePosition short pay funding fee\\\");\\n            } else {\\n                transferOut += absFundingFee;  // todo distribute\\n                console.log(\\\"increasePosition short take funding fee\\\");\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, _isLong, _sizeAmount, _price);\\n        require(position.collateral + transferOut >= tradingFee, \\\"collateral not enough for trading fee\\\");\\n\\n        if (transferOut >= tradingFee) {\\n\\n            transferOut -= tradingFee;\\n        } else {\\n\\n            transferOut == 0;\\n            position.collateral -= tradingFee - transferOut;\\n        }\\n        // todo distribute\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n        console.log(\\\"increasePosition tradingFee\\\", tradingFee);\\n\\n\\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n        netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? int256(_sizeAmount) : - int256(_sizeAmount));\\n        if (_isLong) {\\n            longTracker[_pairIndex] += _sizeAmount;\\n        } else {\\n            shortTracker[_pairIndex] += _sizeAmount;\\n        }\\n\\n        console.log(\\\"increasePosition prevNetExposureAmountChecker\\\", prevNetExposureAmountChecker.toString());\\n        console.log(\\\"increasePosition netExposureAmountChecker\\\", netExposureAmountChecker[_pairIndex].toString());\\n        console.log(\\\"increasePosition longTracker\\\", longTracker[_pairIndex], \\\"shortTracker\\\", shortTracker[_pairIndex]);\\n\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        console.log(\\\"increasePosition lp averagePrice\\\", lpVault.averagePrice, \\\"price\\\", _price);\\n        uint256 extraIndexAmount;\\n        if (prevNetExposureAmountChecker > 0) {\\n\\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                console.log(\\\"increasePosition BTO long increase\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\\n                .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log(\\\"increasePosition BTO update averagePrice\\\", averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\\n\\n                console.log(\\\"increasePosition STO long decrease\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"increasePosition STO decreaseProfit\\\", profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"increasePosition STO increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log(\\\"increasePosition STO long to short\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"increasePosition STO decreaseProfit\\\", profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"increasePosition STO increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n\\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price));\\n                console.log(\\\"increasePosition STO Long to Short update averagePrice\\\", _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else if (prevNetExposureAmountChecker < 0) {\\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                console.log(\\\"increasePosition STO short increase\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                uint256 averagePrice = (uint256(- prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\\n                .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log(\\\"increasePosition STO update averagePrice\\\", averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\\n                console.log(\\\"increasePosition BTO short decrease\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"increasePosition BTO decreaseProfit\\\", profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"increasePosition BTO increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log(\\\"increasePosition BTO short to long\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"increasePosition BTO increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"increasePosition BTO decreaseProfit\\\", profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                }\\n\\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(- prevNetExposureAmountChecker)).mulPrice(_price));\\n                console.log(\\\"increasePosition BTO Long to Short update averagePrice\\\", _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else {\\n\\n            if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log(\\\"increasePosition BTO zero to long\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n            } else {\\n                console.log(\\\"increasePosition STO zero to short\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n            }\\n            pairVault.updateAveragePrice(_pairIndex, _price);\\n        }\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n        emit IncreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _collateral,\\n            _isLong,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n\\n        console.log(\\\"increase position finish\\\");\\n    }\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external onlyHandler nonReentrant returns (uint256 tradingFee, int256 fundingFee, int256 pnl) {\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        require(_sizeAmount >= tradingConfig.minTradeAmount && _sizeAmount <= tradingConfig.maxTradeAmount, \\\"invalid size\\\");\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        require(position.account != address(0), \\\"position already closed\\\");\\n\\n        // update position size\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n        console.log(\\\"decreasePosition sizeAmount\\\", _sizeAmount, \\\"sizeDelta\\\", sizeDelta);\\n\\n        position.collateral = (int256(position.collateral) + _collateral).abs();\\n        position.positionAmount -= _sizeAmount;\\n        console.log(\\\"decreasePosition position collateral\\\", position.collateral, \\\"positionAmount\\\", position.positionAmount);\\n\\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(false, _account, _pairIndex, _isLong, _sizeAmount);\\n        console.log(\\\"decreasePosition lastFundingTimes\\\", lastFundingTimes[_pairIndex]);\\n        console.log(\\\"decreasePosition cumulativeFundingRates\\\", cumulativeFundingRates[_pairIndex].toString());\\n        console.log(\\\"decreasePosition fundingFee\\\", fundingFee.toString());\\n\\n        if (fundingFee >= 0) {\\n            uint256 absFundingFee = uint256(fundingFee);\\n            if (_isLong) {\\n                require(position.collateral >= absFundingFee, \\\"collateral not enough for funding fee\\\");\\n                position.collateral -= absFundingFee;\\n                console.log(\\\"decreasePosition long pay funding fee\\\");\\n            } else {\\n                transferOut += absFundingFee;  // todo distribute\\n                console.log(\\\"decreasePosition long take funding fee\\\");\\n            }\\n        } else {\\n            uint256 absFundingFee = uint256(- fundingFee);\\n            if (!_isLong) {\\n                require(position.collateral >= absFundingFee, \\\"collateral not enough for funding fee\\\");\\n                position.collateral = position.collateral - absFundingFee;\\n                console.log(\\\"decreasePosition short pay funding fee\\\");\\n            } else {\\n                transferOut += absFundingFee;  // todo distribute\\n                console.log(\\\"decreasePosition short take funding fee\\\");\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, !_isLong, _sizeAmount, _price);\\n        require(position.collateral + transferOut >= tradingFee, \\\"collateral not enough for trading fee\\\");\\n\\n        if (transferOut >= tradingFee) {\\n\\n            transferOut -= tradingFee;\\n        } else {\\n\\n            transferOut == 0;\\n            position.collateral -= tradingFee - transferOut;\\n        }\\n        // todo fee distribute\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n        console.log(\\\"decreasePosition tradingFee\\\", tradingFee);\\n\\n\\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n        netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? - int256(_sizeAmount) : int256(_sizeAmount));\\n        if (_isLong) {\\n            longTracker[_pairIndex] -= _sizeAmount;\\n        } else {\\n            shortTracker[_pairIndex] -= _sizeAmount;\\n        }\\n\\n        console.log(\\\"decreasePosition prevNetExposureAmountChecker\\\", prevNetExposureAmountChecker.toString());\\n        console.log(\\\"decreasePosition netExposureAmountChecker\\\", netExposureAmountChecker[_pairIndex].toString());\\n        console.log(\\\"decreasePosition longTracker\\\", longTracker[_pairIndex], \\\"shortTracker\\\", shortTracker[_pairIndex]);\\n\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        if (prevNetExposureAmountChecker > 0) {\\n\\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                console.log(\\\"decreasePosition STC long increase\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\\n                    .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log(\\\"decreasePosition STC update averagePrice\\\", averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\\n\\n                console.log(\\\"decreasePosition BTC long decrease\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"decreasePosition BTC decreaseProfit\\\", profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"decreasePosition BTC increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log(\\\"decreasePosition BTC long to short\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"decreasePosition BTC decreaseProfit\\\", profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"decreasePosition BTC increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price));\\n                console.log(\\\"decreasePosition BTC Long to Short update averagePrice\\\", _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else if (prevNetExposureAmountChecker < 0) {\\n\\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                console.log(\\\"decreasePosition BTC short increase\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                uint256 averagePrice = (uint256(- prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) + sizeDelta)\\n                    .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log(\\\"decreasePosition BTC update averagePrice\\\", averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\\n\\n                console.log(\\\"decreasePosition STC short decrease\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"decreasePosition STC decreaseProfit\\\", profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"decreasePosition STC increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log(\\\"decreasePosition STC short to long\\\");\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log(\\\"decreasePosition STC increaseProfit\\\", profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log(\\\"decreasePosition STC decreaseProfit\\\", profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                }\\n                pairVault.increaseReserveAmount(_pairIndex, 0, (_sizeAmount - uint256(- prevNetExposureAmountChecker)).mulPrice(_price));\\n                console.log(\\\"decreasePosition STC Long to Short update averagePrice\\\", _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else {\\n\\n            if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log(\\\"decreasePosition STC zero to long\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n            } else {\\n                console.log(\\\"decreasePosition BTC zero to short\\\");\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n            }\\n            pairVault.updateAveragePrice(_pairIndex, _price);\\n        }\\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\\n        pnl = position.getUnrealizedPnl(_sizeAmount, price);\\n        console.log(\\\"decreasePosition pnl\\\", pnl.toString());\\n\\n        if (pnl > 0) {\\n            transferOut += pnl.abs();\\n        } else {\\n            position.collateral -= position.collateral.min(uint256(- pnl));\\n        }\\n        position.realisedPnl += pnl;\\n\\n        console.log(\\\"decreasePosition collateral\\\", position.collateral);\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n\\n        if (position.positionAmount == 0) {\\n\\n            if (position.collateral > 0) {\\n                IERC20(pair.stableToken).safeTransfer(position.account, position.collateral);\\n            }\\n\\n            console.log(\\\"decreasePosition position close\\\");\\n            delete positions[positionKey];\\n            emit ClosePosition(\\n                positionKey,\\n                _account,\\n                _pairIndex,\\n                _isLong\\n            );\\n        }\\n\\n        emit DecreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            _collateral,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            pnl,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n    }\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) public {\\n        console.log(\\\"updateCumulativeFundingRate pairIndex\\\", _pairIndex, \\\"price\\\", _price);\\n\\n        if (lastFundingTimes[_pairIndex] == 0) {\\n            lastFundingTimes[_pairIndex] = block.timestamp / fundingInterval * fundingInterval;\\n            return;\\n        }\\n\\n        if (block.timestamp - lastFundingTimes[_pairIndex] < fundingInterval) {\\n            console.log(\\\"updateCumulativeFundingRate no need update\\\");\\n            return;\\n        }\\n\\n        uint256 intervals = (block.timestamp - lastFundingTimes[_pairIndex]) / fundingInterval;\\n        int256 nextFundingRate = _currentFundingRate(_pairIndex, _price);\\n\\n        lastFundingRates[_pairIndex] = nextFundingRate;\\n        cumulativeFundingRates[_pairIndex] = cumulativeFundingRates[_pairIndex] + nextFundingRate * int256(intervals);\\n        lastFundingTimes[_pairIndex] = block.timestamp / fundingInterval * fundingInterval;\\n\\n        emit UpdateFundingRate(_pairIndex, cumulativeFundingRates[_pairIndex], lastFundingTimes[_pairIndex]);\\n    }\\n\\n    function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external override view returns (uint256 tradingFee) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\\n        return _tradingFee(_pairIndex, _isLong, _sizeAmount, price);\\n    }\\n\\n    function _tradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount, uint256 _price) internal view returns (uint256 tradingFee) {\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n\\n        IPairInfo.TradingFeeConfig memory tradingFeeConfig = pairInfo.getTradingFeeConfig(_pairIndex);\\n        if (netExposureAmountChecker[_pairIndex] >= 0) {\\n\\n            if (_isLong) {\\n                // fee\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            }\\n        } else {\\n\\n            if (_isLong) {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            }\\n        }\\n        return tradingFee;\\n    }\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) public override view returns (int256) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n\\n        uint256 interval = block.timestamp - position.entryFundingTime;\\n        if (interval < fundingInterval) {\\n            if (!_increase) {\\n                int256 fundingRate = lastFundingRates[_pairIndex] * int256(interval) / int256(fundingInterval);\\n                return int256(_sizeAmount) * fundingRate / int256(PrecisionUtils.fundingRatePrecision());\\n            }\\n        }\\n\\n        int256 fundingRate = cumulativeFundingRates[_pairIndex] - position.entryFundingRate;\\n        return int256(position.positionAmount) * fundingRate / int256(PrecisionUtils.fundingRatePrecision());\\n    }\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external override view returns (int256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\\n        return _currentFundingRate(_pairIndex, price);\\n    }\\n\\n    function _currentFundingRate(uint256 _pairIndex, uint256 _price) internal view returns (int256 fundingRate) {\\n        console.log(\\\"currentFundingRate pairIndex\\\", _pairIndex, \\\"_price\\\", _price);\\n\\n        IPairInfo.FundingFeeConfig memory fundingFeeConfig = pairInfo.getFundingFeeConfig(_pairIndex);\\n\\n        uint256 absNetExposure = netExposureAmountChecker[_pairIndex].abs();\\n        uint256 w = fundingFeeConfig.fundingWeightFactor;\\n        uint256 q = longTracker[_pairIndex] + shortTracker[_pairIndex];\\n        uint256 k = fundingFeeConfig.liquidityPremiumFactor;\\n        console.log(\\\"currentFundingRate w %s q %s k %s\\\", w, q, k);\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        uint256 l = (lpVault.indexTotalAmount - lpVault.indexReservedAmount).mulPrice(_price) + (lpVault.stableTotalAmount - lpVault.stableReservedAmount);\\n        console.log(\\\"currentFundingRate l\\\", l);\\n\\n        uint256 absFundingRate;\\n        if (q == 0 || l == 0) {\\n            fundingRate = fundingFeeConfig.defaultFundingRate;\\n        } else {\\n            absFundingRate = w * absNetExposure * PrecisionUtils.fundingRatePrecision() / (k * q)\\n                + (PrecisionUtils.fundingRatePrecision() - w) * absNetExposure / (k * l);\\n            fundingRate = netExposureAmountChecker[_pairIndex] >= 0 ? int256(absFundingRate) : - int256(absFundingRate);\\n        }\\n\\n        fundingRate = (fundingRate - fundingFeeConfig.interest).min(fundingFeeConfig.minFundingRate).max(fundingFeeConfig.maxFundingRate);\\n        console.log(\\\"getCurrentFundingRate fundingRate\\\", fundingRate.toString());\\n    }\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n        return position;\\n\\n    }\\n\\n    function getPositionByKey(bytes32 key) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions[key];\\n        return position;\\n    }\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) public pure returns (bytes32) {\\n        return PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd3caad3eae18feaa35cfb51b101057a2f8335b544d7cea5c000ee8d80c4b07f5\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200012b57601f6200601f38819003918201601f19168301916001600160401b03831184841017620001305780849260c0946040528339810103126200012b578051906001600160a01b039081831683036200012b576020810151908282168092036200012b5760408101518381168091036200012b576060820151918483168093036200012b5760808101519485168095036200012b5760a001519460016000553360005260016020526040600020600160ff1982541617905560805260018060a01b03199283600b541617600b5582600c541617600c5581600e541617600e55600d541617600d55600a55604051615ed89081620001478239608051818181611cde01528181611f31015281816121d901528181613fe70152818161424b01526144fe0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6102a080604052600436101561001457600080fd5b60006102405260003560e01c90816301fd38f714614546575080630298e2731461452d5780631848effa146144e557806323fc6160146144b55780632cbc82bf146144855780632e4d2cda1461438b57806337e415a01461421657806346ea87af146141d3578063514ea4bf146141325780635e55f98414613faf57806383d532e814613f5d57806387d4f0d5146123245780638b78fba5146121a15780638c1b753a146120b75780639391faf9146120875780639849e412146120665780639cb7de4b14611eed578063a28feb8b14611ec1578063a31a7b4414611e95578063ad249b5214611e6f578063bc95baad14611e33578063c4995cb214611ca6578063c8d0805214611bee578063e054d7f214611bbe578063e17ee6161461023a578063e5839836146101f7578063eeaa783a146101cb578063f879ffd21461019b5763fc2a5b1d1461016557600080fd5b3461019457610240518060031936011261019157600b546040516001600160a01b039091168152602090f35b80fd5b6102405180fd5b34610194576020366003190112610194576004356102405152600860205260206040610240512054604051908152f35b3461019457610240518060031936011261019157600e546040516001600160a01b039091168152602090f35b34610194576020366003190112610194576001600160a01b0361021861456e565b1661024051526003602052602060ff6040610240512054166040519015158152f35b3461019457602461024a366145c6565b91939092610259969596614b53565b3033148015611ba2575b61026c90614733565b600b54604051632f7ce47360e21b8152600481018490529660e09188919082906001600160a01b03165afa958615610b4d576102405196611b71575b50606086015115611b31576102be8483896151b7565b93846102405152600260205260406102405120918583556102df8588614e03565b610326816040516102ef81614665565b601b81527a1a5b98dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b60208201528a61032061481a565b91615de1565b600584015415611aed575b6103ab88600586015480151580611ae4575b611abd575b61038b600688015460405161035c81614665565b601d81527f696e637265617365506f736974696f6e206176657261676550726963650000006020820152615d55565b6103a161039c8660048a0154614862565b614fb9565b600488015561483f565b600585015561024051821315611aae5761024051975b88998b85886103d08b8261543f565b6103d9926151b7565b600090600052600260205260406000206103f290615306565b906101008201514290610404916148e9565b600a54119161043c91620f424093611aa6575b6104346040828d60a094526007602052205460e084015190615723565b91015161541c565b05998761024051526009602052610499604061024051205460405161046081614680565b602181527f696e637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615d55565b87610240515260076020526105026104b76040610240512054614fcd565b6040516104c381614680565b602781527f696e637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615d9a565b61054761050e8c614fcd565b60405161051a81614665565b601b81527a696e637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615d9a565b610240518b126119d557508415611977576105728a600488015461056d8282101561488f565b6148e9565b60048701556105c360405161058681614680565b602581527f696e637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615d06565b86610240515260076020526040610240518181205460078901556009602052205460088701556105f58883878a6155f1565b809b60048801546106118361060a848461483f565b10156148f6565b828210611958575090610623916148e9565b925b6020820151600d54610645918e916001600160a01b039081169116614ba9565b6106828c60405161065581614665565b601b81527a696e637265617365506f736974696f6e2074726164696e6746656560281b6020820152615d55565b61024080518990526004602052516040902054908615611947576106a7845b83614862565b8961024051526004602052610240519060408220558760001461192c57508861024051526005602052604061024051206106e285825461483f565b90555b6107426106f183614fcd565b6040516106fd81614680565b602d81527f696e637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615d9a565b88610240515260046020526107ad6107606040610240512054614fcd565b60405161076c81614680565b602981527f696e637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615d9a565b886102405152600560205261080c61024051604080822054916006602052205490604051906107db82614665565b601c82527b34b731b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b6020830152610320614950565b600c54604051632500ed8d60e21b8152600481018b905291906001600160a01b031660c083602481845afa928315610b4d5761024051936118fc575b506108918c60808501516040519061085f82614665565b602082527f696e637265617365506f736974696f6e206c702061766572616765507269636560208301526103206149c8565b8a6102405180861360001461115457509050610240515260046020526102405183604082205413600014610b7957506109096040516108cf81614680565b602281527f696e637265617365506f736974696f6e2042544f206c6f6e6720696e63726561602082015261736560f01b6040820152615d06565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152866024850152610240516044850152836064816102405180945af1928315610b4d578693610b5b575b509161097961097f9261097460806109859796015186614e03565b61483f565b9261483f565b90614ebd565b6109d58160405161099581614680565b602881527f696e637265617365506f736974696f6e2042544f207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102405180945af18015610b4d57610b37575b50610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e43833981519152945b828d81610b16575b5050508f51928b845260018060a01b038d166020850152604089908501526060840152851515608084015260a08301528760c08301528d60e08301528c610100830152610120820152a16004820154600583015460068401549160078501549360096008870154960154968f519b8c9b8c614afd565b0390a1610b038351610ad981614665565b60188152770d2dcc6e4cac2e6ca40e0dee6d2e8d2dedc40ccd2dcd2e6d60431b6020820152615d06565b6001610240515582519182526020820152f35b602090920151610b2f92906001600160a01b0316614ba9565b38828d610a52565b610b4090614605565b610240518015610a185780fd5b6040513d61024051823e3d90fd5b610b6791929350614605565b61024051806101915790859291610959565b6040812054949f9c9b9a99989796959492939213159050610e115750610bde604051610ba481614680565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b8252886004830152836024830152610240516044830152816064816102405180945af18015610b4d57610dfb575b50608081015180891115610d205750610c4b6080610c51920151896148e9565b82614e03565b610c6281610c5d614ab8565b615d55565b600c54604051632d23f44960e01b81526004810189905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57610cdc575b50610140600080516020615e638339815191529998979593610ac8979593600080516020615e438339815191529360409f610a4a565b602090819a999896949a979593973d8311610d19575b610cfc818361469b565b81010312610d14578c98929496979895919395610ca6565b600080fd5b503d610cf2565b610d40915088610d3a919e939495969798999a9b9e6148e9565b83614e03565b610d4c81610c5d614a73565b6020820151600c54610d6c9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528960048401526024830152816044816102405180945af18015610b4d57610de5575b50610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b610dee90614605565b610240518015610daf5780fd5b610e0490614605565b610240518015610c2b5780fd5b90610e6660409e939495969798999a9b9e51610e2c81614680565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615d06565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526024830152610240516044830152816064816102405180945af18015610b4d5761113e575b508960808201518082116000146110a4575050610edc6080610ee29201518b6148e9565b84614e03565b610eee81610c5d614ab8565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57611079575b505b600c546001600160a01b031690610f56908a90610f5190866148e9565b614e03565b90803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d57611063575b50610fea88604051610fa781614680565b603681527f696e637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152600080516020615e838339815191526040820152615d55565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61106c90614605565b610240518015610f965780fd5b602090813d831161109d575b61108f818361469b565b81010312610d14578d610f32565b503d611085565b6110b3925090610edc916148e9565b6110bf81610c5d614a73565b6020830151600c546110df9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102405180945af18015610b4d57611128575b50610f34565b61113190614605565b6102405180156111225780fd5b61114790614605565b610240518015610eb85780fd5b808612156117155750905061024051526004602052610240518360408220541260001461132a57506111c660405161118b81614680565b602381527f696e637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615d06565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152610240516024850152826044850152836064816102405180945af1928315610b4d57869361130c575b509161097461123e61097f93610974879660806112356112449a61487e565b91015190614e03565b9361487e565b6112948160405161125481614680565b602881527f696e637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61131891929350614605565b61024051806101915790859291611216565b6040812054949f9c9b9a99989796959492939212159050611452575061139060405161135581614680565b602381527f696e637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615d06565b60018060a01b03600c54166113a9608083015184614e03565b90803b156101945760405191637c7c829d60e01b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d5761143c575b506080810151808911156114165750610c4b608061140a920151896148e9565b610c6281610c5d6149e9565b611430915088610d3a919e939495969798999a9b9e6148e9565b610d4c81610c5d614a2e565b61144590614605565b6102405180156113ea5780fd5b906114a760409e939495969798999a9b9e5161146d81614680565b602281527f696e637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152616e6760f01b6040820152615d06565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526102405160248401526044830152816064816102405180945af18015610b4d576116ff575b5089608082015180821160001461166f575050610edc608061151d9201518b6148e9565b61152981610c5d614a2e565b6020830151600c546115499183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102405180945af18015610b4d57611659575b505b6115af89610f516115a960018060a01b03600c54169461487e565b866148e9565b90803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d57611643575b50610fea8860405161160081614680565b603681527f696e637265617365506f736974696f6e2042544f204c6f6e6720746f2053686f6020820152600080516020615e838339815191526040820152615d55565b61164c90614605565b6102405180156115ef5780fd5b61166290614605565b61024051801561158c5780fd5b61167e925090610edc916148e9565b61168a81610c5d6149e9565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d576116d4575b5061158e565b602090813d83116116f8575b6116ea818361469b565b81010312610d14578d6116ce565b503d6116e0565b61170890614605565b6102405180156114f95780fd5b9193509193505260046020526102405160408120541360001461185857505061177c60405161174381614680565b602181527f696e637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252886004830152836024830152610240516044830152816064816102405180945af18015610b4d57611842575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61184b90614605565b6102405180156117c85780fd5b6118a160405161186781614680565b602281527f696e637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615d06565b803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d576118e6575b50610fea565b6118ef90614605565b6102405180156118e05780fd5b61191e91935060c03d8111611925575b611916818361469b565b810190614978565b9138610848565b503d61190c565b60409060066020522061194085825461483f565b90556106e5565b6106a76119538561487e565b6106a1565b6119678261196d9397946148e9565b906148e9565b6004880155610625565b99896119829161483f565b996119d060405161199281614680565b602681527f696e637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615d06565b6105c3565b6119de8b61487e565b9086611a4c57506119fa90600488015461056d8282101561488f565b60048701556119d0604051611a0e81614680565b602681527f696e637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615d06565b611a57929c5061483f565b996119d0604051611a6781614680565b602781527f696e637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615d06565b506000610417565b611ab782614fb9565b976103c1565b60068701611add611ad386610974845486614e03565b61097f858561483f565b9055610348565b50831515610343565b6001840180546001600160a01b038c166001600160a01b03199091161790556002840185905560038401805460ff191660ff85151516179055856006850155610331565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b611b9491965060e03d60e011611b9b575b611b8c818361469b565b810190614777565b94876102a8565b503d611b82565b506102408051339052600160205251604090205460ff16610263565b34610194576020366003190112610194576004356102405152600660205260206040610240512054604051908152f35b3461019457602036600319011261019457611c07615cba565b5060043561024051526002602052611ca2611c2760406102405120615306565b604051918291829190916101408101928051825260018060a01b036020820151166020830152604081015160408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080910151910152565b0390f35b346101945760208060031936011261019457611cc061456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d57839185916102405191611dfc575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d576102405194611da3575b5050611d707f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16936146dd565b600d80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b0390a16102405180f35b90809450813d8311611df5575b611dba818361469b565b8101031261019457611d70611def7f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16946146d0565b93611d44565b503d611db0565b92505081813d8311611e2c575b611e13818361469b565b810103126101945783611e2684926146bc565b86611d16565b503d611e09565b3461019457611e53611e4436614593565b91611e4d615cba565b506151b7565b61024051526002602052611ca2611c2760406102405120615306565b3461019457604036600319011261019457611e8e60243560043561543f565b6102405180f35b3461019457610240518060031936011261019157600c546040516001600160a01b039091168152602090f35b3461019457610240518060031936011261019157600d546040516001600160a01b039091168152602090f35b3461019457604036600319011261019457611f0661456e565b611f0e614584565b6040516351331ad760e01b815290916020916001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d5783918591610240519161202f575b50602460405180948193630935e01b60e21b8352336004840152165afa908115610b4d576102405191611ffa575b5015611fc957906001929116610240515252611fc66102405191604083209060ff801983541691151516179055565b80f35b60405162461bcd60e51b815260048101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508381813d8311612028575b612011818361469b565b8101031261019457612022906146d0565b85611f97565b503d612007565b92505081813d831161205f575b612046818361469b565b81010312610194578361205984926146bc565b87611f69565b503d61203c565b34610194576102405180600319360112610191576020600a54604051908152f35b34610194576020366003190112610194576004356102405152600760205260206040610240512054604051908152f35b34610194576020806003193601126101945760043560018060a01b0390602460e083600b541660405192838092632f7ce47360e21b82528660048301525afa928315610b4d5784916102405194612180575b5080600e54169351166024604051809581936341976e0960e01b835260048301525afa908115610b4d57610240519161214f575b6121479250615844565b604051908152f35b90508282813d8311612179575b612166818361469b565b81010312610d145761214791519061213d565b503d61215c565b61219a91945060e03d60e011611b9b57611b8c818361469b565b9285612109565b3461019457602080600319360112610194576121bb61456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d578391859161024051916122ed575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d576102405194612294575b505061226b7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7936146dd565b600c80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b90809450813d83116122e6575b6122ab818361469b565b810103126101945761226b6122e07f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7946146d0565b9361223f565b503d6122a1565b92505081813d831161231d575b612304818361469b565b81010312610194578361231784926146bc565b86612211565b503d6122fa565b3461019457612332366145c6565b610220959493955260c0526101e0526101c0526101a0523033148015613f41575b61235c90614733565b612364614b53565b600b54604051632f7ce47360e21b81526101c0516004820152906001600160a01b031660e082602481845afa908115610b4d57602492610100926102405161014052613f1f575b506040516330a66e1560e01b81526101c051600482015292839182905afa908115610b4d576102405191613e61575b5060408101516101e051908110159182613e52575b505015613e1e5761240960c0516101c0516101a0516151b7565b80608052610240515260026020526040610240512090816101605260018060a01b0360018301541615613ddf57612446610220516101e051614e03565b906124928260405161245781614665565b601b81527a191958dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b602082015261248761481a565b906101e05190615de1565b6125446124ad61039c83600461016051018060e05254614862565b8060e051556124cc6005610160510180610180526101e05190546148e9565b90816101805155604051906124e082614680565b602482527f6465637265617365506f736974696f6e20706f736974696f6e20636f6c6c6174602083015263195c985b60e21b60408301526040519161252483614665565b600e83526d1c1bdcda5d1a5bdb905b5bdd5b9d60921b6020840152615de1565b61024051811315613dd157610240515b8061012052612569610220516101c05161543f565b6125806101e05160c0516101c0516101a05161573c565b60a0526101c051610240515260096020526125e160406102405120546040516125a881614680565b602181527f6465637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615d55565b6101c0516102405152600760205261264d6126026040610240512054614fcd565b60405161260e81614680565b602781527f6465637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615d9a565b61269461265b60a051614fcd565b60405161266781614665565b601b81527a6465637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615d9a565b6102405160a051908112613d0057505060c05115613c9b576126ca60e051546126c160a05182101561488f565b60a051906148e9565b60e0515561271a6040516126dd81614680565b602581527f6465637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615d06565b6101c0516102405152600760205261024051600860408083205492610160519360078501806101005255600960205220549181810161028052015560c051159161276f610220516101e051856101c0516155f1565b806102005261278960e051549161060a610120518461483f565b61020051610120519190808310613c85575050506127ad61020051610120516148e9565b610120525b610140516020015161020051600d546127d7926001600160a01b039182169116614ba9565b6128186040516127e681614665565b601b81527a6465637265617365506f736974696f6e2074726164696e6746656560281b60208201526102005190615d55565b6101c0516102405152600460205261024051906040822054915060c051600014613c795761284b6106a16101e05161487e565b6101c051610240515260046020526102405190604082205560c051600014613c5b57506101c05161024051526005602052604061024051206128916101e05182546148e9565b90555b6128f16128a083614fcd565b6040516128ac81614680565b602d81527f6465637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615d9a565b6101c0516102405152600460205261295f6129126040610240512054614fcd565b60405161291e81614680565b602981527f6465637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615d9a565b6101c051610240515260056020526129c1610240516040808220549160066020522054906040519061299082614665565b601c82527b3232b1b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b6020830152610320614950565b600c54604051632500ed8d60e21b81526101c0516004820152906001600160a01b031660c082602481845afa918215610b4d576102405192613c3a575b5061024051808513156134e45750506101c051610240515260046020526102405183604082205413600014612fb55750612a77604051612a3d81614680565b602281527f6465637265617365506f736974696f6e20535443206c6f6e6720696e63726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d57612f9f575b50612ae3612aee9392610974608061097f94015185614e03565b916101e0519061483f565b612b3e81604051612afe81614680565b602881527f6465637265617365506f736974696f6e20535443207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101c05160048401526024830152816044816102405180945af18015610b4d57612f89575b505b600e5461014051516040516341976e0960e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115610b4d576102405191612f31575b50907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c2093612c4b612c19612c0f61016096956101e051612c0a8951615306565b615384565b8061026052614fcd565b604051612c2581614665565b6014815273191958dc99585cd9541bdcda5d1a5bdb881c1b9b60621b6020820152615d9a565b610240516102605190811315612f085750612c74612c6b61026051614fb9565b6101205161483f565b610120525b612c8b61026051600986510154614862565b600985510155612cd160e05154604051612ca481614665565b601b81527a191958dc99585cd9541bdcda5d1a5bdb8818dbdb1b185d195c985b602a1b6020820152615d55565b6101205180612ee2575b50610180515415612dcd575b5060405191608051835260018060a01b036101a0511660208401526101c051604084015215606083015260808201526101e05160a08201526102205160c08201526102005160e082015260a0516101008201526102605161012082015261012051610140820152a1600080516020615e6383398151915260e051546101805154612da561016051926006840154936101005154906009610280515491015491604051968796610220519560c0516101c0516101a0516080518c614afd565b0390a160016102405155606060405161020051815260a0516020820152610260516040820152f35b60e0515480612eb7575b5050612e17604051612de881614665565b601f81527f6465637265617365506f736974696f6e20706f736974696f6e20636c6f7365006020820152615d06565b6080516102405152600260205260006009610240516040812090838255806001830155836002830155600382015582600482015582600582015582600682015582600782015582600882015501557f1ffb81f32d2d371994fb39b875fbe035d34386083d2a85a3cf2894709c4581a260806040518151815260018060a01b036101a0511660208201526101c051604082015284156060820152a184612ce7565b6101405160200151600190920154612edb926001600160a01b039182169116614ba9565b8480612dd7565b6101a0516101405160200151612f029291906001600160a01b0316614ba9565b85612cdb565b612f2890612f1960e051549161487e565b808210156119675750806148e9565b60e05155612c79565b929190506020833d602011612f81575b81612f4e6020938361469b565b81010312610d145791519091907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c20612bca565b3d9150612f41565b612f9290614605565b610240518015612b845780fd5b612fa890614605565b610240518015612ac95780fd5b909291506040812054136000146131ca5750613010604051612fd681614680565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720646563726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d576131b4575b5060800180516102205190808211156131155750506130896130929151610220516148e9565b6101e051614e03565b61309e81610c5d6152c1565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d576130ea575b50612b86565b602090813d831161310e575b613100818361469b565b81010312610d1457836130e4565b503d6130f6565b613124925090613089916148e9565b61313081610c5d61527c565b6101405160200151600c546131539183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d5761319e5750612b86565b6131a790614605565b6102405180156130e45780fd5b6131bd90614605565b6102405180156130635780fd5b906132146040516131da81614680565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615d06565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101c05160048401526024830152610240516044830152816064816102405180945af18015610b4d576134ce575b50608001805161022051908082111561342e57505061308961328f9151610220516148e9565b61329b81610c5d6152c1565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57613403575b505b61330360018060a01b03600c541691610f5161022051916101e0516148e9565b90803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d576133ed575b5061339e60405161335681614680565b603681527f6465637265617365506f736974696f6e20425443204c6f6e6720746f2053686f6020820152600080516020615e8383398151915260408201526102205190615d55565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b82526101c0516004830152610220516024830152816044816102405180945af18015610b4d5761319e5750612b86565b6133f690614605565b6102405180156133465780fd5b602090813d8311613427575b613419818361469b565b81010312610d1457846132e1565b503d61340f565b61343d925090613089916148e9565b61344981610c5d61527c565b6101405160200151600c5461346c9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d576134b8575b506132e3565b6134c190614605565b6102405180156134b25780fd5b6134d790614605565b6102405180156132695780fd5b80851215613a775750506101c051610240515260046020526102405183604082205412600014613682575061355960405161351e81614680565b602381527f6465637265617365506f736974696f6e204254432073686f727420696e63726560208201526261736560e81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c0516004830152610240516024830152836044830152816064816102405180945af18015610b4d5761366c575b506135c3839261097461097f9360806112356135d19861487e565b916109746101e0519161487e565b613621816040516135e181614680565b602881527f6465637265617365506f736974696f6e20425443207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101c05160048401526024830152816044816102405180945af18015610b4d5761319e5750612b86565b61367590614605565b6102405180156135a85780fd5b909291506040812054126000146137a457506136de6040516136a381614680565b602381527f6465637265617365506f736974696f6e205354432073686f727420646563726560208201526261736560e81b6040820152615d06565b60018060a01b03600c54166136fa60808301516101e051614e03565b90803b156101945760405191637c7c829d60e01b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d5761378e575b5060808101516102205190808211156137735750506130896080613767920151610220516148e9565b61309e81610c5d6151f2565b613782925090613089916148e9565b61313081610c5d615237565b61379790614605565b61024051801561373e5780fd5b906137ee6040516137b481614680565b602281527f6465637265617365506f736974696f6e205354432073686f727420746f206c6f6020820152616e6760f01b6040820152615d06565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d57613a61575b5060800180516102205190808211156139cf5750506130896138699151610220516148e9565b61387581610c5d615237565b6101405160200151600c546138989183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d576139b9575b505b61390860018060a01b03600c541691610f516138ff610220519261487e565b6101e0516148e9565b90803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d576139a3575b5061339e60405161395b81614680565b603681527f6465637265617365506f736974696f6e20535443204c6f6e6720746f2053686f6020820152600080516020615e8383398151915260408201526102205190615d55565b6139ac90614605565b61024051801561394b5780fd5b6139c290614605565b6102405180156138de5780fd5b6139de925090613089916148e9565b6139ea81610c5d6151f2565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57613a36575b506138e0565b602090813d8311613a5a575b613a4c818361469b565b81010312610d145784613a30565b503d613a42565b613a6a90614605565b6102405180156138435780fd5b91509192506101c0519052600460205261024051604081205413600014613b9a575050613ae2604051613aa981614680565b602181527f6465637265617365506f736974696f6e20535443207a65726f20746f206c6f6e6020820152606760f81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d57613b84575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b82526101c0516004830152610220516024830152816044816102405180945af18015610b4d5761319e5750612b86565b613b8d90614605565b610240518015613b345780fd5b613be3604051613ba981614680565b602281527f6465637265617365506f736974696f6e20425443207a65726f20746f2073686f6020820152611c9d60f21b6040820152615d06565b803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d57613c2b575b5061339e565b613c3490614605565b83613c25565b613c5491925060c03d60c01161192557611916818361469b565b90876129fe565b604090600660205220613c726101e05182546148e9565b9055612894565b61284b6101e0516106a1565b613c9292611967916148e9565b60e051556127b2565b613caa60a0516101205161483f565b61012052613cfb604051613cbd81614680565b602681527f6465637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615d06565b61271a565b613d099061487e565b60c051613d7657613d25915060e0515461056d8282101561488f565b60e05155613cfb604051613d3881614680565b602681527f6465637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615d06565b613d7f9161483f565b61012052613cfb604051613d9281614680565b602781527f6465637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615d06565b613dda81614fb9565b612554565b60405162461bcd60e51b81526020600482015260176024820152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606490fd5b606001511015905082806123ef565b9050610100813d61010011613f17575b81613e7f610100938361469b565b810103126101945760405190816101008101106001600160401b0361010084011117613efd5760e0906101008301604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e0820152826123da565b634e487b7160e01b61024051526041600452602461024051fd5b3d9150613e71565b613f379060e03d60e011611b9b57611b8c818361469b565b61014052846123ab565b506102408051339052600160205251604090205460ff16612353565b346101945760a036600319011261019457600435801515810361019457602435906001600160a01b038216820361019457606435918215158303610194576020926121479260843592604435916157d0565b346101945760208060031936011261019457613fc961456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d578391859161024051916140fb575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d5761024051946140a2575b50506140797f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050936146dd565b600b80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b90809450813d83116140f4575b6140b9818361469b565b81010312610194576140796140ee7f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050946146d0565b9361404d565b503d6140af565b92505081813d831161412b575b614112818361469b565b81010312610194578361412584926146bc565b8661401f565b503d614108565b3461019457602036600319011261019457600435610240515260026020526101406040610240512080549060018060a01b0360018201541690600281015460ff60038301541660048301546005840154906006850154926007860154946009600888015497015497604051998a5260208a0152604089015215156060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b34610194576020366003190112610194576001600160a01b036141f461456e565b1661024051526001602052602060ff6040610240512054166040519015158152f35b3461019457602080600319360112610194576040516351331ad760e01b81526004803592916001600160a01b039183908290817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610b4d5783916102405191614355575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610b4d5761024051916142f4575b7f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b21050435324604084866142dc866146dd565b600a549181600a558351928352820152a16102405180f35b9180915082813d831161434e575b61430c818361469b565b81010312610194577f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b21050435324926142dc6143446040946146d0565b92935050926142ae565b503d614302565b82819392503d8311614384575b61436c818361469b565b810103126101945761437e83916146bc565b85614280565b503d614362565b346101945760603660031901126101945760043560246143a9614584565b600b54604051632f7ce47360e21b815260048101859052926001600160a01b039160e0918591829085165afa928315610b4d576102405193614461575b5080602091600e54169351166024604051809581936341976e0960e01b835260048301525afa918215610b4d57610240519261442d575b60206121478460443585886155f1565b91506020823d8211614459575b816144476020938361469b565b8101031261019457905190602061441d565b3d915061443a565b602091935061447e9060e03d60e011611b9b57611b8c818361469b565b92906143e6565b34610194576020366003190112610194576004356102405152600560205260206040610240512054604051908152f35b34610194576020366003190112610194576004356102405152600960205260206040610240512054604051908152f35b34610194576102405180600319360112610191576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461019457602061214761454036614593565b916151b7565b34610d14576020366003190112610d1457602090600435600052600482526040600020548152f35b600435906001600160a01b0382168203610d1457565b602435908115158203610d1457565b6060906003190112610d14576004356001600160a01b0381168103610d145790602435906044358015158103610d145790565b60c0906003190112610d14576004356001600160a01b0381168103610d1457906024359060443590606435906084358015158103610d14579060a43590565b6001600160401b03811161461857604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761461857604052565b61014081019081106001600160401b0382111761461857604052565b604081019081106001600160401b0382111761461857604052565b606081019081106001600160401b0382111761461857604052565b90601f801991011681019081106001600160401b0382111761461857604052565b51906001600160a01b0382168203610d1457565b51908115158203610d1457565b156146e457565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b0391821681529116602082015260400190565b1561473a57565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b908160e0910312610d14576040519060e08201908282106001600160401b038311176146185760c0916040526147ac816146bc565b83526147ba602082016146bc565b60208401526147cb604082016146bc565b60408401526147dc606082016146d0565b60608401526080810151608084015260a081015160a0840152015160c082015290565b6001600160401b03811161461857601f01601f191660200190565b6040519061482782614665565b600982526873697a6544656c746160b81b6020830152565b9190820180921161484c57565b634e487b7160e01b600052601160045260246000fd5b9190916000838201938412911290801582169115161761484c57565b600160ff1b811461484c5760000390565b1561489657565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722066756e64696e604482015264672066656560d81b6064820152608490fd5b9190820391821161484c57565b156148fd57565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722074726164696e604482015264672066656560d81b6064820152608490fd5b6040519061495d82614665565b600c82526b39b437b93a2a3930b1b5b2b960a11b6020830152565b908160c0910312610d145760a0604051916149928361462e565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b604051906149d582614665565b6005825264707269636560d81b6020830152565b604051906149f682614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20646563726561736550726f60208201520152565b60405190614a3b82614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20696e63726561736550726f60208201520152565b60405190614a8082614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20696e63726561736550726f60208201520152565b60405190614ac582614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20646563726561736550726f60208201520152565b979491926101409996939c9b9a9794919c6101608a019d8a5260018060a01b031660208a0152604089015215156060880152608087015260a086015260c085015260e08401526101008301526101208201520152565b600260005414614b64576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039485166024840152604480840196909652948252926080820191906001600160401b0383118284101761461857614c6593836040521690614c0483614665565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d15614cfa573d91614c4a836147ff565b92614c58604051948561469b565b83523d868885013e614cfe565b90815190838215928315614cd8575b505050905015614c815750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b848092939450010312610191575081614cf191016146d0565b80388381614c74565b6060915b91929015614d605750815115614d12575090565b3b15614d1b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015614d735750805190602001fd5b60405162461bcd60e51b815260206004820152908190614d97906024830190614dbe565b0390fd5b60005b838110614dae5750506000910152565b8181015183820152602001614d9e565b90602091614dd781518092818552858086019101614d9b565b601f01601f1916010190565b8115614ded570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214614ea75768327cb2734119d3b7a9601e1b9082821115614e6a577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b906000198284099282810292838086109503948086039514614f415784831115614e6a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505090614f4e9250614de3565b90565b9060001981830981830291828083109203918083039214614fae576127109082821115614e6a577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b60008112614fc45790565b614f4e9061487e565b600081126151945760405160208101908082106001600160401b0383111761461857615000916040526000815291614fb9565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015615186575b506904ee2d6d415b85acef8160201b80821015615179575b50662386f26fc100008082101561516c575b506305f5e1008082101561515f575b5061271080821015615152575b506064811015615144575b600a8091101561513a575b6001808401928160216150ab615095876147ff565b966150a3604051988961469b565b8088526147ff565b602087019790601f1901368937860101905b615104575b505050506150f892614f4e9260209260405195836150e98895518092888089019101614d9b565b84019151809386840190614d9b565b0103808452018261469b565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215615135579190826150bd565b6150c2565b9160010191615080565b606460029104920191615075565b600491049201913861506a565b600891049201913861505d565b601091049201913861504e565b602091049201913861503c565b604093508204905038615024565b6150006040516151a381614665565b60018152602d60f81b602082015291614fb9565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526151ec81614680565b51902090565b604051906151ff82614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320646563726561736550726f60208201520152565b6040519061524482614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320696e63726561736550726f60208201520152565b6040519061528982614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320696e63726561736550726f60208201520152565b604051906152ce82614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320646563726561736550726f60208201520152565b9060405161531381614649565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460ff161515606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e08201526008830154610100820152600990920154610120830152565b60c08101908151908185146153ff5760600151156153d557508051808411156153bd5750614f4e926153b79151906148e9565b90614e03565b6153d0929150614f4e936153b7916148e9565b61487e565b838111156153ec5750614f4e926153b791516148e9565b6153d09291506153b790614f4e946148e9565b5050505050600090565b8181029291811591840414171561484c57565b818102929160008212600160ff1b82141661484c57818405149015171561484c57565b90604080519161544e83614680565b60258352615494816020947f75706461746543756d756c617469766546756e64696e675261746520706169728682015264092dcc8caf60db1b85820152866103206149c8565b6000908482526009845282822054156155d3576154b483832054426148e9565b600a5480911061557e579161553486949261552e61551361550c606099977f30ee8c76a6febcb0400fb07183d873b5c18cf9e5ca6a47104676795b989c606d9b87526009895261550788882054426148e9565b614de3565b9288615844565b9187855260088752828686205560078752858520549261541c565b90614862565b8482526007845282822055615554600a5461554f8142614de3565b615409565b848252600984528282205560078352818082205491600985522054928251948552840152820152a1565b5050506155d19250807f75706461746543756d756c617469766546756e64696e6752617465206e6f206e696565642075706461746560b01b9251936155c285614680565b602a8552840152820152615d06565b565b5090916009906155e9600a5461554f8142614de3565b948352522055565b916024936155fe91614e03565b9160018060a01b03600b54169060c0604092835196878092630da67fe760e01b82528560048301525afa9485156156fd57600095615687575b50600090815260046020529081205412615669571561565b57614f4e915190614f51565b6020614f4e92015190614f51565b1561567c576020614f4e92015190614f51565b614f4e915190614f51565b909460c0823d82116156f5575b816156a160c0938361469b565b8101031261019157509060009160a08251916156bc8361462e565b805183526020810151602084015283810151848401526060810151606084015260808101516080840152015160a0820152949091615637565b3d9150615694565b82513d6000823e3d90fd5b8115614ded57600160ff1b811460001983141661484c570590565b8181039291600013801582851316918412161761484c57565b8192620f4240949261574d926151b7565b916000928352600260205261576460408420615306565b91615774610100840151426148e9565b600a54908181106157a65750505061043460408460a0936157a296526007602052205460e084015190615723565b0590565b6157c5919294506040866157ca956157a298526008602052205461541c565b615708565b9061541c565b9190620f42409493826157e2926151b7565b92600093845260026020526157f960408520615306565b92615809610100850151426148e9565b600a5491828210615839575b5050505061043460408460a0936157a296526007602052205460e084015190615723565b156157a65780615815565b919060409081519361585585614665565b601c85526158a8826020967b0c6eae4e4cadce88ceadcc8d2dccea4c2e8ca40e0c2d2e492dcc8caf60231b888201528386519161589183614665565b60068352655f707269636560d01b8a840152615de1565b600b54835163694b193160e11b81526004808201849052909390916001600160a01b039060249061012090819088908490829087165afa968715615caf57600097615c02575b505084600052838952866000205461590590614fb9565b6060870151938660005260058b52886000205460068c52896000205461592a9161483f565b906080890151948a5161593c81614680565b602181528d81017f63757272656e7446756e64696e675261746520772025732071202573206b202590528b8101607360f81b90528d8c51809181019263a7a8785360e01b84528882016080905260a4820161599691614dbe565b8a604483015286606483015289608483015203601f19810182526159ba908261469b565b51905a91600092916a636f6e736f6c652e6c6f678493fa50600c548b51632500ed8d60e21b81528981018b90529291168286815a9360c094fa918215615bf757908d615a379392600093615bc9575b50615a3191610f51615a2192855190860151906148e9565b9160608d820151910151906148e9565b9061483f565b92615a6d848d7318dd5c9c995b9d119d5b991a5b99d4985d19481b60621b8d5191615a6183614665565b60148352820152615d55565b81158015615bc1575b15615b11575050505050505050908184615a9c836155d19501515b60a084015190615723565b825180821215615b095750915b015180821315615b015750935b606560f81b615ac486614fcd565b927f67657443757272656e7446756e64696e67526174652066756e64696e67526174815193615af285614680565b60218552840152820152615d9a565b905093615ab6565b905091615aa9565b615b1b8387615409565b620f42409283820291808304851490151715615bad5790615b3f615b459288615409565b90614de3565b958203918211615b9a575093615a316155d199989794615b3f8d9895615b71615b7796615a9c9a615409565b92615409565b9160005283526000858120541215600003615a9157615b959061487e565b615a91565b634e487b7160e01b600090815260118852fd5b8260118a634e487b7160e01b600052526000fd5b508315615a76565b615a2191935091610f51615bed615a319460c03d811161192557611916818361469b565b9492505091615a09565b8b513d6000823e3d90fd5b9091968282813d8311615ca8575b615c1a818361469b565b81010312610191578851928301908382106001600160401b03831117615c965750885280518252898101518a8301528781015188830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529438806158ee565b634e487b7160e01b8152604187528890fd5b503d615c10565b88513d6000823e3d90fd5b60405190615cc782614649565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b60008091604051615d4281615d34602082019463104c13eb60e21b8652602060248401526044830190614dbe565b03601f19810183528261469b565b51906a636f6e736f6c652e6c6f675afa50565b600091908291615d426040518092615d866020830195632d839cb360e21b8752604060248501526064840190614dbe565b90604483015203601f19810183528261469b565b60009190615d34615d428493604051928391615dcf6020840196634b5c427760e01b8852604060248601526064850190614dbe565b83810360231901604485015290614dbe565b90615d42600094938594615e2e604051948593615e17602086019863c67ea9d160e01b8a526080602488015260a4870190614dbe565b916044860152602319858303016064860152614dbe565b90608483015203601f19810183528261469b56fe07777c9f149d310fb8670fb9752de106d0ebc29093eb6df2be370406a7d742a39a23c22b6372bd11ffa0aced0db638ca7c144fc3996ecc8fbe3f9a639ef285ad7274207570646174652061766572616765507269636500000000000000000000a2646970667358221220a6e81ac6be154e00055de7b258de56c3799e854e0f3613c7364949b752326d4964736f6c63430008110033",
  "deployedBytecode": "0x6102a080604052600436101561001457600080fd5b60006102405260003560e01c90816301fd38f714614546575080630298e2731461452d5780631848effa146144e557806323fc6160146144b55780632cbc82bf146144855780632e4d2cda1461438b57806337e415a01461421657806346ea87af146141d3578063514ea4bf146141325780635e55f98414613faf57806383d532e814613f5d57806387d4f0d5146123245780638b78fba5146121a15780638c1b753a146120b75780639391faf9146120875780639849e412146120665780639cb7de4b14611eed578063a28feb8b14611ec1578063a31a7b4414611e95578063ad249b5214611e6f578063bc95baad14611e33578063c4995cb214611ca6578063c8d0805214611bee578063e054d7f214611bbe578063e17ee6161461023a578063e5839836146101f7578063eeaa783a146101cb578063f879ffd21461019b5763fc2a5b1d1461016557600080fd5b3461019457610240518060031936011261019157600b546040516001600160a01b039091168152602090f35b80fd5b6102405180fd5b34610194576020366003190112610194576004356102405152600860205260206040610240512054604051908152f35b3461019457610240518060031936011261019157600e546040516001600160a01b039091168152602090f35b34610194576020366003190112610194576001600160a01b0361021861456e565b1661024051526003602052602060ff6040610240512054166040519015158152f35b3461019457602461024a366145c6565b91939092610259969596614b53565b3033148015611ba2575b61026c90614733565b600b54604051632f7ce47360e21b8152600481018490529660e09188919082906001600160a01b03165afa958615610b4d576102405196611b71575b50606086015115611b31576102be8483896151b7565b93846102405152600260205260406102405120918583556102df8588614e03565b610326816040516102ef81614665565b601b81527a1a5b98dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b60208201528a61032061481a565b91615de1565b600584015415611aed575b6103ab88600586015480151580611ae4575b611abd575b61038b600688015460405161035c81614665565b601d81527f696e637265617365506f736974696f6e206176657261676550726963650000006020820152615d55565b6103a161039c8660048a0154614862565b614fb9565b600488015561483f565b600585015561024051821315611aae5761024051975b88998b85886103d08b8261543f565b6103d9926151b7565b600090600052600260205260406000206103f290615306565b906101008201514290610404916148e9565b600a54119161043c91620f424093611aa6575b6104346040828d60a094526007602052205460e084015190615723565b91015161541c565b05998761024051526009602052610499604061024051205460405161046081614680565b602181527f696e637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615d55565b87610240515260076020526105026104b76040610240512054614fcd565b6040516104c381614680565b602781527f696e637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615d9a565b61054761050e8c614fcd565b60405161051a81614665565b601b81527a696e637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615d9a565b610240518b126119d557508415611977576105728a600488015461056d8282101561488f565b6148e9565b60048701556105c360405161058681614680565b602581527f696e637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615d06565b86610240515260076020526040610240518181205460078901556009602052205460088701556105f58883878a6155f1565b809b60048801546106118361060a848461483f565b10156148f6565b828210611958575090610623916148e9565b925b6020820151600d54610645918e916001600160a01b039081169116614ba9565b6106828c60405161065581614665565b601b81527a696e637265617365506f736974696f6e2074726164696e6746656560281b6020820152615d55565b61024080518990526004602052516040902054908615611947576106a7845b83614862565b8961024051526004602052610240519060408220558760001461192c57508861024051526005602052604061024051206106e285825461483f565b90555b6107426106f183614fcd565b6040516106fd81614680565b602d81527f696e637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615d9a565b88610240515260046020526107ad6107606040610240512054614fcd565b60405161076c81614680565b602981527f696e637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615d9a565b886102405152600560205261080c61024051604080822054916006602052205490604051906107db82614665565b601c82527b34b731b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b6020830152610320614950565b600c54604051632500ed8d60e21b8152600481018b905291906001600160a01b031660c083602481845afa928315610b4d5761024051936118fc575b506108918c60808501516040519061085f82614665565b602082527f696e637265617365506f736974696f6e206c702061766572616765507269636560208301526103206149c8565b8a6102405180861360001461115457509050610240515260046020526102405183604082205413600014610b7957506109096040516108cf81614680565b602281527f696e637265617365506f736974696f6e2042544f206c6f6e6720696e63726561602082015261736560f01b6040820152615d06565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152866024850152610240516044850152836064816102405180945af1928315610b4d578693610b5b575b509161097961097f9261097460806109859796015186614e03565b61483f565b9261483f565b90614ebd565b6109d58160405161099581614680565b602881527f696e637265617365506f736974696f6e2042544f207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102405180945af18015610b4d57610b37575b50610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e43833981519152945b828d81610b16575b5050508f51928b845260018060a01b038d166020850152604089908501526060840152851515608084015260a08301528760c08301528d60e08301528c610100830152610120820152a16004820154600583015460068401549160078501549360096008870154960154968f519b8c9b8c614afd565b0390a1610b038351610ad981614665565b60188152770d2dcc6e4cac2e6ca40e0dee6d2e8d2dedc40ccd2dcd2e6d60431b6020820152615d06565b6001610240515582519182526020820152f35b602090920151610b2f92906001600160a01b0316614ba9565b38828d610a52565b610b4090614605565b610240518015610a185780fd5b6040513d61024051823e3d90fd5b610b6791929350614605565b61024051806101915790859291610959565b6040812054949f9c9b9a99989796959492939213159050610e115750610bde604051610ba481614680565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b8252886004830152836024830152610240516044830152816064816102405180945af18015610b4d57610dfb575b50608081015180891115610d205750610c4b6080610c51920151896148e9565b82614e03565b610c6281610c5d614ab8565b615d55565b600c54604051632d23f44960e01b81526004810189905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57610cdc575b50610140600080516020615e638339815191529998979593610ac8979593600080516020615e438339815191529360409f610a4a565b602090819a999896949a979593973d8311610d19575b610cfc818361469b565b81010312610d14578c98929496979895919395610ca6565b600080fd5b503d610cf2565b610d40915088610d3a919e939495969798999a9b9e6148e9565b83614e03565b610d4c81610c5d614a73565b6020820151600c54610d6c9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528960048401526024830152816044816102405180945af18015610b4d57610de5575b50610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b610dee90614605565b610240518015610daf5780fd5b610e0490614605565b610240518015610c2b5780fd5b90610e6660409e939495969798999a9b9e51610e2c81614680565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615d06565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526024830152610240516044830152816064816102405180945af18015610b4d5761113e575b508960808201518082116000146110a4575050610edc6080610ee29201518b6148e9565b84614e03565b610eee81610c5d614ab8565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57611079575b505b600c546001600160a01b031690610f56908a90610f5190866148e9565b614e03565b90803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d57611063575b50610fea88604051610fa781614680565b603681527f696e637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152600080516020615e838339815191526040820152615d55565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61106c90614605565b610240518015610f965780fd5b602090813d831161109d575b61108f818361469b565b81010312610d14578d610f32565b503d611085565b6110b3925090610edc916148e9565b6110bf81610c5d614a73565b6020830151600c546110df9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102405180945af18015610b4d57611128575b50610f34565b61113190614605565b6102405180156111225780fd5b61114790614605565b610240518015610eb85780fd5b808612156117155750905061024051526004602052610240518360408220541260001461132a57506111c660405161118b81614680565b602381527f696e637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615d06565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152610240516024850152826044850152836064816102405180945af1928315610b4d57869361130c575b509161097461123e61097f93610974879660806112356112449a61487e565b91015190614e03565b9361487e565b6112948160405161125481614680565b602881527f696e637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61131891929350614605565b61024051806101915790859291611216565b6040812054949f9c9b9a99989796959492939212159050611452575061139060405161135581614680565b602381527f696e637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615d06565b60018060a01b03600c54166113a9608083015184614e03565b90803b156101945760405191637c7c829d60e01b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d5761143c575b506080810151808911156114165750610c4b608061140a920151896148e9565b610c6281610c5d6149e9565b611430915088610d3a919e939495969798999a9b9e6148e9565b610d4c81610c5d614a2e565b61144590614605565b6102405180156113ea5780fd5b906114a760409e939495969798999a9b9e5161146d81614680565b602281527f696e637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152616e6760f01b6040820152615d06565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526102405160248401526044830152816064816102405180945af18015610b4d576116ff575b5089608082015180821160001461166f575050610edc608061151d9201518b6148e9565b61152981610c5d614a2e565b6020830151600c546115499183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102405180945af18015610b4d57611659575b505b6115af89610f516115a960018060a01b03600c54169461487e565b866148e9565b90803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d57611643575b50610fea8860405161160081614680565b603681527f696e637265617365506f736974696f6e2042544f204c6f6e6720746f2053686f6020820152600080516020615e838339815191526040820152615d55565b61164c90614605565b6102405180156115ef5780fd5b61166290614605565b61024051801561158c5780fd5b61167e925090610edc916148e9565b61168a81610c5d6149e9565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d576116d4575b5061158e565b602090813d83116116f8575b6116ea818361469b565b81010312610d14578d6116ce565b503d6116e0565b61170890614605565b6102405180156114f95780fd5b9193509193505260046020526102405160408120541360001461185857505061177c60405161174381614680565b602181527f696e637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252886004830152836024830152610240516044830152816064816102405180945af18015610b4d57611842575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102405180945af18015610b4d57610de55750610140600080516020615e63833981519152999794610ac8979460409e9a9794600080516020615e4383398151915294610a4a565b61184b90614605565b6102405180156117c85780fd5b6118a160405161186781614680565b602281527f696e637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615d06565b803b15610194576040519162a0151560e21b83528960048401526102405160248401526044830152816064816102405180945af18015610b4d576118e6575b50610fea565b6118ef90614605565b6102405180156118e05780fd5b61191e91935060c03d8111611925575b611916818361469b565b810190614978565b9138610848565b503d61190c565b60409060066020522061194085825461483f565b90556106e5565b6106a76119538561487e565b6106a1565b6119678261196d9397946148e9565b906148e9565b6004880155610625565b99896119829161483f565b996119d060405161199281614680565b602681527f696e637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615d06565b6105c3565b6119de8b61487e565b9086611a4c57506119fa90600488015461056d8282101561488f565b60048701556119d0604051611a0e81614680565b602681527f696e637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615d06565b611a57929c5061483f565b996119d0604051611a6781614680565b602781527f696e637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615d06565b506000610417565b611ab782614fb9565b976103c1565b60068701611add611ad386610974845486614e03565b61097f858561483f565b9055610348565b50831515610343565b6001840180546001600160a01b038c166001600160a01b03199091161790556002840185905560038401805460ff191660ff85151516179055856006850155610331565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b611b9491965060e03d60e011611b9b575b611b8c818361469b565b810190614777565b94876102a8565b503d611b82565b506102408051339052600160205251604090205460ff16610263565b34610194576020366003190112610194576004356102405152600660205260206040610240512054604051908152f35b3461019457602036600319011261019457611c07615cba565b5060043561024051526002602052611ca2611c2760406102405120615306565b604051918291829190916101408101928051825260018060a01b036020820151166020830152604081015160408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080910151910152565b0390f35b346101945760208060031936011261019457611cc061456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d57839185916102405191611dfc575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d576102405194611da3575b5050611d707f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16936146dd565b600d80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b0390a16102405180f35b90809450813d8311611df5575b611dba818361469b565b8101031261019457611d70611def7f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16946146d0565b93611d44565b503d611db0565b92505081813d8311611e2c575b611e13818361469b565b810103126101945783611e2684926146bc565b86611d16565b503d611e09565b3461019457611e53611e4436614593565b91611e4d615cba565b506151b7565b61024051526002602052611ca2611c2760406102405120615306565b3461019457604036600319011261019457611e8e60243560043561543f565b6102405180f35b3461019457610240518060031936011261019157600c546040516001600160a01b039091168152602090f35b3461019457610240518060031936011261019157600d546040516001600160a01b039091168152602090f35b3461019457604036600319011261019457611f0661456e565b611f0e614584565b6040516351331ad760e01b815290916020916001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d5783918591610240519161202f575b50602460405180948193630935e01b60e21b8352336004840152165afa908115610b4d576102405191611ffa575b5015611fc957906001929116610240515252611fc66102405191604083209060ff801983541691151516179055565b80f35b60405162461bcd60e51b815260048101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508381813d8311612028575b612011818361469b565b8101031261019457612022906146d0565b85611f97565b503d612007565b92505081813d831161205f575b612046818361469b565b81010312610194578361205984926146bc565b87611f69565b503d61203c565b34610194576102405180600319360112610191576020600a54604051908152f35b34610194576020366003190112610194576004356102405152600760205260206040610240512054604051908152f35b34610194576020806003193601126101945760043560018060a01b0390602460e083600b541660405192838092632f7ce47360e21b82528660048301525afa928315610b4d5784916102405194612180575b5080600e54169351166024604051809581936341976e0960e01b835260048301525afa908115610b4d57610240519161214f575b6121479250615844565b604051908152f35b90508282813d8311612179575b612166818361469b565b81010312610d145761214791519061213d565b503d61215c565b61219a91945060e03d60e011611b9b57611b8c818361469b565b9285612109565b3461019457602080600319360112610194576121bb61456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d578391859161024051916122ed575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d576102405194612294575b505061226b7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7936146dd565b600c80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b90809450813d83116122e6575b6122ab818361469b565b810103126101945761226b6122e07f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7946146d0565b9361223f565b503d6122a1565b92505081813d831161231d575b612304818361469b565b81010312610194578361231784926146bc565b86612211565b503d6122fa565b3461019457612332366145c6565b610220959493955260c0526101e0526101c0526101a0523033148015613f41575b61235c90614733565b612364614b53565b600b54604051632f7ce47360e21b81526101c0516004820152906001600160a01b031660e082602481845afa908115610b4d57602492610100926102405161014052613f1f575b506040516330a66e1560e01b81526101c051600482015292839182905afa908115610b4d576102405191613e61575b5060408101516101e051908110159182613e52575b505015613e1e5761240960c0516101c0516101a0516151b7565b80608052610240515260026020526040610240512090816101605260018060a01b0360018301541615613ddf57612446610220516101e051614e03565b906124928260405161245781614665565b601b81527a191958dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b602082015261248761481a565b906101e05190615de1565b6125446124ad61039c83600461016051018060e05254614862565b8060e051556124cc6005610160510180610180526101e05190546148e9565b90816101805155604051906124e082614680565b602482527f6465637265617365506f736974696f6e20706f736974696f6e20636f6c6c6174602083015263195c985b60e21b60408301526040519161252483614665565b600e83526d1c1bdcda5d1a5bdb905b5bdd5b9d60921b6020840152615de1565b61024051811315613dd157610240515b8061012052612569610220516101c05161543f565b6125806101e05160c0516101c0516101a05161573c565b60a0526101c051610240515260096020526125e160406102405120546040516125a881614680565b602181527f6465637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615d55565b6101c0516102405152600760205261264d6126026040610240512054614fcd565b60405161260e81614680565b602781527f6465637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615d9a565b61269461265b60a051614fcd565b60405161266781614665565b601b81527a6465637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615d9a565b6102405160a051908112613d0057505060c05115613c9b576126ca60e051546126c160a05182101561488f565b60a051906148e9565b60e0515561271a6040516126dd81614680565b602581527f6465637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615d06565b6101c0516102405152600760205261024051600860408083205492610160519360078501806101005255600960205220549181810161028052015560c051159161276f610220516101e051856101c0516155f1565b806102005261278960e051549161060a610120518461483f565b61020051610120519190808310613c85575050506127ad61020051610120516148e9565b610120525b610140516020015161020051600d546127d7926001600160a01b039182169116614ba9565b6128186040516127e681614665565b601b81527a6465637265617365506f736974696f6e2074726164696e6746656560281b60208201526102005190615d55565b6101c0516102405152600460205261024051906040822054915060c051600014613c795761284b6106a16101e05161487e565b6101c051610240515260046020526102405190604082205560c051600014613c5b57506101c05161024051526005602052604061024051206128916101e05182546148e9565b90555b6128f16128a083614fcd565b6040516128ac81614680565b602d81527f6465637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615d9a565b6101c0516102405152600460205261295f6129126040610240512054614fcd565b60405161291e81614680565b602981527f6465637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615d9a565b6101c051610240515260056020526129c1610240516040808220549160066020522054906040519061299082614665565b601c82527b3232b1b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b6020830152610320614950565b600c54604051632500ed8d60e21b81526101c0516004820152906001600160a01b031660c082602481845afa918215610b4d576102405192613c3a575b5061024051808513156134e45750506101c051610240515260046020526102405183604082205413600014612fb55750612a77604051612a3d81614680565b602281527f6465637265617365506f736974696f6e20535443206c6f6e6720696e63726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d57612f9f575b50612ae3612aee9392610974608061097f94015185614e03565b916101e0519061483f565b612b3e81604051612afe81614680565b602881527f6465637265617365506f736974696f6e20535443207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101c05160048401526024830152816044816102405180945af18015610b4d57612f89575b505b600e5461014051516040516341976e0960e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115610b4d576102405191612f31575b50907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c2093612c4b612c19612c0f61016096956101e051612c0a8951615306565b615384565b8061026052614fcd565b604051612c2581614665565b6014815273191958dc99585cd9541bdcda5d1a5bdb881c1b9b60621b6020820152615d9a565b610240516102605190811315612f085750612c74612c6b61026051614fb9565b6101205161483f565b610120525b612c8b61026051600986510154614862565b600985510155612cd160e05154604051612ca481614665565b601b81527a191958dc99585cd9541bdcda5d1a5bdb8818dbdb1b185d195c985b602a1b6020820152615d55565b6101205180612ee2575b50610180515415612dcd575b5060405191608051835260018060a01b036101a0511660208401526101c051604084015215606083015260808201526101e05160a08201526102205160c08201526102005160e082015260a0516101008201526102605161012082015261012051610140820152a1600080516020615e6383398151915260e051546101805154612da561016051926006840154936101005154906009610280515491015491604051968796610220519560c0516101c0516101a0516080518c614afd565b0390a160016102405155606060405161020051815260a0516020820152610260516040820152f35b60e0515480612eb7575b5050612e17604051612de881614665565b601f81527f6465637265617365506f736974696f6e20706f736974696f6e20636c6f7365006020820152615d06565b6080516102405152600260205260006009610240516040812090838255806001830155836002830155600382015582600482015582600582015582600682015582600782015582600882015501557f1ffb81f32d2d371994fb39b875fbe035d34386083d2a85a3cf2894709c4581a260806040518151815260018060a01b036101a0511660208201526101c051604082015284156060820152a184612ce7565b6101405160200151600190920154612edb926001600160a01b039182169116614ba9565b8480612dd7565b6101a0516101405160200151612f029291906001600160a01b0316614ba9565b85612cdb565b612f2890612f1960e051549161487e565b808210156119675750806148e9565b60e05155612c79565b929190506020833d602011612f81575b81612f4e6020938361469b565b81010312610d145791519091907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c20612bca565b3d9150612f41565b612f9290614605565b610240518015612b845780fd5b612fa890614605565b610240518015612ac95780fd5b909291506040812054136000146131ca5750613010604051612fd681614680565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720646563726561602082015261736560f01b6040820152615d06565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d576131b4575b5060800180516102205190808211156131155750506130896130929151610220516148e9565b6101e051614e03565b61309e81610c5d6152c1565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d576130ea575b50612b86565b602090813d831161310e575b613100818361469b565b81010312610d1457836130e4565b503d6130f6565b613124925090613089916148e9565b61313081610c5d61527c565b6101405160200151600c546131539183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d5761319e5750612b86565b6131a790614605565b6102405180156130e45780fd5b6131bd90614605565b6102405180156130635780fd5b906132146040516131da81614680565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615d06565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101c05160048401526024830152610240516044830152816064816102405180945af18015610b4d576134ce575b50608001805161022051908082111561342e57505061308961328f9151610220516148e9565b61329b81610c5d6152c1565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57613403575b505b61330360018060a01b03600c541691610f5161022051916101e0516148e9565b90803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d576133ed575b5061339e60405161335681614680565b603681527f6465637265617365506f736974696f6e20425443204c6f6e6720746f2053686f6020820152600080516020615e8383398151915260408201526102205190615d55565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b82526101c0516004830152610220516024830152816044816102405180945af18015610b4d5761319e5750612b86565b6133f690614605565b6102405180156133465780fd5b602090813d8311613427575b613419818361469b565b81010312610d1457846132e1565b503d61340f565b61343d925090613089916148e9565b61344981610c5d61527c565b6101405160200151600c5461346c9183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d576134b8575b506132e3565b6134c190614605565b6102405180156134b25780fd5b6134d790614605565b6102405180156132695780fd5b80851215613a775750506101c051610240515260046020526102405183604082205412600014613682575061355960405161351e81614680565b602381527f6465637265617365506f736974696f6e204254432073686f727420696e63726560208201526261736560e81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c0516004830152610240516024830152836044830152816064816102405180945af18015610b4d5761366c575b506135c3839261097461097f9360806112356135d19861487e565b916109746101e0519161487e565b613621816040516135e181614680565b602881527f6465637265617365506f736974696f6e20425443207570646174652061766572602082015267616765507269636560c01b6040820152615d55565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101c05160048401526024830152816044816102405180945af18015610b4d5761319e5750612b86565b61367590614605565b6102405180156135a85780fd5b909291506040812054126000146137a457506136de6040516136a381614680565b602381527f6465637265617365506f736974696f6e205354432073686f727420646563726560208201526261736560e81b6040820152615d06565b60018060a01b03600c54166136fa60808301516101e051614e03565b90803b156101945760405191637c7c829d60e01b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d5761378e575b5060808101516102205190808211156137735750506130896080613767920151610220516148e9565b61309e81610c5d6151f2565b613782925090613089916148e9565b61313081610c5d615237565b61379790614605565b61024051801561373e5780fd5b906137ee6040516137b481614680565b602281527f6465637265617365506f736974696f6e205354432073686f727420746f206c6f6020820152616e6760f01b6040820152615d06565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d57613a61575b5060800180516102205190808211156139cf5750506130896138699151610220516148e9565b61387581610c5d615237565b6101405160200151600c546138989183916001600160a01b039081169116614ba9565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101c05160048401526024830152816044816102405180945af18015610b4d576139b9575b505b61390860018060a01b03600c541691610f516138ff610220519261487e565b6101e0516148e9565b90803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d576139a3575b5061339e60405161395b81614680565b603681527f6465637265617365506f736974696f6e20535443204c6f6e6720746f2053686f6020820152600080516020615e8383398151915260408201526102205190615d55565b6139ac90614605565b61024051801561394b5780fd5b6139c290614605565b6102405180156138de5780fd5b6139de925090613089916148e9565b6139ea81610c5d6151f2565b600c54604051632d23f44960e01b81526101c051600482015260248101929092526102405160209183916044918391906001600160a01b03165af18015610b4d57613a36575b506138e0565b602090813d8311613a5a575b613a4c818361469b565b81010312610d145784613a30565b503d613a42565b613a6a90614605565b6102405180156138435780fd5b91509192506101c0519052600460205261024051604081205413600014613b9a575050613ae2604051613aa981614680565b602181527f6465637265617365506f736974696f6e20535443207a65726f20746f206c6f6e6020820152606760f81b6040820152615d06565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101c05160048301526101e0516024830152610240516044830152816064816102405180945af18015610b4d57613b84575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b82526101c0516004830152610220516024830152816044816102405180945af18015610b4d5761319e5750612b86565b613b8d90614605565b610240518015613b345780fd5b613be3604051613ba981614680565b602281527f6465637265617365506f736974696f6e20425443207a65726f20746f2073686f6020820152611c9d60f21b6040820152615d06565b803b15610194576040519162a0151560e21b83526101c05160048401526102405160248401526044830152816064816102405180945af18015610b4d57613c2b575b5061339e565b613c3490614605565b83613c25565b613c5491925060c03d60c01161192557611916818361469b565b90876129fe565b604090600660205220613c726101e05182546148e9565b9055612894565b61284b6101e0516106a1565b613c9292611967916148e9565b60e051556127b2565b613caa60a0516101205161483f565b61012052613cfb604051613cbd81614680565b602681527f6465637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615d06565b61271a565b613d099061487e565b60c051613d7657613d25915060e0515461056d8282101561488f565b60e05155613cfb604051613d3881614680565b602681527f6465637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615d06565b613d7f9161483f565b61012052613cfb604051613d9281614680565b602781527f6465637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615d06565b613dda81614fb9565b612554565b60405162461bcd60e51b81526020600482015260176024820152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606490fd5b606001511015905082806123ef565b9050610100813d61010011613f17575b81613e7f610100938361469b565b810103126101945760405190816101008101106001600160401b0361010084011117613efd5760e0906101008301604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e0820152826123da565b634e487b7160e01b61024051526041600452602461024051fd5b3d9150613e71565b613f379060e03d60e011611b9b57611b8c818361469b565b61014052846123ab565b506102408051339052600160205251604090205460ff16612353565b346101945760a036600319011261019457600435801515810361019457602435906001600160a01b038216820361019457606435918215158303610194576020926121479260843592604435916157d0565b346101945760208060031936011261019457613fc961456e565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b4d578391859161024051916140fb575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b4d5761024051946140a2575b50506140797f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050936146dd565b600b80546001600160a01b0319811684841617909155604051928392611d999290911683614719565b90809450813d83116140f4575b6140b9818361469b565b81010312610194576140796140ee7f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050946146d0565b9361404d565b503d6140af565b92505081813d831161412b575b614112818361469b565b81010312610194578361412584926146bc565b8661401f565b503d614108565b3461019457602036600319011261019457600435610240515260026020526101406040610240512080549060018060a01b0360018201541690600281015460ff60038301541660048301546005840154906006850154926007860154946009600888015497015497604051998a5260208a0152604089015215156060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b34610194576020366003190112610194576001600160a01b036141f461456e565b1661024051526001602052602060ff6040610240512054166040519015158152f35b3461019457602080600319360112610194576040516351331ad760e01b81526004803592916001600160a01b039183908290817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610b4d5783916102405191614355575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610b4d5761024051916142f4575b7f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b21050435324604084866142dc866146dd565b600a549181600a558351928352820152a16102405180f35b9180915082813d831161434e575b61430c818361469b565b81010312610194577f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b21050435324926142dc6143446040946146d0565b92935050926142ae565b503d614302565b82819392503d8311614384575b61436c818361469b565b810103126101945761437e83916146bc565b85614280565b503d614362565b346101945760603660031901126101945760043560246143a9614584565b600b54604051632f7ce47360e21b815260048101859052926001600160a01b039160e0918591829085165afa928315610b4d576102405193614461575b5080602091600e54169351166024604051809581936341976e0960e01b835260048301525afa918215610b4d57610240519261442d575b60206121478460443585886155f1565b91506020823d8211614459575b816144476020938361469b565b8101031261019457905190602061441d565b3d915061443a565b602091935061447e9060e03d60e011611b9b57611b8c818361469b565b92906143e6565b34610194576020366003190112610194576004356102405152600560205260206040610240512054604051908152f35b34610194576020366003190112610194576004356102405152600960205260206040610240512054604051908152f35b34610194576102405180600319360112610191576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461019457602061214761454036614593565b916151b7565b34610d14576020366003190112610d1457602090600435600052600482526040600020548152f35b600435906001600160a01b0382168203610d1457565b602435908115158203610d1457565b6060906003190112610d14576004356001600160a01b0381168103610d145790602435906044358015158103610d145790565b60c0906003190112610d14576004356001600160a01b0381168103610d1457906024359060443590606435906084358015158103610d14579060a43590565b6001600160401b03811161461857604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761461857604052565b61014081019081106001600160401b0382111761461857604052565b604081019081106001600160401b0382111761461857604052565b606081019081106001600160401b0382111761461857604052565b90601f801991011681019081106001600160401b0382111761461857604052565b51906001600160a01b0382168203610d1457565b51908115158203610d1457565b156146e457565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b0391821681529116602082015260400190565b1561473a57565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b908160e0910312610d14576040519060e08201908282106001600160401b038311176146185760c0916040526147ac816146bc565b83526147ba602082016146bc565b60208401526147cb604082016146bc565b60408401526147dc606082016146d0565b60608401526080810151608084015260a081015160a0840152015160c082015290565b6001600160401b03811161461857601f01601f191660200190565b6040519061482782614665565b600982526873697a6544656c746160b81b6020830152565b9190820180921161484c57565b634e487b7160e01b600052601160045260246000fd5b9190916000838201938412911290801582169115161761484c57565b600160ff1b811461484c5760000390565b1561489657565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722066756e64696e604482015264672066656560d81b6064820152608490fd5b9190820391821161484c57565b156148fd57565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722074726164696e604482015264672066656560d81b6064820152608490fd5b6040519061495d82614665565b600c82526b39b437b93a2a3930b1b5b2b960a11b6020830152565b908160c0910312610d145760a0604051916149928361462e565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b604051906149d582614665565b6005825264707269636560d81b6020830152565b604051906149f682614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20646563726561736550726f60208201520152565b60405190614a3b82614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20696e63726561736550726f60208201520152565b60405190614a8082614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20696e63726561736550726f60208201520152565b60405190614ac582614680565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20646563726561736550726f60208201520152565b979491926101409996939c9b9a9794919c6101608a019d8a5260018060a01b031660208a0152604089015215156060880152608087015260a086015260c085015260e08401526101008301526101208201520152565b600260005414614b64576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039485166024840152604480840196909652948252926080820191906001600160401b0383118284101761461857614c6593836040521690614c0483614665565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d15614cfa573d91614c4a836147ff565b92614c58604051948561469b565b83523d868885013e614cfe565b90815190838215928315614cd8575b505050905015614c815750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b848092939450010312610191575081614cf191016146d0565b80388381614c74565b6060915b91929015614d605750815115614d12575090565b3b15614d1b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015614d735750805190602001fd5b60405162461bcd60e51b815260206004820152908190614d97906024830190614dbe565b0390fd5b60005b838110614dae5750506000910152565b8181015183820152602001614d9e565b90602091614dd781518092818552858086019101614d9b565b601f01601f1916010190565b8115614ded570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214614ea75768327cb2734119d3b7a9601e1b9082821115614e6a577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b906000198284099282810292838086109503948086039514614f415784831115614e6a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505090614f4e9250614de3565b90565b9060001981830981830291828083109203918083039214614fae576127109082821115614e6a577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b60008112614fc45790565b614f4e9061487e565b600081126151945760405160208101908082106001600160401b0383111761461857615000916040526000815291614fb9565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015615186575b506904ee2d6d415b85acef8160201b80821015615179575b50662386f26fc100008082101561516c575b506305f5e1008082101561515f575b5061271080821015615152575b506064811015615144575b600a8091101561513a575b6001808401928160216150ab615095876147ff565b966150a3604051988961469b565b8088526147ff565b602087019790601f1901368937860101905b615104575b505050506150f892614f4e9260209260405195836150e98895518092888089019101614d9b565b84019151809386840190614d9b565b0103808452018261469b565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215615135579190826150bd565b6150c2565b9160010191615080565b606460029104920191615075565b600491049201913861506a565b600891049201913861505d565b601091049201913861504e565b602091049201913861503c565b604093508204905038615024565b6150006040516151a381614665565b60018152602d60f81b602082015291614fb9565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526151ec81614680565b51902090565b604051906151ff82614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320646563726561736550726f60208201520152565b6040519061524482614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320696e63726561736550726f60208201520152565b6040519061528982614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320696e63726561736550726f60208201520152565b604051906152ce82614680565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320646563726561736550726f60208201520152565b9060405161531381614649565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460ff161515606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e08201526008830154610100820152600990920154610120830152565b60c08101908151908185146153ff5760600151156153d557508051808411156153bd5750614f4e926153b79151906148e9565b90614e03565b6153d0929150614f4e936153b7916148e9565b61487e565b838111156153ec5750614f4e926153b791516148e9565b6153d09291506153b790614f4e946148e9565b5050505050600090565b8181029291811591840414171561484c57565b818102929160008212600160ff1b82141661484c57818405149015171561484c57565b90604080519161544e83614680565b60258352615494816020947f75706461746543756d756c617469766546756e64696e675261746520706169728682015264092dcc8caf60db1b85820152866103206149c8565b6000908482526009845282822054156155d3576154b483832054426148e9565b600a5480911061557e579161553486949261552e61551361550c606099977f30ee8c76a6febcb0400fb07183d873b5c18cf9e5ca6a47104676795b989c606d9b87526009895261550788882054426148e9565b614de3565b9288615844565b9187855260088752828686205560078752858520549261541c565b90614862565b8482526007845282822055615554600a5461554f8142614de3565b615409565b848252600984528282205560078352818082205491600985522054928251948552840152820152a1565b5050506155d19250807f75706461746543756d756c617469766546756e64696e6752617465206e6f206e696565642075706461746560b01b9251936155c285614680565b602a8552840152820152615d06565b565b5090916009906155e9600a5461554f8142614de3565b948352522055565b916024936155fe91614e03565b9160018060a01b03600b54169060c0604092835196878092630da67fe760e01b82528560048301525afa9485156156fd57600095615687575b50600090815260046020529081205412615669571561565b57614f4e915190614f51565b6020614f4e92015190614f51565b1561567c576020614f4e92015190614f51565b614f4e915190614f51565b909460c0823d82116156f5575b816156a160c0938361469b565b8101031261019157509060009160a08251916156bc8361462e565b805183526020810151602084015283810151848401526060810151606084015260808101516080840152015160a0820152949091615637565b3d9150615694565b82513d6000823e3d90fd5b8115614ded57600160ff1b811460001983141661484c570590565b8181039291600013801582851316918412161761484c57565b8192620f4240949261574d926151b7565b916000928352600260205261576460408420615306565b91615774610100840151426148e9565b600a54908181106157a65750505061043460408460a0936157a296526007602052205460e084015190615723565b0590565b6157c5919294506040866157ca956157a298526008602052205461541c565b615708565b9061541c565b9190620f42409493826157e2926151b7565b92600093845260026020526157f960408520615306565b92615809610100850151426148e9565b600a5491828210615839575b5050505061043460408460a0936157a296526007602052205460e084015190615723565b156157a65780615815565b919060409081519361585585614665565b601c85526158a8826020967b0c6eae4e4cadce88ceadcc8d2dccea4c2e8ca40e0c2d2e492dcc8caf60231b888201528386519161589183614665565b60068352655f707269636560d01b8a840152615de1565b600b54835163694b193160e11b81526004808201849052909390916001600160a01b039060249061012090819088908490829087165afa968715615caf57600097615c02575b505084600052838952866000205461590590614fb9565b6060870151938660005260058b52886000205460068c52896000205461592a9161483f565b906080890151948a5161593c81614680565b602181528d81017f63757272656e7446756e64696e675261746520772025732071202573206b202590528b8101607360f81b90528d8c51809181019263a7a8785360e01b84528882016080905260a4820161599691614dbe565b8a604483015286606483015289608483015203601f19810182526159ba908261469b565b51905a91600092916a636f6e736f6c652e6c6f678493fa50600c548b51632500ed8d60e21b81528981018b90529291168286815a9360c094fa918215615bf757908d615a379392600093615bc9575b50615a3191610f51615a2192855190860151906148e9565b9160608d820151910151906148e9565b9061483f565b92615a6d848d7318dd5c9c995b9d119d5b991a5b99d4985d19481b60621b8d5191615a6183614665565b60148352820152615d55565b81158015615bc1575b15615b11575050505050505050908184615a9c836155d19501515b60a084015190615723565b825180821215615b095750915b015180821315615b015750935b606560f81b615ac486614fcd565b927f67657443757272656e7446756e64696e67526174652066756e64696e67526174815193615af285614680565b60218552840152820152615d9a565b905093615ab6565b905091615aa9565b615b1b8387615409565b620f42409283820291808304851490151715615bad5790615b3f615b459288615409565b90614de3565b958203918211615b9a575093615a316155d199989794615b3f8d9895615b71615b7796615a9c9a615409565b92615409565b9160005283526000858120541215600003615a9157615b959061487e565b615a91565b634e487b7160e01b600090815260118852fd5b8260118a634e487b7160e01b600052526000fd5b508315615a76565b615a2191935091610f51615bed615a319460c03d811161192557611916818361469b565b9492505091615a09565b8b513d6000823e3d90fd5b9091968282813d8311615ca8575b615c1a818361469b565b81010312610191578851928301908382106001600160401b03831117615c965750885280518252898101518a8301528781015188830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529438806158ee565b634e487b7160e01b8152604187528890fd5b503d615c10565b88513d6000823e3d90fd5b60405190615cc782614649565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b60008091604051615d4281615d34602082019463104c13eb60e21b8652602060248401526044830190614dbe565b03601f19810183528261469b565b51906a636f6e736f6c652e6c6f675afa50565b600091908291615d426040518092615d866020830195632d839cb360e21b8752604060248501526064840190614dbe565b90604483015203601f19810183528261469b565b60009190615d34615d428493604051928391615dcf6020840196634b5c427760e01b8852604060248601526064850190614dbe565b83810360231901604485015290614dbe565b90615d42600094938594615e2e604051948593615e17602086019863c67ea9d160e01b8a526080602488015260a4870190614dbe565b916044860152602319858303016064860152614dbe565b90608483015203601f19810183528261469b56fe07777c9f149d310fb8670fb9752de106d0ebc29093eb6df2be370406a7d742a39a23c22b6372bd11ffa0aced0db638ca7c144fc3996ecc8fbe3f9a639ef285ad7274207570646174652061766572616765507269636500000000000000000000a2646970667358221220a6e81ac6be154e00055de7b258de56c3799e854e0f3613c7364949b752326d4964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1095,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6574,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "isHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18692,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "positions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Info)6054_storage)"
      },
      {
        "astId": 18697,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "isFrozen",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18702,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "netExposureAmountChecker",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 18707,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "longTracker",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18712,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "shortTracker",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18716,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "cumulativeFundingRates",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 18720,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "lastFundingRates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 18724,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "lastFundingTimes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18726,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "fundingInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18729,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "pairInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPairInfo)12341"
      },
      {
        "astId": 18732,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "pairVault",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IPairVault)12447"
      },
      {
        "astId": 18734,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "tradingFeeReceiver",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 18737,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "vaultPriceFeed",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IOraclePriceFeed)5811"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPairInfo)12341": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)12447": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(IOraclePriceFeed)5811": {
        "encoding": "inplace",
        "label": "contract IOraclePriceFeed",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Info)6054_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)6054_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Info)6054_storage": {
        "encoding": "inplace",
        "label": "struct Position.Info",
        "members": [
          {
            "astId": 6035,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6037,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6039,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6041,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "isLong",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6043,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6045,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "positionAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6047,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "averagePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6049,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 6051,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "entryFundingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6053,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "9",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
