{
  "address": "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract IOrderManager",
          "name": "_orderManager",
          "type": "address"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "contract ITradingVault",
          "name": "_tradingVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTimeDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTimeDelay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeADLAndDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getValidPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderManager",
      "outputs": [
        {
          "internalType": "contract IOrderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "setPricesAndExecuteADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "increaseOrderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decreaseOrderIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPricesAndExecuteLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increaseEndIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseEndIndex",
          "type": "uint256"
        }
      ],
      "name": "setPricesAndExecuteMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "setPricesAndLiquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingVault",
      "outputs": [
        {
          "internalType": "contract ITradingVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTimeDelay",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTimeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf9245471f9dec20f525d2c24eb7c3bcda75e8666ab2cebede6af2cab2c3c366",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
    "transactionIndex": 0,
    "gasUsed": "6450842",
    "logsBloom": "0x
    "blockHash": "0xa9fee7e9d39787c1db73313522dd4a3d20b3312014a604078de3fb5c17dce2f3",
    "transactionHash": "0xbf9245471f9dec20f525d2c24eb7c3bcda75e8666ab2cebede6af2cab2c3c366",
    "logs": [],
    "blockNumber": 97,
    "cumulativeGasUsed": "6450842",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "0x1c85638e118b37167e9298c2268758e058DdfDA0",
    "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
    "0x4631BCAbD6dF18D94796344963cB60d44a4136b6",
    "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
    60
  ],
  "numDeployments": 1,
  "solcInputHash": "5e87e6d5eb535d5b262289cecbc76919",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract IOrderManager\",\"name\":\"_orderManager\",\"type\":\"address\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"contract ITradingVault\",\"name\":\"_tradingVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTimeDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeADLAndDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getValidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderManager\",\"outputs\":[{\"internalType\":\"contract IOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"setPricesAndExecuteADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"increaseOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decreaseOrderIds\",\"type\":\"uint256[]\"}],\"name\":\"setPricesAndExecuteLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseEndIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseEndIndex\",\"type\":\"uint256\"}],\"name\":\"setPricesAndExecuteMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"setPricesAndLiquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingVault\",\"outputs\":[{\"internalType\":\"contract ITradingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"updateMaxTimeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IExecutor {\\n\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    function increaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function maxTimeDelay() external view returns(uint256);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external;\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external;\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external;\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42f3f275dce06e62f4cc4d36c9c046a967654f06e27a2974a8eda5bc29274563\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIndexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IIndexPriceFeed {\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\\n    function lastUpdatedAt() external view returns (uint256);\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xc78259afb2d8179075b97c3021eac6a508196df97429f0778a2a41684cc9c867\",\"license\":\"MIT\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ac72f22ea80e64abc0138d2a4e7976b7efcf4b089faa217a66e4271f7ca46cb\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IOrderManager {\\n\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns(uint256);\\n    function decreaseMarketOrdersIndex() external view returns(uint256);\\n    function increaseLimitOrdersIndex() external view returns(uint256);\\n    function decreaseLimitOrdersIndex() external view returns(uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\\n\\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function cancelAllPositionOrders(address account, uint256 pairIndex, bool isLong) external;\\n\\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n}\\n\",\"keccak256\":\"0xb8554ea433fc00fc7eac6139ccef089330c9ae9cd96e4cb8cbdeeaa9090bb82f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IPositionManager {\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xef67c5643d573c4ee2954a709b7b76bb21bf17af38539c904a44ad1ae865ae95\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface ITradingVault {\\n\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n     function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xcd9561cc653de1d84ce5b0cfe9ce1eba77261799d31e940f7c5955b3935fbfe2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice) {return 0;}\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (self.positionAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7c9b4d0dd15ecfc7b3cdf602f65a601ae399acc9408d0636b0791647390532f5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14b07e1484e9a71f8b74c0e7e77c0850c3172e0d1ee821197e104266f2399ef1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x6dbfdfe9e3efa5876b6bdf69eba75e537b8541ebdb145ba2b177fa1d384fb396\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external returns (uint256 diffIndexAmount);\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0xa031e4c72c52f9a8fd5f8adb314245bf5e3298e07c30902335253738f3316273\",\"license\":\"UNLICENSED\"},\"contracts/trading/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../libraries/Position.sol';\\nimport \\\"../interfaces/IExecutor.sol\\\";\\nimport \\\"../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../interfaces/IRoleManager.sol\\\";\\nimport \\\"../interfaces/IOrderManager.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"../interfaces/IIndexPriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../pair/interfaces/IPairInfo.sol\\\";\\nimport \\\"../pair/interfaces/IPairVault.sol\\\";\\nimport \\\"../interfaces/ITradingVault.sol\\\";\\nimport \\\"../interfaces/IOraclePriceFeed.sol\\\";\\n\\ncontract Executor is IExecutor {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    uint256 public override increaseMarketOrderStartIndex;\\n    uint256 public override decreaseMarketOrderStartIndex;\\n\\n    uint256 public override maxTimeDelay;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    IOrderManager public orderManager;\\n    IPositionManager public positionManager;\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    ITradingVault public tradingVault;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        IOrderManager _orderManager,\\n        IPositionManager _positionManager,\\n        ITradingVault _tradingVault,\\n        uint256 _maxTimeDelay\\n    ) {\\n        ADDRESS_PROVIDER = addressProvider;\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        orderManager = _orderManager;\\n        positionManager = _positionManager;\\n        tradingVault = _tradingVault;\\n        maxTimeDelay = _maxTimeDelay;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPositionKeeper() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), \\\"onlyPositionKeeper\\\");\\n        _;\\n    }\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external override onlyPoolAdmin {\\n        uint256 oldDelay = maxTimeDelay;\\n        maxTimeDelay = newMaxTimeDelay;\\n        emit UpdateMaxTimeDelay(oldDelay, newMaxTimeDelay);\\n    }\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseMarketOrders(increaseEndIndex);\\n        this.executeDecreaseMarketOrders(decreaseEndIndex);\\n    }\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseLimitOrders(increaseOrderIds);\\n        this.executeDecreaseLimitOrders(decreaseOrderIds);\\n    }\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        uint256 index = increaseMarketOrderStartIndex;\\n        uint256 length = orderManager.increaseMarketOrdersIndex();\\n\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeIncreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log();\\n            } catch Error(string memory reason) {\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, true);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeIncreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log();\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeIncreaseLimitOrders error \\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external onlyPositionKeeper {\\n        TradingTypes.IncreasePositionOrder memory order = orderManager.getIncreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // check pair enable\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // check account enable\\n        require(!tradingVault.isFrozen(order.account), 'account is frozen');\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n        require(\\n            order.sizeAmount == 0 ||\\n            (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        uint256 price = getValidPrice(pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.isLong\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                order.openPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                order.openPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(order.isLong ? price >= order.openPrice : price <= order.openPrice, 'not reach trigger price');\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (order.isLong) {\\n                price = order.openPrice.min(price);\\n            } else {\\n                price = order.openPrice.max(price);\\n            }\\n        }\\n\\n        // get position\\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n        console.log('executeIncreaseOrder sizeAmount', order.sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        // check position and leverage\\n        (uint256 afterPosition, ) = position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            true,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n        require(afterPosition > 0, 'zero position amount');\\n\\n        // check tp sl\\n        require(\\n            order.tp == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.TP),\\n            'tp already exists'\\n        );\\n        require(\\n            order.sl == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.SL),\\n            'sl already exists'\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\\n        console.log('executeIncreaseOrder preNetExposureAmountChecker', preNetExposureAmountChecker.abs());\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeIncreaseOrder availableIndex', availableIndex);\\n                require(order.sizeAmount <= availableIndex, 'lp index token not enough');\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeIncreaseOrder availableStable', availableStable);\\n                require(\\n                    order.sizeAmount <= uint256(preNetExposureAmountChecker) + availableStable.divPrice(price),\\n                    'lp stable token not enough'\\n                );\\n            }\\n        } else {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeIncreaseOrder availableIndex', availableIndex);\\n                require(\\n                    order.sizeAmount <= uint256(-preNetExposureAmountChecker) + availableIndex,\\n                    'lp index token not enough'\\n                );\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeIncreaseOrder availableStable', availableStable);\\n                require(order.sizeAmount <= availableStable.divPrice(price), 'lp stable token not enough');\\n            }\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            positionManager.transferTokenTo(pair.stableToken, address(tradingVault), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee) = tradingVault.increasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                _orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        if (order.tp > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.TP,\\n                    collateral: 0,\\n                    openPrice: order.tpPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.tp),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n        if (order.sl > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.SL,\\n                    collateral: 0,\\n                    openPrice: order.slPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.sl),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n\\n        // delete order\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeIncreaseMarketOrders(_orderId);\\n        } else if (_tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeIncreaseLimitOrders(_orderId);\\n        }\\n\\n        emit ExecuteIncreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            _tradeType,\\n            order.collateral,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        console.log(\\\"executeDecreaseMarketOrders endIndex\\\", endIndex, \\\"timestamp\\\", block.timestamp);\\n        uint256 index = decreaseMarketOrderStartIndex;\\n        uint256 length = orderManager.decreaseMarketOrdersIndex();\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeDecreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log(\\\"executeDecreaseMarketOrders success index\\\", index, \\\"endIndex\\\", endIndex);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseMarketOrders error \\\", reason);\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, false);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        console.log(\\\"executeDecreaseLimitOrders timestamp\\\", block.timestamp);\\n\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeDecreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log(\\\"executeDecreaseLimitOrders success index\\\", orderIds[i]);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseLimitOrders error \\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external onlyPositionKeeper {\\n        _executeDecreaseOrder(_orderId, _tradeType);\\n    }\\n\\n    function _executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) internal {\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        console.log(\\\"executeDecreaseOrder account %s orderId %s tradeType %s\\\", order.account, _orderId, uint8(order.tradeType));\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // get pair\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n\\n        // get position\\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n        if (position.positionAmount == 0) {\\n            console.log('position already closed', _orderId);\\n            return;\\n        }\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n\\n        order.sizeAmount = order.sizeAmount.min(position.positionAmount);\\n        require(\\n            order.sizeAmount == 0 ||\\n            (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        uint256 price = getValidPrice(pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.abovePrice\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                order.triggerPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(\\n                order.abovePrice ? price <= order.triggerPrice : price >= order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (!order.isLong) {\\n                price = order.triggerPrice.min(price);\\n            } else {\\n                price = order.triggerPrice.max(price);\\n            }\\n        }\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n        console.log('executeDecreaseOrder sizeAmount', order.sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        // check position and leverage\\n        position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            false,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\\n        console.log('executeDecreaseOrder preNetExposureAmountChecker', preNetExposureAmountChecker.toString());\\n        bool needADL;\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeDecreaseOrder availableIndex', availableIndex);\\n                needADL = order.sizeAmount > availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeDecreaseOrder availableStable', availableStable);\\n                needADL = order.sizeAmount > uint256(preNetExposureAmountChecker) + availableStable.divPrice(price);\\n            }\\n        } else {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeDecreaseOrder availableIndex', availableIndex);\\n                needADL = order.sizeAmount > uint256(-preNetExposureAmountChecker) + availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeDecreaseOrder availableStable', availableStable);\\n                needADL = order.sizeAmount > availableStable.divPrice(price);\\n            }\\n        }\\n\\n        if (needADL) {\\n            console.log('executeDecreaseOrder needADL');\\n            orderManager.setOrderNeedADL(_orderId, order.tradeType, needADL);\\n\\n            emit ExecuteDecreaseOrder(\\n                order.account,\\n                _orderId,\\n                pairIndex,\\n                order.tradeType,\\n                order.isLong,\\n                order.sizeAmount,\\n                price,\\n                0,\\n                needADL,\\n                0,\\n                0\\n            );\\n            return;\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            IPairInfo.Pair memory pair = pairInfo.getPair(position.pairIndex);\\n            positionManager.transferTokenTo(pair.stableToken, address(pairVault), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee, int256 pnl) = tradingVault.decreasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        // delete order\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeDecreaseMarketOrders(_orderId);\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        } else {\\n            orderManager.setPositionHasTpSl(position.key, order.tradeType, false);\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        }\\n\\n        // remove decrease order\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        if (position.positionAmount == 0) {\\n            // cancel all decrease order\\n            bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n            IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\\n\\n            for (uint256 i = 0; i < orders.length; i++) {\\n                IOrderManager.PositionOrder memory positionOrder = orders[i];\\n                if (!positionOrder.isIncrease) {\\n                    orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\\n                }\\n            }\\n        }\\n\\n        emit ExecuteDecreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            order.tradeType,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            pnl,\\n            needADL,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.liquidatePositions(positionKeys);\\n    }\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external onlyPositionKeeper {\\n        for (uint256 i = 0; i < positionKeys.length; i++) {\\n            _liquidatePosition(positionKeys[i]);\\n        }\\n    }\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeADLAndDecreaseOrder(positionKeys, sizeAmounts, orderId, tradeType);\\n    }\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) public onlyPositionKeeper {\\n        console.log('executeADLAndDecreaseOrder');\\n\\n        require(_positionKeys.length == _sizeAmounts.length, 'length not match');\\n\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        require(order.needADL, 'no need ADL');\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(order.pairIndex);\\n\\n        Position.Info[] memory adlPositions = new Position.Info[](_positionKeys.length);\\n        uint256 sumAmount;\\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\\n            Position.Info memory position = tradingVault.getPositionByKey(_positionKeys[i]);\\n            require(_sizeAmounts[i] <= position.positionAmount, 'ADL size exceeds position');\\n            require(_sizeAmounts[i] <= tradingConfig.maxTradeAmount, 'exceeds max trade amount');\\n            sumAmount += _sizeAmounts[i];\\n            adlPositions[i] = position;\\n        }\\n\\n        require(sumAmount == order.sizeAmount, 'ADL position amount not match decrease order');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\\n\\n        uint256 price = getValidPrice(order.pairIndex, !order.isLong);\\n\\n        for (uint256 i = 0; i < adlPositions.length; i++) {\\n            Position.Info memory adlPosition = adlPositions[i];\\n            uint256 orderId = orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: adlPosition.account,\\n                    pairIndex: adlPosition.pairIndex,\\n                    tradeType: TradingTypes.TradeType.MARKET,\\n                    collateral: 0,\\n                    openPrice: price,\\n                    isLong: adlPosition.isLong,\\n                    sizeAmount: -int256(adlPosition.positionAmount),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n            _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n        }\\n        _executeDecreaseOrder(_orderId, order.tradeType);\\n    }\\n\\n    function _liquidatePosition(bytes32 _positionKey) internal {\\n        Position.Info memory position = tradingVault.getPositionByKey(_positionKey);\\n        console.log(\\\"liquidatePosition account %s pairIndex %s\\\", position.account, position.pairIndex);\\n\\n        if (position.positionAmount == 0) {\\n            console.log('position not exists');\\n            return;\\n        }\\n\\n        uint256 price = getValidPrice(position.pairIndex, position.isLong);\\n\\n        int256 unrealizedPnl;\\n        if (position.isLong) {\\n            if (price > position.averagePrice) {\\n                unrealizedPnl = int256(position.positionAmount.mulPrice(price - position.averagePrice));\\n            } else {\\n                unrealizedPnl = -int256(position.positionAmount.mulPrice(position.averagePrice - price));\\n            }\\n        } else {\\n            if (position.averagePrice > price) {\\n                unrealizedPnl = int256(position.positionAmount.mulPrice(position.averagePrice - price));\\n            } else {\\n                unrealizedPnl = -int256(position.positionAmount.mulPrice(price - position.averagePrice));\\n            }\\n        }\\n        console.log(\\n            'liquidatePosition averagePrice %s unrealizedPnl %s',\\n            position.averagePrice,\\n            unrealizedPnl.toString()\\n        );\\n\\n        int256 exposureAsset = int256(position.collateral) + unrealizedPnl;\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\\n\\n        bool needLiquidate;\\n        if (exposureAsset <= 0) {\\n            needLiquidate = true;\\n        } else {\\n            uint256 riskRate = position\\n                .positionAmount\\n                .mulPrice(price)\\n                .mulPercentage(tradingConfig.maintainMarginRate)\\n                .calculatePercentage(uint256(exposureAsset));\\n            needLiquidate = riskRate >= PrecisionUtils.oneHundredPercentage();\\n            console.log(\\n                'liquidatePosition riskRate %s positionAmount %s exposureAsset %s',\\n                riskRate,\\n                position.positionAmount,\\n                exposureAsset.toString()\\n            );\\n        }\\n        console.log('liquidatePosition needLiquidate', needLiquidate);\\n\\n        if (!needLiquidate) {\\n            return;\\n        }\\n\\n        // cancel all positionOrders\\n        orderManager.cancelAllPositionOrders(position.account, position.pairIndex, position.isLong);\\n\\n        uint256 orderId = orderManager.createOrder(\\n            TradingTypes.CreateOrderRequest({\\n                account: position.account,\\n                pairIndex: position.pairIndex,\\n                tradeType: TradingTypes.TradeType.MARKET,\\n                collateral: 0,\\n                openPrice: price,\\n                isLong: position.isLong,\\n                sizeAmount: -int256(position.positionAmount),\\n                tpPrice: 0,\\n                tp: 0,\\n                slPrice: 0,\\n                sl: 0\\n            })\\n        );\\n\\n        _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n\\n        emit LiquidatePosition(\\n            _positionKey,\\n            position.account,\\n            position.pairIndex,\\n            position.isLong,\\n            position.positionAmount,\\n            position.collateral,\\n            price,\\n            orderId\\n        );\\n    }\\n\\n    function getValidPrice(uint256 _pairIndex, bool _isLong) public view returns (uint256) {\\n        IOraclePriceFeed oraclePriceFeed = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle());\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 oraclePrice = oraclePriceFeed.getPrice(pair.indexToken);\\n        console.log('getValidPrice pairIndex %s isLong %s ', _pairIndex, _isLong);\\n\\n        uint256 indexPrice = oraclePriceFeed.getIndexPrice(pair.indexToken, 0);\\n        console.log('getValidPrice oraclePrice %s indexPrice %s', oraclePrice, indexPrice);\\n\\n        uint256 diffP = oraclePrice > indexPrice ? oraclePrice - indexPrice : indexPrice - oraclePrice;\\n        diffP = diffP.calculatePercentage(oraclePrice);\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        console.log('getValidPrice diffP %s maxPriceDeviationP %s', diffP, tradingConfig.maxPriceDeviationP);\\n        require(diffP <= tradingConfig.maxPriceDeviationP, 'exceed max price deviation');\\n        return oraclePrice;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8276c546f00e0a41d7d0edf909fa686c05efa5ee0ac5dc9e6e6ffad8e22f2059\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200016657601f6200729e38819003918201601f19168301916001600160401b038311848410176200016b5780849260e09460405283398101031262000166578051906001600160a01b0390818316830362000166576020810151908282168092036200016657604081015183811680910362000166576060820151908482168092036200016657608083015192858416809403620001665760a0810151958616809603620001665760c001519560805260018060a01b031993846005541617600555836006541617600655826003541617600355816004541617600455600754161760075560025560405161711c908162000182823960805181818161014901528181610324015281816105e3015281816108c801528181610b2901528181610c77015281816113d6015281816115090152818161161d015281816117ab01528181611a2001528181611ce201528181611fbf015281816120b40152616b470152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c8063094ae065146120e35780631848effa1461209e578063531d87c114611f8e5780635be766c314611f70578063791b98bc14611f47578063a31a7b4414611f1e578063a776034014611c46578063afb566e414611978578063b298f25a14611759578063be39f3aa146115e8578063bfa5ea99146114d8578063c04c0f5814611384578063cb0269c914611366578063d4053f7b14611349578063da9d857b14610c0a578063e70da1b514610af9578063ef09314a14610861578063efc95de814610591578063f1bd27a814610568578063f2ac5dfe146102a0578063f9b6117f14610277578063fc2a5b1d1461024e5763fdc860f01461011a57600080fd5b3461024b57610128366122ce565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102405785918791610206575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101fb5785946101bc575b50506101b46101b99361230e565b61555a565b80f35b90809450813d83116101f4575b6101d381836121ca565b810103126101f0576101b46101ea6101b994612301565b936101a6565b8380fd5b503d6101c9565b6040513d87823e3d90fd5b82819392503d8311610239575b61021d81836121ca565b810103126102355761022f85916122ed565b3861017b565b8580fd5b503d610213565b6040513d88823e3d90fd5b80fd5b503461024b578060031936011261024b576005546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576003546040516001600160a01b039091168152602090f35b503461024b57608036600319011261024b57806001600160401b03600435818111610470576102d3903690600401612202565b90602435818111610563576102ec903690600401612270565b9060643590811161056357610305903690600401612270565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052157839187918a9161052c575b506024604051809481936335d2155560e11b8352336004840152165afa801561052157869189916104df575b509161039960049361230e565b8551855114806104d7575b6103ad9061234f565b604051635ed6d55b60e11b815292839182905afa9081156104cc578791610493575b501691823b156102355761040092869283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1908115610488578491610474575b5050303b1561047057610442918391604051938492839263180981eb60e31b84526004840152602483019061238c565b038183305af18015610465576104555750f35b61045e90612118565b61024b5780f35b6040513d84823e3d90fd5b5050fd5b61047d90612118565b610470578238610412565b6040513d86823e3d90fd5b90508481813d83116104c5575b6104aa81836121ca565b810103126104c1576104bb906122ed565b386103cf565b8680fd5b503d6104a0565b6040513d89823e3d90fd5b5060016103a4565b82819392503d831161051a575b6104f681836121ca565b810103126105165760049161039961050e8893612301565b91935061038c565b8780fd5b503d6104ec565b6040513d8a823e3d90fd5b92505081813d831161055c575b61054381836121ca565b81010312610516578561055684926122ed565b38610360565b503d610539565b505050fd5b503461024b578060031936011261024b576007546040516001600160a01b039091168152602090f35b503461024b5760208060031936011261085d576004356001600160401b038111610859576105c3903690600401612270565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156101fb578591610824575b508260405180926335d2155560e11b8252336004830152816024958692165afa80156101fb5785906107ea575b61064b915061230e565b61069660405161065a81612194565b8281527f6578656375746544656372656173654c696d69744f72646572732074696d65738482015263074616d760e41b60408201524290616fa7565b835b83518110156107e6576106ab81856126bd565b51303b156102355760405190630fdc860f60e41b82526004820152600190818482015286808260448183305af191826107d2575b505061076f576106ed612441565b6308c379a01461070a575b61048857610705906124f2565b610698565b61071261245f565b8061071e575b506106f8565b9050610769869160405161073181612194565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f7287820152600160fd1b6040820152616fec565b38610718565b50806107cd61078161070593876126bd565b5160405161078e81612194565b602881527f6578656375746544656372656173654c696d69744f726465727320737563636587820152670e6e640d2dcc8caf60c31b6040820152616fa7565b6124f2565b6107db90612118565b6104c15786386106df565b8480f35b508281813d831161081d575b61080081836121ca565b810103126108195761081461064b91612301565b610641565b8480fd5b503d6107f6565b90508281813d8311610852575b61083b81836121ca565b810103126108195761084c906122ed565b38610614565b503d610831565b8280fd5b5080fd5b503461024b5760a036600319011261024b57806001600160401b0360043581811161047057610894903690600401612202565b90602435908111610470576108ad903690600401612270565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104cc57849184918991610ac2575b506024604051809481936335d2155560e11b8352336004840152165afa80156104cc5783918891610a84575b509161093d60049361230e565b865186511480610a7c575b6109519061234f565b604051635ed6d55b60e11b815292839182905afa918215610240578692610a46575b50501691823b15610563576109a592849283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1801561046557610a32575b5050303b1561024b5760405163531d87c160e01b815260643560048201528190818160248183305af1801561046557610a1e575b5050303b1561024b5760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610465576104555750f35b610a2790612118565b61024b5780386109e8565b610a3b90612118565b61024b5780386109b4565b90809250813d8311610a75575b610a5d81836121ca565b8101031261081957610a6e906122ed565b3880610973565b503d610a53565b506001610948565b82819392503d8311610abb575b610a9b81836121ca565b810103126104c15760049161093d610ab38593612301565b919350610930565b503d610a91565b92505081813d8311610af2575b610ad981836121ca565b810103126104c15782610aec85926122ed565b38610904565b503d610acf565b503461024b57610b08366122ce565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102405785918791610bd4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101fb578594610b99575b5050610b946101b99361230e565b612c70565b90809450813d8311610bcd575b610bb081836121ca565b810103126101f057610b94610bc76101b994612301565b93610b86565b503d610ba6565b82819392503d8311610c03575b610beb81836121ca565b8101031261023557610bfd85916122ed565b38610b5b565b503d610be1565b503461024b57608036600319011261024b576001600160401b0360043581811161085957610c3c903690600401612270565b9060243590811161085957610c55903690600401612270565b6064359160048310156101f0576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101fb57859161130a575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa80156101fb5785906112cf575b610cf0915061230e565b610d2b604051610cff816121af565b601a81527932bc32b1baba32a0a22620b7322232b1b932b0b9b2a7b93232b960311b6020820152616f66565b8051825103611297576003546040516340b4605b60e11b815260443560048201529384916001600160a01b031690610d6790602484019061241e565b8160446101609687935afa9384156101fb578594611268575b5050610140830151156112355760018060a01b03600554166040840151604051906330a66e1560e01b8252600482015261010081602481855afa908115610240578691611204575b508251919492610dd7836121eb565b92610de560405194856121ca565b808452610df4601f19916121eb565b01875b8181106111a757505060075487946001600160a01b039091169190855b8251871015610f7857610e2787846126bd565b519660405197636468402960e11b8952600489015261014088602481885afa978815610f6d578b98610f3a575b50610e5f818a6126bd565b5160a089015110610ef957610e74818a6126bd565b51606087015110610eb957610e97610eb392610e90838c6126bd565b5190612702565b97610ea282896126bd565b52610ead81886126bd565b506124f2565b95610e14565b60405162461bcd60e51b8152602060048201526018602482015277195e18d959591cc81b585e081d1c98591948185b5bdd5b9d60421b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527820a2261039b4bd329032bc31b2b2b239903837b9b4ba34b7b760391b6044820152606490fd5b610f5f9198506101403d61014011610f66575b610f5781836121ca565b8101906128cc565b9638610e54565b503d610f4d565b6040513d8d823e3d90fd5b9088868b9360c08401510361114d57839160e06040850151602460405180948193632f7ce47360e21b835260048301525afa801561114257611113575b50610fca604084015160e08501511590616b21565b90825b81518110156110e457836020611081610fe684866126bd565b5160018060a01b03600354169060018060a01b0384820151169060408101519061101a60a060608301511515920151612ad4565b91604051936110288561215d565b84528684015286604084015286606084015289608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af19081156101fb5785916110a6575b50906107cd6110a192614532565b610fcd565b919450506020813d6020116110dc575b816110c3602093836121ca565b810103126110d757518593906107cd611093565b600080fd5b3d91506110b6565b83606086015160048110156110ff576101b99060443561555a565b634e487b7160e01b82526021600452602482fd5b6111349060e03d60e01161113b575b61112c81836121ca565b81019061274b565b5084610fb5565b503d611122565b6040513d85823e3d90fd5b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b602090604098939698516111ba81612141565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610df7565b61122891506101003d6101001161122e575b61122081836121ca565b8101906127c1565b38610dc8565b503d611216565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b611288929450803d10611290575b61128081836121ca565b8101906143fb565b913880610d80565b503d611276565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d602011611302575b816112e9602093836121ca565b81010312610819576112fd610cf091612301565b610ce6565b3d91506112dc565b90506020813d602011611341575b81611325602093836121ca565b8101031261081957602061133a6024926122ed565b9150610caf565b3d9150611318565b503461024b578060031936011261024b5760209054604051908152f35b503461024b578060031936011261024b576020600254604051908152f35b503461024b576020908160031936011261024b576004356001600160401b03811161085d576113b7903690600401612270565b6040516351331ad760e01b815290926001600160a01b039181816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156104885790829185916114a2575b506024604051809581936335d2155560e11b8352336004840152165afa90811561114257839161146b575b50611440915061230e565b805b825181101561146757806107cd61145c61146293866126bd565b51616467565b611442565b5080f35b905081813d831161149b575b61148181836121ca565b8101031261085d5761149561144091612301565b38611435565b503d611477565b82819392503d83116114d1575b6114b981836121ca565b810103126101f0576114cb82916122ed565b3861140a565b503d6114af565b503461024b5760208060031936011261085d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561048857829185916115b2575b506024604051809581936335d2155560e11b8352336004840152165afa90811561114257839161157b575b836115708361230e565b6101b960043561412a565b905081813d83116115ab575b61159181836121ca565b8101031261085d576115a561157091612301565b38611566565b503d611587565b82819392503d83116115e1575b6115c981836121ca565b810103126101f0576115db82916122ed565b3861153b565b503d6115bf565b503461024b5760208060031936011261085d576040516351331ad760e01b815260048035916001600160a01b039184908290817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101fb5784918691611723575b50602460405180948193637be53ca160e01b8352336004840152165afa9081156104885784916116ee575b50156116b9577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160025491816002558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d831161171c575b61170581836121ca565b810103126101f05761171690612301565b3861167a565b503d6116fb565b82819392503d8311611752575b61173a81836121ca565b810103126108195761174c84916122ed565b3861164f565b503d611730565b503461024b5760208060031936011261085d576004356001600160401b0381116108595761178b903690600401612270565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156101fb578591611943575b508260405180926335d2155560e11b8252336004830152816024958692165afa80156101fb57859061190d575b611813915061230e565b835b83518110156107e65761182881856126bd565b51303b15610235576040519063e70da1b560e01b82526004820152600190818482015286808260448183305af191826118f9575b50506118ec5761186a612441565b6308c379a014611887575b61048857611882906124f2565b611815565b61188f61245f565b8061189b575b50611875565b90506118e686916040516118ae81612194565b602181527f65786563757465496e6372656173654c696d69744f7264657273206572726f7287820152600160fd1b6040820152616fec565b38611895565b50611882906107cd616efa565b61190290612118565b6104c157863861185c565b508281813d831161193c575b61192381836121ca565b810103126108195761193761181391612301565b611809565b503d611919565b90508281813d8311611971575b61195a81836121ca565b810103126108195761196b906122ed565b386117dc565b503d611950565b503461024b578060031960e036820112611c43576001600160401b03600435818111610563576119ac903690600401612202565b91602435828111610819576119c5903690600401612270565b91606435818111610235576119de903690600401612270565b90608435908111610235576119f7903690600401612270565b9360c4359360048510156104c1576040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa908115610f6d57849184918d91611c0c575b506024604051809481936335d2155560e11b8352336004840152165afa8015610f6d5783918c91611bca575b5091611a9560049361230e565b865186511480611bc2575b611aa99061234f565b604051635ed6d55b60e11b815292839182905afa918215611bb7578a92611b7d575b50501691823b1561051657611afd92889283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1908115610240578691611b69575b5050303b15610819578492610442611b56611b4794604051978896879663da9d857b60e01b885260806004890152608488019061238c565b9186830301602487015261238c565b9160a4356044850152606484019061241e565b611b7290612118565b610819578438611b0f565b90809250813d8311611bb0575b611b9481836121ca565b81010312611bac57611ba5906122ed565b3880611acb565b8880fd5b503d611b8a565b6040513d8c823e3d90fd5b506001611aa0565b82819392503d8311611c05575b611be181836121ca565b81010312611c0157600491611a95611bf98593612301565b919350611a88565b8a80fd5b503d611bd7565b92505081813d8311611c3c575b611c2381836121ca565b81010312611c015782611c3685926122ed565b38611a5c565b503d611c19565b50fd5b503461024b5760a036600319011261024b576001600160401b039060043582811161085d57611c79903690600401612202565b9160243581811161085957611c92903690600401612270565b6064358281116101f057611caa903690600401612270565b916084359081116101f057611cc3903690600401612270565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052157839187918a91611ee7575b506024604051809481936335d2155560e11b8352336004840152165afa908115610521579086918991611ea9575b5091611d5960049361230e565b895185511480611ea1575b611d6d9061234f565b604051635ed6d55b60e11b815292839182905afa9081156104cc578791611e6c575b501690813b1561023557958591611dc19783604051809a81958294631e09986f60e21b845260443591600485016123c0565b03925af1801561048857611e58575b839450303b156105635783611e00916040518093819263594c792d60e11b8352866004840152602483019061238c565b038183305af1908115610488578491611e44575b5050303b15610470576104429183916040519384928392631df92bbd60e31b84526004840152602483019061238c565b611e4d90612118565b610470578238611e14565b929093611e6490612118565b918390611dd0565b90508481813d8311611e9a575b611e8381836121ca565b810103126104c157611e94906122ed565b38611d8f565b503d611e79565b506001611d64565b82819392503d8311611ee0575b611ec081836121ca565b8101031261051657600491611d59611ed88893612301565b919350611d4c565b503d611eb6565b92505081813d8311611f17575b611efe81836121ca565b810103126105165785611f1184926122ed565b38611d1e565b503d611ef4565b503461024b578060031936011261024b576006546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576004546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576020600154604051908152f35b503461024b5760208060031936011261085d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa80156104885782918591612068575b506024604051809581936335d2155560e11b8352336004840152165afa908115611142578391612031575b836120268361230e565b6101b9600435612517565b905081813d8311612061575b61204781836121ca565b8101031261085d5761205b61202691612301565b3861201c565b503d61203d565b82819392503d8311612097575b61207f81836121ca565b810103126101f05761209182916122ed565b38611ff1565b503d612075565b503461024b578060031936011261024b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461024b57604036600319011261024b5760243590811515820361024b57602061211083600435616b21565b604051908152f35b6001600160401b03811161212b57604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761212b57604052565b61016081019081106001600160401b0382111761212b57604052565b60e081019081106001600160401b0382111761212b57604052565b606081019081106001600160401b0382111761212b57604052565b604081019081106001600160401b0382111761212b57604052565b90601f801991011681019081106001600160401b0382111761212b57604052565b6001600160401b03811161212b5760051b60200190565b81601f820112156110d757803591612219836121eb565b9261222760405194856121ca565b808452602092838086019260051b8201019283116110d7578301905b828210612251575050505090565b81356001600160a01b03811681036110d7578152908301908301612243565b81601f820112156110d757803591612287836121eb565b9261229560405194856121ca565b808452602092838086019260051b8201019283116110d7578301905b8282106122bf575050505090565b813581529083019083016122b1565b60409060031901126110d7576004359060243560048110156110d75790565b51906001600160a01b03821682036110d757565b519081151582036110d757565b1561231557565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b1561235657565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b8281106123ac575050505090565b83518552938101939281019260010161239e565b9392916060850191606086528051809352608086019260208092019060005b81811061240157505050858303908601526040916123fc9161238c565b930152565b82516001600160a01b0316865294830194918301916001016123df565b90600482101561242b5752565b634e487b7160e01b600052602160045260246000fd5b60009060033d1161244e57565b905060046000803e60005160e01c90565b600060443d106124bc57604051600319913d83016004833e81516001600160401b03918282113d6024840111176124bf578184019485519384116124c7573d850101602084870101116124bf57506124bc929101602001906121ca565b90565b949350505050565b50949350505050565b91926124eb604092959460608501968552602085019061241e565b1515910152565b60001981146125015760010190565b634e487b7160e01b600052601160045260246000fd5b60009081549060018060a01b036003602082825416936040948551928380926386249bab60e01b825260049586915afa9081156126b3578891612682575b508087101561267857808211612670575b50945b8581106125795750505050505050565b303b156104c157845163e70da1b560e01b8152818382015260249088828201526044908981838183305af19081612661575b50612653576001916125bb612441565b6308c379a0146125e4575b50506125da576125d5906124f2565b612569565b84513d88823e3d90fd5b6125ec61245f565b156125c65790915088918686541690813b15611c01576064868c809460018995838f51998a98899763c250985960e01b89528801528601528401525af180156126495761263a575b806125c6565b61264390612118565b38612634565b87513d8b823e3d90fd5b50506125d5906107cd616efa565b61266a90612118565b386125ab565b905038612566565b5050505050505050565b90506020813d82116126ab575b8161269c602093836121ca565b81010312610516575138612555565b3d915061268f565b86513d8a823e3d90fd5b80518210156126d15760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03811161212b57601f01601f191660200190565b9190820180921161250157565b1561271657565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b908160e09103126110d75760c06040519161276583612179565b61276e816122ed565b835261277c602082016122ed565b602084015261278d604082016122ed565b604084015261279e60608201612301565b60608401526080810151608084015260a081015160a0840152015160c082015290565b809161010092839103126110d757604051918201908282106001600160401b0383111761212b5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b1561283f57565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b1561288057565b60405162461bcd60e51b81526020600482015260176024820152766e6f74207265616368207472696767657220707269636560481b6044820152606490fd5b9190820391821161250157565b90816101409103126110d757604051906128e582612141565b805182526128f5602082016122ed565b60208301526040810151604083015261291060608201612301565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b6001600160a01b0390911681526020810191909152901515604082015260600190565b60405190612986826121af565b600982526873697a6544656c746160b81b6020830152565b908160c09103126110d7576040519060c08201908282106001600160401b0383111761212b5760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b60405190612a0d82612194565b602482526361626c6560e01b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65537460208201520152565b15612a4d57565b60405162461bcd60e51b815260206004820152601a6024820152790d8e040e6e8c2c4d8ca40e8ded6cadc40dcdee840cadcdeeaced60331b6044820152606490fd5b60405190612a9c82612194565b60238252620c8caf60eb1b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65496e60208201520152565b600160ff1b81146125015760000390565b15612aec57565b60405162461bcd60e51b81526020600482015260196024820152780d8e040d2dcc8caf040e8ded6cadc40dcdee840cadcdeeaced603b1b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b9260a094919796959260c0850198600180881b03168552602085015260408401526060830152151560808201520152565b600482101561242b5752565b91909160c08060e083019460018060a01b03815116845260208101516020850152604081015115156040850152606081015115156060850152612bd76080820151608086019061241e565b60a081015160a08501520151910152565b81516001600160a01b03168152602080830151908201526040808301516101608301949391612c1a919084019061241e565b606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080910151910152565b600354906000916040519163f9d244fd60e01b8352806004840152612c98602484018661241e565b6101a080846044816001600160a01b0387165afa9384156101fb578594613ae2575b505060208301516001600160a01b031615613adb576004851015613ac7578415613aa5575b6040838101516005549151632f7ce47360e21b8152600481018290529094916001600160a01b03169060e081602481855afa9081156104cc578791613a86575b50606081015115613a46576007546020848101516040516372c1cc1b60e11b81526001600160a01b039182166004820152921693919081602481875afa908115613698578991613a0c575b506139d357610100602491604051928380926330a66e1560e01b82528b60048301525afa9081156105215788916139b2575b50612db560e0850151801590811561398c575b50612838565b612dc560c0850151151588616b21565b95606085015160048110156138ef57158015613975575b156139465760c0850151156139175760c08201516127108181031161390357612e0c612e18916127100389613efd565b60a08701511015612879565b606085015160048110156138ef576001146138b0575b602085015160408087015160c0880151915163bc95baad60e01b815294926101409286928392612e6e92151591906001600160a01b031660048501612956565b0381885afa928315611bb7578a93613889575b50612f0190612ee1612e978a60e08a0151613fa2565b60e089015160405190612ea9826121af565b601f82527f65786563757465496e6372656173654f726465722073697a65416d6f756e74006020830152612edb612979565b91617065565b60808701519060e088015181519060806020840151930151938c88613c1c565b501561384d576101208501511580156137c9575b15613790576101608501511591821561370b575b5050156136d257600654604051632500ed8d60e21b8152600481018890529060c090829060249082906001600160a01b03165afa9081156105215788916136a3575b506040840151604051906301fd38f760e01b82526004820152602081602481875afa908115613698578991613666575b50612ffc612fa882613bd9565b604051612fb481612194565b603081527f65786563757465496e6372656173654f72646572207072654e65744578706f7360208201526f3ab932a0b6b7bab73a21b432b1b5b2b960811b6040820152616fa7565b8881126135ec5760c0850151156135a4575061302281602061303f9351910151906128bf565b6130338161302e612a8f565b616fa7565b60e08501511115612ae5565b60808301519187831361352c575b50506007546020830151608084015160e085015160c0860151604080516370bf730b60e11b81529a9650948a946001600160a01b039182169486948e9486946130a4948f949215159392918d911660048801612b4f565b03925af195861561352057809581976134e5575b506003546020840151604085015160c086015160608701516001600160a01b03948516949093169290151560048210156134d157906131209160e0890151936040519561310487612179565b8652602086015260408501526001606085015260808401612b80565b8660a083015260c0820152813b156108595761315583928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af18015610465579082916134bd575b50610120840151806133da575b50610160840151806132f7575b505087613267576003546001600160a01b0316803b1561085d57818091602460405180948193633e5005e560e01b83528a60048401525af1801561046557613253575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b61323060018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a0152606089019061241e565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b61325d8291612118565b61024b57806131c4565b600188146132a1575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795936131f2565b6003546001600160a01b0316803b1561085d5781809160246040518094819363121494ed60e31b83528a60048401525af18015610465576132e3575b50613270565b6132ed8291612118565b61024b57806132dd565b600354602086810151604088015161014089015160c08a01519395613399956001600160a01b03908116959416931515919061333290612ad4565b92604051946133408661215d565b85528785015260036040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af18015610465576133af575b8190613181565b602090813d83116133d3575b6133c581836121ca565b810103126110d757386133a8565b503d6133bb565b600354602086810151604088015161010089015160c08a0151939561347c956001600160a01b03908116959416931515919061341590612ad4565b92604051946134238661215d565b85528785015260026040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af1801561046557613492575b8190613174565b602090813d83116134b6575b6134a881836121ca565b810103126110d7573861348b565b503d61349e565b6134c690612118565b61024b578038613167565b634e487b7160e01b86526021600452602486fd5b955095506040853d604011613518575b81613502604093836121ca565b81010312610235576020855195015195386130b8565b3d91506134f5565b604051903d90823e3d90fd5b6004546020909201516001600160a01b039081169392169161354d90613bd9565b92823b15611bac579161357b939189809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af1801561024057613591575b808061304d565b61359d90959195612118565b933861358a565b6135e06135be83606060406135e7960151910151906128bf565b916135cb8361302e612a00565b6135da8960e08901519461401f565b90612702565b1015612a46565b61303f565b60c0850151156136335761362c61360d8360206135e79551910151906128bf565b6136198161302e612a8f565b61362760e088015193612ad4565b612702565b1015612ae5565b5061364b81606060406135e7940151910151906128bf565b6136578161302e612a00565b6135e08760e08701519261401f565b90506020813d602011613690575b81613681602093836121ca565b81010312611bac575138612f9b565b3d9150613674565b6040513d8b823e3d90fd5b6136c5915060c03d60c0116136cb575b6136bd81836121ca565b81019061299e565b38612f6b565b503d6136b3565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b51604051630bc628fb60e01b81526004810191909152600360248201529150602090829060449082906001600160a01b03165afa908115610521578891613756575b50153880612f29565b90506020813d602011613788575b81613771602093836121ca565b810103126105165761378290612301565b3861374d565b3d9150613764565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b508151604051630bc628fb60e01b81526004810191909152600260248201526020816044816001600160a01b0386165afa908115611bb7578a9161380f575b5015612f15565b90506020813d602011613845575b8161382a602093836121ca565b810103126138415761383b90612301565b38613808565b8980fd5b3d915061381d565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612f019193506138a9906101403d61014011610f6657610f5781836121ca565b9290612e81565b60c0850151909690156138da5760a085015190808210156138d357505b95612e2e565b90506138cd565b60a085015190808211156138d3575095612e2e565b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b8a52601160045260248afd5b60c08201518061271001612710116139035761393a612e18916127100189613efd565b60a08701511115612879565b60c0850151156139655761396060a0860151881015612879565b612e18565b61396060a0860151881115612879565b50606085015160048110156138ef57600114612ddc565b60408401518110159150816139a3575b5038612daf565b9050606083015110153861399c565b6139cd91506101003d6101001161122e5761122081836121ca565b38612d9c565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d602011613a3e575b81613a27602093836121ca565b81010312611bac57613a3890612301565b38612d6a565b3d9150613a1a565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b613a9f915060e03d60e01161113b5761112c81836121ca565b38612d1f565b613ac2613aba61018085015160025490612702565b42111561270f565b612cdf565b634e487b7160e01b84526021600452602484fd5b5050505050565b908092945081813d8311613bd2575b613afb81836121ca565b81010312610819576040519182018281106001600160401b03821117613bbe5760405280518252613b2e602082016122ed565b602083015260408101516040830152606081015160048110156102355760608301526080810151608083015260a081015160a0830152613b7060c08201612301565b60c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152913880612cba565b634e487b7160e01b86526041600452602486fd5b503d613af1565b60008112613be45790565b6124bc90612ad4565b9190916000838201938412911290801582169115161761250157565b8181029291811591840414171561250157565b9695939092949196613c3360a08201968751612702565b978815613de257613c48906080830151613bed565b9560008712613d9257519081613d74575b505060008512613d2f57613c7e90613c7984613c7488613bd9565b61401f565b613c09565b8610159182613d13575b505015613cd9578311613c9e576124bc90613bd9565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613d259250613c7990613c7486613bd9565b8411153880613c88565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b84613d8a939792613d8492613e58565b90613bed565b933880613c59565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b969593909294919660a081019580875110613e1357613c339087516128bf565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c0810190815190818514613ed3576060015115613ea95750805180841115613e9157506124bc92613e8b9151906128bf565b90613fa2565b613ea49291506124bc93613e8b916128bf565b612ad4565b83811115613ec057506124bc92613e8b91516128bf565b613ea4929150613e8b906124bc946128bf565b5050505050600090565b8115613ee7570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214613f97576127109082821115613f5a577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b90600019818309818302918280831092039180830392146140095768327cb2734119d3b7a9601e1b9082821115613f5a577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146140a35784831115613f5a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906124bc9250613edd565b906127109060001982840992828102928380861095039480860395146140a35784831115613f5a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b604090815161413881612194565b60249081815261419d6020917f6578656375746544656372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b868201528551614180816121af565b6009815268074696d657374616d760bc1b84820152854292617065565b60018054600380548751631ca37ea160e11b815292969195936004936001600160a01b0392879082908790829087165afa9081156143f0576000916143c3575b50808910156143b7578084116143af575b50965b82811061420357505050505050505050565b303b156110d7578851630fdc860f60e41b81528185820152600086820152604490600081838183305af190816143a0575b5061432c578890614243612441565b6308c379a01461426c575b506142615761425c906124f2565b6141f1565b88513d6000823e3d90fd5b61427461245f565b9081614281575b5061424e565b9091506142ce6000928c61039160f51b81519161429d83612194565b602283527f6578656375746544656372656173654d61726b65744f7264657273206572726f8d840152820152616fec565b8389541690813b156108595783606488858f95818096818f9951998a98899763c250985960e01b89528801528601528401525af1801561432257614313575b8061427b565b61431c90612118565b3861430d565b8b513d84823e3d90fd5b5061425c906107cd848b5161434081612194565b602981527f6578656375746544656372656173654d61726b65744f726465727320737563638a820152680cae6e640d2dcc8caf60bb1b8d820152838d5191614387836121af565b60088352670cadcc892dcc8caf60c31b8c840152617065565b6143a990612118565b38614234565b9250386141ee565b50505050505050505050565b908782813d83116143e9575b6143d981836121ca565b8101031261024b575051386141dd565b503d6143cf565b8a513d6000823e3d90fd5b90816101609103126110d757604051906144148261215d565b80518252614424602082016122ed565b602083015260408101516040830152606081015160048110156110d75760608301526080810151608083015260a081015160a083015260c081015160c083015261447060e08201612301565b60e0830152610100614483818301612301565b9083015261012080820151908301526144a0610140809201612301565b9082015290565b604051906144b482612194565b602482526361626c6560e01b6040837f6578656375746544656372656173654f7264657220617661696c61626c65537460208201520152565b604051906144fa82612194565b60238252620c8caf60eb1b6040837f6578656375746544656372656173654f7264657220617661696c61626c65496e60208201520152565b6003546040516340b4605b60e11b8152600481018390526000602482018190529092916001600160a01b03169061016084604481855afa93841561554d57819461552a575b5060018060a01b036020850151166060850151600481101561551657829160ff61463c8493604051936145a985612194565b603785527f6578656375746544656372656173654f72646572206163636f756e74202573206020860152766f7264657249642025732074726164655479706520257360481b604086015260405193849261461c6020850197637c7a8d8f60e11b89526080602487015260a4860190616f41565b9260448501528b606485015216608483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5060208401516001600160a01b03161561551057606084015160048110156110ff57156154f6575b60408401519360018060a01b036005541692604051632f7ce47360e21b815286600482015260e081602481885afa8015610488576154d7575b50600754602083015160408085015160e0860151915163bc95baad60e01b8152976001600160a01b03948516949093610140938a9384936146f693921515921660048501612956565b0381855afa9586156101fb5785966154b4575b5060a086015115615472579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101fb57859361544f575b5061477260c085015160a088015180821060001461544857505b8060c087015280159081156154235750612838565b61478260e0850151151589616b21565b9260608501516004811015614bd15715801561540c575b156153dc57610100850151156153bc5760c081015161271080828103116153a8576147c991612e0c910386613efd565b60608501516004811015614bd157600114615359575b614858906148386147f48660c0890151613fa2565b60c088015160405190614806826121af565b601f82527f6578656375746544656372656173654f726465722073697a65416d6f756e74006020830152612edb612979565b60808601519060c08701518151906080602084015193015193888c613df3565b5050600654604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561024057869161533a575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa918215610240578692615306575b506149266148d28361627d565b6040516148de81612194565b603081527f6578656375746544656372656173654f72646572207072654e65744578706f7360208201526f3ab932a0b6b7bab73a21b432b1b5b2b960811b6040820152616fec565b85821261529f5760e085015161526457614948915060208151910151906128bf565b6149548161302e6144ed565b60c08401511190815b6151325750508260808301511361504f575b60018060a01b036007541694606060018060a01b0360208501511696608085015190898760c08801519a6149c18860e08b015115156040519e8f98899788966387d4f0d560e01b885260048801612b4f565b03925af192831561048857849585978695615009575b5060608201516004811015614bd157614ec557506003546001600160a01b0316803b156102355785809160246040518094819363be82e5b160e01b83528860048401525af1801561024057908691614eb1575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156138ef57614a949086519260c08801519460405196614a7988612179565b8752602087015260408601528a606086015260808501612b80565b60a083015260c0820152813b156104c157614ac887928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af1801561024057908691614e9d575b5050600754602082015160408084015160e0850151915163bc95baad60e01b8152936101409385936001600160a01b039283169385938493614b2493151592911660048501612956565b03915afa908115610240579060a0918791614e7c575b50015115614be5575b602081015160608201516001600160a01b03909116986004821015614bd15791614ba86000805160206170c78339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a019061241e565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b605482015260358152614c3181612194565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611bb7578a98614d3f575b50895b8851811015614d3057614c80818a6126bd565b51606081015115614c9b575b50614c96906124f2565b614c6d565b60018060a01b036003541690608060a08201519101516004811015614d1c579082918e933b156101f0576064849283614cef95604051968795869463c250985960e01b86526004860152602485019061241e565b8160448401525af1801561046557614d08575b50614c8c565b614d1190612118565b611c01578a38614d02565b634e487b7160e01b8e52602160045260248efd5b50919396509194979396614b43565b9097503d808b833e614d5181836121ca565b6020828281010312611c01578151906001600160401b038211614e7857808301601f838501011215614e78578183015190614d8b826121eb565b93614d9960405195866121ca565b8285526020850193828201602060e08602838501010111614e745793602085830101945b602060e0860282850101018610614ddb575050505050509638614c6a565b60e0868585010312614e705760405191614df483612179565b614dfd876122ed565b835260208701516020840152614e1560408801612301565b6040840152614e2660608801612301565b60608401526080870151926004841015614e6a57602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050614dbd565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b614e9791506101403d61014011610f6657610f5781836121ca565b38614b3a565b614ea690612118565b610819578438614ada565b614eba90612118565b610819578438614a2a565b60608201516004811015614bd157600103614f3557506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691614f21575b5050614a2d565b614f2a90612118565b610819578438614f1a565b60035490516060830151916001600160a01b03166004831015614ff557803b1561051657916064889283614f84956040519687958694634136de9f60e01b86526004860152602485019061241e565b8160448401525af1801561024057908691614fe1575b50506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691614f21575050614a2d565b614fea90612118565b610819578438614f9a565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011615047575b81615028606093836121ca565b810103126101f0578451956040602087015196015196959693386149d7565b3d915061501b565b60018060a01b036005541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa908115610488578491615113575b5060045460209091015160065460808501516001600160a01b039283169383169291909116906150b890613bd9565b92823b156104c157916150e6939187809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af18015610488579084916150ff575b505061496f565b61510890612118565b6108595782386150f8565b61512c915060e03d60e01161113b5761112c81836121ca565b38615089565b9094506151776040969392949651615149816121af565b601c81527b195e1958dd5d19511958dc99585cd953dc99195c881b99595910511360221b6020820152616f66565b60608201516004811015614bd157813b156104c157856151b19288928360405180968195829463c1872cf360e01b84528b600485016124d0565b03925af1801561024057615251575b50602081015160608201516001600160a01b03909116966004821015614bd157916152246000805160206170c78339815191529896949261016098969460c060e0850151151594015194604051998a5260208a01526040890152606088019061241e565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b61525d90959195612118565b93386151c0565b61527b8160606040615297940151910151906128bf565b916152888361302e6144a7565b6135da8560c08801519461401f565b10908161495d565b60e08501516152d6576152bc8160206152979351910151906128bf565b6152c88161302e6144ed565b61362760c087015193612ad4565b6152eb915060606040820151910151906128bf565b6152f78161302e6144a7565b6152978360c08601519261401f565b9091506020813d602011615332575b81615322602093836121ca565b81010312610235575190386148c5565b3d9150615315565b615353915060c03d60c0116136cb576136bd81836121ca565b38614895565b926148589060e08601511560001461538b5760a0860151908082101561538457505b935b90506147df565b905061537b565b60a086015190808211156153a157505b9361537d565b905061539b565b634e487b7160e01b88526011600452602488fd5b60c081015161271081810181116153a8576147c99161393a910186613efd565b610100850151156153fc576153f760a0860151851115612879565b6147c9565b6153f760a0860151851015612879565b5060608501516004811015614bd157600114614799565b6040860151811015915081615439575038612daf565b9050606085015110153861399c565b905061475d565b61546b9193506101003d6101001161122e5761122081836121ca565b9138614743565b5050505050506154b29150604051615489816121af565b60178152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6020820152616fa7565b565b6154d09196506101403d61014011610f6657610f5781836121ca565b9438614709565b6154ef9060e03d60e01161113b5761112c81836121ca565b50386146ad565b61550b613aba61012086015160025490612702565b614674565b50505050565b634e487b7160e01b83526021600452602483fd5b6155469194506101603d610160116112905761128081836121ca565b9238614577565b50604051903d90823e3d90fd5b6003546000615580604051946340b4605b60e11b8652846004870152602486019061241e565b610160846044816001600160a01b0386165afa93841561554d578194616237575b5060018060a01b036020850151166060850151600481101561551657829160ff6155d38493604051936145a985612194565b51906a636f6e736f6c652e6c6f675afa5060208401516001600160a01b03161561551057606084015160048110156110ff571561621d575b60408401519360018060a01b036005541692604051632f7ce47360e21b815286600482015260e081602481885afa8015610488576161fe575b50600754602083015160408085015160e0860151915163bc95baad60e01b8152976001600160a01b03948516949093610140938a93849361568d93921515921660048501612956565b0381855afa9586156101fb5785966161db575b5060a086015115615472579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101fb5785936161b8575b5061570860c085015160a088015180821060001461544857508060c087015280159081156154235750612838565b61571860e0850151151589616b21565b9260608501516004811015614bd1571580156161a1575b1561617157610100850151156161515760c081015161271080828103116153a85761575f91612e0c910386613efd565b60608501516004811015614bd157600114616102575b61578a906148386147f48660c0890151613fa2565b5050600654604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa9081156102405786916160e3575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa9182156102405786926160af575b506158046148d28361627d565b8582126160625760e085015161604357615826915060208151910151906128bf565b6158328161302e6144ed565b60c08401511190815b615f6e57505082608083015113615e8b575b60018060a01b036007541694606060018060a01b0360208501511696608085015190898760c08801519a61589f8860e08b015115156040519e8f98899788966387d4f0d560e01b885260048801612b4f565b03925af192831561048857849585978695615e45575b5060608201516004811015614bd157615d1557506003546001600160a01b0316803b156102355785809160246040518094819363be82e5b160e01b83528860048401525af1801561024057908691615d01575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156138ef576159579086519260c08801519460405196614a7988612179565b60a083015260c0820152813b156104c15761598b87928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af1801561024057908691615ced575b5050600754602082015160408084015160e0850151915163bc95baad60e01b8152936101409385936001600160a01b0392831693859384936159e793151592911660048501612956565b03915afa908115610240579060a0918791615ccc575b50015115615a6a57602081015160608201516001600160a01b03909116986004821015614bd15791614ba86000805160206170c78339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a019061241e565b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b605482015260358152615ab681612194565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611bb7578a98615ba1575b50895b8851811015614d3057615b05818a6126bd565b51606081015115615b20575b50615b1b906124f2565b615af2565b60018060a01b036003541690608060a08201519101516004811015614d1c579082918e933b156101f0576064849283615b7495604051968795869463c250985960e01b86526004860152602485019061241e565b8160448401525af1801561046557615b8d575b50615b11565b615b9690612118565b611c01578a38615b87565b9097503d808b833e615bb381836121ca565b6020828281010312611c01578151906001600160401b038211614e7857808301601f838501011215614e78578183015190615bed826121eb565b93615bfb60405195866121ca565b8285526020850193828201602060e08602838501010111614e745793602085830101945b602060e0860282850101018610615c3d575050505050509638615aef565b60e0868585010312614e705760405191615c5683612179565b615c5f876122ed565b835260208701516020840152615c7760408801612301565b6040840152615c8860608801612301565b60608401526080870151926004841015614e6a57602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050615c1f565b615ce791506101403d61014011610f6657610f5781836121ca565b386159fd565b615cf690612118565b61081957843861599d565b615d0a90612118565b610819578438615908565b60608201516004811015614bd157600103615d8557506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691615d71575b505061590b565b615d7a90612118565b610819578438615d6a565b60035490516060830151916001600160a01b03166004831015614ff557803b1561051657916064889283615dd4956040519687958694634136de9f60e01b86526004860152602485019061241e565b8160448401525af1801561024057908691615e31575b50506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691615d7157505061590b565b615e3a90612118565b610819578438615dea565b9650935095506060853d606011615e83575b81615e64606093836121ca565b810103126101f0578451956040602087015196015196959693386158b5565b3d9150615e57565b60018060a01b036005541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa908115610488578491615f4f575b5060045460209091015160065460808501516001600160a01b03928316938316929190911690615ef490613bd9565b92823b156104c15791615f22939187809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af1801561048857908491615f3b575b505061584d565b615f4490612118565b610859578238615f34565b615f68915060e03d60e01161113b5761112c81836121ca565b38615ec5565b909450615f856040969392949651615149816121af565b60608201516004811015614bd1576001600160a01b0382163b156104c15785615fc89288928360405180968195829463c1872cf360e01b84528b600485016124d0565b03926001600160a01b03165af18015610240576152515750602081015160608201516001600160a01b03909116966004821015614bd157916152246000805160206170c78339815191529896949261016098969460c060e0850151151594015194604051998a5260208a01526040890152606088019061241e565b61527b816060604061605a940151910151906128bf565b10908161583b565b60e085015161607f576152bc81602061605a9351910151906128bf565b616094915060606040820151910151906128bf565b6160a08161302e6144a7565b61605a8360c08601519261401f565b9091506020813d6020116160db575b816160cb602093836121ca565b81010312610235575190386157f7565b3d91506160be565b6160fc915060c03d60c0116136cb576136bd81836121ca565b386157c7565b9261578a9060e0860151156000146161345760a0860151908082101561612d57505b935b9050615775565b9050616124565b60a0860151908082111561614a57505b93616126565b9050616144565b60c081015161271081810181116153a85761575f9161393a910186613efd565b610100850151156161915761618c60a0860151851115612879565b61575f565b61618c60a0860151851015612879565b5060608501516004811015614bd15760011461572f565b6161d49193506101003d6101001161122e5761122081836121ca565b91386156da565b6161f79196506101403d61014011610f6657610f5781836121ca565b94386156a0565b6162169060e03d60e01161113b5761112c81836121ca565b5038615644565b616232613aba61012086015160025490612702565b61560b565b6162539194506101603d610160116112905761128081836121ca565b92386155a1565b60005b83811061626d5750506000910152565b818101518382015260200161625d565b600081126164445760405160208101908082106001600160401b0383111761212b576162b0916040526000815291613bd9565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015616436575b506904ee2d6d415b85acef8160201b80821015616429575b50662386f26fc100008082101561641c575b506305f5e1008082101561640f575b5061271080821015616402575b5060648110156163f4575b600a809110156163ea575b60018084019281602161635b616345876126e7565b9661635360405198896121ca565b8088526126e7565b602087019790601f1901368937860101905b6163b4575b505050506163a8926124bc926020926040519583616399889551809288808901910161625a565b8401915180938684019061625a565b010380845201826121ca565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156163e55791908261636d565b616372565b9160010191616330565b606460029104920191616325565b600491049201913861631a565b600891049201913861630d565b60109104920191386162fe565b60209104920191386162ec565b6040935082049050386162d4565b6162b0604051616453816121af565b60018152602d60f81b602082015291613bd9565b600754604051636468402960e11b8152600481018390526000929161014090829060249082906001600160a01b03165afa908115611142578391616b00575b50828060018060a01b0360208401511660408401519061654a604051926164cc84612194565b602984527f6c6971756964617465506f736974696f6e206163636f756e742025732070616960208501526872496e64657820257360b81b60408501526040519283916165316020840196630d26b92560e01b8852606060248601526084850190616f41565b916044840152606483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5060a081015115616ac95761657a60408201516060830151151590616b21565b606082015190939015616a8b5760c0820180516166829181871115616a6f576165ae9150613e8b60a08601519151886128bf565b828061663e61666360c08801516166556165c78761627d565b91604051926165d584612194565b603284527f6c6971756964617465506f736974696f6e2061766572616765507269636520256020850152717320756e7265616c697a6564506e6c20257360701b6040850152604051958694635970e08960e01b6020870152606060248701526084860190616f41565b916044850152602319848303016064850152616f41565b03601f1981018352826121ca565b6020815191016a636f6e736f6c652e6c6f675afa506080840151613bed565b60018060a01b036005541661010060408501516024604051809481936330a66e1560e01b835260048301525afa908115611142579083918291616a4e575b508183136169545750505060015b81806040516166dc816121af565b601f81527f6c6971756964617465506f736974696f6e206e6565644c697175696461746500602082015260405161674881616730602082019463c3b5563560e01b8652604060248401526064830190616f41565b9615968715604483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa50615510576003546020830151604084015160608501511515926001600160a01b039081169216823b1561081957916167ac939185809460405196879586948593638ffb8b2f60e01b855260048501612956565b03925af1801561046557616945575b509081602061685a60018060a01b036003541660018060a01b0383860151166040860151606087015115156167f360a0890151612ad4565b91604051936168018561215d565b8452868401528660408401528660608401528a608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af192831561352057926168ef575b50907faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb7993610100939261689d83614532565b60018060a01b036020820151169060408101516060820151151590608060a084015193015193604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152a1565b9291506020833d60201161693d575b8161690b602093836121ca565b810103126110d757915190917faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb7961686b565b3d91506168fe565b61694e90612118565b386167bb565b61697a83616975849360a061696c8c828c0151613fa2565b91015190613efd565b6140b0565b61271081101593616a3861699260a08901519261627d565b91616655604051946169a386612194565b604086527f6c6971756964617465506f736974696f6e207269736b5261746520257320706f60208701527f736974696f6e416d6f756e74202573206578706f7375726541737365742025736040870152604051948593616a1c60208601986342a59a4b60e11b8a526080602488015260a4870190616f41565b9260448601526064850152602319848303016084850152616f41565b51906a636f6e736f6c652e6c6f675afa506166ce565b616a6991506101003d6101001161122e5761122081836121ca565b386166c0565b50613ea4616a8691613e8b8860a0880151926128bf565b6165ae565b60c0820180516166829186821115616ab257616a869150613e8b8760a087015192516128bf565b50613ea4616a8691613e8b60a087015191896128bf565b5050506154b2604051616adb816121af565b6013815272706f736974696f6e206e6f742065786973747360681b6020820152616f66565b616b1b91506101403d61014011610f6657610f5781836121ca565b386164a6565b60408051631f94a27560e31b81526004926001600160a01b0392602092909190838187817f000000000000000000000000000000000000000000000000000000000000000089165afa908115616eef57908591600091616eb8575b5016846005541690835195632f7ce47360e21b8752838888015260249660e0818981875afa908115616ead57600091616e8f575b50805186516341976e0960e01b81529083168a82015299878b8a81875afa9a8b15616e845760009b616e49575b50906000808a616c50616c6c8b8d9897640339012b9960dd1b825192616c0284612194565b602584527f67657456616c696450726963652070616972496e6465782025732069734c6f6e8c8501528301528d5193849260608c85019763ca7733b160e01b89528501526084840190616f41565b908d60448401521515606483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5051166044865180948193637641b69960e01b83528c83015260008b8301525afa8015616e03578890600090616e17575b616d159250616d0281838851616cc281612194565b602a81527f67657456616c69645072696365206f7261636c65507269636520257320696e648b820152696578507269636520257360b01b8a820152617033565b8181811115616e0e5790616975916128bf565b9183519182916330a66e1560e01b83528883015281876101009485935afa918215616e03579060e09291600092616de6575b505001616d9d8151838551616d5b81612194565b602c81527f67657456616c69645072696365206469666650202573206d6178507269636544888201526b6576696174696f6e5020257360a01b87820152617033565b5110616daa575050505090565b5162461bcd60e51b815292830152601a908201527932bc31b2b2b21036b0bc10383934b1b2903232bb34b0ba34b7b760311b6044820152606490fd5b616dfc9250803d1061122e5761122081836121ca565b3880616d47565b84513d6000823e3d90fd5b616975916128bf565b90508582813d8311616e42575b616e2e81836121ca565b8101031261024b575087616d159151616cad565b503d616e24565b9091929b9a8882819c9b9c3d8311616e7d575b616e6681836121ca565b8101031261024b575051999a979897919086616bdd565b503d616e5c565b87513d6000823e3d90fd5b616ea7915060e03d811161113b5761112c81836121ca565b38616bb0565b86513d6000823e3d90fd5b91508482813d8311616ee8575b616ecf81836121ca565b8101031261024b5750616ee285916122ed565b38616b7c565b503d616ec5565b83513d6000823e3d90fd5b604051602081016351973ec960e01b81526004825260408201908282106001600160401b0383111761212b57600092839260405251906a636f6e736f6c652e6c6f675afa50565b90602091616f5a8151809281855285808601910161625a565b601f01601f1916010190565b60008091604051616f9481616655602082019463104c13eb60e21b8652602060248401526044830190616f41565b51906a636f6e736f6c652e6c6f675afa50565b600091908291616f946040518092616fd86020830195632d839cb360e21b8752604060248501526064840190616f41565b90604483015203601f1981018352826121ca565b60009190616655616f9484936040519283916170216020840196634b5c427760e01b8852604060248601526064850190616f41565b83810360231901604485015290616f41565b60009291616f948493604051928391616531602084019663ca47c4eb60e01b8852606060248601526084850190616f41565b90616f946000949385946170b260405194859361709b602086019863c67ea9d160e01b8a526080602488015260a4870190616f41565b916044860152602319858303016064860152616f41565b90608483015203601f1981018352826121ca56fe9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee0613a2646970667358221220ee74d1e6cfcb62d593eba7525d32543bcd309310171ccd8c4c83b6e7d2cba26764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063094ae065146120e35780631848effa1461209e578063531d87c114611f8e5780635be766c314611f70578063791b98bc14611f47578063a31a7b4414611f1e578063a776034014611c46578063afb566e414611978578063b298f25a14611759578063be39f3aa146115e8578063bfa5ea99146114d8578063c04c0f5814611384578063cb0269c914611366578063d4053f7b14611349578063da9d857b14610c0a578063e70da1b514610af9578063ef09314a14610861578063efc95de814610591578063f1bd27a814610568578063f2ac5dfe146102a0578063f9b6117f14610277578063fc2a5b1d1461024e5763fdc860f01461011a57600080fd5b3461024b57610128366122ce565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102405785918791610206575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101fb5785946101bc575b50506101b46101b99361230e565b61555a565b80f35b90809450813d83116101f4575b6101d381836121ca565b810103126101f0576101b46101ea6101b994612301565b936101a6565b8380fd5b503d6101c9565b6040513d87823e3d90fd5b82819392503d8311610239575b61021d81836121ca565b810103126102355761022f85916122ed565b3861017b565b8580fd5b503d610213565b6040513d88823e3d90fd5b80fd5b503461024b578060031936011261024b576005546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576003546040516001600160a01b039091168152602090f35b503461024b57608036600319011261024b57806001600160401b03600435818111610470576102d3903690600401612202565b90602435818111610563576102ec903690600401612270565b9060643590811161056357610305903690600401612270565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052157839187918a9161052c575b506024604051809481936335d2155560e11b8352336004840152165afa801561052157869189916104df575b509161039960049361230e565b8551855114806104d7575b6103ad9061234f565b604051635ed6d55b60e11b815292839182905afa9081156104cc578791610493575b501691823b156102355761040092869283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1908115610488578491610474575b5050303b1561047057610442918391604051938492839263180981eb60e31b84526004840152602483019061238c565b038183305af18015610465576104555750f35b61045e90612118565b61024b5780f35b6040513d84823e3d90fd5b5050fd5b61047d90612118565b610470578238610412565b6040513d86823e3d90fd5b90508481813d83116104c5575b6104aa81836121ca565b810103126104c1576104bb906122ed565b386103cf565b8680fd5b503d6104a0565b6040513d89823e3d90fd5b5060016103a4565b82819392503d831161051a575b6104f681836121ca565b810103126105165760049161039961050e8893612301565b91935061038c565b8780fd5b503d6104ec565b6040513d8a823e3d90fd5b92505081813d831161055c575b61054381836121ca565b81010312610516578561055684926122ed565b38610360565b503d610539565b505050fd5b503461024b578060031936011261024b576007546040516001600160a01b039091168152602090f35b503461024b5760208060031936011261085d576004356001600160401b038111610859576105c3903690600401612270565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156101fb578591610824575b508260405180926335d2155560e11b8252336004830152816024958692165afa80156101fb5785906107ea575b61064b915061230e565b61069660405161065a81612194565b8281527f6578656375746544656372656173654c696d69744f72646572732074696d65738482015263074616d760e41b60408201524290616fa7565b835b83518110156107e6576106ab81856126bd565b51303b156102355760405190630fdc860f60e41b82526004820152600190818482015286808260448183305af191826107d2575b505061076f576106ed612441565b6308c379a01461070a575b61048857610705906124f2565b610698565b61071261245f565b8061071e575b506106f8565b9050610769869160405161073181612194565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f7287820152600160fd1b6040820152616fec565b38610718565b50806107cd61078161070593876126bd565b5160405161078e81612194565b602881527f6578656375746544656372656173654c696d69744f726465727320737563636587820152670e6e640d2dcc8caf60c31b6040820152616fa7565b6124f2565b6107db90612118565b6104c15786386106df565b8480f35b508281813d831161081d575b61080081836121ca565b810103126108195761081461064b91612301565b610641565b8480fd5b503d6107f6565b90508281813d8311610852575b61083b81836121ca565b810103126108195761084c906122ed565b38610614565b503d610831565b8280fd5b5080fd5b503461024b5760a036600319011261024b57806001600160401b0360043581811161047057610894903690600401612202565b90602435908111610470576108ad903690600401612270565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104cc57849184918991610ac2575b506024604051809481936335d2155560e11b8352336004840152165afa80156104cc5783918891610a84575b509161093d60049361230e565b865186511480610a7c575b6109519061234f565b604051635ed6d55b60e11b815292839182905afa918215610240578692610a46575b50501691823b15610563576109a592849283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1801561046557610a32575b5050303b1561024b5760405163531d87c160e01b815260643560048201528190818160248183305af1801561046557610a1e575b5050303b1561024b5760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610465576104555750f35b610a2790612118565b61024b5780386109e8565b610a3b90612118565b61024b5780386109b4565b90809250813d8311610a75575b610a5d81836121ca565b8101031261081957610a6e906122ed565b3880610973565b503d610a53565b506001610948565b82819392503d8311610abb575b610a9b81836121ca565b810103126104c15760049161093d610ab38593612301565b919350610930565b503d610a91565b92505081813d8311610af2575b610ad981836121ca565b810103126104c15782610aec85926122ed565b38610904565b503d610acf565b503461024b57610b08366122ce565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102405785918791610bd4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101fb578594610b99575b5050610b946101b99361230e565b612c70565b90809450813d8311610bcd575b610bb081836121ca565b810103126101f057610b94610bc76101b994612301565b93610b86565b503d610ba6565b82819392503d8311610c03575b610beb81836121ca565b8101031261023557610bfd85916122ed565b38610b5b565b503d610be1565b503461024b57608036600319011261024b576001600160401b0360043581811161085957610c3c903690600401612270565b9060243590811161085957610c55903690600401612270565b6064359160048310156101f0576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101fb57859161130a575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa80156101fb5785906112cf575b610cf0915061230e565b610d2b604051610cff816121af565b601a81527932bc32b1baba32a0a22620b7322232b1b932b0b9b2a7b93232b960311b6020820152616f66565b8051825103611297576003546040516340b4605b60e11b815260443560048201529384916001600160a01b031690610d6790602484019061241e565b8160446101609687935afa9384156101fb578594611268575b5050610140830151156112355760018060a01b03600554166040840151604051906330a66e1560e01b8252600482015261010081602481855afa908115610240578691611204575b508251919492610dd7836121eb565b92610de560405194856121ca565b808452610df4601f19916121eb565b01875b8181106111a757505060075487946001600160a01b039091169190855b8251871015610f7857610e2787846126bd565b519660405197636468402960e11b8952600489015261014088602481885afa978815610f6d578b98610f3a575b50610e5f818a6126bd565b5160a089015110610ef957610e74818a6126bd565b51606087015110610eb957610e97610eb392610e90838c6126bd565b5190612702565b97610ea282896126bd565b52610ead81886126bd565b506124f2565b95610e14565b60405162461bcd60e51b8152602060048201526018602482015277195e18d959591cc81b585e081d1c98591948185b5bdd5b9d60421b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527820a2261039b4bd329032bc31b2b2b239903837b9b4ba34b7b760391b6044820152606490fd5b610f5f9198506101403d61014011610f66575b610f5781836121ca565b8101906128cc565b9638610e54565b503d610f4d565b6040513d8d823e3d90fd5b9088868b9360c08401510361114d57839160e06040850151602460405180948193632f7ce47360e21b835260048301525afa801561114257611113575b50610fca604084015160e08501511590616b21565b90825b81518110156110e457836020611081610fe684866126bd565b5160018060a01b03600354169060018060a01b0384820151169060408101519061101a60a060608301511515920151612ad4565b91604051936110288561215d565b84528684015286604084015286606084015289608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af19081156101fb5785916110a6575b50906107cd6110a192614532565b610fcd565b919450506020813d6020116110dc575b816110c3602093836121ca565b810103126110d757518593906107cd611093565b600080fd5b3d91506110b6565b83606086015160048110156110ff576101b99060443561555a565b634e487b7160e01b82526021600452602482fd5b6111349060e03d60e01161113b575b61112c81836121ca565b81019061274b565b5084610fb5565b503d611122565b6040513d85823e3d90fd5b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b602090604098939698516111ba81612141565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610df7565b61122891506101003d6101001161122e575b61122081836121ca565b8101906127c1565b38610dc8565b503d611216565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b611288929450803d10611290575b61128081836121ca565b8101906143fb565b913880610d80565b503d611276565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d602011611302575b816112e9602093836121ca565b81010312610819576112fd610cf091612301565b610ce6565b3d91506112dc565b90506020813d602011611341575b81611325602093836121ca565b8101031261081957602061133a6024926122ed565b9150610caf565b3d9150611318565b503461024b578060031936011261024b5760209054604051908152f35b503461024b578060031936011261024b576020600254604051908152f35b503461024b576020908160031936011261024b576004356001600160401b03811161085d576113b7903690600401612270565b6040516351331ad760e01b815290926001600160a01b039181816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156104885790829185916114a2575b506024604051809581936335d2155560e11b8352336004840152165afa90811561114257839161146b575b50611440915061230e565b805b825181101561146757806107cd61145c61146293866126bd565b51616467565b611442565b5080f35b905081813d831161149b575b61148181836121ca565b8101031261085d5761149561144091612301565b38611435565b503d611477565b82819392503d83116114d1575b6114b981836121ca565b810103126101f0576114cb82916122ed565b3861140a565b503d6114af565b503461024b5760208060031936011261085d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561048857829185916115b2575b506024604051809581936335d2155560e11b8352336004840152165afa90811561114257839161157b575b836115708361230e565b6101b960043561412a565b905081813d83116115ab575b61159181836121ca565b8101031261085d576115a561157091612301565b38611566565b503d611587565b82819392503d83116115e1575b6115c981836121ca565b810103126101f0576115db82916122ed565b3861153b565b503d6115bf565b503461024b5760208060031936011261085d576040516351331ad760e01b815260048035916001600160a01b039184908290817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101fb5784918691611723575b50602460405180948193637be53ca160e01b8352336004840152165afa9081156104885784916116ee575b50156116b9577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160025491816002558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d831161171c575b61170581836121ca565b810103126101f05761171690612301565b3861167a565b503d6116fb565b82819392503d8311611752575b61173a81836121ca565b810103126108195761174c84916122ed565b3861164f565b503d611730565b503461024b5760208060031936011261085d576004356001600160401b0381116108595761178b903690600401612270565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156101fb578591611943575b508260405180926335d2155560e11b8252336004830152816024958692165afa80156101fb57859061190d575b611813915061230e565b835b83518110156107e65761182881856126bd565b51303b15610235576040519063e70da1b560e01b82526004820152600190818482015286808260448183305af191826118f9575b50506118ec5761186a612441565b6308c379a014611887575b61048857611882906124f2565b611815565b61188f61245f565b8061189b575b50611875565b90506118e686916040516118ae81612194565b602181527f65786563757465496e6372656173654c696d69744f7264657273206572726f7287820152600160fd1b6040820152616fec565b38611895565b50611882906107cd616efa565b61190290612118565b6104c157863861185c565b508281813d831161193c575b61192381836121ca565b810103126108195761193761181391612301565b611809565b503d611919565b90508281813d8311611971575b61195a81836121ca565b810103126108195761196b906122ed565b386117dc565b503d611950565b503461024b578060031960e036820112611c43576001600160401b03600435818111610563576119ac903690600401612202565b91602435828111610819576119c5903690600401612270565b91606435818111610235576119de903690600401612270565b90608435908111610235576119f7903690600401612270565b9360c4359360048510156104c1576040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa908115610f6d57849184918d91611c0c575b506024604051809481936335d2155560e11b8352336004840152165afa8015610f6d5783918c91611bca575b5091611a9560049361230e565b865186511480611bc2575b611aa99061234f565b604051635ed6d55b60e11b815292839182905afa918215611bb7578a92611b7d575b50501691823b1561051657611afd92889283604051809681958294631e09986f60e21b845260443591600485016123c0565b03925af1908115610240578691611b69575b5050303b15610819578492610442611b56611b4794604051978896879663da9d857b60e01b885260806004890152608488019061238c565b9186830301602487015261238c565b9160a4356044850152606484019061241e565b611b7290612118565b610819578438611b0f565b90809250813d8311611bb0575b611b9481836121ca565b81010312611bac57611ba5906122ed565b3880611acb565b8880fd5b503d611b8a565b6040513d8c823e3d90fd5b506001611aa0565b82819392503d8311611c05575b611be181836121ca565b81010312611c0157600491611a95611bf98593612301565b919350611a88565b8a80fd5b503d611bd7565b92505081813d8311611c3c575b611c2381836121ca565b81010312611c015782611c3685926122ed565b38611a5c565b503d611c19565b50fd5b503461024b5760a036600319011261024b576001600160401b039060043582811161085d57611c79903690600401612202565b9160243581811161085957611c92903690600401612270565b6064358281116101f057611caa903690600401612270565b916084359081116101f057611cc3903690600401612270565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052157839187918a91611ee7575b506024604051809481936335d2155560e11b8352336004840152165afa908115610521579086918991611ea9575b5091611d5960049361230e565b895185511480611ea1575b611d6d9061234f565b604051635ed6d55b60e11b815292839182905afa9081156104cc578791611e6c575b501690813b1561023557958591611dc19783604051809a81958294631e09986f60e21b845260443591600485016123c0565b03925af1801561048857611e58575b839450303b156105635783611e00916040518093819263594c792d60e11b8352866004840152602483019061238c565b038183305af1908115610488578491611e44575b5050303b15610470576104429183916040519384928392631df92bbd60e31b84526004840152602483019061238c565b611e4d90612118565b610470578238611e14565b929093611e6490612118565b918390611dd0565b90508481813d8311611e9a575b611e8381836121ca565b810103126104c157611e94906122ed565b38611d8f565b503d611e79565b506001611d64565b82819392503d8311611ee0575b611ec081836121ca565b8101031261051657600491611d59611ed88893612301565b919350611d4c565b503d611eb6565b92505081813d8311611f17575b611efe81836121ca565b810103126105165785611f1184926122ed565b38611d1e565b503d611ef4565b503461024b578060031936011261024b576006546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576004546040516001600160a01b039091168152602090f35b503461024b578060031936011261024b576020600154604051908152f35b503461024b5760208060031936011261085d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa80156104885782918591612068575b506024604051809581936335d2155560e11b8352336004840152165afa908115611142578391612031575b836120268361230e565b6101b9600435612517565b905081813d8311612061575b61204781836121ca565b8101031261085d5761205b61202691612301565b3861201c565b503d61203d565b82819392503d8311612097575b61207f81836121ca565b810103126101f05761209182916122ed565b38611ff1565b503d612075565b503461024b578060031936011261024b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461024b57604036600319011261024b5760243590811515820361024b57602061211083600435616b21565b604051908152f35b6001600160401b03811161212b57604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761212b57604052565b61016081019081106001600160401b0382111761212b57604052565b60e081019081106001600160401b0382111761212b57604052565b606081019081106001600160401b0382111761212b57604052565b604081019081106001600160401b0382111761212b57604052565b90601f801991011681019081106001600160401b0382111761212b57604052565b6001600160401b03811161212b5760051b60200190565b81601f820112156110d757803591612219836121eb565b9261222760405194856121ca565b808452602092838086019260051b8201019283116110d7578301905b828210612251575050505090565b81356001600160a01b03811681036110d7578152908301908301612243565b81601f820112156110d757803591612287836121eb565b9261229560405194856121ca565b808452602092838086019260051b8201019283116110d7578301905b8282106122bf575050505090565b813581529083019083016122b1565b60409060031901126110d7576004359060243560048110156110d75790565b51906001600160a01b03821682036110d757565b519081151582036110d757565b1561231557565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b1561235657565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b8281106123ac575050505090565b83518552938101939281019260010161239e565b9392916060850191606086528051809352608086019260208092019060005b81811061240157505050858303908601526040916123fc9161238c565b930152565b82516001600160a01b0316865294830194918301916001016123df565b90600482101561242b5752565b634e487b7160e01b600052602160045260246000fd5b60009060033d1161244e57565b905060046000803e60005160e01c90565b600060443d106124bc57604051600319913d83016004833e81516001600160401b03918282113d6024840111176124bf578184019485519384116124c7573d850101602084870101116124bf57506124bc929101602001906121ca565b90565b949350505050565b50949350505050565b91926124eb604092959460608501968552602085019061241e565b1515910152565b60001981146125015760010190565b634e487b7160e01b600052601160045260246000fd5b60009081549060018060a01b036003602082825416936040948551928380926386249bab60e01b825260049586915afa9081156126b3578891612682575b508087101561267857808211612670575b50945b8581106125795750505050505050565b303b156104c157845163e70da1b560e01b8152818382015260249088828201526044908981838183305af19081612661575b50612653576001916125bb612441565b6308c379a0146125e4575b50506125da576125d5906124f2565b612569565b84513d88823e3d90fd5b6125ec61245f565b156125c65790915088918686541690813b15611c01576064868c809460018995838f51998a98899763c250985960e01b89528801528601528401525af180156126495761263a575b806125c6565b61264390612118565b38612634565b87513d8b823e3d90fd5b50506125d5906107cd616efa565b61266a90612118565b386125ab565b905038612566565b5050505050505050565b90506020813d82116126ab575b8161269c602093836121ca565b81010312610516575138612555565b3d915061268f565b86513d8a823e3d90fd5b80518210156126d15760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03811161212b57601f01601f191660200190565b9190820180921161250157565b1561271657565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b908160e09103126110d75760c06040519161276583612179565b61276e816122ed565b835261277c602082016122ed565b602084015261278d604082016122ed565b604084015261279e60608201612301565b60608401526080810151608084015260a081015160a0840152015160c082015290565b809161010092839103126110d757604051918201908282106001600160401b0383111761212b5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b1561283f57565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b1561288057565b60405162461bcd60e51b81526020600482015260176024820152766e6f74207265616368207472696767657220707269636560481b6044820152606490fd5b9190820391821161250157565b90816101409103126110d757604051906128e582612141565b805182526128f5602082016122ed565b60208301526040810151604083015261291060608201612301565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b6001600160a01b0390911681526020810191909152901515604082015260600190565b60405190612986826121af565b600982526873697a6544656c746160b81b6020830152565b908160c09103126110d7576040519060c08201908282106001600160401b0383111761212b5760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b60405190612a0d82612194565b602482526361626c6560e01b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65537460208201520152565b15612a4d57565b60405162461bcd60e51b815260206004820152601a6024820152790d8e040e6e8c2c4d8ca40e8ded6cadc40dcdee840cadcdeeaced60331b6044820152606490fd5b60405190612a9c82612194565b60238252620c8caf60eb1b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65496e60208201520152565b600160ff1b81146125015760000390565b15612aec57565b60405162461bcd60e51b81526020600482015260196024820152780d8e040d2dcc8caf040e8ded6cadc40dcdee840cadcdeeaced603b1b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b9260a094919796959260c0850198600180881b03168552602085015260408401526060830152151560808201520152565b600482101561242b5752565b91909160c08060e083019460018060a01b03815116845260208101516020850152604081015115156040850152606081015115156060850152612bd76080820151608086019061241e565b60a081015160a08501520151910152565b81516001600160a01b03168152602080830151908201526040808301516101608301949391612c1a919084019061241e565b606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080910151910152565b600354906000916040519163f9d244fd60e01b8352806004840152612c98602484018661241e565b6101a080846044816001600160a01b0387165afa9384156101fb578594613ae2575b505060208301516001600160a01b031615613adb576004851015613ac7578415613aa5575b6040838101516005549151632f7ce47360e21b8152600481018290529094916001600160a01b03169060e081602481855afa9081156104cc578791613a86575b50606081015115613a46576007546020848101516040516372c1cc1b60e11b81526001600160a01b039182166004820152921693919081602481875afa908115613698578991613a0c575b506139d357610100602491604051928380926330a66e1560e01b82528b60048301525afa9081156105215788916139b2575b50612db560e0850151801590811561398c575b50612838565b612dc560c0850151151588616b21565b95606085015160048110156138ef57158015613975575b156139465760c0850151156139175760c08201516127108181031161390357612e0c612e18916127100389613efd565b60a08701511015612879565b606085015160048110156138ef576001146138b0575b602085015160408087015160c0880151915163bc95baad60e01b815294926101409286928392612e6e92151591906001600160a01b031660048501612956565b0381885afa928315611bb7578a93613889575b50612f0190612ee1612e978a60e08a0151613fa2565b60e089015160405190612ea9826121af565b601f82527f65786563757465496e6372656173654f726465722073697a65416d6f756e74006020830152612edb612979565b91617065565b60808701519060e088015181519060806020840151930151938c88613c1c565b501561384d576101208501511580156137c9575b15613790576101608501511591821561370b575b5050156136d257600654604051632500ed8d60e21b8152600481018890529060c090829060249082906001600160a01b03165afa9081156105215788916136a3575b506040840151604051906301fd38f760e01b82526004820152602081602481875afa908115613698578991613666575b50612ffc612fa882613bd9565b604051612fb481612194565b603081527f65786563757465496e6372656173654f72646572207072654e65744578706f7360208201526f3ab932a0b6b7bab73a21b432b1b5b2b960811b6040820152616fa7565b8881126135ec5760c0850151156135a4575061302281602061303f9351910151906128bf565b6130338161302e612a8f565b616fa7565b60e08501511115612ae5565b60808301519187831361352c575b50506007546020830151608084015160e085015160c0860151604080516370bf730b60e11b81529a9650948a946001600160a01b039182169486948e9486946130a4948f949215159392918d911660048801612b4f565b03925af195861561352057809581976134e5575b506003546020840151604085015160c086015160608701516001600160a01b03948516949093169290151560048210156134d157906131209160e0890151936040519561310487612179565b8652602086015260408501526001606085015260808401612b80565b8660a083015260c0820152813b156108595761315583928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af18015610465579082916134bd575b50610120840151806133da575b50610160840151806132f7575b505087613267576003546001600160a01b0316803b1561085d57818091602460405180948193633e5005e560e01b83528a60048401525af1801561046557613253575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b61323060018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a0152606089019061241e565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b61325d8291612118565b61024b57806131c4565b600188146132a1575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795936131f2565b6003546001600160a01b0316803b1561085d5781809160246040518094819363121494ed60e31b83528a60048401525af18015610465576132e3575b50613270565b6132ed8291612118565b61024b57806132dd565b600354602086810151604088015161014089015160c08a01519395613399956001600160a01b03908116959416931515919061333290612ad4565b92604051946133408661215d565b85528785015260036040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af18015610465576133af575b8190613181565b602090813d83116133d3575b6133c581836121ca565b810103126110d757386133a8565b503d6133bb565b600354602086810151604088015161010089015160c08a0151939561347c956001600160a01b03908116959416931515919061341590612ad4565b92604051946134238661215d565b85528785015260026040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af1801561046557613492575b8190613174565b602090813d83116134b6575b6134a881836121ca565b810103126110d7573861348b565b503d61349e565b6134c690612118565b61024b578038613167565b634e487b7160e01b86526021600452602486fd5b955095506040853d604011613518575b81613502604093836121ca565b81010312610235576020855195015195386130b8565b3d91506134f5565b604051903d90823e3d90fd5b6004546020909201516001600160a01b039081169392169161354d90613bd9565b92823b15611bac579161357b939189809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af1801561024057613591575b808061304d565b61359d90959195612118565b933861358a565b6135e06135be83606060406135e7960151910151906128bf565b916135cb8361302e612a00565b6135da8960e08901519461401f565b90612702565b1015612a46565b61303f565b60c0850151156136335761362c61360d8360206135e79551910151906128bf565b6136198161302e612a8f565b61362760e088015193612ad4565b612702565b1015612ae5565b5061364b81606060406135e7940151910151906128bf565b6136578161302e612a00565b6135e08760e08701519261401f565b90506020813d602011613690575b81613681602093836121ca565b81010312611bac575138612f9b565b3d9150613674565b6040513d8b823e3d90fd5b6136c5915060c03d60c0116136cb575b6136bd81836121ca565b81019061299e565b38612f6b565b503d6136b3565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b51604051630bc628fb60e01b81526004810191909152600360248201529150602090829060449082906001600160a01b03165afa908115610521578891613756575b50153880612f29565b90506020813d602011613788575b81613771602093836121ca565b810103126105165761378290612301565b3861374d565b3d9150613764565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b508151604051630bc628fb60e01b81526004810191909152600260248201526020816044816001600160a01b0386165afa908115611bb7578a9161380f575b5015612f15565b90506020813d602011613845575b8161382a602093836121ca565b810103126138415761383b90612301565b38613808565b8980fd5b3d915061381d565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612f019193506138a9906101403d61014011610f6657610f5781836121ca565b9290612e81565b60c0850151909690156138da5760a085015190808210156138d357505b95612e2e565b90506138cd565b60a085015190808211156138d3575095612e2e565b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b8a52601160045260248afd5b60c08201518061271001612710116139035761393a612e18916127100189613efd565b60a08701511115612879565b60c0850151156139655761396060a0860151881015612879565b612e18565b61396060a0860151881115612879565b50606085015160048110156138ef57600114612ddc565b60408401518110159150816139a3575b5038612daf565b9050606083015110153861399c565b6139cd91506101003d6101001161122e5761122081836121ca565b38612d9c565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d602011613a3e575b81613a27602093836121ca565b81010312611bac57613a3890612301565b38612d6a565b3d9150613a1a565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b613a9f915060e03d60e01161113b5761112c81836121ca565b38612d1f565b613ac2613aba61018085015160025490612702565b42111561270f565b612cdf565b634e487b7160e01b84526021600452602484fd5b5050505050565b908092945081813d8311613bd2575b613afb81836121ca565b81010312610819576040519182018281106001600160401b03821117613bbe5760405280518252613b2e602082016122ed565b602083015260408101516040830152606081015160048110156102355760608301526080810151608083015260a081015160a0830152613b7060c08201612301565b60c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152913880612cba565b634e487b7160e01b86526041600452602486fd5b503d613af1565b60008112613be45790565b6124bc90612ad4565b9190916000838201938412911290801582169115161761250157565b8181029291811591840414171561250157565b9695939092949196613c3360a08201968751612702565b978815613de257613c48906080830151613bed565b9560008712613d9257519081613d74575b505060008512613d2f57613c7e90613c7984613c7488613bd9565b61401f565b613c09565b8610159182613d13575b505015613cd9578311613c9e576124bc90613bd9565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613d259250613c7990613c7486613bd9565b8411153880613c88565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b84613d8a939792613d8492613e58565b90613bed565b933880613c59565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b969593909294919660a081019580875110613e1357613c339087516128bf565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c0810190815190818514613ed3576060015115613ea95750805180841115613e9157506124bc92613e8b9151906128bf565b90613fa2565b613ea49291506124bc93613e8b916128bf565b612ad4565b83811115613ec057506124bc92613e8b91516128bf565b613ea4929150613e8b906124bc946128bf565b5050505050600090565b8115613ee7570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214613f97576127109082821115613f5a577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b90600019818309818302918280831092039180830392146140095768327cb2734119d3b7a9601e1b9082821115613f5a577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146140a35784831115613f5a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906124bc9250613edd565b906127109060001982840992828102928380861095039480860395146140a35784831115613f5a578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b604090815161413881612194565b60249081815261419d6020917f6578656375746544656372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b868201528551614180816121af565b6009815268074696d657374616d760bc1b84820152854292617065565b60018054600380548751631ca37ea160e11b815292969195936004936001600160a01b0392879082908790829087165afa9081156143f0576000916143c3575b50808910156143b7578084116143af575b50965b82811061420357505050505050505050565b303b156110d7578851630fdc860f60e41b81528185820152600086820152604490600081838183305af190816143a0575b5061432c578890614243612441565b6308c379a01461426c575b506142615761425c906124f2565b6141f1565b88513d6000823e3d90fd5b61427461245f565b9081614281575b5061424e565b9091506142ce6000928c61039160f51b81519161429d83612194565b602283527f6578656375746544656372656173654d61726b65744f7264657273206572726f8d840152820152616fec565b8389541690813b156108595783606488858f95818096818f9951998a98899763c250985960e01b89528801528601528401525af1801561432257614313575b8061427b565b61431c90612118565b3861430d565b8b513d84823e3d90fd5b5061425c906107cd848b5161434081612194565b602981527f6578656375746544656372656173654d61726b65744f726465727320737563638a820152680cae6e640d2dcc8caf60bb1b8d820152838d5191614387836121af565b60088352670cadcc892dcc8caf60c31b8c840152617065565b6143a990612118565b38614234565b9250386141ee565b50505050505050505050565b908782813d83116143e9575b6143d981836121ca565b8101031261024b575051386141dd565b503d6143cf565b8a513d6000823e3d90fd5b90816101609103126110d757604051906144148261215d565b80518252614424602082016122ed565b602083015260408101516040830152606081015160048110156110d75760608301526080810151608083015260a081015160a083015260c081015160c083015261447060e08201612301565b60e0830152610100614483818301612301565b9083015261012080820151908301526144a0610140809201612301565b9082015290565b604051906144b482612194565b602482526361626c6560e01b6040837f6578656375746544656372656173654f7264657220617661696c61626c65537460208201520152565b604051906144fa82612194565b60238252620c8caf60eb1b6040837f6578656375746544656372656173654f7264657220617661696c61626c65496e60208201520152565b6003546040516340b4605b60e11b8152600481018390526000602482018190529092916001600160a01b03169061016084604481855afa93841561554d57819461552a575b5060018060a01b036020850151166060850151600481101561551657829160ff61463c8493604051936145a985612194565b603785527f6578656375746544656372656173654f72646572206163636f756e74202573206020860152766f7264657249642025732074726164655479706520257360481b604086015260405193849261461c6020850197637c7a8d8f60e11b89526080602487015260a4860190616f41565b9260448501528b606485015216608483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5060208401516001600160a01b03161561551057606084015160048110156110ff57156154f6575b60408401519360018060a01b036005541692604051632f7ce47360e21b815286600482015260e081602481885afa8015610488576154d7575b50600754602083015160408085015160e0860151915163bc95baad60e01b8152976001600160a01b03948516949093610140938a9384936146f693921515921660048501612956565b0381855afa9586156101fb5785966154b4575b5060a086015115615472579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101fb57859361544f575b5061477260c085015160a088015180821060001461544857505b8060c087015280159081156154235750612838565b61478260e0850151151589616b21565b9260608501516004811015614bd15715801561540c575b156153dc57610100850151156153bc5760c081015161271080828103116153a8576147c991612e0c910386613efd565b60608501516004811015614bd157600114615359575b614858906148386147f48660c0890151613fa2565b60c088015160405190614806826121af565b601f82527f6578656375746544656372656173654f726465722073697a65416d6f756e74006020830152612edb612979565b60808601519060c08701518151906080602084015193015193888c613df3565b5050600654604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561024057869161533a575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa918215610240578692615306575b506149266148d28361627d565b6040516148de81612194565b603081527f6578656375746544656372656173654f72646572207072654e65744578706f7360208201526f3ab932a0b6b7bab73a21b432b1b5b2b960811b6040820152616fec565b85821261529f5760e085015161526457614948915060208151910151906128bf565b6149548161302e6144ed565b60c08401511190815b6151325750508260808301511361504f575b60018060a01b036007541694606060018060a01b0360208501511696608085015190898760c08801519a6149c18860e08b015115156040519e8f98899788966387d4f0d560e01b885260048801612b4f565b03925af192831561048857849585978695615009575b5060608201516004811015614bd157614ec557506003546001600160a01b0316803b156102355785809160246040518094819363be82e5b160e01b83528860048401525af1801561024057908691614eb1575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156138ef57614a949086519260c08801519460405196614a7988612179565b8752602087015260408601528a606086015260808501612b80565b60a083015260c0820152813b156104c157614ac887928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af1801561024057908691614e9d575b5050600754602082015160408084015160e0850151915163bc95baad60e01b8152936101409385936001600160a01b039283169385938493614b2493151592911660048501612956565b03915afa908115610240579060a0918791614e7c575b50015115614be5575b602081015160608201516001600160a01b03909116986004821015614bd15791614ba86000805160206170c78339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a019061241e565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b605482015260358152614c3181612194565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611bb7578a98614d3f575b50895b8851811015614d3057614c80818a6126bd565b51606081015115614c9b575b50614c96906124f2565b614c6d565b60018060a01b036003541690608060a08201519101516004811015614d1c579082918e933b156101f0576064849283614cef95604051968795869463c250985960e01b86526004860152602485019061241e565b8160448401525af1801561046557614d08575b50614c8c565b614d1190612118565b611c01578a38614d02565b634e487b7160e01b8e52602160045260248efd5b50919396509194979396614b43565b9097503d808b833e614d5181836121ca565b6020828281010312611c01578151906001600160401b038211614e7857808301601f838501011215614e78578183015190614d8b826121eb565b93614d9960405195866121ca565b8285526020850193828201602060e08602838501010111614e745793602085830101945b602060e0860282850101018610614ddb575050505050509638614c6a565b60e0868585010312614e705760405191614df483612179565b614dfd876122ed565b835260208701516020840152614e1560408801612301565b6040840152614e2660608801612301565b60608401526080870151926004841015614e6a57602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050614dbd565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b614e9791506101403d61014011610f6657610f5781836121ca565b38614b3a565b614ea690612118565b610819578438614ada565b614eba90612118565b610819578438614a2a565b60608201516004811015614bd157600103614f3557506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691614f21575b5050614a2d565b614f2a90612118565b610819578438614f1a565b60035490516060830151916001600160a01b03166004831015614ff557803b1561051657916064889283614f84956040519687958694634136de9f60e01b86526004860152602485019061241e565b8160448401525af1801561024057908691614fe1575b50506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691614f21575050614a2d565b614fea90612118565b610819578438614f9a565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011615047575b81615028606093836121ca565b810103126101f0578451956040602087015196015196959693386149d7565b3d915061501b565b60018060a01b036005541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa908115610488578491615113575b5060045460209091015160065460808501516001600160a01b039283169383169291909116906150b890613bd9565b92823b156104c157916150e6939187809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af18015610488579084916150ff575b505061496f565b61510890612118565b6108595782386150f8565b61512c915060e03d60e01161113b5761112c81836121ca565b38615089565b9094506151776040969392949651615149816121af565b601c81527b195e1958dd5d19511958dc99585cd953dc99195c881b99595910511360221b6020820152616f66565b60608201516004811015614bd157813b156104c157856151b19288928360405180968195829463c1872cf360e01b84528b600485016124d0565b03925af1801561024057615251575b50602081015160608201516001600160a01b03909116966004821015614bd157916152246000805160206170c78339815191529896949261016098969460c060e0850151151594015194604051998a5260208a01526040890152606088019061241e565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b61525d90959195612118565b93386151c0565b61527b8160606040615297940151910151906128bf565b916152888361302e6144a7565b6135da8560c08801519461401f565b10908161495d565b60e08501516152d6576152bc8160206152979351910151906128bf565b6152c88161302e6144ed565b61362760c087015193612ad4565b6152eb915060606040820151910151906128bf565b6152f78161302e6144a7565b6152978360c08601519261401f565b9091506020813d602011615332575b81615322602093836121ca565b81010312610235575190386148c5565b3d9150615315565b615353915060c03d60c0116136cb576136bd81836121ca565b38614895565b926148589060e08601511560001461538b5760a0860151908082101561538457505b935b90506147df565b905061537b565b60a086015190808211156153a157505b9361537d565b905061539b565b634e487b7160e01b88526011600452602488fd5b60c081015161271081810181116153a8576147c99161393a910186613efd565b610100850151156153fc576153f760a0860151851115612879565b6147c9565b6153f760a0860151851015612879565b5060608501516004811015614bd157600114614799565b6040860151811015915081615439575038612daf565b9050606085015110153861399c565b905061475d565b61546b9193506101003d6101001161122e5761122081836121ca565b9138614743565b5050505050506154b29150604051615489816121af565b60178152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6020820152616fa7565b565b6154d09196506101403d61014011610f6657610f5781836121ca565b9438614709565b6154ef9060e03d60e01161113b5761112c81836121ca565b50386146ad565b61550b613aba61012086015160025490612702565b614674565b50505050565b634e487b7160e01b83526021600452602483fd5b6155469194506101603d610160116112905761128081836121ca565b9238614577565b50604051903d90823e3d90fd5b6003546000615580604051946340b4605b60e11b8652846004870152602486019061241e565b610160846044816001600160a01b0386165afa93841561554d578194616237575b5060018060a01b036020850151166060850151600481101561551657829160ff6155d38493604051936145a985612194565b51906a636f6e736f6c652e6c6f675afa5060208401516001600160a01b03161561551057606084015160048110156110ff571561621d575b60408401519360018060a01b036005541692604051632f7ce47360e21b815286600482015260e081602481885afa8015610488576161fe575b50600754602083015160408085015160e0860151915163bc95baad60e01b8152976001600160a01b03948516949093610140938a93849361568d93921515921660048501612956565b0381855afa9586156101fb5785966161db575b5060a086015115615472579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101fb5785936161b8575b5061570860c085015160a088015180821060001461544857508060c087015280159081156154235750612838565b61571860e0850151151589616b21565b9260608501516004811015614bd1571580156161a1575b1561617157610100850151156161515760c081015161271080828103116153a85761575f91612e0c910386613efd565b60608501516004811015614bd157600114616102575b61578a906148386147f48660c0890151613fa2565b5050600654604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa9081156102405786916160e3575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa9182156102405786926160af575b506158046148d28361627d565b8582126160625760e085015161604357615826915060208151910151906128bf565b6158328161302e6144ed565b60c08401511190815b615f6e57505082608083015113615e8b575b60018060a01b036007541694606060018060a01b0360208501511696608085015190898760c08801519a61589f8860e08b015115156040519e8f98899788966387d4f0d560e01b885260048801612b4f565b03925af192831561048857849585978695615e45575b5060608201516004811015614bd157615d1557506003546001600160a01b0316803b156102355785809160246040518094819363be82e5b160e01b83528860048401525af1801561024057908691615d01575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156138ef576159579086519260c08801519460405196614a7988612179565b60a083015260c0820152813b156104c15761598b87928392604051948580948193632670e98d60e01b835260048301612b8c565b03925af1801561024057908691615ced575b5050600754602082015160408084015160e0850151915163bc95baad60e01b8152936101409385936001600160a01b0392831693859384936159e793151592911660048501612956565b03915afa908115610240579060a0918791615ccc575b50015115615a6a57602081015160608201516001600160a01b03909116986004821015614bd15791614ba86000805160206170c78339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a019061241e565b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b605482015260358152615ab681612194565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611bb7578a98615ba1575b50895b8851811015614d3057615b05818a6126bd565b51606081015115615b20575b50615b1b906124f2565b615af2565b60018060a01b036003541690608060a08201519101516004811015614d1c579082918e933b156101f0576064849283615b7495604051968795869463c250985960e01b86526004860152602485019061241e565b8160448401525af1801561046557615b8d575b50615b11565b615b9690612118565b611c01578a38615b87565b9097503d808b833e615bb381836121ca565b6020828281010312611c01578151906001600160401b038211614e7857808301601f838501011215614e78578183015190615bed826121eb565b93615bfb60405195866121ca565b8285526020850193828201602060e08602838501010111614e745793602085830101945b602060e0860282850101018610615c3d575050505050509638615aef565b60e0868585010312614e705760405191615c5683612179565b615c5f876122ed565b835260208701516020840152615c7760408801612301565b6040840152615c8860608801612301565b60608401526080870151926004841015614e6a57602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050615c1f565b615ce791506101403d61014011610f6657610f5781836121ca565b386159fd565b615cf690612118565b61081957843861599d565b615d0a90612118565b610819578438615908565b60608201516004811015614bd157600103615d8557506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691615d71575b505061590b565b615d7a90612118565b610819578438615d6a565b60035490516060830151916001600160a01b03166004831015614ff557803b1561051657916064889283615dd4956040519687958694634136de9f60e01b86526004860152602485019061241e565b8160448401525af1801561024057908691615e31575b50506003546001600160a01b0316803b15610235578580916024604051809481936304d3cb8160e41b83528860048401525af1801561024057908691615d7157505061590b565b615e3a90612118565b610819578438615dea565b9650935095506060853d606011615e83575b81615e64606093836121ca565b810103126101f0578451956040602087015196015196959693386158b5565b3d9150615e57565b60018060a01b036005541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa908115610488578491615f4f575b5060045460209091015160065460808501516001600160a01b03928316938316929190911690615ef490613bd9565b92823b156104c15791615f22939187809460405196879586948593630d172a0160e01b855260048501612b2d565b03925af1801561048857908491615f3b575b505061584d565b615f4490612118565b610859578238615f34565b615f68915060e03d60e01161113b5761112c81836121ca565b38615ec5565b909450615f856040969392949651615149816121af565b60608201516004811015614bd1576001600160a01b0382163b156104c15785615fc89288928360405180968195829463c1872cf360e01b84528b600485016124d0565b03926001600160a01b03165af18015610240576152515750602081015160608201516001600160a01b03909116966004821015614bd157916152246000805160206170c78339815191529896949261016098969460c060e0850151151594015194604051998a5260208a01526040890152606088019061241e565b61527b816060604061605a940151910151906128bf565b10908161583b565b60e085015161607f576152bc81602061605a9351910151906128bf565b616094915060606040820151910151906128bf565b6160a08161302e6144a7565b61605a8360c08601519261401f565b9091506020813d6020116160db575b816160cb602093836121ca565b81010312610235575190386157f7565b3d91506160be565b6160fc915060c03d60c0116136cb576136bd81836121ca565b386157c7565b9261578a9060e0860151156000146161345760a0860151908082101561612d57505b935b9050615775565b9050616124565b60a0860151908082111561614a57505b93616126565b9050616144565b60c081015161271081810181116153a85761575f9161393a910186613efd565b610100850151156161915761618c60a0860151851115612879565b61575f565b61618c60a0860151851015612879565b5060608501516004811015614bd15760011461572f565b6161d49193506101003d6101001161122e5761122081836121ca565b91386156da565b6161f79196506101403d61014011610f6657610f5781836121ca565b94386156a0565b6162169060e03d60e01161113b5761112c81836121ca565b5038615644565b616232613aba61012086015160025490612702565b61560b565b6162539194506101603d610160116112905761128081836121ca565b92386155a1565b60005b83811061626d5750506000910152565b818101518382015260200161625d565b600081126164445760405160208101908082106001600160401b0383111761212b576162b0916040526000815291613bd9565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015616436575b506904ee2d6d415b85acef8160201b80821015616429575b50662386f26fc100008082101561641c575b506305f5e1008082101561640f575b5061271080821015616402575b5060648110156163f4575b600a809110156163ea575b60018084019281602161635b616345876126e7565b9661635360405198896121ca565b8088526126e7565b602087019790601f1901368937860101905b6163b4575b505050506163a8926124bc926020926040519583616399889551809288808901910161625a565b8401915180938684019061625a565b010380845201826121ca565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156163e55791908261636d565b616372565b9160010191616330565b606460029104920191616325565b600491049201913861631a565b600891049201913861630d565b60109104920191386162fe565b60209104920191386162ec565b6040935082049050386162d4565b6162b0604051616453816121af565b60018152602d60f81b602082015291613bd9565b600754604051636468402960e11b8152600481018390526000929161014090829060249082906001600160a01b03165afa908115611142578391616b00575b50828060018060a01b0360208401511660408401519061654a604051926164cc84612194565b602984527f6c6971756964617465506f736974696f6e206163636f756e742025732070616960208501526872496e64657820257360b81b60408501526040519283916165316020840196630d26b92560e01b8852606060248601526084850190616f41565b916044840152606483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5060a081015115616ac95761657a60408201516060830151151590616b21565b606082015190939015616a8b5760c0820180516166829181871115616a6f576165ae9150613e8b60a08601519151886128bf565b828061663e61666360c08801516166556165c78761627d565b91604051926165d584612194565b603284527f6c6971756964617465506f736974696f6e2061766572616765507269636520256020850152717320756e7265616c697a6564506e6c20257360701b6040850152604051958694635970e08960e01b6020870152606060248701526084860190616f41565b916044850152602319848303016064850152616f41565b03601f1981018352826121ca565b6020815191016a636f6e736f6c652e6c6f675afa506080840151613bed565b60018060a01b036005541661010060408501516024604051809481936330a66e1560e01b835260048301525afa908115611142579083918291616a4e575b508183136169545750505060015b81806040516166dc816121af565b601f81527f6c6971756964617465506f736974696f6e206e6565644c697175696461746500602082015260405161674881616730602082019463c3b5563560e01b8652604060248401526064830190616f41565b9615968715604483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa50615510576003546020830151604084015160608501511515926001600160a01b039081169216823b1561081957916167ac939185809460405196879586948593638ffb8b2f60e01b855260048501612956565b03925af1801561046557616945575b509081602061685a60018060a01b036003541660018060a01b0383860151166040860151606087015115156167f360a0890151612ad4565b91604051936168018561215d565b8452868401528660408401528660608401528a608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301612be8565b03925af192831561352057926168ef575b50907faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb7993610100939261689d83614532565b60018060a01b036020820151169060408101516060820151151590608060a084015193015193604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152a1565b9291506020833d60201161693d575b8161690b602093836121ca565b810103126110d757915190917faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb7961686b565b3d91506168fe565b61694e90612118565b386167bb565b61697a83616975849360a061696c8c828c0151613fa2565b91015190613efd565b6140b0565b61271081101593616a3861699260a08901519261627d565b91616655604051946169a386612194565b604086527f6c6971756964617465506f736974696f6e207269736b5261746520257320706f60208701527f736974696f6e416d6f756e74202573206578706f7375726541737365742025736040870152604051948593616a1c60208601986342a59a4b60e11b8a526080602488015260a4870190616f41565b9260448601526064850152602319848303016084850152616f41565b51906a636f6e736f6c652e6c6f675afa506166ce565b616a6991506101003d6101001161122e5761122081836121ca565b386166c0565b50613ea4616a8691613e8b8860a0880151926128bf565b6165ae565b60c0820180516166829186821115616ab257616a869150613e8b8760a087015192516128bf565b50613ea4616a8691613e8b60a087015191896128bf565b5050506154b2604051616adb816121af565b6013815272706f736974696f6e206e6f742065786973747360681b6020820152616f66565b616b1b91506101403d61014011610f6657610f5781836121ca565b386164a6565b60408051631f94a27560e31b81526004926001600160a01b0392602092909190838187817f000000000000000000000000000000000000000000000000000000000000000089165afa908115616eef57908591600091616eb8575b5016846005541690835195632f7ce47360e21b8752838888015260249660e0818981875afa908115616ead57600091616e8f575b50805186516341976e0960e01b81529083168a82015299878b8a81875afa9a8b15616e845760009b616e49575b50906000808a616c50616c6c8b8d9897640339012b9960dd1b825192616c0284612194565b602584527f67657456616c696450726963652070616972496e6465782025732069734c6f6e8c8501528301528d5193849260608c85019763ca7733b160e01b89528501526084840190616f41565b908d60448401521515606483015203601f1981018352826121ca565b51906a636f6e736f6c652e6c6f675afa5051166044865180948193637641b69960e01b83528c83015260008b8301525afa8015616e03578890600090616e17575b616d159250616d0281838851616cc281612194565b602a81527f67657456616c69645072696365206f7261636c65507269636520257320696e648b820152696578507269636520257360b01b8a820152617033565b8181811115616e0e5790616975916128bf565b9183519182916330a66e1560e01b83528883015281876101009485935afa918215616e03579060e09291600092616de6575b505001616d9d8151838551616d5b81612194565b602c81527f67657456616c69645072696365206469666650202573206d6178507269636544888201526b6576696174696f6e5020257360a01b87820152617033565b5110616daa575050505090565b5162461bcd60e51b815292830152601a908201527932bc31b2b2b21036b0bc10383934b1b2903232bb34b0ba34b7b760311b6044820152606490fd5b616dfc9250803d1061122e5761122081836121ca565b3880616d47565b84513d6000823e3d90fd5b616975916128bf565b90508582813d8311616e42575b616e2e81836121ca565b8101031261024b575087616d159151616cad565b503d616e24565b9091929b9a8882819c9b9c3d8311616e7d575b616e6681836121ca565b8101031261024b575051999a979897919086616bdd565b503d616e5c565b87513d6000823e3d90fd5b616ea7915060e03d811161113b5761112c81836121ca565b38616bb0565b86513d6000823e3d90fd5b91508482813d8311616ee8575b616ecf81836121ca565b8101031261024b5750616ee285916122ed565b38616b7c565b503d616ec5565b83513d6000823e3d90fd5b604051602081016351973ec960e01b81526004825260408201908282106001600160401b0383111761212b57600092839260405251906a636f6e736f6c652e6c6f675afa50565b90602091616f5a8151809281855285808601910161625a565b601f01601f1916010190565b60008091604051616f9481616655602082019463104c13eb60e21b8652602060248401526044830190616f41565b51906a636f6e736f6c652e6c6f675afa50565b600091908291616f946040518092616fd86020830195632d839cb360e21b8752604060248501526064840190616f41565b90604483015203601f1981018352826121ca565b60009190616655616f9484936040519283916170216020840196634b5c427760e01b8852604060248601526064850190616f41565b83810360231901604485015290616f41565b60009291616f948493604051928391616531602084019663ca47c4eb60e01b8852606060248601526084850190616f41565b90616f946000949385946170b260405194859361709b602086019863c67ea9d160e01b8a526080602488015260a4870190616f41565b916044860152602319858303016064860152616f41565b90608483015203601f1981018352826121ca56fe9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee0613a2646970667358221220ee74d1e6cfcb62d593eba7525d32543bcd309310171ccd8c4c83b6e7d2cba26764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3978,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "increaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3981,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "decreaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3984,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "maxTimeDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3990,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "orderManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOrderManager)2610"
      },
      {
        "astId": 3993,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "positionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPositionManager)2623"
      },
      {
        "astId": 3996,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "pairInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPairInfo)3832"
      },
      {
        "astId": 3999,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "pairVault",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPairVault)3935"
      },
      {
        "astId": 4002,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "tradingVault",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ITradingVault)3001"
      }
    ],
    "types": {
      "t_contract(IOrderManager)2610": {
        "encoding": "inplace",
        "label": "contract IOrderManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPairInfo)3832": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)3935": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)2623": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITradingVault)3001": {
        "encoding": "inplace",
        "label": "contract ITradingVault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}