{
  "address": "0x5c74c94173F05dA1720953407cbb920F3DF9f887",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract ITradingVault",
          "name": "_tradingVault",
          "type": "address"
        },
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "_vaultPriceFeed",
          "type": "address"
        },
        {
          "internalType": "contract IIndexPriceFeed",
          "name": "_fastPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTimeDelay",
          "type": "uint256"
        },
        {
          "internalType": "contract IOrderManager",
          "name": "_orderManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTimeDelay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeADLAndDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fastPriceFeed",
      "outputs": [
        {
          "internalType": "contract IIndexPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getValidPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderManager",
      "outputs": [
        {
          "internalType": "contract IOrderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "setPricesAndLiquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingVault",
      "outputs": [
        {
          "internalType": "contract ITradingVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTimeDelay",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTimeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPriceFeed",
      "outputs": [
        {
          "internalType": "contract IOraclePriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf84aa6c7d1b00ffb16ce9f04f2852968aba91fdf2fef8ba22327dffd4e5d361f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5c74c94173F05dA1720953407cbb920F3DF9f887",
    "transactionIndex": 0,
    "gasUsed": "5354913",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x85229f2c80c1c3049456ece85ebae2d02599f93635eb941834deab2d8b6fbd56",
    "transactionHash": "0xf84aa6c7d1b00ffb16ce9f04f2852968aba91fdf2fef8ba22327dffd4e5d361f",
    "logs": [],
    "blockNumber": 99,
    "cumulativeGasUsed": "5354913",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
    "0x4631BCAbD6dF18D94796344963cB60d44a4136b6",
    "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
    "0x0355B7B8cb128fA5692729Ab3AAa199C1753f726",
    "0xBEc49fA140aCaA83533fB00A2BB19bDdd0290f25",
    60,
    "0xAA292E8611aDF267e563f334Ee42320aC96D0463"
  ],
  "numDeployments": 1,
  "solcInputHash": "7e1e509e3ffeca3760b074bc8bbeb130",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract ITradingVault\",\"name\":\"_tradingVault\",\"type\":\"address\"},{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"},{\"internalType\":\"contract IIndexPriceFeed\",\"name\":\"_fastPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOrderManager\",\"name\":\"_orderManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTimeDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeADLAndDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastPriceFeed\",\"outputs\":[{\"internalType\":\"contract IIndexPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getValidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderManager\",\"outputs\":[{\"internalType\":\"contract IOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"setPricesAndLiquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingVault\",\"outputs\":[{\"internalType\":\"contract ITradingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"updateMaxTimeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"contract IOraclePriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IIndexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IIndexPriceFeed {\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\\n    function lastUpdatedAt() external view returns (uint256);\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xc78259afb2d8179075b97c3021eac6a508196df97429f0778a2a41684cc9c867\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IOrderManager {\\n\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns(uint256);\\n    function decreaseMarketOrdersIndex() external view returns(uint256);\\n    function increaseLimitOrdersIndex() external view returns(uint256);\\n    function decreaseLimitOrdersIndex() external view returns(uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\\n\\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function cancelAllPositionOrders(address account, uint256 pairIndex, bool isLong) external;\\n\\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n}\\n\",\"keccak256\":\"0xb8554ea433fc00fc7eac6139ccef089330c9ae9cd96e4cb8cbdeeaa9090bb82f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IPositionManager {\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory _tokens,\\n        uint256[] memory _prices,\\n        uint256 _timestamp,\\n        bytes32[] memory _positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory _positionKeys) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external;\\n\\n    function getValidPrice(uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff3a083958b680772e1471db1e13cbc855134d31e8830a948a8ad695fa010447\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface ITradingVault {\\n\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n     function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xcd9561cc653de1d84ce5b0cfe9ce1eba77261799d31e940f7c5955b3935fbfe2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x18a2c6a576dc0459631a8e1c013d54f82016cb315f5565be2a03c15cc9c55c52\",\"license\":\"MIT\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice) {return 0;}\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (self.positionAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7c9b4d0dd15ecfc7b3cdf602f65a601ae399acc9408d0636b0791647390532f5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14b07e1484e9a71f8b74c0e7e77c0850c3172e0d1ee821197e104266f2399ef1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x6dbfdfe9e3efa5876b6bdf69eba75e537b8541ebdb145ba2b177fa1d384fb396\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external returns (uint256 diffIndexAmount);\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0xa031e4c72c52f9a8fd5f8adb314245bf5e3298e07c30902335253738f3316273\",\"license\":\"UNLICENSED\"},\"contracts/trading/PositionManager.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IIndexPriceFeed.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../interfaces/IPositionManager.sol';\\nimport '../interfaces/ITradingVault.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nimport '../libraries/Position.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../pair/interfaces/IPairInfo.sol';\\nimport '../pair/interfaces/IPairVault.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport 'hardhat/console.sol';\\nimport '../interfaces/IOrderManager.sol';\\n\\ncontract PositionManager is IPositionManager, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n    uint256 public maxTimeDelay;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    ITradingVault public tradingVault;\\n    IIndexPriceFeed public fastPriceFeed;\\n    IOraclePriceFeed public vaultPriceFeed;\\n    IOrderManager public orderManager;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        ITradingVault _tradingVault,\\n        IOraclePriceFeed _vaultPriceFeed,\\n        IIndexPriceFeed _fastPriceFeed,\\n        uint256 _maxTimeDelay,\\n        IOrderManager _orderManager\\n    ) {\\n        ADDRESS_PROVIDER = addressProvider;\\n        maxTimeDelay = _maxTimeDelay;\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        tradingVault = _tradingVault;\\n        fastPriceFeed = _fastPriceFeed;\\n        vaultPriceFeed = _vaultPriceFeed;\\n        orderManager = _orderManager;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), 'onlyKeeper');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external override onlyPoolAdmin {\\n        uint256 oldDelay = maxTimeDelay;\\n        maxTimeDelay = newMaxTimeDelay;\\n        emit UpdateMaxTimeDelay(oldDelay, newMaxTimeDelay);\\n    }\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) public nonReentrant onlyKeeper {\\n        TradingTypes.IncreasePositionOrder memory order = orderManager.getIncreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // check pair enable\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // check account enable\\n        require(!tradingVault.isFrozen(order.account), 'account is frozen');\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        uint256 price = getValidPrice(pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.isLong\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                        order.openPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                        order.openPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(order.isLong ? price >= order.openPrice : price <= order.openPrice, 'not reach trigger price');\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (order.isLong) {\\n                price = order.openPrice.min(price);\\n            } else {\\n                price = order.openPrice.max(price);\\n            }\\n        }\\n\\n        // get position\\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n        console.log('executeIncreaseOrder sizeAmount', order.sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        // check position and leverage\\n        (uint256 afterPosition, ) = position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            true,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n        require(afterPosition > 0, 'zero position amount');\\n\\n        // check tp sl\\n        require(\\n            order.tp == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.TP),\\n            'tp already exists'\\n        );\\n        require(\\n            order.sl == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.SL),\\n            'sl already exists'\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\\n        console.log('executeIncreaseOrder preNetExposureAmountChecker', preNetExposureAmountChecker.abs());\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeIncreaseOrder availableIndex', availableIndex);\\n                require(order.sizeAmount <= availableIndex, 'lp index token not enough');\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeIncreaseOrder availableStable', availableStable);\\n                require(\\n                    order.sizeAmount <= uint256(preNetExposureAmountChecker) + availableStable.divPrice(price),\\n                    'lp stable token not enough'\\n                );\\n            }\\n        } else {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeIncreaseOrder availableIndex', availableIndex);\\n                require(\\n                    order.sizeAmount <= uint256(-preNetExposureAmountChecker) + availableIndex,\\n                    'lp index token not enough'\\n                );\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeIncreaseOrder availableStable', availableStable);\\n                require(order.sizeAmount <= availableStable.divPrice(price), 'lp stable token not enough');\\n            }\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            IERC20(pair.stableToken).safeTransfer(address(tradingVault), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee) = tradingVault.increasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                _orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        if (order.tp > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.TP,\\n                    collateral: 0,\\n                    openPrice: order.tpPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.tp),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n        if (order.sl > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.SL,\\n                    collateral: 0,\\n                    openPrice: order.slPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.sl),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n\\n        // delete order\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeIncreaseMarketOrders(_orderId);\\n        } else if (_tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeIncreaseLimitOrders(_orderId);\\n        }\\n\\n        emit ExecuteIncreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            _tradeType,\\n            order.collateral,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function executeDecreaseOrder(\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external nonReentrant onlyKeeper {\\n        _executeDecreaseOrder(_orderId, _tradeType);\\n    }\\n\\n    function _executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) internal {\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        console.log(\\\"executeDecreaseOrder account %s orderId %s tradeType %s\\\", order.account, _orderId, uint8(order.tradeType));\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // get pair\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n\\n        // get position\\n        Position.Info memory position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n        if (position.positionAmount == 0) {\\n            console.log('position already closed', _orderId);\\n            return;\\n        }\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n\\n        order.sizeAmount = order.sizeAmount.min(position.positionAmount);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        uint256 price = getValidPrice(pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.abovePrice\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                        order.triggerPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                        order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(\\n                order.abovePrice ? price <= order.triggerPrice : price >= order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (!order.isLong) {\\n                price = order.triggerPrice.min(price);\\n            } else {\\n                price = order.triggerPrice.max(price);\\n            }\\n        }\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n        console.log('executeDecreaseOrder sizeAmount', order.sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        // check position and leverage\\n        position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            false,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = tradingVault.netExposureAmountChecker(order.pairIndex);\\n        console.log('executeDecreaseOrder preNetExposureAmountChecker', preNetExposureAmountChecker.toString());\\n        bool needADL;\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeDecreaseOrder availableIndex', availableIndex);\\n                needADL = order.sizeAmount > availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeDecreaseOrder availableStable', availableStable);\\n                needADL = order.sizeAmount > uint256(preNetExposureAmountChecker) + availableStable.divPrice(price);\\n            }\\n        } else {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                console.log('executeDecreaseOrder availableIndex', availableIndex);\\n                needADL = order.sizeAmount > uint256(-preNetExposureAmountChecker) + availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                console.log('executeDecreaseOrder availableStable', availableStable);\\n                needADL = order.sizeAmount > availableStable.divPrice(price);\\n            }\\n        }\\n\\n        if (needADL) {\\n            console.log('executeDecreaseOrder needADL');\\n            orderManager.setOrderNeedADL(_orderId, order.tradeType, needADL);\\n\\n            emit ExecuteDecreaseOrder(\\n                order.account,\\n                _orderId,\\n                pairIndex,\\n                order.tradeType,\\n                order.isLong,\\n                order.sizeAmount,\\n                price,\\n                0,\\n                needADL,\\n                0,\\n                0\\n            );\\n            return;\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            IPairInfo.Pair memory pair = pairInfo.getPair(position.pairIndex);\\n            IERC20(pair.stableToken).safeTransfer(address(tradingVault), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee, int256 pnl) = tradingVault.decreasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        // delete order\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeDecreaseMarketOrders(_orderId);\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        } else {\\n            orderManager.setPositionHasTpSl(position.key, order.tradeType, false);\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        }\\n\\n        // remove decrease order\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        position = tradingVault.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        if (position.positionAmount == 0) {\\n            // cancel all decrease order\\n            bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n            IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\\n\\n            for (uint256 i = 0; i < orders.length; i++) {\\n                IOrderManager.PositionOrder memory positionOrder = orders[i];\\n                if (!positionOrder.isIncrease) {\\n                    orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\\n                }\\n            }\\n        }\\n\\n        emit ExecuteDecreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            order.tradeType,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            pnl,\\n            needADL,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory _tokens,\\n        uint256[] memory _prices,\\n        uint256 _timestamp,\\n        bytes32[] memory _positionKeys\\n    ) external onlyKeeper {\\n        console.log('setPricesAndLiquidatePositions timestamp', block.timestamp);\\n        fastPriceFeed.setPrices(_tokens, _prices, _timestamp);\\n        this.liquidatePositions(_positionKeys);\\n    }\\n\\n    function liquidatePositions(bytes32[] memory _positionKeys) external nonReentrant onlyKeeper {\\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\\n            _liquidatePosition(_positionKeys[i]);\\n        }\\n    }\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external nonReentrant onlyKeeper {\\n        console.log('executeADLAndDecreaseOrder');\\n\\n        require(_positionKeys.length == _sizeAmounts.length, 'length not match');\\n\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        require(order.needADL, 'no need ADL');\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(order.pairIndex);\\n\\n        Position.Info[] memory adlPositions = new Position.Info[](_positionKeys.length);\\n        uint256 sumAmount;\\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\\n            Position.Info memory position = tradingVault.getPositionByKey(_positionKeys[i]);\\n            require(_sizeAmounts[i] <= position.positionAmount, 'ADL size exceeds position');\\n            require(_sizeAmounts[i] <= tradingConfig.maxTradeAmount, 'exceeds max trade amount');\\n            sumAmount += _sizeAmounts[i];\\n            adlPositions[i] = position;\\n        }\\n\\n        require(sumAmount == order.sizeAmount, 'ADL position amount not match decrease order');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\\n\\n        uint256 price = getValidPrice(order.pairIndex, !order.isLong);\\n\\n        for (uint256 i = 0; i < adlPositions.length; i++) {\\n            Position.Info memory adlPosition = adlPositions[i];\\n            uint256 orderId = orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: adlPosition.account,\\n                    pairIndex: adlPosition.pairIndex,\\n                    tradeType: TradingTypes.TradeType.MARKET,\\n                    collateral: 0,\\n                    openPrice: price,\\n                    isLong: adlPosition.isLong,\\n                    sizeAmount: -int256(adlPosition.positionAmount),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n            _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n        }\\n        _executeDecreaseOrder(_orderId, order.tradeType);\\n    }\\n\\n    function _liquidatePosition(bytes32 _positionKey) internal {\\n        Position.Info memory position = tradingVault.getPositionByKey(_positionKey);\\n        console.log(\\\"liquidatePosition account %s pairIndex %s\\\", position.account, position.pairIndex);\\n\\n        if (position.positionAmount == 0) {\\n            console.log('position not exists');\\n            return;\\n        }\\n\\n        uint256 price = getValidPrice(position.pairIndex, position.isLong);\\n\\n        int256 unrealizedPnl;\\n        if (position.isLong) {\\n            if (price > position.averagePrice) {\\n                unrealizedPnl = int256(position.positionAmount.mulPrice(price - position.averagePrice));\\n            } else {\\n                unrealizedPnl = -int256(position.positionAmount.mulPrice(position.averagePrice - price));\\n            }\\n        } else {\\n            if (position.averagePrice > price) {\\n                unrealizedPnl = int256(position.positionAmount.mulPrice(position.averagePrice - price));\\n            } else {\\n                unrealizedPnl = -int256(position.positionAmount.mulPrice(price - position.averagePrice));\\n            }\\n        }\\n        console.log(\\n            'liquidatePosition averagePrice %s unrealizedPnl %s',\\n            position.averagePrice,\\n            unrealizedPnl.toString()\\n        );\\n\\n        int256 exposureAsset = int256(position.collateral) + unrealizedPnl;\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\\n\\n        bool needLiquidate;\\n        if (exposureAsset <= 0) {\\n            needLiquidate = true;\\n        } else {\\n            uint256 riskRate = position\\n                .positionAmount\\n                .mulPrice(price)\\n                .mulPercentage(tradingConfig.maintainMarginRate)\\n                .calculatePercentage(uint256(exposureAsset));\\n            needLiquidate = riskRate >= PrecisionUtils.oneHundredPercentage();\\n            console.log(\\n                'liquidatePosition riskRate %s positionAmount %s exposureAsset %s',\\n                riskRate,\\n                position.positionAmount,\\n                exposureAsset.toString()\\n            );\\n        }\\n        console.log('liquidatePosition needLiquidate', needLiquidate);\\n\\n        if (!needLiquidate) {\\n            return;\\n        }\\n\\n        // cancel all positionOrders\\n        orderManager.cancelAllPositionOrders(position.account, position.pairIndex, position.isLong);\\n\\n        uint256 orderId = orderManager.createOrder(\\n            TradingTypes.CreateOrderRequest({\\n                account: position.account,\\n                pairIndex: position.pairIndex,\\n                tradeType: TradingTypes.TradeType.MARKET,\\n                collateral: 0,\\n                openPrice: price,\\n                isLong: position.isLong,\\n                sizeAmount: -int256(position.positionAmount),\\n                tpPrice: 0,\\n                tp: 0,\\n                slPrice: 0,\\n                sl: 0\\n            })\\n        );\\n\\n        _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n\\n        emit LiquidatePosition(\\n            _positionKey,\\n            position.account,\\n            position.pairIndex,\\n            position.isLong,\\n            position.positionAmount,\\n            position.collateral,\\n            price,\\n            orderId\\n        );\\n    }\\n\\n    function getValidPrice(uint256 _pairIndex, bool _isLong) public view returns (uint256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 oraclePrice = vaultPriceFeed.getPrice(pair.indexToken);\\n        console.log('getValidPrice pairIndex %s isLong %s ', _pairIndex, _isLong);\\n\\n        uint256 indexPrice = vaultPriceFeed.getIndexPrice(pair.indexToken, 0);\\n        console.log('getValidPrice oraclePrice %s indexPrice %s', oraclePrice, indexPrice);\\n\\n        uint256 diffP = oraclePrice > indexPrice ? oraclePrice - indexPrice : indexPrice - oraclePrice;\\n        diffP = diffP.calculatePercentage(oraclePrice);\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        console.log('getValidPrice diffP %s maxPriceDeviationP %s', diffP, tradingConfig.maxPriceDeviationP);\\n        require(diffP <= tradingConfig.maxPriceDeviationP, 'exceed max price deviation');\\n        return oraclePrice;\\n    }\\n}\\n\",\"keccak256\":\"0x709e233ff39aba267a7f021f98de939292dfdbde7bf90bcc64e5d9e3c42002f7\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200014c57601f62005de038819003918201601f19168301916001600160401b038311848410176200015157808492610100946040528339810103126200014c5780516001600160a01b039182821682036200014c576020810151918383168093036200014c5760408201518481168091036200014c576060830151908582168092036200014c576080840151938685168095036200014c5760a0810151938785168095036200014c5760e060c08301519201519788168098036200014c57600160005560805260015560018060a01b0319948560025416176002558460035416176003558360045416176004558260055416176005558160065416176006556007541617600755604051615c78908162000168823960805181818160f90152818161031e01528181610662015281816107b801528181610f030152818161104201526111e60152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c8063094ae065146112155780631848effa146111d05780633a849c21146111a7578063a31a7b441461117e578063be39f3aa1461100d578063c04c0f5814610ea9578063cb0269c914610e8b578063da9d857b14610743578063e70da1b51461062a578063eeaa783a14610601578063f1bd27a8146105d8578063f2ac5dfe14610254578063f9b6117f1461022b578063fc2a5b1d146102025763fdc860f0146100c257600080fd5b346101ff576100d036611397565b6100d86128d6565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101f457859187916101ba575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101af578594610170575b5050610164610169936113d7565b61427d565b6001815580f35b90809450813d83116101a8575b61018781836112fc565b810103126101a45761016461019e610169946113ca565b93610156565b8380fd5b503d61017d565b6040513d87823e3d90fd5b82819392503d83116101ed575b6101d181836112fc565b810103126101e9576101e385916113b6565b3861012b565b8580fd5b503d6101c7565b6040513d88823e3d90fd5b80fd5b50346101ff57806003193601126101ff576002546040516001600160a01b039091168152602090f35b50346101ff57806003193601126101ff576007546040516001600160a01b039091168152602090f35b50346101ff57600319906080368301126101ff57600435916001600160401b038084116104d957366023850112156104d9578360040135916102958361131d565b6102a260405191826112fc565b83815260209283820196876024809760051b83010191368311610535578701905b8282106105b55750505084358181116105b1576102e4903690600401611334565b906064359081116105b1576102fd903690600401611334565b6040516351331ad760e01b815290976001600160a01b0394909186816004817f00000000000000000000000000000000000000000000000000000000000000008a165afa90811561056f57869188918b9161057a575b5089604051809481936335d2155560e11b8352336004840152165afa801561056f578990610539575b61038691506113d7565b6103d6604051610395816112e1565b602881527f736574507269636573416e644c6971756964617465506f736974696f6e73207488820152670696d657374616d760c41b60408201524290615b4a565b846005541693843b1561053557929091889492604051968795631e09986f60e21b87526064870190606060048901525180915260848701939188905b8b8383106105155750505050508482030188850152868083519283815201920190855b888282106104fb575050505083838092604435604483015203925af180156104f0576104dd575b50303b156104d9576040519163180981eb60e31b8352820181600484015284518091528160448401950191845b8281106104c5578580868181808c038183305af180156104ba576104aa5750f35b6104b390611298565b6101ff5780f35b6040513d84823e3d90fd5b835187529581019592810192600101610489565b8280fd5b6104e990939193611298565b913861045c565b6040513d86823e3d90fd5b835185528b97508896509384019390920191600101610435565b8451821687528e9a508b9950958601959390930192600190910190610412565b8880fd5b508681813d8311610568575b61054f81836112fc565b8101031261053557610563610386916113ca565b61037c565b503d610545565b6040513d8b823e3d90fd5b92505081813d83116105aa575b61059181836112fc565b8101031261053557866105a487926113b6565b38610353565b503d610587565b8680fd5b81356001600160a01b03811681036105d45781529086019086016102c3565b8980fd5b50346101ff57806003193601126101ff576004546040516001600160a01b039091168152602090f35b50346101ff57806003193601126101ff576006546040516001600160a01b039091168152602090f35b50346101ff5761063936611397565b6106416128d6565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101f4578591879161070d575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101af5785946106d2575b50506106cd610169936113d7565b6119b0565b90809450813d8311610706575b6106e981836112fc565b810103126101a4576106cd610700610169946113ca565b936106bf565b503d6106df565b82819392503d831161073c575b61072481836112fc565b810103126101e95761073685916113b6565b38610694565b503d61071a565b50346101ff5760803660031901126101ff576001600160401b036004358181116104d957610775903690600401611334565b906024359081116104d95761078e903690600401611334565b6064359160048310156101a4576107a36128d6565b6040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101af578591610e4c575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa80156101af578590610e11575b61083191506113d7565b61086c604051610840816112c6565b601a81527932bc32b1baba32a0a22620b7322232b1b932b0b9b2a7b93232b960311b6020820152615b09565b8051825103610dd9576007546040516340b4605b60e11b815260443560048201529384916001600160a01b0316906108a8906024840190611410565b8160446101609687935afa9384156101af578594610daa575b505061014083015115610d775760018060a01b03600254166040840151604051906330a66e1560e01b8252600482015261010081602481855afa9081156101f4578691610d46575b5082519194926109188361131d565b9261092660405194856112fc565b808452610935601f199161131d565b01875b818110610ce957505060045487946001600160a01b039091169190855b8251871015610ab9576109688784613222565b519660405197636468402960e11b8952600489015261014088602481885afa978815610aae578b98610a7b575b506109a0818a613222565b5160a089015110610a3a576109b5818a613222565b516060870151106109fa576109d86109f4926109d1838c613222565b5190611433565b976109e38289613222565b526109ee8188613222565b50613213565b95610955565b60405162461bcd60e51b8152602060048201526018602482015277195e18d959591cc81b585e081d1c98591948185b5bdd5b9d60421b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527820a2261039b4bd329032bc31b2b2b239903837b9b4ba34b7b760391b6044820152606490fd5b610aa09198506101403d61014011610aa7575b610a9881836112fc565b810190611613565b9638610995565b503d610a8e565b6040513d8d823e3d90fd5b9088868b9360c084015103610c8f57839160e06040850151602460405180948193632f7ce47360e21b835260048301525afa8015610c8457610c55575b50610b0b604084015160e085015115906157c6565b90825b8151811015610c2657806020610bc3610b28879486613222565b5160018060a01b03600754169060018060a01b03848201511690604081015190610b5c60a060608301511515920151611836565b9160405193610b6a8561127c565b84528684015287604084015287606084015289608084015260a083015260c08201528560e08201528561010082015285610120820152856101408201526040519586809481936302b9d03760e11b835260048301611928565b03925af19182156101af578592610bec575b50610be2610be79261324c565b613213565b610b0e565b91506020823d602011610c1e575b81610c07602093836112fc565b81010312610c1a57905190610be2610bd5565b8480fd5b3d9150610bfa565b8360608601516004811015610c41576101699060443561427d565b634e487b7160e01b82526021600452602482fd5b610c769060e03d60e011610c7d575b610c6e81836112fc565b810190611492565b5084610af6565b503d610c64565b6040513d85823e3d90fd5b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b60209060409893969851610cfc8161124a565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610938565b610d6a91506101003d61010011610d70575b610d6281836112fc565b810190611508565b38610909565b503d610d58565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b610dca929450803d10610dd2575b610dc281836112fc565b8101906130ba565b9138806108c1565b503d610db8565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d602011610e44575b81610e2b602093836112fc565b81010312610c1a57610e3f610831916113ca565b610827565b3d9150610e1e565b90506020813d602011610e83575b81610e67602093836112fc565b81010312610c1a576020610e7c6024926113b6565b91506107f0565b3d9150610e5a565b50346101ff57806003193601126101ff576020600154604051908152f35b50346101ff57602090816003193601126101ff576004356001600160401b038111610fcc57610edc903690600401611334565b91610ee56128d6565b6040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156104f0579082918591610fd7575b506024604051809581936335d2155560e11b8352336004840152165afa908115610c84578391610f9c575b50610f6d91506113d7565b805b8251811015610f945780610be2610f89610f8f9386613222565b51615119565b610f6f565b506001815580f35b905081813d8311610fd0575b610fb281836112fc565b81010312610fcc57610fc6610f6d916113ca565b38610f62565b5080fd5b503d610fa8565b82819392503d8311611006575b610fee81836112fc565b810103126101a45761100082916113b6565b38610f37565b503d610fe4565b50346101ff57602080600319360112610fcc576040516351331ad760e01b815260048035916001600160a01b039184908290817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101af5784918691611148575b50602460405180948193637be53ca160e01b8352336004840152165afa9081156104f0578491611113575b50156110de577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160015491816001558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d8311611141575b61112a81836112fc565b810103126101a45761113b906113ca565b3861109f565b503d611120565b82819392503d8311611177575b61115f81836112fc565b81010312610c1a5761117184916113b6565b38611074565b503d611155565b50346101ff57806003193601126101ff576003546040516001600160a01b039091168152602090f35b50346101ff57806003193601126101ff576005546040516001600160a01b039091168152602090f35b50346101ff57806003193601126101ff576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101ff5760403660031901126101ff576024359081151582036101ff576020611242836004356157c6565b604051908152f35b61014081019081106001600160401b0382111761126657604052565b634e487b7160e01b600052604160045260246000fd5b61016081019081106001600160401b0382111761126657604052565b6001600160401b03811161126657604052565b60e081019081106001600160401b0382111761126657604052565b604081019081106001600160401b0382111761126657604052565b606081019081106001600160401b0382111761126657604052565b90601f801991011681019081106001600160401b0382111761126657604052565b6001600160401b0381116112665760051b60200190565b81601f820112156113925780359161134b8361131d565b9261135960405194856112fc565b808452602092838086019260051b820101928311611392578301905b828210611383575050505090565b81358152908301908301611375565b600080fd5b6040906003190112611392576004359060243560048110156113925790565b51906001600160a01b038216820361139257565b5190811515820361139257565b156113de57565b60405162461bcd60e51b815260206004820152600a60248201526937b7363ca5b2b2b832b960b11b6044820152606490fd5b90600482101561141d5752565b634e487b7160e01b600052602160045260246000fd5b9190820180921161144057565b634e487b7160e01b600052601160045260246000fd5b1561145d57565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b908160e09103126113925760c0604051916114ac836112ab565b6114b5816113b6565b83526114c3602082016113b6565b60208401526114d4604082016113b6565b60408401526114e5606082016113ca565b60608401526080810151608084015260a081015160a0840152015160c082015290565b8091610100928391031261139257604051918201908282106001600160401b038311176112665760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b1561158657565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b156115c757565b60405162461bcd60e51b81526020600482015260176024820152766e6f74207265616368207472696767657220707269636560481b6044820152606490fd5b9190820391821161144057565b9081610140910312611392576040519061162c8261124a565b8051825261163c602082016113b6565b602083015260408101516040830152611657606082016113ca565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b6001600160a01b0390911681526020810191909152901515604082015260600190565b6001600160401b03811161126657601f01601f191660200190565b604051906116e8826112c6565b600982526873697a6544656c746160b81b6020830152565b908160c0910312611392576040519060c08201908282106001600160401b038311176112665760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b6040519061176f826112e1565b602482526361626c6560e01b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65537460208201520152565b156117af57565b60405162461bcd60e51b815260206004820152601a6024820152790d8e040e6e8c2c4d8ca40e8ded6cadc40dcdee840cadcdeeaced60331b6044820152606490fd5b604051906117fe826112e1565b60238252620c8caf60eb1b6040837f65786563757465496e6372656173654f7264657220617661696c61626c65496e60208201520152565b600160ff1b81146114405760000390565b1561184e57565b60405162461bcd60e51b81526020600482015260196024820152780d8e040d2dcc8caf040e8ded6cadc40dcdee840cadcdeeaced603b1b6044820152606490fd5b9260a094919796959260c0850198600180881b03168552602085015260408401526060830152151560808201520152565b600482101561141d5752565b91909160c08060e083019460018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261191760808201516080860190611410565b60a081015160a08501520151910152565b81516001600160a01b0316815260208083015190820152604080830151610160830194939161195a9190840190611410565b606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080910151910152565b600754906000916040519163f9d244fd60e01b83528060048401526119d86024840186611410565b6101a080846044816001600160a01b0387165afa9384156101af5785946127df575b505060208301516001600160a01b0316156127d85760048510156127c45784156127a2575b6040838101516002549151632f7ce47360e21b8152600481018290529094916001600160a01b031660e082602481845afa918215612797578792612776575b5060608201511561273657600480546020858101516040516372c1cc1b60e11b81526001600160a01b039182169481019490945290911692919081602481865afa90811561056f5789916126fc575b506126c357610100602491604051928380926330a66e1560e01b82528b60048301525afa9081156123af5788916126a2575b50611af860e0850151801590811561267c575b5061157f565b611b0860c08501511515886157c6565b95606085015160048110156125e257158015612665575b156126365760c08501511561260a5760c082015161271080828103116125f657611b5a91611b4e910389612e8d565b60a087015110156115c0565b606085015160048110156125e2576001146125a3575b602085015160408087015160c0880151915163bc95baad60e01b815294926101409286928392611bb092151591906001600160a01b03166004850161169d565b0381875afa928315612535578a9361257c575b50611c4390611c23611bd98a60e08a0151612f32565b60e089015160405190611beb826112c6565b601f82527f65786563757465496e6372656173654f726465722073697a65416d6f756e74006020830152611c1d6116db565b91615bc1565b60808701519060e088015181519060806020840151930151938c88612bac565b5015612540576101208501511580156124b5575b1561247c57610160850151159182156123f3575b5050156123ba57600354604051632500ed8d60e21b8152600481018890529060c090829060249082906001600160a01b03165afa9081156123af578891612380575b506040840151604051906301fd38f760e01b82526004820152602081602481865afa90811561056f57899161234e575b50611d3e611cea82612b66565b604051611cf6816112e1565b603081527f65786563757465496e6372656173654f72646572207072654e65744578706f7360208201526f3ab932a0b6b7bab73a21b432b1b5b2b960811b6040820152615b4a565b8881126122d45760c08501511561228c5750611d64816020611d81935191015190611606565b611d7581611d706117f1565b615b4a565b60e08501511115611847565b608083015190878213612264575b50505060018060a01b036004541693604060018060a01b0360208401511695608084015190838960e087015199611de38a60c08a0151151588519d8e98899788966370bf730b60e11b88526004880161188f565b03925af1958615612258578095819761221d575b506007546020840151604085015160c086015160608701516001600160a01b03948516949093169290151560048210156122095790611e5f9160e08901519360405195611e43876112ab565b86526020860152604085015260016060850152608084016118c0565b8660a083015260c0820152813b156104d957611e9483928392604051948580948193632670e98d60e01b8352600483016118cc565b03925af180156104ba576121fa575b508061012084015180612117575b5061016084015180612034575b505087611fa4576007546001600160a01b0316803b15610fcc57818091602460405180948193633e5005e560e01b83528a60048401525af180156104ba57611f90575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b611f6d60018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a01526060890190611410565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b611f9a8291611298565b6101ff5780611f01565b60018814611fde575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e72979593611f2f565b6007546001600160a01b0316803b15610fcc5781809160246040518094819363121494ed60e31b83528a60048401525af180156104ba57612020575b50611fad565b61202a8291611298565b6101ff578061201a565b600754602086810151604088015161014089015160c08a015193956120d6956001600160a01b03908116959416931515919061206f90611836565b926040519461207d8661127c565b85528785015260036040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301611928565b03925af180156104ba576120ec575b8190611ebe565b602090813d8311612110575b61210281836112fc565b8101031261139257386120e5565b503d6120f8565b600754602086810151604088015161010089015160c08a015193956121b9956001600160a01b03908116959416931515919061215290611836565b92604051946121608661127c565b85528785015260026040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301611928565b03925af180156104ba576121cf575b8190611eb1565b602090813d83116121f3575b6121e581836112fc565b8101031261139257386121c8565b503d6121db565b61220390611298565b38611ea3565b634e487b7160e01b86526021600452602486fd5b955095506040853d604011612250575b8161223a604093836112fc565b810103126101e957602085519501519538611df7565b3d915061222d565b604051903d90823e3d90fd5b61227e61228493602060018060a01b039101511692612b66565b9161292c565b388080611d8f565b6122c86122a683606060406122cf96015191015190611606565b916122b383611d70611762565b6122c28960e089015194612faf565b90611433565b10156117a8565b611d81565b60c08501511561231b576123146122f58360206122cf955191015190611606565b61230181611d706117f1565b61230f60e088015193611836565b611433565b1015611847565b5061233381606060406122cf94015191015190611606565b61233f81611d70611762565b6122c88760e087015192612faf565b90506020813d602011612378575b81612369602093836112fc565b81010312610535575138611cdd565b3d915061235c565b6123a2915060c03d60c0116123a8575b61239a81836112fc565b810190611700565b38611cad565b503d612390565b6040513d8a823e3d90fd5b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b51604051630bc628fb60e01b81526004810191909152600360248201529150602090829060449082906001600160a01b03165afa9081156123af57889161243e575b50153880611c6b565b90506020813d602011612474575b81612459602093836112fc565b810103126124705761246a906113ca565b38612435565b8780fd5b3d915061244c565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b508151604051630bc628fb60e01b81526004810191909152600260248201526020816044816001600160a01b0386165afa908115612535578a916124fb575b5015611c57565b90506020813d60201161252d575b81612516602093836112fc565b810103126105d457612527906113ca565b386124f4565b3d9150612509565b6040513d8c823e3d90fd5b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b611c4391935061259c906101403d61014011610aa757610a9881836112fc565b9290611bc3565b60c0850151909690156125cd5760a085015190808210156125c657505b95611b70565b90506125c0565b60a085015190808211156125c6575095611b70565b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b8b52601160045260248bfd5b60c082015161271081810181116125f657611b5a9161262a910189612e8d565b60a087015111156115c0565b60c0850151156126555761265060a08601518810156115c0565b611b5a565b61265060a08601518811156115c0565b50606085015160048110156125e257600114611b1f565b6040840151811015915081612693575b5038611af2565b9050606083015110153861268c565b6126bd91506101003d61010011610d7057610d6281836112fc565b38611adf565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d60201161272e575b81612717602093836112fc565b8101031261053557612728906113ca565b38611aad565b3d915061270a565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b61279091925060e03d60e011610c7d57610c6e81836112fc565b9038611a5e565b6040513d89823e3d90fd5b6127bf6127b761018085015160015490611433565b421115611456565b611a1f565b634e487b7160e01b84526021600452602484fd5b5050505050565b908092945081813d83116128cf575b6127f881836112fc565b81010312610c1a576040519182018281106001600160401b038211176128bb576040528051825261282b602082016113b6565b602083015260408101516040830152606081015160048110156101e95760608301526080810151608083015260a081015160a083015261286d60c082016113ca565b60c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080910151908201529138806119fa565b634e487b7160e01b86526041600452602486fd5b503d6127ee565b6002600054146128e7576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039485166024840152604480840196909652948252926080820191906001600160401b03831182841017611266576129e893836040521690612987836112c6565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d15612a7d573d916129cd836116c0565b926129db60405194856112fc565b83523d868885013e612a81565b90815190838215928315612a5b575b505050905015612a045750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8480929394500103126101ff575081612a7491016113ca565b803883816129f7565b6060915b91929015612ae35750815115612a95575090565b3b15612a9e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612af65750805190602001fd5b60405162461bcd60e51b815260206004820152908190612b1a906024830190612b41565b0390fd5b60005b838110612b315750506000910152565b8181015183820152602001612b21565b90602091612b5a81518092818552858086019101612b1e565b601f01601f1916010190565b60008112612b715790565b612b7a90611836565b90565b9190916000838201938412911290801582169115161761144057565b8181029291811591840414171561144057565b9695939092949196612bc360a08201968751611433565b978815612d7257612bd8906080830151612b7d565b9560008712612d2257519081612d04575b505060008512612cbf57612c0e90612c0984612c0488612b66565b612faf565b612b99565b8610159182612ca3575b505015612c69578311612c2e57612b7a90612b66565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b612cb59250612c0990612c0486612b66565b8411153880612c18565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b84612d1a939792612d1492612de8565b90612b7d565b933880612be9565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b969593909294919660a081019580875110612da357612bc3908751611606565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c0810190815190818514612e63576060015115612e395750805180841115612e215750612b7a92612e1b915190611606565b90612f32565b612e34929150612b7a93612e1b91611606565b611836565b83811115612e505750612b7a92612e1b9151611606565b612e34929150612e1b90612b7a94611606565b5050505050600090565b8115612e77570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214612f27576127109082821115612eea577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b9060001981830981830291828083109203918083039214612f995768327cb2734119d3b7a9601e1b9082821115612eea577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146130335784831115612eea578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505090612b7a9250612e6d565b906127109060001982840992828102928380861095039480860395146130335784831115612eea578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b908161016091031261139257604051906130d38261127c565b805182526130e3602082016113b6565b602083015260408101516040830152606081015160048110156113925760608301526080810151608083015260a081015160a083015260c081015160c083015261312f60e082016113ca565b60e08301526101006131428183016113ca565b90830152610120808201519083015261315f6101408092016113ca565b9082015290565b60405190613173826112e1565b602482526361626c6560e01b6040837f6578656375746544656372656173654f7264657220617661696c61626c65537460208201520152565b604051906131b9826112e1565b60238252620c8caf60eb1b6040837f6578656375746544656372656173654f7264657220617661696c61626c65496e60208201520152565b919261320c6040929594606085019685526020850190611410565b1515910152565b60001981146114405760010190565b80518210156132365760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6007546040516340b4605b60e11b8152600481018390526000602482018190529092916001600160a01b03169061016084604481855afa93841561427057819461424d575b5060208401516060850151906001600160a01b03166004821015614239576133366133568493849360ff604051926132c8846112e1565b603784527f6578656375746544656372656173654f72646572206163636f756e74202573206020850152766f7264657249642025732074726164655479706520257360481b6040850152604051958694637c7a8d8f60e11b60208701526080602487015260a4860190612b41565b9260448501528a606485015216608483015203601f1981018352826112fc565b6020815191016a636f6e736f6c652e6c6f675afa5060208401516001600160a01b0316156142335760608401516004811015610c415715614219575b60408401519360018060a01b036002541692604051632f7ce47360e21b815286600482015260e081602481885afa80156104f0576141fa575b5060018060a01b036004541660018060a01b0360208401511694610140604085015160e0860151151597613413604051998a93849363bc95baad60e01b85526004850161169d565b0381855afa9586156101af5785966141d7575b5060a086015115614195579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101af578593614172575b5061348f60c085015160a088015180821060001461416b57505b8060c08701528015908115614146575061157f565b61349f60e08501511515896157c6565b926060850151600481101561394a5715801561412f575b156140ff57610100850151156140df5760c081015161271080828103116140cb576134e691611b4e910386612e8d565b6060850151600481101561394a5760011461407c575b613575906135556135118660c0890151612f32565b60c088015160405190613523826112c6565b601f82527f6578656375746544656372656173654f726465722073697a65416d6f756e74006020830152611c1d6116db565b60808601519060c08701518151906080602084015193015193888c612d83565b5050600354604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa9081156101f457869161405d575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa9182156101f4578692614029575b5085806135ee84614f2f565b61367f61368d60405192613601846112e1565b603084527f6578656375746544656372656173654f72646572207072654e65744578706f7360208501526f3ab932a0b6b7bab73a21b432b1b5b2b960811b604085015260405192839161366d6020840196634b5c427760e01b8852604060248601526064850190612b41565b83810360231901604485015290612b41565b03601f1981018352826112fc565b51906a636f6e736f6c652e6c6f675afa50858212613fc25760e0850151613f87576136c091506020815191015190611606565b6136cc81611d706131ac565b60c08401511190815b613e5557505082608083015113613dcc575b60018060a01b036004541694606060018060a01b0360208501511696608085015190898760c08801519a6137398860e08b015115156040519e8f98899788966387d4f0d560e01b88526004880161188f565b03925af19283156104f057849585978695613d86575b506060820151600481101561394a57613c4257506007546001600160a01b0316803b156101e95785809160246040518094819363be82e5b160e01b83528860048401525af180156101f457908691613c2e575b50505b60018060a01b036007541660018060a01b03602083015116604083015160e08401511515606085015160048110156125e25761380c9086519260c088015194604051966137f1886112ab565b8752602087015260408601528a6060860152608085016118c0565b60a083015260c0820152813b156105b15761384087928392604051948580948193632670e98d60e01b8352600483016118cc565b03925af180156101f457908691613c1a575b505061389d61014060018060a01b036004541660018060a01b0360208501511690604085015160e08601511515926040519586948593849363bc95baad60e01b85526004850161169d565b03915afa9081156101f4579060a0918791613bf9575b5001511561395e575b602081015160608201516001600160a01b0390911698600482101561394a5791613921600080516020615c238339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a0190611410565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b6054820152603581526139aa816112e1565b519020968960018060a01b0360075416986024604051809b8193634cc42b5160e01b835260048301525afa978815612535578a98613abc575b50895b8851811015613aad576139f9818a613222565b51606081015115613a14575b50613a0f90613213565b6139e6565b60018060a01b036007541690608060a08201519101516004811015613a99579082918e933b156101a4576064849283613a6895604051968795869463c250985960e01b865260048601526024850190611410565b8160448401525af180156104ba57613a81575b50613a05565b613a8a90611298565b613a95578a38613a7b565b8a80fd5b634e487b7160e01b8e52602160045260248efd5b509193965091949793966138bc565b9097503d808b833e613ace81836112fc565b6020828281010312613a95578151906001600160401b038211613bf557808301601f838501011215613bf5578183015190613b088261131d565b93613b1660405195866112fc565b8285526020850193828201602060e08602838501010111613bf15793602085830101945b602060e0860282850101018610613b585750505050505096386139e3565b60e0868585010312613bed5760405191613b71836112ab565b613b7a876113b6565b835260208701516020840152613b92604088016113ca565b6040840152613ba3606088016113ca565b60608401526080870151926004841015613be757602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050613b3a565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b613c1491506101403d61014011610aa757610a9881836112fc565b386138b3565b613c2390611298565b610c1a578438613852565b613c3790611298565b610c1a5784386137a2565b6060820151600481101561394a57600103613cb257506007546001600160a01b0316803b156101e9578580916024604051809481936304d3cb8160e41b83528860048401525af180156101f457908691613c9e575b50506137a5565b613ca790611298565b610c1a578438613c97565b60075490516060830151916001600160a01b03166004831015613d7257803b1561247057916064889283613d01956040519687958694634136de9f60e01b865260048601526024850190611410565b8160448401525af180156101f457908691613d5e575b50506007546001600160a01b0316803b156101e9578580916024604051809481936304d3cb8160e41b83528860048401525af180156101f457908691613c9e5750506137a5565b613d6790611298565b610c1a578438613d17565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011613dc4575b81613da5606093836112fc565b810103126101a45784519560406020870151960151969596933861374f565b3d9150613d98565b60018060a01b036002541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa9081156104f05790613e31918591613e36575b506020015160045460808501516001600160a01b03928316929091169061227e90612b66565b6136e7565b613e4f915060e03d60e011610c7d57610c6e81836112fc565b38613e0b565b909450613e9a6040969392949651613e6c816112c6565b601c81527b195e1958dd5d19511958dc99585cd953dc99195c881b99595910511360221b6020820152615b09565b6060820151600481101561394a57813b156105b15785613ed49288928360405180968195829463c1872cf360e01b84528b600485016131f1565b03925af180156101f457613f74575b50602081015160608201516001600160a01b0390911696600482101561394a5791613f47600080516020615c238339815191529896949261016098969460c060e0850151151594015194604051998a5260208a015260408901526060880190611410565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b613f8090959195611298565b9338613ee3565b613f9e8160606040613fba94015191015190611606565b91613fab83611d70613166565b6122c28560c088015194612faf565b1090816136d5565b60e0850151613ff957613fdf816020613fba935191015190611606565b613feb81611d706131ac565b61230f60c087015193611836565b61400e91506060604082015191015190611606565b61401a81611d70613166565b613fba8360c086015192612faf565b9091506020813d602011614055575b81614045602093836112fc565b810103126101e9575190386135e2565b3d9150614038565b614076915060c03d60c0116123a85761239a81836112fc565b386135b2565b926135759060e0860151156000146140ae5760a086015190808210156140a757505b935b90506134fc565b905061409e565b60a086015190808211156140c457505b936140a0565b90506140be565b634e487b7160e01b88526011600452602488fd5b60c081015161271081810181116140cb576134e69161262a910186612e8d565b6101008501511561411f5761411a60a08601518511156115c0565b6134e6565b61411a60a08601518510156115c0565b506060850151600481101561394a576001146134b6565b604086015181101591508161415c575038611af2565b9050606085015110153861268c565b905061347a565b61418e9193506101003d61010011610d7057610d6281836112fc565b9138613460565b5050505050506141d591506040516141ac816112c6565b60178152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6020820152615b4a565b565b6141f39196506101403d61014011610aa757610a9881836112fc565b9438613426565b6142129060e03d60e011610c7d57610c6e81836112fc565b50386133cb565b61422e6127b761012086015160015490611433565b613392565b50505050565b634e487b7160e01b83526021600452602483fd5b6142699194506101603d61016011610dd257610dc281836112fc565b9238613291565b50604051903d90823e3d90fd5b60075460006142a3604051946340b4605b60e11b86528460048701526024860190611410565b610160846044816001600160a01b0386165afa938415614270578194614f0c575b5060208401516060850151906001600160a01b03166004821015614239576133366142fb8493849360ff604051926132c8846112e1565b6020815191016a636f6e736f6c652e6c6f675afa5060208401516001600160a01b0316156142335760608401516004811015610c415715614ef2575b60408401519360018060a01b036002541692604051632f7ce47360e21b815286600482015260e081602481885afa80156104f057614ed3575b5060018060a01b036004541660018060a01b0360208401511694610140604085015160e08601511515976143b8604051998a93849363bc95baad60e01b85526004850161169d565b0381855afa9586156101af578596614eb0575b5060a086015115614195579061010060249392604051948580926330a66e1560e01b82528c60048301525afa9283156101af578593614e8d575b5061443360c085015160a088015180821060001461416b57508060c08701528015908115614146575061157f565b61444360e08501511515896157c6565b926060850151600481101561394a57158015614e76575b15614e465761010085015115614e265760c081015161271080828103116140cb5761448a91611b4e910386612e8d565b6060850151600481101561394a57600114614dd7575b6144b5906135556135118660c0890151612f32565b5050600354604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa9081156101f4578691614db8575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa9182156101f4578692614d84575b50858061452e84614f2f565b61367f61454160405192613601846112e1565b51906a636f6e736f6c652e6c6f675afa50858212614d375760e0850151614d185761457491506020815191015190611606565b61458081611d706131ac565b60c08401511190815b614c4357505082608083015113614bda575b60018060a01b036004541694606060018060a01b0360208501511696608085015190898760c08801519a6145ed8860e08b015115156040519e8f98899788966387d4f0d560e01b88526004880161188f565b03925af19283156104f057849585978695614b94575b506060820151600481101561394a57614a6457506007546001600160a01b0316803b156101e95785809160246040518094819363be82e5b160e01b83528860048401525af180156101f457908691614a50575b50505b60018060a01b036007541660018060a01b03602083015116604083015160e08401511515606085015160048110156125e2576146a59086519260c088015194604051966137f1886112ab565b60a083015260c0820152813b156105b1576146d987928392604051948580948193632670e98d60e01b8352600483016118cc565b03925af180156101f457908691614a3c575b505061473661014060018060a01b036004541660018060a01b0360208501511690604085015160e08601511515926040519586948593849363bc95baad60e01b85526004850161169d565b03915afa9081156101f4579060a0918791614a1b575b500151156147b957602081015160608201516001600160a01b0390911698600482101561394a5791613921600080516020615c238339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a0190611410565b9693979491602088979492970151604089015160e08a0151151560405191602083019360018060601b03199060601b168452603483015260f81b605482015260358152614805816112e1565b519020968960018060a01b0360075416986024604051809b8193634cc42b5160e01b835260048301525afa978815612535578a986148f0575b50895b8851811015613aad57614854818a613222565b5160608101511561486f575b5061486a90613213565b614841565b60018060a01b036007541690608060a08201519101516004811015613a99579082918e933b156101a45760648492836148c395604051968795869463c250985960e01b865260048601526024850190611410565b8160448401525af180156104ba576148dc575b50614860565b6148e590611298565b613a95578a386148d6565b9097503d808b833e61490281836112fc565b6020828281010312613a95578151906001600160401b038211613bf557808301601f838501011215613bf557818301519061493c8261131d565b9361494a60405195866112fc565b8285526020850193828201602060e08602838501010111613bf15793602085830101945b602060e086028285010101861061498c57505050505050963861483e565b60e0868585010312613bed57604051916149a5836112ab565b6149ae876113b6565b8352602087015160208401526149c6604088016113ca565b60408401526149d7606088016113ca565b60608401526080870151926004841015613be757602060e09282829660808695015260a08b015160a082015260c08b015160c082015281520197019692505061496e565b614a3691506101403d61014011610aa757610a9881836112fc565b3861474c565b614a4590611298565b610c1a5784386146eb565b614a5990611298565b610c1a578438614656565b6060820151600481101561394a57600103614ad457506007546001600160a01b0316803b156101e9578580916024604051809481936304d3cb8160e41b83528860048401525af180156101f457908691614ac0575b5050614659565b614ac990611298565b610c1a578438614ab9565b60075490516060830151916001600160a01b03166004831015613d7257803b1561247057916064889283614b23956040519687958694634136de9f60e01b865260048601526024850190611410565b8160448401525af180156101f457908691614b80575b50506007546001600160a01b0316803b156101e9578580916024604051809481936304d3cb8160e41b83528860048401525af180156101f457908691614ac0575050614659565b614b8990611298565b610c1a578438614b39565b9650935095506060853d606011614bd2575b81614bb3606093836112fc565b810103126101a457845195604060208701519601519695969338614603565b3d9150614ba6565b60018060a01b036002541660e06040860151602460405180948193632f7ce47360e21b835260048301525afa9081156104f05790614c3e918591613e3657506020015160045460808501516001600160a01b03928316929091169061227e90612b66565b61459b565b909450614c5a6040969392949651613e6c816112c6565b6060820151600481101561394a576001600160a01b0382163b156105b15785614c9d9288928360405180968195829463c1872cf360e01b84528b600485016131f1565b03926001600160a01b03165af180156101f457613f745750602081015160608201516001600160a01b0390911696600482101561394a5791613f47600080516020615c238339815191529896949261016098969460c060e0850151151594015194604051998a5260208a015260408901526060880190611410565b613f9e8160606040614d2f94015191015190611606565b109081614589565b60e0850151614d5457613fdf816020614d2f935191015190611606565b614d6991506060604082015191015190611606565b614d7581611d70613166565b614d2f8360c086015192612faf565b9091506020813d602011614db0575b81614da0602093836112fc565b810103126101e957519038614522565b3d9150614d93565b614dd1915060c03d60c0116123a85761239a81836112fc565b386144f2565b926144b59060e086015115600014614e095760a08601519080821015614e0257505b935b90506144a0565b9050614df9565b60a08601519080821115614e1f57505b93614dfb565b9050614e19565b60c081015161271081810181116140cb5761448a9161262a910186612e8d565b61010085015115614e6657614e6160a08601518511156115c0565b61448a565b614e6160a08601518510156115c0565b506060850151600481101561394a5760011461445a565b614ea99193506101003d61010011610d7057610d6281836112fc565b9138614405565b614ecc9196506101403d61014011610aa757610a9881836112fc565b94386143cb565b614eeb9060e03d60e011610c7d57610c6e81836112fc565b5038614370565b614f076127b761012086015160015490611433565b614337565b614f289194506101603d61016011610dd257610dc281836112fc565b92386142c4565b600081126150f65760405160208101908082106001600160401b0383111761126657614f62916040526000815291612b66565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b808210156150e8575b506904ee2d6d415b85acef8160201b808210156150db575b50662386f26fc10000808210156150ce575b506305f5e100808210156150c1575b50612710808210156150b4575b5060648110156150a6575b600a8091101561509c575b60018084019281602161500d614ff7876116c0565b9661500560405198896112fc565b8088526116c0565b602087019790601f1901368937860101905b615066575b5050505061505a92612b7a92602092604051958361504b8895518092888089019101612b1e565b84019151809386840190612b1e565b010380845201826112fc565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156150975791908261501f565b615024565b9160010191614fe2565b606460029104920191614fd7565b6004910492019138614fcc565b6008910492019138614fbf565b6010910492019138614fb0565b6020910492019138614f9e565b604093508204905038614f86565b614f62604051615105816112c6565b60018152602d60f81b602082015291612b66565b60048054604051636468402960e11b8152918201839052600092919061014090829060249082906001600160a01b03165afa908115610c845783916157a5575b50828060018060a01b036020840151166040840151906151fd6040519261517f846112e1565b602984527f6c6971756964617465506f736974696f6e206163636f756e742025732070616960208501526872496e64657820257360b81b60408501526040519283916151e46020840196630d26b92560e01b8852606060248601526084850190612b41565b916044840152606483015203601f1981018352826112fc565b51906a636f6e736f6c652e6c6f675afa5060a08101511561576e5761522d604082015160608301511515906157c6565b6060820151909390156157305760c0820180516153279181871115615714576152619150612e1b60a0860151915188611606565b82806152f161530860c088015161367f61527a87614f2f565b9160405192615288846112e1565b603284527f6c6971756964617465506f736974696f6e2061766572616765507269636520256020850152717320756e7265616c697a6564506e6c20257360701b6040850152604051958694635970e08960e01b6020870152606060248701526084860190612b41565b916044850152602319848303016064850152612b41565b6020815191016a636f6e736f6c652e6c6f675afa506080840151612b7d565b60018060a01b036002541661010060408501516024604051809481936330a66e1560e01b835260048301525afa908115610c845790839182916156f3575b508183136155f95750505060015b8180604051615381816112c6565b601f81527f6c6971756964617465506f736974696f6e206e6565644c69717569646174650060208201526040516153ed816153d5602082019463c3b5563560e01b8652604060248401526064830190612b41565b9615968715604483015203601f1981018352826112fc565b51906a636f6e736f6c652e6c6f675afa50614233576007546020830151604084015160608501511515926001600160a01b039081169216823b15610c1a5791615451939185809460405196879586948593638ffb8b2f60e01b85526004850161169d565b03925af180156104ba576155ea575b50908160206154ff60018060a01b036007541660018060a01b03838601511660408601516060870151151561549860a0890151611836565b91604051936154a68561127c565b8452868401528660408401528660608401528a608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b835260048301611928565b03925af19283156122585792615594575b50907faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb799361010093926155428361324c565b60018060a01b036020820151169060408101516060820151151590608060a084015193015193604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152a1565b9291506020833d6020116155e2575b816155b0602093836112fc565b8101031261139257915190917faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb79615510565b3d91506155a3565b6155f390611298565b38615460565b61561f8361561a849360a06156118c828c0151612f32565b91015190612e8d565b613040565b612710811015936156dd61563760a089015192614f2f565b9161367f60405194615648866112e1565b604086527f6c6971756964617465506f736974696f6e207269736b5261746520257320706f60208701527f736974696f6e416d6f756e74202573206578706f73757265417373657420257360408701526040519485936156c160208601986342a59a4b60e11b8a526080602488015260a4870190612b41565b9260448601526064850152602319848303016084850152612b41565b51906a636f6e736f6c652e6c6f675afa50615373565b61570e91506101003d61010011610d7057610d6281836112fc565b38615365565b50612e3461572b91612e1b8860a088015192611606565b615261565b60c08201805161532791868211156157575761572b9150612e1b8760a08701519251611606565b50612e3461572b91612e1b60a08701519189611606565b5050506141d5604051615780816112c6565b6013815272706f736974696f6e206e6f742065786973747360681b6020820152615b09565b6157c091506101403d61014011610aa757610a9881836112fc565b38615159565b60025460408051632f7ce47360e21b81526004810184905293926024926001600160a01b039081169060e0878681855afa968715615a6857600097615ae9575b5080600654169080885116978551986341976e0960e01b8a5260048a0152602097888a8981875afa998a15615ade5760009a615aae575b5090600080896158b06158cc8b8e9897640339012b9960dd1b825192615862846112e1565b602584527f67657456616c696450726963652070616972496e6465782025732069734c6f6e8c8501528301528d5193849260608c85019763ca7733b160e01b89528501526084840190612b41565b908d60448401521515606483015203601f1981018352826112fc565b51906a636f6e736f6c652e6c6f675afa5051166044865180948193637641b69960e01b8352600483015260008a8301525afa8015615a68578790600090615a7c575b615976925061596381838851615923816112e1565b602a81527f67657456616c69645072696365206f7261636c65507269636520257320696e648c820152696578507269636520257360b01b8a820152615b8f565b8181811115615a73579061561a91611606565b9183519182916330a66e1560e01b8352600483015281866101009485935afa918215615a68579060e09291600092615a4b575b5050016159ff81518385516159bd816112e1565b602c81527f67657456616c69645072696365206469666650202573206d6178507269636544898201526b6576696174696f6e5020257360a01b87820152615b8f565b5110615a0b5750505090565b5162461bcd60e51b81526004810192909252601a908201527932bc31b2b2b21036b0bc10383934b1b2903232bb34b0ba34b7b760311b6044820152606490fd5b615a619250803d10610d7057610d6281836112fc565b38806159a9565b84513d6000823e3d90fd5b61561a91611606565b90508682813d8311615aa7575b615a9381836112fc565b810103126101ff575086615976915161590e565b503d615a89565b90998982813d8311615ad7575b615ac581836112fc565b810103126101ff57505198600061583d565b503d615abb565b87513d6000823e3d90fd5b615b0291975060e03d8111610c7d57610c6e81836112fc565b9538615806565b60008091604051615b378161367f602082019463104c13eb60e21b8652602060248401526044830190612b41565b51906a636f6e736f6c652e6c6f675afa50565b600091908291615b376040518092615b7b6020830195632d839cb360e21b8752604060248501526064840190612b41565b90604483015203601f1981018352826112fc565b60009291615b3784936040519283916151e4602084019663ca47c4eb60e01b8852606060248601526084850190612b41565b90615b37600094938594615c0e604051948593615bf7602086019863c67ea9d160e01b8a526080602488015260a4870190612b41565b916044860152602319858303016064860152612b41565b90608483015203601f1981018352826112fc56fe9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee0613a2646970667358221220be5af09e9c5b523689cdf70cc077f32975c9da86227e26ca5f58d93b9cc5d01c64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 706,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12388,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "maxTimeDelay",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12391,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "pairInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPairInfo)9479"
      },
      {
        "astId": 12394,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "pairVault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPairVault)9585"
      },
      {
        "astId": 12397,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "tradingVault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITradingVault)4480"
      },
      {
        "astId": 12400,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "fastPriceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IIndexPriceFeed)3657"
      },
      {
        "astId": 12403,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "vaultPriceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IOraclePriceFeed)4515"
      },
      {
        "astId": 12406,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "orderManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IOrderManager)3894"
      }
    ],
    "types": {
      "t_contract(IIndexPriceFeed)3657": {
        "encoding": "inplace",
        "label": "contract IIndexPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IOrderManager)3894": {
        "encoding": "inplace",
        "label": "contract IOrderManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPairInfo)9479": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)9585": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(ITradingVault)4480": {
        "encoding": "inplace",
        "label": "contract ITradingVault",
        "numberOfBytes": "20"
      },
      "t_contract(IOraclePriceFeed)4515": {
        "encoding": "inplace",
        "label": "contract IOraclePriceFeed",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
