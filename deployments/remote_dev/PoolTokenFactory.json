{
  "address": "0xcC4c41415fc68B2fBf70102742A83cDe435e0Ca7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        }
      ],
      "name": "createPoolToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf17a2387309fb010505aac9ad34ab4345805a406da9400e01634b37a7012df4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xcC4c41415fc68B2fBf70102742A83cDe435e0Ca7",
    "transactionIndex": 0,
    "gasUsed": "1370962",
    "logsBloom": "0x
    "blockHash": "0x21f0fe65f46577836018fe160cbbe9a9f9c079360d1c794167929033cfedc4fc",
    "transactionHash": "0xcf17a2387309fb010505aac9ad34ab4345805a406da9400e01634b37a7012df4",
    "logs": [],
    "blockNumber": 286,
    "cumulativeGasUsed": "1370962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD6F7A6a5c21A3f503EBaE7a473639974379c351"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e376f0b83e315984c98ac2f39429f15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"}],\"name\":\"createPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolTokenFactory.sol\":\"PoolTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n}\\n\",\"keccak256\":\"0xa8384ca808dfa6c2b68b61e7f33da9aa32f828cb40e8d6876d1c0b9ca379f267\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPoolToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0xb436cddb7e29b673df7552d534019a53153ae339d9e826abf53a44d8002cb444\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPoolTokenFactory.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IPoolTokenFactory {\\n    function createPoolToken(address indexToken, address stableToken) external returns (address);\\n}\\n\",\"keccak256\":\"0x347a19ff94196ad6d19a4b955922cd540fe6c20a20e991e1e7929f3c237df68b\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c62451d195ef51205ba29bafb92b799d4d6c3c158829d8f25faee0b7f422d77\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/pool/PoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '../interfaces/IPoolToken.sol';\\n\\nimport '../libraries/Roleable.sol';\\n\\ncontract PoolToken is IPoolToken, Roleable, ERC20 {\\n    address public indexToken;\\n    address public stableToken;\\n\\n    mapping(address => bool) public miners;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        address _indexToken,\\n        address _stableToken,\\n        address _miner,\\n        string memory name_,\\n        string memory symbol_\\n    ) Roleable(addressProvider) ERC20(name_, symbol_) {\\n        indexToken = _indexToken;\\n        stableToken = _stableToken;\\n        miners[_miner] = true;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(miners[msg.sender], 'miner forbidden');\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyMiner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMiner {\\n        _burn(account, amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    //todo lock time\\n    function setMiner(address account, bool enable) external onlyAdmin {\\n        miners[account] = enable;\\n    }\\n}\\n\",\"keccak256\":\"0x0e6216fa81ccc0a05466887facae6692f6862161707a5f4e5f2d9d1f0c98f02b\",\"license\":\"UNLICENSED\"},\"contracts/pool/PoolTokenFactory.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport '../interfaces/IPoolTokenFactory.sol';\\nimport './PoolToken.sol';\\n\\ncontract PoolTokenFactory is IPoolTokenFactory {\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    function createPoolToken(address indexToken, address stableToken) external override returns (address) {\\n        string memory name = string(\\n            abi.encodePacked(IERC20Metadata(indexToken).name(), '-', IERC20Metadata(stableToken).name(), '-lp')\\n        );\\n        string memory symbol = string(\\n            abi.encodePacked(IERC20Metadata(indexToken).symbol(), '-', IERC20Metadata(stableToken).symbol(), '-lp')\\n        );\\n        PoolToken pairToken = new PoolToken(ADDRESS_PROVIDER, indexToken, stableToken, msg.sender, name, symbol);\\n        return address(pairToken);\\n    }\\n}\\n\",\"keccak256\":\"0xa3efe269a1953e478bd1dcc76c8875023e1c75892b68d9baa68632fe9add4c58\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f61186138819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b0381168103610071576080526040516117d4908161008d82396080518181816101ef01526103320152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604090808252600491823610156200001857600080fd5b600091823560e01c9081631848effa146200031c5750632c11959c146200003e57600080fd5b3462000318578060031936011262000318576001600160a01b0390833582811690819003620003145760243594838616809603620003105782516306fdde0360e01b808252909686888481875afa978815620002e6578798620002f0575b50845191825286828481845afa918215620002e6578792620002c6575b508451918851620000d38160209b8c80880191016200039a565b830190602d60f81b91828b820152620000f6825180938d6021850191016200039a565b016200011a6024856202d6c760ec1b93846021820152038781018752018562000361565b86516395d89b4160e01b80825290928a8488818b5afa9384156200029c578b94620002a6575b5088519182528a828881885afa9182156200029c57926024928d97969592620001b8958e809362000272575b5050620001a38c5199856200018b8c9751809284808b0191016200039a565b8601928184015283519384916021850191016200039a565b01906021820152038681018652018462000361565b85519461133e8087019587871067ffffffffffffffff8811176200025f57509262000240949262000231928897956200046189398a7f00000000000000000000000000000000000000000000000000000000000000001686528c8601528885015233606085015260c0608085015260c084019062000439565b9160a081840391015262000439565b039084f09283156200025457505191168152f35b9051903d90823e3d90fd5b634e487b7160e01b8b526041905260248afd5b620002939293503d8091833e6200028a818362000361565b810190620003bf565b90388e6200016c565b89513d8d823e3d90fd5b620002be9194503d808d833e6200028a818362000361565b923862000140565b620002de9192503d8089833e6200028a818362000361565b9038620000b9565b85513d89823e3d90fd5b620003089198503d8089833e6200028a818362000361565b96386200009c565b8480fd5b8380fd5b5080fd5b83903462000318578160031936011262000318577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176200038457604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620003ae5750506000910152565b81810151838201526020016200039d565b6020818303126200043457805167ffffffffffffffff918282116200043457019082601f830112156200043457815190811162000384576040519262000410601f8301601f19166020018562000361565b8184526020828401011162000434576200043191602080850191016200039a565b90565b600080fd5b9060209162000454815180928185528580860191016200039a565b601f01601f191601019056fe60a06040523462000431576200133e803803806200001d8162000436565b92833981019060c08183031262000431578051916001600160a01b0383168303620004315762000050602083016200045c565b906200005f604084016200045c565b906200006e606085016200045c565b60808501519094906001600160401b0381116200043157826200009391830162000471565b60a08201519092906001600160401b0381116200043157620000b6920162000471565b9033600052600060205260406000209560ff199660018882541617905560805280519060018060401b038211620003005760045490600182811c9216801562000426575b6020831014620002df5781601f849311620003b1575b50602090601f8311600114620003225760009262000316575b50508160011b916000199060031b1c1916176004555b80516001600160401b0381116200030057600591825490600182811c92168015620002f5575b6020831014620002df5781601f84931162000289575b50602090601f83116001146200021e5760009262000212575b50508160011b916000199060031b1c19161790555b600680546001600160a01b03199081166001600160a01b0394851617909155600780549091169183169190911790551660009081526008602052604090819020805490921660011790915551610e5a9081620004e48239608051818181610405015261082a0152f35b01519050388062000194565b6000858152602081209350601f198516905b81811062000270575090846001959493921062000256575b505050811b019055620001a9565b015160001960f88460031b161c1916905538808062000248565b9293602060018192878601518155019501930162000230565b909150836000526020600020601f8401851c81019160208510620002d4575b90601f8594939201861c01905b818110620002c457506200017b565b60008155849350600101620002b5565b9091508190620002a8565b634e487b7160e01b600052602260045260246000fd5b91607f169162000165565b634e487b7160e01b600052604160045260246000fd5b01519050388062000129565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f198416851062000395576001945083601f198116106200037b575b505050811b016004556200013f565b015160001960f88460031b161c191690553880806200036c565b818101518355602094850194600190930192909101906200034f565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810191602085106200041b575b90601f859493920160051c01905b8181106200040b575062000110565b60008155849350600101620003fc565b9091508190620003ee565b91607f1691620000fa565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200030057604052565b51906001600160a01b03821682036200043157565b919080601f84011215620004315782516001600160401b0381116200030057602090620004a7601f8201601f1916830162000436565b92818452828287010111620004315760005b818110620004cf57508260009394955001015290565b8581018301518482018401528201620004b956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146108a257508163095ea7b31461087857816318160ddd146108595781631848effa1461081557816323b872dd14610749578163313ce5671461072d57816339509351146106dd57816340c10f191461060657816342966c68146105e857816346ea87af146105ab578163648ec7b91461056d57816370a082311461053557816378b0bac4146103bc57816395d89b41146102b55781639dc29fac14610274578163a457c2d7146101cc57508063a9059cbb1461019c578063a9d75b2b14610174578063dd62ed3e1461012c5763e7d015f21461010157600080fd5b3461012857816003193601126101285760065490516001600160a01b039091168152602090f35b5080fd5b5034610128578060031936011261012857806020926101496109dd565b6101516109f8565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b503461012857816003193601126101285760075490516001600160a01b039091168152602090f35b50346101285780600319360112610128576020906101c56101bb6109dd565b6024359033610a69565b5160018152f35b905082346102715782600319360112610271576101e76109dd565b918360243592338152600260205281812060018060a01b0386168252602052205490828210610220576020856101c58585038733610bd9565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b5050346101285780600319360112610128576102b2906102a960ff6102976109dd565b92338652600860205285205416610cdb565b60243590610d19565b80f35b919050346103b857826003193601126103b857805191836005549060019082821c9282811680156103ae575b602095868610821461039b57508488529081156103795750600114610320575b61031c8686610312828b0383610a0e565b5191829182610994565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610366575050508261031c94610312928201019438610301565b8054868501880152928601928101610349565b60ff191687860152505050151560051b83010192506103128261031c38610301565b634e487b7160e01b845260229052602483fd5b93607f16936102e1565b8280fd5b919050346103b857806003193601126103b8576103d76109dd565b91602435928315158094036105315782516351331ad760e01b81526020926001600160a01b039291848183817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156104ee57849186918a916104f8575b506024885180948193630935e01b60e21b83523388840152165afa9081156104ee5788916104b4575b5015610485575090600892911685525282209060ff8019835416911617905580f35b845162461bcd60e51b8152908101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508481813d83116104e7575b6104cb8183610a0e565b810103126104e3575180151581036104e35738610463565b8780fd5b503d6104c1565b86513d8a823e3d90fd5b92505081813d831161052a575b61050f8183610a0e565b810103126104e3575183811681036104e3578484913861043a565b503d610505565b8480fd5b5050346101285760203660031901126101285760209181906001600160a01b0361055d6109dd565b1681526001845220549051908152f35b5050346101285760203660031901126101285760209160ff9082906001600160a01b036105986109dd565b1681526008855220541690519015158152f35b5050346101285760203660031901126101285760209160ff9082906001600160a01b036105d66109dd565b16815280855220541690519015158152f35b839034610128576020366003190112610128576102b2903533610d19565b919050346103b857806003193601126103b8576106216109dd565b9060243591338552600860205261063d60ff8387205416610cdb565b6001600160a01b031692831561069b57506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926106808795600354610a46565b6003558585526001835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b5050346101285780600319360112610128576101c56020926107266107006109dd565b338352600286528483206001600160a01b03821684528652918490205460243590610a46565b9033610bd9565b5050346101285781600319360112610128576020905160128152f35b83915034610128576060366003190112610128576107656109dd565b61076d6109f8565b6001600160a01b038216845260026020908152858520338652905292849020546044359392600182016107a9575b6020866101c5878787610a69565b8482106107d257509183916107c7602096956101c595033383610bd9565b91939481935061079b565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b505034610128578160031936011261012857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101285781600319360112610128576020906003549051908152f35b5050346101285780600319360112610128576020906101c56108986109dd565b6024359033610bd9565b838534610271578060031936011261027157809380549160019083821c9282851694851561098a575b60209586861081146109775785895290811561095357506001146108fb575b61031c8787610312828c0383610a0e565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610940575050508261031c94610312928201019486806108ea565b8054868501880152928601928101610922565b60ff19168887015250505050151560051b83010192506103128261031c86806108ea565b634e487b7160e01b845260228352602484fd5b93607f16936108cb565b6020808252825181830181905290939260005b8281106109c957505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109a7565b600435906001600160a01b03821682036109f357565b600080fd5b602435906001600160a01b03821682036109f357565b90601f8019910116810190811067ffffffffffffffff821117610a3057604052565b634e487b7160e01b600052604160045260246000fd5b91908201809211610a5357565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610b865716918215610b355760008281526001602052604081205491808310610ae157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610c8a5716918215610c3a5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610ce257565b60405162461bcd60e51b815260206004820152600f60248201526e36b4b732b9103337b93134b23232b760891b6044820152606490fd5b6001600160a01b03168015610dd55780600052600160205260406000205491808310610d85576020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92600095858752600184520360408620558060035403600355604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea264697066735822122073f7b008cf300a4dc1ed3d90de7293b3fb70c3eb139a137161f56637467f298764736f6c63430008110033a2646970667358221220b8f142c35bb361122896e3f18abf8c9cef2268ce24f0e45dfe317a53dc7c597e64736f6c63430008110033",
  "deployedBytecode": "0x6080604090808252600491823610156200001857600080fd5b600091823560e01c9081631848effa146200031c5750632c11959c146200003e57600080fd5b3462000318578060031936011262000318576001600160a01b0390833582811690819003620003145760243594838616809603620003105782516306fdde0360e01b808252909686888481875afa978815620002e6578798620002f0575b50845191825286828481845afa918215620002e6578792620002c6575b508451918851620000d38160209b8c80880191016200039a565b830190602d60f81b91828b820152620000f6825180938d6021850191016200039a565b016200011a6024856202d6c760ec1b93846021820152038781018752018562000361565b86516395d89b4160e01b80825290928a8488818b5afa9384156200029c578b94620002a6575b5088519182528a828881885afa9182156200029c57926024928d97969592620001b8958e809362000272575b5050620001a38c5199856200018b8c9751809284808b0191016200039a565b8601928184015283519384916021850191016200039a565b01906021820152038681018652018462000361565b85519461133e8087019587871067ffffffffffffffff8811176200025f57509262000240949262000231928897956200046189398a7f00000000000000000000000000000000000000000000000000000000000000001686528c8601528885015233606085015260c0608085015260c084019062000439565b9160a081840391015262000439565b039084f09283156200025457505191168152f35b9051903d90823e3d90fd5b634e487b7160e01b8b526041905260248afd5b620002939293503d8091833e6200028a818362000361565b810190620003bf565b90388e6200016c565b89513d8d823e3d90fd5b620002be9194503d808d833e6200028a818362000361565b923862000140565b620002de9192503d8089833e6200028a818362000361565b9038620000b9565b85513d89823e3d90fd5b620003089198503d8089833e6200028a818362000361565b96386200009c565b8480fd5b8380fd5b5080fd5b83903462000318578160031936011262000318577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176200038457604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620003ae5750506000910152565b81810151838201526020016200039d565b6020818303126200043457805167ffffffffffffffff918282116200043457019082601f830112156200043457815190811162000384576040519262000410601f8301601f19166020018562000361565b8184526020828401011162000434576200043191602080850191016200039a565b90565b600080fd5b9060209162000454815180928185528580860191016200039a565b601f01601f191601019056fe60a06040523462000431576200133e803803806200001d8162000436565b92833981019060c08183031262000431578051916001600160a01b0383168303620004315762000050602083016200045c565b906200005f604084016200045c565b906200006e606085016200045c565b60808501519094906001600160401b0381116200043157826200009391830162000471565b60a08201519092906001600160401b0381116200043157620000b6920162000471565b9033600052600060205260406000209560ff199660018882541617905560805280519060018060401b038211620003005760045490600182811c9216801562000426575b6020831014620002df5781601f849311620003b1575b50602090601f8311600114620003225760009262000316575b50508160011b916000199060031b1c1916176004555b80516001600160401b0381116200030057600591825490600182811c92168015620002f5575b6020831014620002df5781601f84931162000289575b50602090601f83116001146200021e5760009262000212575b50508160011b916000199060031b1c19161790555b600680546001600160a01b03199081166001600160a01b0394851617909155600780549091169183169190911790551660009081526008602052604090819020805490921660011790915551610e5a9081620004e48239608051818181610405015261082a0152f35b01519050388062000194565b6000858152602081209350601f198516905b81811062000270575090846001959493921062000256575b505050811b019055620001a9565b015160001960f88460031b161c1916905538808062000248565b9293602060018192878601518155019501930162000230565b909150836000526020600020601f8401851c81019160208510620002d4575b90601f8594939201861c01905b818110620002c457506200017b565b60008155849350600101620002b5565b9091508190620002a8565b634e487b7160e01b600052602260045260246000fd5b91607f169162000165565b634e487b7160e01b600052604160045260246000fd5b01519050388062000129565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f198416851062000395576001945083601f198116106200037b575b505050811b016004556200013f565b015160001960f88460031b161c191690553880806200036c565b818101518355602094850194600190930192909101906200034f565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810191602085106200041b575b90601f859493920160051c01905b8181106200040b575062000110565b60008155849350600101620003fc565b9091508190620003ee565b91607f1691620000fa565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200030057604052565b51906001600160a01b03821682036200043157565b919080601f84011215620004315782516001600160401b0381116200030057602090620004a7601f8201601f1916830162000436565b92818452828287010111620004315760005b818110620004cf57508260009394955001015290565b8581018301518482018401528201620004b956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146108a257508163095ea7b31461087857816318160ddd146108595781631848effa1461081557816323b872dd14610749578163313ce5671461072d57816339509351146106dd57816340c10f191461060657816342966c68146105e857816346ea87af146105ab578163648ec7b91461056d57816370a082311461053557816378b0bac4146103bc57816395d89b41146102b55781639dc29fac14610274578163a457c2d7146101cc57508063a9059cbb1461019c578063a9d75b2b14610174578063dd62ed3e1461012c5763e7d015f21461010157600080fd5b3461012857816003193601126101285760065490516001600160a01b039091168152602090f35b5080fd5b5034610128578060031936011261012857806020926101496109dd565b6101516109f8565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b503461012857816003193601126101285760075490516001600160a01b039091168152602090f35b50346101285780600319360112610128576020906101c56101bb6109dd565b6024359033610a69565b5160018152f35b905082346102715782600319360112610271576101e76109dd565b918360243592338152600260205281812060018060a01b0386168252602052205490828210610220576020856101c58585038733610bd9565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b5050346101285780600319360112610128576102b2906102a960ff6102976109dd565b92338652600860205285205416610cdb565b60243590610d19565b80f35b919050346103b857826003193601126103b857805191836005549060019082821c9282811680156103ae575b602095868610821461039b57508488529081156103795750600114610320575b61031c8686610312828b0383610a0e565b5191829182610994565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610366575050508261031c94610312928201019438610301565b8054868501880152928601928101610349565b60ff191687860152505050151560051b83010192506103128261031c38610301565b634e487b7160e01b845260229052602483fd5b93607f16936102e1565b8280fd5b919050346103b857806003193601126103b8576103d76109dd565b91602435928315158094036105315782516351331ad760e01b81526020926001600160a01b039291848183817f000000000000000000000000000000000000000000000000000000000000000088165afa9081156104ee57849186918a916104f8575b506024885180948193630935e01b60e21b83523388840152165afa9081156104ee5788916104b4575b5015610485575090600892911685525282209060ff8019835416911617905580f35b845162461bcd60e51b8152908101849052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508481813d83116104e7575b6104cb8183610a0e565b810103126104e3575180151581036104e35738610463565b8780fd5b503d6104c1565b86513d8a823e3d90fd5b92505081813d831161052a575b61050f8183610a0e565b810103126104e3575183811681036104e3578484913861043a565b503d610505565b8480fd5b5050346101285760203660031901126101285760209181906001600160a01b0361055d6109dd565b1681526001845220549051908152f35b5050346101285760203660031901126101285760209160ff9082906001600160a01b036105986109dd565b1681526008855220541690519015158152f35b5050346101285760203660031901126101285760209160ff9082906001600160a01b036105d66109dd565b16815280855220541690519015158152f35b839034610128576020366003190112610128576102b2903533610d19565b919050346103b857806003193601126103b8576106216109dd565b9060243591338552600860205261063d60ff8387205416610cdb565b6001600160a01b031692831561069b57506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926106808795600354610a46565b6003558585526001835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b5050346101285780600319360112610128576101c56020926107266107006109dd565b338352600286528483206001600160a01b03821684528652918490205460243590610a46565b9033610bd9565b5050346101285781600319360112610128576020905160128152f35b83915034610128576060366003190112610128576107656109dd565b61076d6109f8565b6001600160a01b038216845260026020908152858520338652905292849020546044359392600182016107a9575b6020866101c5878787610a69565b8482106107d257509183916107c7602096956101c595033383610bd9565b91939481935061079b565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b505034610128578160031936011261012857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101285781600319360112610128576020906003549051908152f35b5050346101285780600319360112610128576020906101c56108986109dd565b6024359033610bd9565b838534610271578060031936011261027157809380549160019083821c9282851694851561098a575b60209586861081146109775785895290811561095357506001146108fb575b61031c8787610312828c0383610a0e565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610940575050508261031c94610312928201019486806108ea565b8054868501880152928601928101610922565b60ff19168887015250505050151560051b83010192506103128261031c86806108ea565b634e487b7160e01b845260228352602484fd5b93607f16936108cb565b6020808252825181830181905290939260005b8281106109c957505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109a7565b600435906001600160a01b03821682036109f357565b600080fd5b602435906001600160a01b03821682036109f357565b90601f8019910116810190811067ffffffffffffffff821117610a3057604052565b634e487b7160e01b600052604160045260246000fd5b91908201809211610a5357565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610b865716918215610b355760008281526001602052604081205491808310610ae157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610c8a5716918215610c3a5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610ce257565b60405162461bcd60e51b815260206004820152600f60248201526e36b4b732b9103337b93134b23232b760891b6044820152606490fd5b6001600160a01b03168015610dd55780600052600160205260406000205491808310610d85576020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92600095858752600184520360408620558060035403600355604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea264697066735822122073f7b008cf300a4dc1ed3d90de7293b3fb70c3eb139a137161f56637467f298764736f6c63430008110033a2646970667358221220b8f142c35bb361122896e3f18abf8c9cef2268ce24f0e45dfe317a53dc7c597e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}