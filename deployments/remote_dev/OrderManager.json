{
  "address": "0x967AB65ef14c58bD4DcfFeaAA1ADb40a022140E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "_tradingVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "CancelDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "CancelIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        }
      ],
      "name": "CreateDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tpPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slAmount",
          "type": "uint256"
        }
      ],
      "name": "CreateIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdatePositionManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "addOrderToPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "cancelAllPositionOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "sizeAmount",
              "type": "int256"
            }
          ],
          "internalType": "struct TradingTypes.CreateOrderRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseLimitOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseLimitOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseMarketOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "getDecreaseOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "triggerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "abovePrice",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "blockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needADL",
              "type": "bool"
            }
          ],
          "internalType": "struct TradingTypes.DecreasePositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "getIncreaseOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingTypes.IncreasePositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderKey",
          "type": "bytes32"
        }
      ],
      "name": "getOrderTpSl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tpPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingTypes.OrderWithTpSl",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPositionOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseLimitOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseLimitOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseMarketOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderWithTpSl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tpPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positionDecreaseTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "positionHasTpSl",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positionOrderIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "removeOrderFromPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderKey",
          "type": "bytes32"
        }
      ],
      "name": "removeOrderTpSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderKey",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tpPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingTypes.OrderWithTpSl",
          "name": "tpSl",
          "type": "tuple"
        }
      ],
      "name": "saveOrderTpSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressExecutor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "name": "setOrderNeedADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "has",
          "type": "bool"
        }
      ],
      "name": "setPositionHasTpSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingVault",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updatePositionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x874c785e2e74f359988854174b12b8505bf45958879728e3236fa4c9859bf74d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x967AB65ef14c58bD4DcfFeaAA1ADb40a022140E5",
    "transactionIndex": 0,
    "gasUsed": "4030348",
    "logsBloom": "0x
    "blockHash": "0xa1be5f5ece5ba65804629edc5b5bfac74e0c6900001ef49cad2074209c9fdc0f",
    "transactionHash": "0x874c785e2e74f359988854174b12b8505bf45958879728e3236fa4c9859bf74d",
    "logs": [],
    "blockNumber": 289,
    "cumulativeGasUsed": "4030348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD6F7A6a5c21A3f503EBaE7a473639974379c351",
    "0xa722bdA6968F50778B973Ae2701e90200C564B49",
    "0xc7cDb7A2E5dDa1B7A0E792Fe1ef08ED20A6F56D4"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5fb0d93a74250b7f90492337d0a4d3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"_tradingVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"CancelDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"CancelIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"}],\"name\":\"CreateDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slAmount\",\"type\":\"uint256\"}],\"name\":\"CreateIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdatePositionManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"addOrderToPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"cancelAllPositionOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"sizeAmount\",\"type\":\"int256\"}],\"internalType\":\"struct TradingTypes.CreateOrderRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseLimitOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseLimitOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseMarketOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"internalType\":\"struct TradingTypes.DecreasePositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingTypes.IncreasePositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderKey\",\"type\":\"bytes32\"}],\"name\":\"getOrderTpSl\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingTypes.OrderWithTpSl\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPositionOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseLimitOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseLimitOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseMarketOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderWithTpSl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positionDecreaseTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"positionHasTpSl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positionOrderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"removeOrderFromPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderKey\",\"type\":\"bytes32\"}],\"name\":\"removeOrderTpSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderKey\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingTypes.OrderWithTpSl\",\"name\":\"tpSl\",\"type\":\"tuple\"}],\"name\":\"saveOrderTpSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressExecutor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"name\":\"setOrderNeedADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"has\",\"type\":\"bool\"}],\"name\":\"setPositionHasTpSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingVault\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/OrderManager.sol\":\"OrderManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n}\\n\",\"keccak256\":\"0xa8384ca808dfa6c2b68b61e7f33da9aa32f828cb40e8d6876d1c0b9ca379f267\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n    function getPrice(address _token) external view returns (uint256);\\n\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals) external;\\n}\\n\",\"keccak256\":\"0xeebc3cb2fb4e34a3eca7245012c58baeea8dd44832702c4e916ebcd2166b3f73\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../libraries/TradingTypes.sol';\\n\\ninterface IOrderManager {\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrdersIndex() external view returns (uint256);\\n\\n    function increaseLimitOrdersIndex() external view returns (uint256);\\n\\n    function decreaseLimitOrdersIndex() external view returns (uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns (bool);\\n\\n    function getOrderTpSl(bytes32 orderKey) external view returns (TradingTypes.OrderWithTpSl memory);\\n\\n    function getPositionOrders(bytes32 key) external view returns (PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function cancelAllPositionOrders(address account, uint256 pairIndex, bool isLong) external;\\n\\n    function getIncreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n\\n    function getDecreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n\\n    function saveOrderTpSl(bytes32 orderKey, TradingTypes.OrderWithTpSl memory tpSl) external;\\n\\n    function removeOrderTpSl(bytes32 orderKey) external;\\n}\\n\",\"keccak256\":\"0xc8dec31ce4a89f0a69641a3788c0bd3b38f031939786bac90efc91fe32651411\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPool {\\n\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    event UpdateTotalAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexTotalAmount,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateReserveAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexReservedAmount,\\n        uint256 stableReservedAmount\\n    );\\n\\n    event UpdateProfit(\\n        uint256 indexed pairIndex,\\n        int256 profit,\\n        int256 realisedPnl,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateAveragePrice(\\n        uint256 indexed pairIndex,\\n        uint256 averagePrice\\n    );\\n\\n    event Swap(\\n        address indexed funder,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        bool isBuy, // buy indexToken with stableToken\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    event AddLiquidity(\\n        address indexed funder,\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount,\\n        uint256 indexFeeAmount,\\n        uint256 stableFeeAmount,\\n        address slipToken,\\n        uint256 slipFeeAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed account,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    struct Pair {\\n        uint256 pairIndex;\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n        uint256 lpFeeDistributeP;\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // distribute\\n        uint256 lpFeeDistributeP;\\n        uint256 keeperFeeDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate; // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate; // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate; // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor; // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor; // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        uint256 lpDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns (Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns (TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns (TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns (FundingFeeConfig memory);\\n\\n    struct Vault {\\n        uint256 indexTotalAmount; // total amount of tokens\\n        uint256 indexReservedAmount; // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns (Vault memory vault);\\n\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function liqiitySwap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n     function addLiquidity(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdedcca21e3b8cd208cce3501e185a0f7260ef30c2f4a2f658e3ca829b0cba401\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface IPositionManager {\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function stakingTradingFee(address _token) external view returns (uint256);\\n\\n    function keeperTradingFee(address _token, address _account) external view returns (uint256);\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (uint256 tradingFee);\\n\\n    function claimStakingTradingFee(address claimToken) external returns (uint256);\\n\\n    function claimKeeperTradingFee(address claimToken, address keeper) external returns (uint256);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _keeper,\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _keeper,\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n\\n    function getValidPrice(address token, uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x685de7e4794f75b40ce1b7e12dc8025d75173b421abef5ec8080defbe3bde29f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c62451d195ef51205ba29bafb92b799d4d6c3c158829d8f25faee0b7f422d77\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary Int256Utils {\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function toString(int256 amount) internal pure returns (string memory) {\\n        return string.concat(amount >= 0 ? '' : '-', abs(amount).toString());\\n    }\\n}\\n\",\"keccak256\":\"0x476512ef796febc141171c86f74261c6e24e6112b5adc13b790a43c00551e2f7\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../libraries/TradingTypes.sol';\\nimport '../libraries/PositionKey.sol';\\nimport 'hardhat/console.sol';\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(\\n        mapping(bytes32 => Info) storage self,\\n        bytes32 key\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[key];\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount, uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice || self.averagePrice == 0) {\\n            return 0;\\n        }\\n\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = -int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = -int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256 price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, 'decrease amount exceed position');\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, 'collateral not enough for decrease');\\n\\n        // pnl\\n        if (_sizeAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self, _sizeAmount, price);\\n        }\\n\\n        require(totalCollateral >= 0, 'collateral not enough for pnl');\\n\\n        require(\\n            afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage &&\\n                afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage,\\n            'leverage incorrect'\\n        );\\n        require(afterPosition <= maxPositionAmount, 'exceed max position');\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n}\\n\",\"keccak256\":\"0xa613e340ad511c906e834100ddd395d3b7154ee363191015c8590341886bcd99\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '../libraries/TradingTypes.sol';\\n\\nlibrary PositionKey {\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(\\n        bool _isIncrease,\\n        TradingTypes.TradeType _tradeType,\\n        uint256 _orderId\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n}\\n\",\"keccak256\":\"0xc932698e473e56cf911cae7dbe66bdea538cc5eb6cec5f011ba45f961015b0e4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nlibrary PrecisionUtils {\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function percentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xadfaf40535bc6d38097a71bdb78d51e6f8b28c73add432ed1373fcbb1931ed85\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n    }\\n\\n    struct OrderWithTpSl {\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n    }\\n\\n    struct IncreasePositionWithTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0xc83309e62878ac41fb82ae5753f303424594e55710442f4f0f3e23afc9d25a47\",\"license\":\"UNLICENSED\"},\"contracts/trading/OrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/PositionKey.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../libraries/TradingTypes.sol';\\n\\nimport 'hardhat/console.sol';\\nimport '../interfaces/IOrderManager.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\nimport '../interfaces/IPositionManager.sol';\\n\\ncontract OrderManager is IOrderManager, ReentrancyGuard, Roleable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseMarketOrders;\\n    uint256 public override increaseMarketOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseMarketOrders;\\n    uint256 public override decreaseMarketOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseLimitOrders;\\n    uint256 public override increaseLimitOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseLimitOrders;\\n    uint256 public override decreaseLimitOrdersIndex;\\n\\n    mapping(bytes32 => TradingTypes.OrderWithTpSl) public orderWithTpSl; // OrderKey -> TpSl\\n\\n    mapping(bytes32 => PositionOrder[]) public positionOrders;\\n    mapping(bytes32 => mapping(bytes32 => uint256)) public positionOrderIndex;\\n\\n    mapping(bytes32 => uint256) public positionDecreaseTotalAmount;\\n\\n    mapping(bytes32 => mapping(TradingTypes.TradeType => bool)) public positionHasTpSl; // PositionKey -> TradeType -> bool\\n\\n    IPool public pool;\\n    IPositionManager public tradingVault;\\n    IPositionManager public positionManager;\\n    address public addressExecutor;\\n    address public router;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPool _pairInfo,\\n        IPositionManager _tradingVault\\n    ) Roleable(addressProvider) {\\n        pool = _pairInfo;\\n        tradingVault = _tradingVault;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, 'onlyRouter');\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == addressExecutor, 'onlyExecutor');\\n        _;\\n    }\\n\\n    modifier onlyCreateOrderAddress(address account) {\\n        require(msg.sender == router || msg.sender == addressExecutor || account == msg.sender, 'no access');\\n        _;\\n    }\\n\\n    modifier onlyExecutorOrAccount(address account) {\\n        require(msg.sender == address(addressExecutor) || account == msg.sender, 'no access');\\n        _;\\n    }\\n\\n    function setExecutor(address _addressExecutor) external onlyPoolAdmin {\\n        addressExecutor = _addressExecutor;\\n    }\\n\\n    function setRouter(address _router) external onlyPoolAdmin {\\n        router = _router;\\n    }\\n\\n    function updatePositionManager(address newAddress) external onlyPoolAdmin {\\n        address oldAddress = address(positionManager);\\n        positionManager = IPositionManager(newAddress);\\n        emit UpdatePositionManager(oldAddress, newAddress);\\n    }\\n\\n    function getOrderTpSl(bytes32 orderKey) public view override returns (TradingTypes.OrderWithTpSl memory) {\\n        return orderWithTpSl[orderKey];\\n    }\\n\\n    function getPositionOrders(bytes32 key) public view override returns (PositionOrder[] memory) {\\n        return positionOrders[key];\\n    }\\n\\n    function createOrder(\\n        TradingTypes.CreateOrderRequest memory request\\n    ) public nonReentrant onlyCreateOrderAddress(request.account) whenNotPaused returns (uint256 orderId) {\\n        require(address(positionManager) != address(0), 'zero address');\\n\\n        address account = request.account;\\n        require(!tradingVault.isFrozen(account), 'account is frozen');\\n\\n        IPool.Pair memory pair = pool.getPair(request.pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        if (request.tradeType == TradingTypes.TradeType.MARKET || request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            // check size\\n            require(\\n                request.sizeAmount == 0 || _checkTradingAmount(request.pairIndex, request.sizeAmount.abs()),\\n                'invalid trade size'\\n            );\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(account, request.pairIndex, request.isLong);\\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\\n            uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n            IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(position.pairIndex);\\n            //TODO if size = 0\\n            if (request.sizeAmount >= 0) {\\n                // check leverage\\n                (uint256 afterPosition,) = position.validLeverage(\\n                    price,\\n                    request.collateral,\\n                    uint256(request.sizeAmount),\\n                    true,\\n                    tradingConfig.minLeverage,\\n                    tradingConfig.maxLeverage,\\n                    tradingConfig.maxPositionAmount\\n                );\\n                // (uint256 afterPosition,) = tradingUtils.validLeverage(account, request.pairIndex, request.isLong, request.collateral, uint256(request.sizeAmount), true);\\n                require(afterPosition > 0, 'zero position amount');\\n            }\\n            if (request.sizeAmount <= 0) {\\n                // check leverage\\n                position.validLeverage(\\n                    price,\\n                    request.collateral,\\n                    uint256(request.sizeAmount.abs()),\\n                    false,\\n                    tradingConfig.minLeverage,\\n                    tradingConfig.maxLeverage,\\n                    tradingConfig.maxPositionAmount\\n                );\\n\\n                //TODO if request size exceed position size, can calculate the max size\\n                require(\\n                    uint256(request.sizeAmount.abs()) <=\\n                    position.positionAmount - positionDecreaseTotalAmount[positionKey],\\n                    'decrease amount exceed position'\\n                );\\n            }\\n\\n            // transfer collateral\\n            if (request.collateral > 0) {\\n                IERC20(pair.stableToken).safeTransferFrom(account, address(positionManager), request.collateral.abs());\\n            }\\n        }\\n\\n        if (request.tradeType == TradingTypes.TradeType.TP || request.tradeType == TradingTypes.TradeType.SL) {\\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\\n            require(\\n                uint256(request.sizeAmount.abs()) <= position.positionAmount,\\n                'tp/sl exceeds max size'\\n            );\\n            require(request.collateral == 0, 'no collateral required');\\n        }\\n\\n        if (request.sizeAmount > 0) {\\n            return _createIncreaseOrder(\\n                TradingTypes.IncreasePositionRequest({\\n                    account: account,\\n                    pairIndex: request.pairIndex,\\n                    tradeType: request.tradeType,\\n                    collateral: request.collateral,\\n                    openPrice: request.openPrice,\\n                    isLong: request.isLong,\\n                    sizeAmount: uint256(request.sizeAmount)\\n                })\\n            );\\n        } else if (request.sizeAmount < 0) {\\n            return _createDecreaseOrder(\\n                TradingTypes.DecreasePositionRequest({\\n                    account: account,\\n                    pairIndex: request.pairIndex,\\n                    tradeType: request.tradeType,\\n                    collateral: request.collateral,\\n                    triggerPrice: request.openPrice,\\n                    sizeAmount: uint256(request.sizeAmount.abs()),\\n                    isLong: request.isLong\\n                })\\n            );\\n        } else {\\n            require(request.collateral != 0, 'not support');\\n            return _createIncreaseOrder(\\n                TradingTypes.IncreasePositionRequest({\\n                    account: account,\\n                    pairIndex: request.pairIndex,\\n                    tradeType: request.tradeType,\\n                    collateral: request.collateral,\\n                    openPrice: request.openPrice,\\n                    isLong: request.isLong,\\n                    sizeAmount: 0\\n                })\\n            );\\n        }\\n    }\\n\\n    function cancelOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        bool isIncrease\\n    ) public nonReentrant onlyCreateOrderAddress(msg.sender) whenNotPaused {\\n        if (isIncrease) {\\n            TradingTypes.IncreasePositionOrder memory order = getIncreaseOrder(orderId, tradeType);\\n            if (order.account == address(0)) {\\n                return;\\n            }\\n\\n            _cancelIncreaseOrder(order);\\n        } else {\\n            TradingTypes.DecreasePositionOrder memory order = getDecreaseOrder(orderId, tradeType);\\n            if (order.account == address(0)) {\\n                return;\\n            }\\n            _cancelDecreaseOrder(order);\\n        }\\n    }\\n\\n    function cancelAllPositionOrders(\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong\\n    ) external onlyExecutorOrAccount(account) whenNotPaused {\\n        bytes32 key = PositionKey.getPositionKey(account, pairIndex, isLong);\\n\\n        while (positionOrders[key].length > 0) {\\n            uint256 lastIndex = positionOrders[key].length - 1;\\n            PositionOrder memory positionOrder = positionOrders[key][lastIndex];\\n\\n            this.cancelOrder(positionOrder.orderId, positionOrder.tradeType, positionOrder.isIncrease);\\n        }\\n    }\\n\\n    function _checkTradingAmount(uint256 pairIndex, uint256 size) internal returns (bool) {\\n        IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(pairIndex);\\n        return size >= tradingConfig.minTradeAmount && size <= tradingConfig.maxTradeAmount;\\n    }\\n\\n    function _createIncreaseOrder(TradingTypes.IncreasePositionRequest memory _request) internal returns (uint256) {\\n        TradingTypes.IncreasePositionOrder memory order = TradingTypes.IncreasePositionOrder(\\n            0,\\n            _request.account,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.openPrice,\\n            _request.isLong,\\n            _request.sizeAmount,\\n            block.timestamp\\n        );\\n\\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\\n            order.orderId = increaseMarketOrdersIndex;\\n\\n            increaseMarketOrders[increaseMarketOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            order.orderId = increaseLimitOrdersIndex;\\n\\n            increaseLimitOrders[increaseLimitOrdersIndex++] = order;\\n        } else {\\n            revert('invalid trade type');\\n        }\\n\\n        this.addOrderToPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        //TODO remove tp sl from event\\n        emit CreateIncreaseOrder(\\n            order.account,\\n            order.orderId,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.openPrice,\\n            _request.isLong,\\n            _request.sizeAmount,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        return order.orderId;\\n    }\\n\\n    function _createDecreaseOrder(TradingTypes.DecreasePositionRequest memory _request) internal returns (uint256) {\\n        TradingTypes.DecreasePositionOrder memory order = TradingTypes.DecreasePositionOrder(\\n            0, // orderId\\n            _request.account,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.triggerPrice,\\n            _request.sizeAmount,\\n            _request.isLong,\\n            false, // abovePrice\\n            block.timestamp,\\n            false\\n        );\\n\\n        // abovePrice\\n        // market\\uff1along: true,  short: false\\n        //  limit\\uff1along: false, short: true\\n        //     tp\\uff1along: false, short: true\\n        //     sl\\uff1along: true,  short: false\\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\\n            order.orderId = decreaseMarketOrdersIndex;\\n            order.abovePrice = _request.isLong;\\n\\n            decreaseMarketOrders[decreaseMarketOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = !_request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.TP) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = !_request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\\n            positionHasTpSl[positionKey][TradingTypes.TradeType.TP] = true;\\n        } else if (_request.tradeType == TradingTypes.TradeType.SL) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = _request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\\n            positionHasTpSl[positionKey][TradingTypes.TradeType.SL] = true;\\n        } else {\\n            revert('invalid trade type');\\n        }\\n\\n        // add decrease order\\n        this.addOrderToPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        emit CreateDecreaseOrder(\\n            order.account,\\n            order.orderId,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.pairIndex,\\n            _request.triggerPrice,\\n            _request.sizeAmount,\\n            _request.isLong,\\n            order.abovePrice\\n        );\\n        return order.orderId;\\n    }\\n\\n    function _cancelIncreaseOrder(TradingTypes.IncreasePositionOrder memory order) internal {\\n        IPool.Pair memory pair = pool.getPair(order.pairIndex);\\n\\n        if (order.collateral > 0) {\\n            positionManager.transferTokenTo(pair.stableToken, order.account, order.collateral.abs());\\n        }\\n\\n        this.removeOrderFromPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            delete increaseMarketOrders[order.orderId];\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            delete increaseLimitOrders[order.orderId];\\n        }\\n\\n        emit CancelIncreaseOrder(order.account, order.orderId, order.tradeType);\\n    }\\n\\n    function _cancelDecreaseOrder(TradingTypes.DecreasePositionOrder memory order) internal {\\n        IPool.Pair memory pair = pool.getPair(order.pairIndex);\\n\\n        if (order.collateral > 0) {\\n            positionManager.transferTokenTo(pair.stableToken, order.account, order.collateral.abs());\\n        }\\n\\n        this.removeOrderFromPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            delete decreaseMarketOrders[order.orderId];\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            delete decreaseLimitOrders[order.orderId];\\n        } else {\\n            positionHasTpSl[key][order.tradeType] = false;\\n            delete decreaseLimitOrders[order.orderId];\\n        }\\n\\n        emit CancelDecreaseOrder(order.account, order.orderId, order.tradeType);\\n    }\\n\\n    function getIncreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) public view returns (TradingTypes.IncreasePositionOrder memory order) {\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = increaseMarketOrders[orderId];\\n        } else if (tradeType == TradingTypes.TradeType.LIMIT) {\\n            order = increaseLimitOrders[orderId];\\n        } else {\\n            revert('invalid trade type');\\n        }\\n        return order;\\n    }\\n\\n    function getDecreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) public view returns (TradingTypes.DecreasePositionOrder memory order) {\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = decreaseMarketOrders[orderId];\\n        } else {\\n            order = decreaseLimitOrders[orderId];\\n        }\\n        return order;\\n    }\\n\\n    function addOrderToPosition(PositionOrder memory order) public onlyCreateOrderAddress(msg.sender) whenNotPaused {\\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\\n        positionOrderIndex[positionKey][orderKey] = positionOrders[positionKey].length;\\n        positionOrders[positionKey].push(order);\\n\\n        if (\\n            !order.isIncrease &&\\n            (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)\\n        ) {\\n            positionDecreaseTotalAmount[positionKey] += order.sizeAmount;\\n        }\\n    }\\n\\n    function removeOrderFromPosition(\\n        PositionOrder memory order\\n    ) public onlyCreateOrderAddress(msg.sender) whenNotPaused {\\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\\n\\n        uint256 index = positionOrderIndex[positionKey][orderKey];\\n        uint256 lastIndex = positionOrders[positionKey].length - 1;\\n\\n        if (index < lastIndex) {\\n            // swap last order\\n            PositionOrder memory lastOrder = positionOrders[positionKey][positionOrders[positionKey].length - 1];\\n            bytes32 lastOrderKey = PositionKey.getOrderKey(\\n                lastOrder.isIncrease,\\n                lastOrder.tradeType,\\n                lastOrder.orderId\\n            );\\n\\n            positionOrders[positionKey][index] = lastOrder;\\n            positionOrderIndex[positionKey][lastOrderKey] = index;\\n        }\\n        delete positionOrderIndex[positionKey][orderKey];\\n        positionOrders[positionKey].pop();\\n\\n        if (\\n            !order.isIncrease &&\\n            (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)\\n        ) {\\n            positionDecreaseTotalAmount[positionKey] -= order.sizeAmount;\\n        }\\n    }\\n\\n    function setPositionHasTpSl(\\n        bytes32 key,\\n        TradingTypes.TradeType tradeType,\\n        bool has\\n    ) external onlyExecutor whenNotPaused {\\n        positionHasTpSl[key][tradeType] = has;\\n    }\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external onlyExecutor whenNotPaused {\\n        delete increaseMarketOrders[orderId];\\n    }\\n\\n    function removeIncreaseLimitOrders(uint256 orderId) external onlyExecutor whenNotPaused {\\n        delete increaseLimitOrders[orderId];\\n    }\\n\\n    function removeDecreaseMarketOrders(uint256 orderId) external onlyExecutor whenNotPaused {\\n        delete decreaseMarketOrders[orderId];\\n    }\\n\\n    function removeDecreaseLimitOrders(uint256 orderId) external onlyExecutor whenNotPaused {\\n        delete decreaseLimitOrders[orderId];\\n    }\\n\\n    function setOrderNeedADL(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        bool needADL\\n    ) external onlyExecutor whenNotPaused {\\n        TradingTypes.DecreasePositionOrder storage order;\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = decreaseMarketOrders[orderId];\\n        } else {\\n            order = decreaseLimitOrders[orderId];\\n            require(order.tradeType == tradeType, 'trade type not match');\\n        }\\n        order.needADL = needADL;\\n    }\\n\\n    function saveOrderTpSl(bytes32 orderKey, TradingTypes.OrderWithTpSl memory tpSl) external onlyRouter whenNotPaused {\\n        orderWithTpSl[orderKey] = tpSl;\\n    }\\n\\n    function removeOrderTpSl(bytes32 orderKey) external onlyExecutor whenNotPaused {\\n        delete orderWithTpSl[orderKey];\\n    }\\n\\n    function setPaused() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function setUnPaused() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x792b00e00cd4ad3f957e04df647317c7d8f3eab6184a6d45cbce11d9210c2219\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200010057601f6200474638819003918201601f19168301916001600160401b038311848410176200010557808492606094604052833981010312620001005780516001600160a01b039190828116810362000100576020820151918383168093036200010057604001519283168093036200010057600160005533600052600160205260406000209060ff19916001838254161790556080526002541660025560018060a01b031990816010541617601055601154161760115560405161462a90816200011c823960805181818161055801528181610b22015281816110c001528181611242015281816116d00152818161186e0152612be80152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004908136101561001757600080fd5b60009060e08235811c918262c5ecd214611afb57508163021a34dd14611a615781630bc628fb14611a1f5781630f727949146118c657816316f0115b1461189d5781631848effa146118595781631995c725146117cb5781631c3c0ea8146116935781632670e98d146113ef5781632d1ff001146113a4578163349fdb091461121057816337a66d851461108d5781633946fd421461106e578163395455291461103c5781633e5005e514610ff85781634136de9f14610f8a57816346ea87af14610f4c578163499a83c714610f235781634cc42b5114610e345781634d3cb81014610df05781634d7acf9614610d115781635c975abb14610ced578163671e110714610c825781636881d8cb14610ae75781636e30e01614610a7c578163791b98bc14610a5357816379f5927e14610a345781638168c0b61461099257816386249bab146109735781638ffb8b2f1461080e57816390a4a768146107ca578163ab9b4ca8146107ab578163b68ea4b2146106db578163bd40e1c0146106b2578163be82e5b11461066e578163c0d786551461051b578163c1872cf314610425578163c2509859146103b7578163eea0bfab14610360578163f1bd27a814610337578163f887ea401461030a578163f9d244fd1461027e575063fca5c793146101ff57600080fd5b3461027b57602036600319011261027b578261027791833581526005602052209283549360018060a01b036001820154169360028201549560ff60038401541691830154600584015460068501549160078601549460ff600960088901549801541697519a8b9a60ff808960081c169816968c611b98565b0390f35b80fd5b8491503461030657610120925061029d61029736611e5f565b90614241565b908251928251845260018060a01b03602084015116602085015280830151908401526102d160608301516060850190611b75565b6080820151608084015260a082015160a084015260c0820151151560c084015280820151908301526101008091015190820152f35b8280fd5b82853461033357816003193601126103335760145490516001600160a01b039091168152602090f35b5080fd5b82853461033357816003193601126103335760115490516001600160a01b039091168152602090f35b82808587346103b35760203660031901126103b35760039161038d60018060a01b03601354163314614581565b610395613262565b358352600b6020528220828155826001820155826002820155015580f35b5050fd5b823461027b576104086103c936611e7e565b916103d26132a6565b601454336001600160a01b0391821614908115610417575b50801561040f575b6103fb90611f7b565b610403613262565b61385a565b6001815580f35b5060016103f2565b9050601354163314866103ea565b505090346103335761043636611e7e565b9261044c60018060a01b03601354163314614581565b610454613262565b80821015610508578161048a57505082936009916104879452600560205284205b019060ff801983541691151516179055565b80f35b9091845260096020528484209160ff600384015416828110156104f557036104bb5750610487929350600990610475565b606490602086519162461bcd60e51b835282015260146024820152730e8e4c2c8ca40e8f2e0ca40dcdee840dac2e8c6d60631b6044820152fd5b634e487b7160e01b865260218352602486fd5b634e487b7160e01b855260219052602484fd5b82858534610306576020918260031936011261060e57610539611d16565b81516351331ad760e01b8152936001600160a01b0393919291818682817f000000000000000000000000000000000000000000000000000000000000000089165afa9081156106645785968896959692610622575b50906024839285519687938492637be53ca160e01b84523390840152165afa918215610619575085916105de575b506105c79150611ecb565b166001600160601b0360a01b601454161760145580f35b905081813d8311610612575b6105f48183611cf5565b8101031261060e576106086105c791611ebe565b856105bc565b8380fd5b503d6105ea565b513d87823e3d90fd5b83809296508193503d831161065d575b61063c8183611cf5565b8101031261065957859360246106528493611eaa565b925061058e565b8680fd5b503d610632565b83513d89823e3d90fd5b50509134610306576020366003190112610306576104879161069b60018060a01b03601354163314614581565b6106a3613262565b35835260056020528220614205565b82853461033357816003193601126103335760135490516001600160a01b039091168152602090f35b8491503461030657366003190112610333578051926106f984611c74565b610701611d16565b845260243560208501526044359081101561030657818401526064356060840152608435608084015260a43580151581036103065761078b8460019260a0602097015260c43560c08201526107546132a6565b61077e838060a01b03808351168160145416331491821561079d575b508115610793575b50611f7b565b610786613262565b6121c0565b925551908152f35b9050331488610778565b601354163314915089610770565b8285346103335781600319360112610333576020906008549051908152f35b5050913461030657602036600319011261030657610487916107f760018060a01b03601354163314614581565b6107ff613262565b358352600760205282206141a5565b82858534610306576060928360031936011261027b5761082c611d16565b9161086c610838611d31565b60135461085990336001600160a01b03918216149081156109675750611f7b565b610861613262565b6024948535906136ba565b808352600c6020908082528685205415610963578685205460001981019290831161095157838652528584206108ab916108a591611bf9565b50611f13565b60a0810151906080810151908482101561093f57880151151590303b1561093b576108ea9088519363c250985960e01b85528685015287840190611b75565b6044820152838160648183305af1801561093157610909575b5061086c565b6001600160401b03811161091f57855286610903565b5050634e487b7160e01b825260419052fd5b86513d86823e3d90fd5b8580fd5b634e487b7160e01b8652602185528686fd5b634e487b7160e01b8652601185528686fd5b8480f35b87163314905089610778565b8285853461030657826003193601126103065760209250549051908152f35b849150346103065761016092506109b16109ab36611e5f565b9061437a565b908251928251845260018060a01b03602084015116602085015280830151908401526109e560608301516060850190611b75565b6080820151608084015260a082015160a084015260c082015160c08401528082015115159083015261010080820151151590830152610120808201519083015261014080910151151590820152f35b828534610333578160031936011261033357602090600a549051908152f35b82853461033357816003193601126103335760125490516001600160a01b039091168152602090f35b8385843461027b57602036600319011261027b578161027791843581526007602052209182549260018060a01b036001820154169460028201549060ff6003840154169083015460058401549160ff60068601541693600860078701549601549651998a998a611e10565b505091346103065760208060031936011261060e57610b04611d16565b82516351331ad760e01b81526001600160a01b0394919291828282817f00000000000000000000000000000000000000000000000000000000000000008a165afa918215610c785790869392918892610c3a575b50906024839287519889938492637be53ca160e01b84523390840152165afa948515610c30578695610bd6575b50610bb07ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e95611ecb565b81601254931691826001600160601b0360a01b851617601255845193168352820152a180f35b94508085813d8311610c29575b610bed8183611cf5565b8101031261093b57610bb0610c227ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e96611ebe565b9550610b85565b503d610be3565b84513d88823e3d90fd5b83809295508193503d8311610c71575b610c548183611cf5565b810103126106595785926024610c6a8493611eaa565b9250610b58565b503d610c4a565b85513d89823e3d90fd5b8385843461027b57602036600319011261027b578161027791843581526003602052209182549260018060a01b036001820154169460028201549060ff6003840154169083015460058401549160ff60068601541693600860078701549601549651998a998a611e10565b82853461033357816003193601126103335760209060ff6002541690519015158152f35b505090346103335760a036600319011261033357608036602319011261033357825190608082018281106001600160401b03821117610ddd57845260243582526020820160443581528483019060643582526060840192608435845260018060a01b03601454163303610dad57956003949596610d8c613262565b358752600b6020528620945185555160018501555160028401555191015580f35b606490602088519162461bcd60e51b8352820152600a60248201526937b7363ca937baba32b960b11b6044820152fd5b634e487b7160e01b845260418252602484fd5b505091346103065760203660031901126103065761048791610e1d60018060a01b03601354163314614581565b610e25613262565b35835260096020528220614205565b929190503461027b576020908160031936011261027b5782358152600c8252848120938454936001600160401b038511610f10575094939290918451916005610e818383831b0185611cf5565b8184528284018096865283862086915b848310610ee65750505050508451958695828701938388525180945286019493905b838210610ec05786860387f35b918496508286610ed66001949698849851611dbb565b0196019201869594929391610eb3565b8386600192610efb859e999b9a9c9d9e611f13565b81520192019201919099989795969499610e91565b634e487b7160e01b835260419052602482fd5b82858534610306576020366003190112610306576020928291358152600e845220549051908152f35b8285346103335760203660031901126103335760209160ff9082906001600160a01b03610f77611d16565b1681526001855220541690519015158152f35b8285853461030657606036600319011261030657602435918183101561060e5761048792610fe791610fba611d31565b93610fd060018060a01b03601354163314614581565b610fd8613262565b358652600f6020528520611c2b565b9060ff801983541691151516179055565b50509134610306576020366003190112610306576104879161102560018060a01b03601354163314614581565b61102d613262565b358352600360205282206141a5565b828585346103065781600319360112610306576020928291358152600d84528181206024358252845220549051908152f35b8285346103335781600319360112610333576020906006549051908152f35b5050913461030657826003193601126103065780516351331ad760e01b81526001600160a01b03926020929190838282817f000000000000000000000000000000000000000000000000000000000000000089165afa918215611206579084929187926111cc575b5060249084519687938492630935e01b60e21b84523390840152165afa9283156111c2578493611168575b5061114b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258936145bc565b611153613262565b600160ff19600254161760025551338152a180f35b92508183813d83116111bb575b61117f8183611cf5565b8101031261060e5761114b6111b47f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25894611ebe565b9350611120565b503d611175565b81513d86823e3d90fd5b8381949293503d83116111ff575b6111e48183611cf5565b8101031261093b5760246111f88593611eaa565b91906110f5565b503d6111da565b83513d88823e3d90fd5b5050823461033357816003193601126103335780516351331ad760e01b8152602091906001600160a01b0390838187817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561139a579084918691611360575b506024845180948193630935e01b60e21b8352338b840152165afa8015611356578490611320575b6112a891506145bc565b6002549360ff8516156112e857507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa929360ff191660025551338152a180f35b82606492519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b508281813d831161134f575b6113368183611cf5565b8101031261060e5761134a6112a891611ebe565b61129e565b503d61132c565b82513d86823e3d90fd5b82819392503d8311611393575b6113778183611cf5565b8101031261138f576113898491611eaa565b87611276565b8480fd5b503d61136d565b83513d87823e3d90fd5b82858534610306576020366003190112610306576080928291358152600b60205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b505091346103065761140036611d40565b9060018060a01b03806014541633148015611686575b801561167e575b61142690611f7b565b61142e613262565b8251169161144860209384830151848401511515916136ba565b93606082018051151590608084019182518481101561166b57906114719160a08701519161454d565b878952600d8752858920818a52875285892054888a52600c8852868a20546000199291908381019081116116585781106115af575b50888a52600d8852868a20908a5287528886812055878952600c8752858920908154801561159c5701906114da8282611bf9565b61158a5785818c8093558260018201558260028201558260038201550155555115918261152f575b505061150c578480f35b6115259260c0600e920151948652528320918254612151565b9055388080808480f35b908092505181811015611577571591821561154e575b50503880611502565b5191508082101561156457506001143880611545565b634e487b7160e01b875260219052602486fd5b634e487b7160e01b885260218252602488fd5b634e487b7160e01b8b528a865260248bfd5b634e487b7160e01b8b526031865260248bfd5b898b52600c8952878b20805484810191908211611645576115d3916108a591611bf9565b606081015115156080820151888110156116325791611613848f8f95908f8f929061160961161998600c9360a08a01519161454d565b9883525220611bf9565b90614497565b8a8c52600d8a52888c20908c528952878b2055386114a6565b634e487b7160e01b8e526021895260248efd5b634e487b7160e01b8d526011885260248dfd5b634e487b7160e01b8c526011875260248cfd5b634e487b7160e01b8a526021855260248afd5b50600161141d565b5080601354163314611416565b82858534610306576020918260031936011261060e576116b1611d16565b81516351331ad760e01b8152936001600160a01b0393919291818682817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610664578596889695969261178d575b50906024839285519687938492637be53ca160e01b84523390840152165afa91821561061957508591611756575b5061173f9150611ecb565b166001600160601b0360a01b601354161760135580f35b905081813d8311611786575b61176c8183611cf5565b8101031261060e5761178061173f91611ebe565b85611734565b503d611762565b83809296508193503d83116117c4575b6117a78183611cf5565b8101031261065957859360246117bd8493611eaa565b9250611706565b503d61179d565b8285853461030657602036600319011261030657828291608094606084516117f281611c43565b82815282602082015282868201520152358152600b602052209080519061181882611c43565b825492838352600181015460208401908152606060036002840154938587019485520154940193845282519485525160208501525190830152516060820152f35b828534610333578160031936011261033357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82853461033357816003193601126103335760105490516001600160a01b039091168152602090f35b50509134610306576118d736611d40565b9060018060a01b03806014541633148015611a12575b8015611a0a575b6118fd90611f7b565b611905613262565b8251169161191f60209384830151848401511515916136ba565b93606082018051151590608084019182518481101561166b57906119489160a08701519161454d565b878952600c87528589205490600d8852868a20908a52875285892055868852600c8652848820805490680100000000000000008210156119f757611613828792600161199695018155611bf9565b511591826119c2575b50506119a9578480f35b6115259260c0600e9201519486525283209182546133f5565b90809250518181101561157757159182156119e1575b5050388061199f565b51915080821015611564575060011438806119d8565b634e487b7160e01b8a526041855260248afd5b5060016118f4565b50806013541633146118ed565b82858534610306578160031936011261030657602435908082101561060e5760ff9183602095611a5693358152600f875220611c2b565b541690519015158152f35b8385843461027b578160031936011261027b576024359083358152600c60205282812090815483101561027b575090611a9991611bf9565b50611aef60018060a01b03825416936001830154936002840154916003850154940154948151968752602087015260ff821615159086015260ff8160081c161515606086015260ff608086019160101c16611b75565b60a083015260c0820152f35b839085873461060e57602036600319011261060e57906102779183948235815260096020522080549160018060a01b036001830154169260028301549160ff6003850154169084015460058501549060068601549260078701549560ff600960088a0154990154169860ff808960081c169816968c611b98565b906004821015611b825752565b634e487b7160e01b600052602160045260246000fd5b999693610140999693611bce929d9c9996936101608d019e8d5260018060a01b031660208d015260408c015260608b0190611b75565b608089015260a088015260c0870152151560e086015215156101008501526101208401521515910152565b8054821015611c15576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b906004811015611b8257600052602052604060002090565b608081019081106001600160401b03821117611c5e57604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117611c5e57604052565b61012081019081106001600160401b03821117611c5e57604052565b61016081019081106001600160401b03821117611c5e57604052565b6001600160401b038111611c5e57604052565b606081019081106001600160401b03821117611c5e57604052565b90601f801991011681019081106001600160401b03821117611c5e57604052565b600435906001600160a01b0382168203611d2c57565b600080fd5b604435908115158203611d2c57565b60e0906003190112611d2c57604051611d5881611c74565b6004356001600160a01b0381168103611d2c57815260243560208201526044358015158103611d2c5760408201526064358015158103611d2c5760608201526084356004811015611d2c57608082015260a43560a082015260c43560c082015290565b60c0809160018060a01b03815116845260208101516020850152604081015115156040850152606081015115156060850152611dff60808201516080860190611b75565b60a081015160a08501520151910152565b9592936101009794611e45929b9a99969361012089019c895260018060a01b0316602089015260408801526060870190611b75565b608085015260a0840152151560c083015260e08201520152565b6040906003190112611d2c57600435906024356004811015611d2c5790565b6060906003190112611d2c57600435906024356004811015611d2c57906044358015158103611d2c5790565b51906001600160a01b0382168203611d2c57565b51908115158203611d2c57565b15611ed257565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6004821015611b825752565b90604051611f2081611c74565b60c06004829460018060a01b03815416845260018101546020850152611f6a60ff600283015481811615156040880152818160081c161515606088015260101c1660808601611f07565b600381015460a08501520154910152565b15611f8257565b60405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b6044820152606490fd5b9081610120910312611d2c5760405190611fcc82611c8f565b80518252611fdc60208201611eaa565b6020830152611fed60408201611eaa565b6040830152611ffe60608201611eaa565b606083015261200f60808201611ebe565b608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015290565b80916101409283910312611d2c576040519182018281106001600160401b03821117611c5e576040528051825261207960208201611eaa565b60208301526040810151604083015261209460608201611ebe565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b80916101009283910312611d2c57604051918201908282106001600160401b03831117611c5e5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b9190820391821161215e57565b634e487b7160e01b600052601160045260246000fd5b1561217b57565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b601254600092916001600160a01b0390911690811561322e5780516011546040516372c1cc1b60e11b81526001600160a01b0392831660048201819052949290911690602081602481855afa9081156132235787916131e9575b506131b0576010546020840151604051632f7ce47360e21b8152600481019190915291906001600160a01b031661012083602481845afa9283156131a5578893613172575b5060808301511561312d576040850151600481101561311957158015613102575b612b48575b50505050604081015160048110156126a8576002148015612b31575b612a00575b60c081018051858113156123345750602082015191604081015160048110156123205761231d95965061230460608301519160a060808501519401511515945195604051976122f489611c74565b8852602088015260408701611f07565b6060850152608084015260a083015260c0820152613e37565b90565b634e487b7160e01b87526021600452602487fd5b9480949592919212600014612971576020810151916040820151600481101561295d5761238460608401519160a0612371608087015195516133e1565b950151151595604051976122f489611c74565b6060850152608084015260a083015260c082015260018060a01b03815116916020820151604083015160048110156126bc5760608401516080850151906123f560a08701519360c0880151151595604051996123df8b611cab565b888b5260208b015260408a015260608901611f07565b608087015260a086015260c085015260e084015280610100840152426101208401528061014084015260408201516004811015612949576126d05760065480845260c0830151151561010085015261244c81613e10565b6006558152600560205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a961252e9260038301613e1f565b6080850151600482015560a0850151600582015560c08501516006820155612506600782016124ea60e08801511515829060ff801983541691151516179055565b610100870151815461ff00191690151560081b61ff0016179055565b61012085015160088201556009610140860151151591019060ff801983541691151516179055565b60018060a01b03602084015116604084015160e08501511515606086015160048110156126a85761258a9087519260c0890151946040519661256f88611c74565b87526020870152604086015285606086015260808501611f07565b60a083015260c0820152303b1561033357604051630f72794960e01b8152906125b7906004830190611dbb565b818160e48183305af1801561269d5761268e575b506020830151835160408401516001600160a01b03909216939092600483101561267a5750917fe71a68544c2c9cf2a006d283baa849468003198fa8d8026335170198a30349dd9391836060610120950151602082015160808301519161265660c060a08601519501511515956101008c0151151597604051998a5260208a01526040890190611b75565b6060870152608086015260a085015260c084015260e0830152610100820152a15190565b634e487b7160e01b81526021600452602490fd5b61269790611cc7565b386125cb565b6040513d84823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b604082015160048110156129495760010361276257600a5480845260c08301511561010085015261270081613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a961275d9260038301613e1f565b61252e565b604082015160048110156129495760020361283857600a5480845260c08301511561010085015261279281613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a96127ef9260038301613e1f565b8151602083015160c08401516128129290151591906001600160a01b03166136ba565b8152600f602052604081206002825260205260408120600160ff1982541617905561252e565b604082015160048110156129495760030361290f57600a5480845260c0830151151561010085015261286981613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a96128c69260038301613e1f565b8151602083015160c08401516128e99290151591906001600160a01b03166136ba565b8152600f602052604081206003825260205260408120600160ff1982541617905561252e565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207472616465207479706560701b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b9392905060608401938451156129cd57602081015190604081015160048110156129b95761230461231d9697519160a06080850151940151151594604051976122f489611c74565b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd5c1c1bdc9d60aa1b6044820152606490fd5b601154602082015160a083015160405163bc95baad60e01b81526001600160a01b03868116600483015260248201939093529015156044820152610140929091839183916064918391165afa918215612b26578692612af9575b505060a0612a6b60c08401516133e1565b91015110612abb576060810151156122a65760405162461bcd60e51b81526020600482015260166024820152751b9bc818dbdb1b185d195c985b081c995c5d5a5c995960521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527574702f736c2065786365656473206d61782073697a6560501b6044820152606490fd5b612b189250803d10612b1f575b612b108183611cf5565b810190612040565b3880612a5a565b503d612b06565b6040513d88823e3d90fd5b50604081015160048110156126a8576003146122a1565b60c08501518015908115613073575b501561303957612bbf906101406020870151612b7c60a089019182511515908b6136ba565b6020890151915160405163bc95baad60e01b81526001600160a01b038c166004820152602481019390935215156044830152949093849190829081906064820190565b03915afa91821561302e57899261300b575b50604051631f94a27560e31b8152926020846004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa938415612f8c578a94612fcf575b506020858101516040516341976e0960e01b81526001600160a01b0391821660048201529586916024918391165afa938415612f8c578a94612f97575b5061010060408401516024604051809581936330a66e1560e01b835260048301525afa918215612f8c578a92612f59575b5060c08701518a811215612ef2575b5060c08701518a811315612e8c575b5050505050606083015190868213612cc5575b80612285565b604001516001600160a01b031690612d1c90612ce0906133e1565b6040516323b872dd60e01b602082019081526001600160a01b038089166024840152909516604482015260648101919091529081906084820190565b0391612d30601f1993848101845283611cf5565b6040519360408501926001600160401b039386811085821117612e785760405260208087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649087015251899182919082855af1913d15612e68573d908111612e545790612dbe94939291612db0602060405195601f8401160185611cf5565b83523d89602085013e6132fc565b8051908115918215612e32575b505015612dda57388080612cbf565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b819250906020918101031261138f576020612e4d9101611ebe565b3880612dcb565b634e487b7160e01b89526041600452602489fd5b5090612dbe9392506060916132fc565b634e487b7160e01b8b52604160045260248bfd5b612ee894612ee193612eba92612ea660608c0151916133e1565b825191608060208501519401519489613604565b505060a0612ecb60c08901516133e1565b930151908a52600e60205260408a205490612151565b1015612174565b3880808080612cac565b612f119060608901519084516020860151916080870151938989613431565b5015612f1d5738612c9d565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612f7e9192506101003d61010011612f85575b612f768183611cf5565b8101906120da565b9038612c8e565b503d612f6c565b6040513d8c823e3d90fd5b9093506020813d602011612fc7575b81612fb360209383611cf5565b81010312612fc357519238612c5d565b8980fd5b3d9150612fa6565b9093506020813d602011613003575b81612feb60209383611cf5565b81010312612fc357612ffc90611eaa565b9238612c20565b3d9150612fde565b6130279192506101403d61014011612b1f57612b108183611cf5565b9038612bd1565b6040513d8b823e3d90fd5b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b90506130836020870151916133e1565b604051916330a66e1560e01b83526004830152610100918281602481875afa9283156130f7578b936130d8575b5050604082015181101591826130c9575b505038612b57565b606001511015905038806130c1565b6130ef929350803d10612f8557612f768183611cf5565b9038806130b0565b6040513d8d823e3d90fd5b506040850151600481101561311957600114612280565b634e487b7160e01b89526021600452602489fd5b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b6131979193506101203d6101201161319e575b61318f8183611cf5565b810190611fb3565b913861225f565b503d613185565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d60201161321b575b8161320460209383611cf5565b810103126106595761321590611ebe565b3861221a565b3d91506131f7565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b60ff6002541661326e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b6002600054146132b7576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9192901561335e5750815115613310575090565b3b156133195790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156133715750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106133b7575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613394565b600160ff1b811461215e5760000390565b600081126133ec5790565b61231d906133d0565b9190820180921161215e57565b9190916000838201938412911290801582169115161761215e57565b8181029291811591840414171561215e57565b949196959390926134468160a08801516133f5565b9788156135f35761345b906080880151613402565b95600087126135a35781613585575b5050600085126135405761348f9061348a84613485886133e1565b6136f6565b61341e565b8610159182613524575b5050156134ea5783116134af5761231d906133e1565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613536925061348a90613485866133e1565b8411153880613499565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b8461359b93979261359592613626565b90613402565b93388061346a565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b949196959390926134468160a088016136208282511015612174565b51612151565b60c081019081519081851480156136b2575b6136a857606001511561367e5750805180841115613666575061231d92613660915190612151565b906137dc565b61367992915061231d9361366091612151565b6133d0565b83811115613695575061231d926136609151612151565b6136799291506136609061231d94612151565b5050505050600090565b508115613638565b916040519160208301936001600160601b03199060601b1684526034830152151560f81b6054820152603581526136f081611cda565b51902090565b906c0c9f2c9cd04674edea400000009060001982840992828102928380861095039480860395146137b8578483111561377b578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b5050809250156137c6570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214613844576c0c9f2c9cd04674edea40000000908282111561377b577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b9115613b0b5761386991614241565b6020810180516001600160a01b03939290600090851615613b04578460105416946040908184019485519783518091632f7ce47360e21b825260049a8b8301528160246101209485935afa918215613afa578692613add575b50506080860151858113613a54575b50508181511695519560c0860151151596606087019788518b811015613a41576139259089519260e08b01519489519661390a88611c74565b87526020870152888601526001606086015260808501611f07565b60a083015260c0820152303b1561138f578351632670e98d60e01b815290613950908a830190611dbb565b848160e48183305af18015613a3757908591613a23575b5050855188811015613a10576139e65784518452600360205261398b8385206141a5565b51169251935191868310156139d357507f7e93a6b00cb3caacf000d7018943b12e2b4ad29e7849df14ebd51caf4fd739b8949550906139ce9151938493846141db565b0390a1565b634e487b7160e01b815260218752602490fd5b855188811015613a105760010361398b57845184526007602052613a0b8385206141a5565b61398b565b634e487b7160e01b855260218952602485fd5b613a2c90611cc7565b61060e578338613967565b84513d87823e3d90fd5b634e487b7160e01b885260218c52602488fd5b838581601254169301511691613a6d85855116926133e1565b92813b15613ad9578651630d172a0160e01b81526001600160a01b039182168d82019081529390911660208401526040830193909352869183919082908490829060600103925af18015613a3757613ac6575b806138d1565b613ad290949194611cc7565b9238613ac0565b8780fd5b613af39250803d1061319e5761318f8183611cf5565b38806138c2565b85513d88823e3d90fd5b5050509050565b613b149161437a565b6020808201805191939290916001600160a01b0390600090821615613e0857816010541690604092838501958651988551808096632f7ce47360e21b825260049c8d8301526101209283916024998a915afa918215613dfe578692613de1575b50506080880151858113613d4e575b5050828251169780519860e08901908c8251151560608c019c8d5192831015613d3b578b928d92613bda9260c08551950151955196613bc188611c74565b8752898701528d8601528a606086015260808501611f07565b60a083015260c0820152303b15610659578851632670e98d60e01b815290613c0590828f0190611dbb565b868160e48183305af18015613d3157908791613d1d575b505090613c339185855116915190511515916136ba565b88518b811015613d0b57613ca857506005908751855252613c55858420614205565b5116935194519680881015613c98575050507fb225fd6bcccad9342bc10ccc7e25ef77175b77348c8393d669ac2dbc98a1ae2993946139ce9151938493846141db565b634e487b7160e01b825260219052fd5b88518b811015613d0b57600103613cd257506009908751855252613ccd858420614205565b613c55565b8452600f81528584208851908b821015613d0b5760099291613cf391611c2b565b60ff1981541690558751855252613ccd858420614205565b634e487b7160e01b865260218c528686fd5b613d2690611cc7565b61093b578538613c1c565b89513d89823e3d90fd5b8f8a60218d92634e487b7160e01b835252fd5b848881601254169301511691613d6786865116926133e1565b92813b15613ad95790879291838f613daf8d5197889687958694630d172a0160e01b8652850160409194939294606082019560018060a01b0380921683521660208201520152565b03925af18015613dd757613dc4575b80613b83565b613dd090949194611cc7565b9238613dbe565b87513d87823e3d90fd5b613df79250803d1061319e5761318f8183611cf5565b3880613b74565b88513d88823e3d90fd5b505050509050565b600019811461215e5760010190565b906004811015611b825760ff80198354169116179055565b80519060006020820151604083015160048110156126bc576060840151608085015190613e9760a087015115159360c08801519560405199613e788b611c8f565b888b526001600160a01b031660208b015260408a015260608901611f07565b608087015260a086015260c085015260e08401524261010084015260408201516004811015612949576140db57600454808452613ed381613e10565b6004558152600360205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57613f2c9060038301613e1f565b6080840151600482015560a08401516005820155613f5f60c08501511515600683019060ff801983541691151516179055565b60e0840151600782015560086101008501519101555b60018060a01b03602084015116604084015160c08501511515606086015160048110156126a857613fd29087519260e08901519460405196613fb688611c74565b8752602087015260408601526001606086015260808501611f07565b60a083015260c0820152303b1561033357604051630f72794960e01b815290613fff906004830190611dbb565b818160e48183305af1801561269d576140cc575b5060018060a01b03602084015116918351906020810151604082015160048110156126a857917fe83629b11df9fcc6b9ebc666eb284c939d1710576a8d3eac23474d70fae8d478959391610180959361409860608401519160808501519360c060a0870151151596015196604051998a5260208a015260408901526060880190611b75565b608086015260a085015260c084015260e0830152806101008301528061012083015280610140830152610160820152a15190565b6140d590611cc7565b38614013565b604082015160048110156129495760010361290f576008548084526140ff81613e10565b6008558152600760205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc576141589060038301613e1f565b6080840151600482015560a0840151600582015561418b60c08501511515600683019060ff801983541691151516179055565b60e084015160078201556008610100850151910155613f75565b60086000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201550155565b6001600160a01b03909116815260208101919091526060810192916142039160400190611b75565b565b60096000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201558260088201550155565b60409182519161425083611c8f565b60009182845282602085015282858501528260608501528260808501528260a08501528260c08501528260e08501526101009383858201525060048110156126bc578491908061431e57509160089281526003602052208351936142b385611c8f565b8154855260018201546001600160a01b0316602086015260028201549085015260038101546142e89060ff1660608601611f07565b60048101546080850152600581015460a085015260ff600682015416151560c0850152600781015460e085015201549082015290565b90915060010361434157818491600893526007602052208351936142b385611c8f565b835162461bcd60e51b8152602060048201526012602482015271696e76616c6964207472616465207479706560701b6044820152606490fd5b9060409182519161438a83611cab565b600080845280602085015280858501528060608501528060808501528060a08501528060c08501528060e0850152610100928184860152610120928284870152826101408097015260048110156126bc5760ff9492600994928892156000146144835781526005602052209186519661440288611cab565b8354885260018401546001600160a01b03166020890152600284015490880152600383015461443690861660608901611f07565b60048301546080880152600583015460a0880152600683015460c0880152846007840154818116151560e08a015260081c1615159087015260088201549086015201541615159082015290565b815284602052209186519661440288611cab565b91906145375760018060a01b038151166001600160601b0360a01b8354161782556020810151600183015560028201906144e360408201511515839060ff801983541691151516179055565b6060810151825461ff00191690151560081b61ff00161782556080810151906004821015611b82578260c09262ff0000600495549160101b169062ff0000191617905560a081015160038501550151910155565b634e487b7160e01b600052600060045260246000fd5b91604051916020830193151560f81b84526004811015611b825760f81b60218301526022820152602281526136f081611cda565b1561458857565b60405162461bcd60e51b815260206004820152600c60248201526b37b7363ca2bc32b1baba37b960a11b6044820152606490fd5b156145c357565b60405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606490fdfea264697066735822122063cd346105d6068e658d220d8b34401fdfc3c319cf0000644f002db7d5547d4c64736f6c63430008110033",
  "deployedBytecode": "0x60806040908082526004908136101561001757600080fd5b60009060e08235811c918262c5ecd214611afb57508163021a34dd14611a615781630bc628fb14611a1f5781630f727949146118c657816316f0115b1461189d5781631848effa146118595781631995c725146117cb5781631c3c0ea8146116935781632670e98d146113ef5781632d1ff001146113a4578163349fdb091461121057816337a66d851461108d5781633946fd421461106e578163395455291461103c5781633e5005e514610ff85781634136de9f14610f8a57816346ea87af14610f4c578163499a83c714610f235781634cc42b5114610e345781634d3cb81014610df05781634d7acf9614610d115781635c975abb14610ced578163671e110714610c825781636881d8cb14610ae75781636e30e01614610a7c578163791b98bc14610a5357816379f5927e14610a345781638168c0b61461099257816386249bab146109735781638ffb8b2f1461080e57816390a4a768146107ca578163ab9b4ca8146107ab578163b68ea4b2146106db578163bd40e1c0146106b2578163be82e5b11461066e578163c0d786551461051b578163c1872cf314610425578163c2509859146103b7578163eea0bfab14610360578163f1bd27a814610337578163f887ea401461030a578163f9d244fd1461027e575063fca5c793146101ff57600080fd5b3461027b57602036600319011261027b578261027791833581526005602052209283549360018060a01b036001820154169360028201549560ff60038401541691830154600584015460068501549160078601549460ff600960088901549801541697519a8b9a60ff808960081c169816968c611b98565b0390f35b80fd5b8491503461030657610120925061029d61029736611e5f565b90614241565b908251928251845260018060a01b03602084015116602085015280830151908401526102d160608301516060850190611b75565b6080820151608084015260a082015160a084015260c0820151151560c084015280820151908301526101008091015190820152f35b8280fd5b82853461033357816003193601126103335760145490516001600160a01b039091168152602090f35b5080fd5b82853461033357816003193601126103335760115490516001600160a01b039091168152602090f35b82808587346103b35760203660031901126103b35760039161038d60018060a01b03601354163314614581565b610395613262565b358352600b6020528220828155826001820155826002820155015580f35b5050fd5b823461027b576104086103c936611e7e565b916103d26132a6565b601454336001600160a01b0391821614908115610417575b50801561040f575b6103fb90611f7b565b610403613262565b61385a565b6001815580f35b5060016103f2565b9050601354163314866103ea565b505090346103335761043636611e7e565b9261044c60018060a01b03601354163314614581565b610454613262565b80821015610508578161048a57505082936009916104879452600560205284205b019060ff801983541691151516179055565b80f35b9091845260096020528484209160ff600384015416828110156104f557036104bb5750610487929350600990610475565b606490602086519162461bcd60e51b835282015260146024820152730e8e4c2c8ca40e8f2e0ca40dcdee840dac2e8c6d60631b6044820152fd5b634e487b7160e01b865260218352602486fd5b634e487b7160e01b855260219052602484fd5b82858534610306576020918260031936011261060e57610539611d16565b81516351331ad760e01b8152936001600160a01b0393919291818682817f000000000000000000000000000000000000000000000000000000000000000089165afa9081156106645785968896959692610622575b50906024839285519687938492637be53ca160e01b84523390840152165afa918215610619575085916105de575b506105c79150611ecb565b166001600160601b0360a01b601454161760145580f35b905081813d8311610612575b6105f48183611cf5565b8101031261060e576106086105c791611ebe565b856105bc565b8380fd5b503d6105ea565b513d87823e3d90fd5b83809296508193503d831161065d575b61063c8183611cf5565b8101031261065957859360246106528493611eaa565b925061058e565b8680fd5b503d610632565b83513d89823e3d90fd5b50509134610306576020366003190112610306576104879161069b60018060a01b03601354163314614581565b6106a3613262565b35835260056020528220614205565b82853461033357816003193601126103335760135490516001600160a01b039091168152602090f35b8491503461030657366003190112610333578051926106f984611c74565b610701611d16565b845260243560208501526044359081101561030657818401526064356060840152608435608084015260a43580151581036103065761078b8460019260a0602097015260c43560c08201526107546132a6565b61077e838060a01b03808351168160145416331491821561079d575b508115610793575b50611f7b565b610786613262565b6121c0565b925551908152f35b9050331488610778565b601354163314915089610770565b8285346103335781600319360112610333576020906008549051908152f35b5050913461030657602036600319011261030657610487916107f760018060a01b03601354163314614581565b6107ff613262565b358352600760205282206141a5565b82858534610306576060928360031936011261027b5761082c611d16565b9161086c610838611d31565b60135461085990336001600160a01b03918216149081156109675750611f7b565b610861613262565b6024948535906136ba565b808352600c6020908082528685205415610963578685205460001981019290831161095157838652528584206108ab916108a591611bf9565b50611f13565b60a0810151906080810151908482101561093f57880151151590303b1561093b576108ea9088519363c250985960e01b85528685015287840190611b75565b6044820152838160648183305af1801561093157610909575b5061086c565b6001600160401b03811161091f57855286610903565b5050634e487b7160e01b825260419052fd5b86513d86823e3d90fd5b8580fd5b634e487b7160e01b8652602185528686fd5b634e487b7160e01b8652601185528686fd5b8480f35b87163314905089610778565b8285853461030657826003193601126103065760209250549051908152f35b849150346103065761016092506109b16109ab36611e5f565b9061437a565b908251928251845260018060a01b03602084015116602085015280830151908401526109e560608301516060850190611b75565b6080820151608084015260a082015160a084015260c082015160c08401528082015115159083015261010080820151151590830152610120808201519083015261014080910151151590820152f35b828534610333578160031936011261033357602090600a549051908152f35b82853461033357816003193601126103335760125490516001600160a01b039091168152602090f35b8385843461027b57602036600319011261027b578161027791843581526007602052209182549260018060a01b036001820154169460028201549060ff6003840154169083015460058401549160ff60068601541693600860078701549601549651998a998a611e10565b505091346103065760208060031936011261060e57610b04611d16565b82516351331ad760e01b81526001600160a01b0394919291828282817f00000000000000000000000000000000000000000000000000000000000000008a165afa918215610c785790869392918892610c3a575b50906024839287519889938492637be53ca160e01b84523390840152165afa948515610c30578695610bd6575b50610bb07ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e95611ecb565b81601254931691826001600160601b0360a01b851617601255845193168352820152a180f35b94508085813d8311610c29575b610bed8183611cf5565b8101031261093b57610bb0610c227ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e96611ebe565b9550610b85565b503d610be3565b84513d88823e3d90fd5b83809295508193503d8311610c71575b610c548183611cf5565b810103126106595785926024610c6a8493611eaa565b9250610b58565b503d610c4a565b85513d89823e3d90fd5b8385843461027b57602036600319011261027b578161027791843581526003602052209182549260018060a01b036001820154169460028201549060ff6003840154169083015460058401549160ff60068601541693600860078701549601549651998a998a611e10565b82853461033357816003193601126103335760209060ff6002541690519015158152f35b505090346103335760a036600319011261033357608036602319011261033357825190608082018281106001600160401b03821117610ddd57845260243582526020820160443581528483019060643582526060840192608435845260018060a01b03601454163303610dad57956003949596610d8c613262565b358752600b6020528620945185555160018501555160028401555191015580f35b606490602088519162461bcd60e51b8352820152600a60248201526937b7363ca937baba32b960b11b6044820152fd5b634e487b7160e01b845260418252602484fd5b505091346103065760203660031901126103065761048791610e1d60018060a01b03601354163314614581565b610e25613262565b35835260096020528220614205565b929190503461027b576020908160031936011261027b5782358152600c8252848120938454936001600160401b038511610f10575094939290918451916005610e818383831b0185611cf5565b8184528284018096865283862086915b848310610ee65750505050508451958695828701938388525180945286019493905b838210610ec05786860387f35b918496508286610ed66001949698849851611dbb565b0196019201869594929391610eb3565b8386600192610efb859e999b9a9c9d9e611f13565b81520192019201919099989795969499610e91565b634e487b7160e01b835260419052602482fd5b82858534610306576020366003190112610306576020928291358152600e845220549051908152f35b8285346103335760203660031901126103335760209160ff9082906001600160a01b03610f77611d16565b1681526001855220541690519015158152f35b8285853461030657606036600319011261030657602435918183101561060e5761048792610fe791610fba611d31565b93610fd060018060a01b03601354163314614581565b610fd8613262565b358652600f6020528520611c2b565b9060ff801983541691151516179055565b50509134610306576020366003190112610306576104879161102560018060a01b03601354163314614581565b61102d613262565b358352600360205282206141a5565b828585346103065781600319360112610306576020928291358152600d84528181206024358252845220549051908152f35b8285346103335781600319360112610333576020906006549051908152f35b5050913461030657826003193601126103065780516351331ad760e01b81526001600160a01b03926020929190838282817f000000000000000000000000000000000000000000000000000000000000000089165afa918215611206579084929187926111cc575b5060249084519687938492630935e01b60e21b84523390840152165afa9283156111c2578493611168575b5061114b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258936145bc565b611153613262565b600160ff19600254161760025551338152a180f35b92508183813d83116111bb575b61117f8183611cf5565b8101031261060e5761114b6111b47f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25894611ebe565b9350611120565b503d611175565b81513d86823e3d90fd5b8381949293503d83116111ff575b6111e48183611cf5565b8101031261093b5760246111f88593611eaa565b91906110f5565b503d6111da565b83513d88823e3d90fd5b5050823461033357816003193601126103335780516351331ad760e01b8152602091906001600160a01b0390838187817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561139a579084918691611360575b506024845180948193630935e01b60e21b8352338b840152165afa8015611356578490611320575b6112a891506145bc565b6002549360ff8516156112e857507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa929360ff191660025551338152a180f35b82606492519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b508281813d831161134f575b6113368183611cf5565b8101031261060e5761134a6112a891611ebe565b61129e565b503d61132c565b82513d86823e3d90fd5b82819392503d8311611393575b6113778183611cf5565b8101031261138f576113898491611eaa565b87611276565b8480fd5b503d61136d565b83513d87823e3d90fd5b82858534610306576020366003190112610306576080928291358152600b60205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b505091346103065761140036611d40565b9060018060a01b03806014541633148015611686575b801561167e575b61142690611f7b565b61142e613262565b8251169161144860209384830151848401511515916136ba565b93606082018051151590608084019182518481101561166b57906114719160a08701519161454d565b878952600d8752858920818a52875285892054888a52600c8852868a20546000199291908381019081116116585781106115af575b50888a52600d8852868a20908a5287528886812055878952600c8752858920908154801561159c5701906114da8282611bf9565b61158a5785818c8093558260018201558260028201558260038201550155555115918261152f575b505061150c578480f35b6115259260c0600e920151948652528320918254612151565b9055388080808480f35b908092505181811015611577571591821561154e575b50503880611502565b5191508082101561156457506001143880611545565b634e487b7160e01b875260219052602486fd5b634e487b7160e01b885260218252602488fd5b634e487b7160e01b8b528a865260248bfd5b634e487b7160e01b8b526031865260248bfd5b898b52600c8952878b20805484810191908211611645576115d3916108a591611bf9565b606081015115156080820151888110156116325791611613848f8f95908f8f929061160961161998600c9360a08a01519161454d565b9883525220611bf9565b90614497565b8a8c52600d8a52888c20908c528952878b2055386114a6565b634e487b7160e01b8e526021895260248efd5b634e487b7160e01b8d526011885260248dfd5b634e487b7160e01b8c526011875260248cfd5b634e487b7160e01b8a526021855260248afd5b50600161141d565b5080601354163314611416565b82858534610306576020918260031936011261060e576116b1611d16565b81516351331ad760e01b8152936001600160a01b0393919291818682817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610664578596889695969261178d575b50906024839285519687938492637be53ca160e01b84523390840152165afa91821561061957508591611756575b5061173f9150611ecb565b166001600160601b0360a01b601354161760135580f35b905081813d8311611786575b61176c8183611cf5565b8101031261060e5761178061173f91611ebe565b85611734565b503d611762565b83809296508193503d83116117c4575b6117a78183611cf5565b8101031261065957859360246117bd8493611eaa565b9250611706565b503d61179d565b8285853461030657602036600319011261030657828291608094606084516117f281611c43565b82815282602082015282868201520152358152600b602052209080519061181882611c43565b825492838352600181015460208401908152606060036002840154938587019485520154940193845282519485525160208501525190830152516060820152f35b828534610333578160031936011261033357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82853461033357816003193601126103335760105490516001600160a01b039091168152602090f35b50509134610306576118d736611d40565b9060018060a01b03806014541633148015611a12575b8015611a0a575b6118fd90611f7b565b611905613262565b8251169161191f60209384830151848401511515916136ba565b93606082018051151590608084019182518481101561166b57906119489160a08701519161454d565b878952600c87528589205490600d8852868a20908a52875285892055868852600c8652848820805490680100000000000000008210156119f757611613828792600161199695018155611bf9565b511591826119c2575b50506119a9578480f35b6115259260c0600e9201519486525283209182546133f5565b90809250518181101561157757159182156119e1575b5050388061199f565b51915080821015611564575060011438806119d8565b634e487b7160e01b8a526041855260248afd5b5060016118f4565b50806013541633146118ed565b82858534610306578160031936011261030657602435908082101561060e5760ff9183602095611a5693358152600f875220611c2b565b541690519015158152f35b8385843461027b578160031936011261027b576024359083358152600c60205282812090815483101561027b575090611a9991611bf9565b50611aef60018060a01b03825416936001830154936002840154916003850154940154948151968752602087015260ff821615159086015260ff8160081c161515606086015260ff608086019160101c16611b75565b60a083015260c0820152f35b839085873461060e57602036600319011261060e57906102779183948235815260096020522080549160018060a01b036001830154169260028301549160ff6003850154169084015460058501549060068601549260078701549560ff600960088a0154990154169860ff808960081c169816968c611b98565b906004821015611b825752565b634e487b7160e01b600052602160045260246000fd5b999693610140999693611bce929d9c9996936101608d019e8d5260018060a01b031660208d015260408c015260608b0190611b75565b608089015260a088015260c0870152151560e086015215156101008501526101208401521515910152565b8054821015611c15576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b906004811015611b8257600052602052604060002090565b608081019081106001600160401b03821117611c5e57604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117611c5e57604052565b61012081019081106001600160401b03821117611c5e57604052565b61016081019081106001600160401b03821117611c5e57604052565b6001600160401b038111611c5e57604052565b606081019081106001600160401b03821117611c5e57604052565b90601f801991011681019081106001600160401b03821117611c5e57604052565b600435906001600160a01b0382168203611d2c57565b600080fd5b604435908115158203611d2c57565b60e0906003190112611d2c57604051611d5881611c74565b6004356001600160a01b0381168103611d2c57815260243560208201526044358015158103611d2c5760408201526064358015158103611d2c5760608201526084356004811015611d2c57608082015260a43560a082015260c43560c082015290565b60c0809160018060a01b03815116845260208101516020850152604081015115156040850152606081015115156060850152611dff60808201516080860190611b75565b60a081015160a08501520151910152565b9592936101009794611e45929b9a99969361012089019c895260018060a01b0316602089015260408801526060870190611b75565b608085015260a0840152151560c083015260e08201520152565b6040906003190112611d2c57600435906024356004811015611d2c5790565b6060906003190112611d2c57600435906024356004811015611d2c57906044358015158103611d2c5790565b51906001600160a01b0382168203611d2c57565b51908115158203611d2c57565b15611ed257565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6004821015611b825752565b90604051611f2081611c74565b60c06004829460018060a01b03815416845260018101546020850152611f6a60ff600283015481811615156040880152818160081c161515606088015260101c1660808601611f07565b600381015460a08501520154910152565b15611f8257565b60405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b6044820152606490fd5b9081610120910312611d2c5760405190611fcc82611c8f565b80518252611fdc60208201611eaa565b6020830152611fed60408201611eaa565b6040830152611ffe60608201611eaa565b606083015261200f60808201611ebe565b608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015290565b80916101409283910312611d2c576040519182018281106001600160401b03821117611c5e576040528051825261207960208201611eaa565b60208301526040810151604083015261209460608201611ebe565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b80916101009283910312611d2c57604051918201908282106001600160401b03831117611c5e5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b9190820391821161215e57565b634e487b7160e01b600052601160045260246000fd5b1561217b57565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b601254600092916001600160a01b0390911690811561322e5780516011546040516372c1cc1b60e11b81526001600160a01b0392831660048201819052949290911690602081602481855afa9081156132235787916131e9575b506131b0576010546020840151604051632f7ce47360e21b8152600481019190915291906001600160a01b031661012083602481845afa9283156131a5578893613172575b5060808301511561312d576040850151600481101561311957158015613102575b612b48575b50505050604081015160048110156126a8576002148015612b31575b612a00575b60c081018051858113156123345750602082015191604081015160048110156123205761231d95965061230460608301519160a060808501519401511515945195604051976122f489611c74565b8852602088015260408701611f07565b6060850152608084015260a083015260c0820152613e37565b90565b634e487b7160e01b87526021600452602487fd5b9480949592919212600014612971576020810151916040820151600481101561295d5761238460608401519160a0612371608087015195516133e1565b950151151595604051976122f489611c74565b6060850152608084015260a083015260c082015260018060a01b03815116916020820151604083015160048110156126bc5760608401516080850151906123f560a08701519360c0880151151595604051996123df8b611cab565b888b5260208b015260408a015260608901611f07565b608087015260a086015260c085015260e084015280610100840152426101208401528061014084015260408201516004811015612949576126d05760065480845260c0830151151561010085015261244c81613e10565b6006558152600560205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a961252e9260038301613e1f565b6080850151600482015560a0850151600582015560c08501516006820155612506600782016124ea60e08801511515829060ff801983541691151516179055565b610100870151815461ff00191690151560081b61ff0016179055565b61012085015160088201556009610140860151151591019060ff801983541691151516179055565b60018060a01b03602084015116604084015160e08501511515606086015160048110156126a85761258a9087519260c0890151946040519661256f88611c74565b87526020870152604086015285606086015260808501611f07565b60a083015260c0820152303b1561033357604051630f72794960e01b8152906125b7906004830190611dbb565b818160e48183305af1801561269d5761268e575b506020830151835160408401516001600160a01b03909216939092600483101561267a5750917fe71a68544c2c9cf2a006d283baa849468003198fa8d8026335170198a30349dd9391836060610120950151602082015160808301519161265660c060a08601519501511515956101008c0151151597604051998a5260208a01526040890190611b75565b6060870152608086015260a085015260c084015260e0830152610100820152a15190565b634e487b7160e01b81526021600452602490fd5b61269790611cc7565b386125cb565b6040513d84823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b604082015160048110156129495760010361276257600a5480845260c08301511561010085015261270081613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a961275d9260038301613e1f565b61252e565b604082015160048110156129495760020361283857600a5480845260c08301511561010085015261279281613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a96127ef9260038301613e1f565b8151602083015160c08401516128129290151591906001600160a01b03166136ba565b8152600f602052604081206002825260205260408120600160ff1982541617905561252e565b604082015160048110156129495760030361290f57600a5480845260c0830151151561010085015261286981613e10565b600a558152600960205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57906124a96128c69260038301613e1f565b8151602083015160c08401516128e99290151591906001600160a01b03166136ba565b8152600f602052604081206003825260205260408120600160ff1982541617905561252e565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207472616465207479706560701b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b9392905060608401938451156129cd57602081015190604081015160048110156129b95761230461231d9697519160a06080850151940151151594604051976122f489611c74565b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd5c1c1bdc9d60aa1b6044820152606490fd5b601154602082015160a083015160405163bc95baad60e01b81526001600160a01b03868116600483015260248201939093529015156044820152610140929091839183916064918391165afa918215612b26578692612af9575b505060a0612a6b60c08401516133e1565b91015110612abb576060810151156122a65760405162461bcd60e51b81526020600482015260166024820152751b9bc818dbdb1b185d195c985b081c995c5d5a5c995960521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527574702f736c2065786365656473206d61782073697a6560501b6044820152606490fd5b612b189250803d10612b1f575b612b108183611cf5565b810190612040565b3880612a5a565b503d612b06565b6040513d88823e3d90fd5b50604081015160048110156126a8576003146122a1565b60c08501518015908115613073575b501561303957612bbf906101406020870151612b7c60a089019182511515908b6136ba565b6020890151915160405163bc95baad60e01b81526001600160a01b038c166004820152602481019390935215156044830152949093849190829081906064820190565b03915afa91821561302e57899261300b575b50604051631f94a27560e31b8152926020846004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa938415612f8c578a94612fcf575b506020858101516040516341976e0960e01b81526001600160a01b0391821660048201529586916024918391165afa938415612f8c578a94612f97575b5061010060408401516024604051809581936330a66e1560e01b835260048301525afa918215612f8c578a92612f59575b5060c08701518a811215612ef2575b5060c08701518a811315612e8c575b5050505050606083015190868213612cc5575b80612285565b604001516001600160a01b031690612d1c90612ce0906133e1565b6040516323b872dd60e01b602082019081526001600160a01b038089166024840152909516604482015260648101919091529081906084820190565b0391612d30601f1993848101845283611cf5565b6040519360408501926001600160401b039386811085821117612e785760405260208087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649087015251899182919082855af1913d15612e68573d908111612e545790612dbe94939291612db0602060405195601f8401160185611cf5565b83523d89602085013e6132fc565b8051908115918215612e32575b505015612dda57388080612cbf565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b819250906020918101031261138f576020612e4d9101611ebe565b3880612dcb565b634e487b7160e01b89526041600452602489fd5b5090612dbe9392506060916132fc565b634e487b7160e01b8b52604160045260248bfd5b612ee894612ee193612eba92612ea660608c0151916133e1565b825191608060208501519401519489613604565b505060a0612ecb60c08901516133e1565b930151908a52600e60205260408a205490612151565b1015612174565b3880808080612cac565b612f119060608901519084516020860151916080870151938989613431565b5015612f1d5738612c9d565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612f7e9192506101003d61010011612f85575b612f768183611cf5565b8101906120da565b9038612c8e565b503d612f6c565b6040513d8c823e3d90fd5b9093506020813d602011612fc7575b81612fb360209383611cf5565b81010312612fc357519238612c5d565b8980fd5b3d9150612fa6565b9093506020813d602011613003575b81612feb60209383611cf5565b81010312612fc357612ffc90611eaa565b9238612c20565b3d9150612fde565b6130279192506101403d61014011612b1f57612b108183611cf5565b9038612bd1565b6040513d8b823e3d90fd5b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b90506130836020870151916133e1565b604051916330a66e1560e01b83526004830152610100918281602481875afa9283156130f7578b936130d8575b5050604082015181101591826130c9575b505038612b57565b606001511015905038806130c1565b6130ef929350803d10612f8557612f768183611cf5565b9038806130b0565b6040513d8d823e3d90fd5b506040850151600481101561311957600114612280565b634e487b7160e01b89526021600452602489fd5b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b6131979193506101203d6101201161319e575b61318f8183611cf5565b810190611fb3565b913861225f565b503d613185565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d60201161321b575b8161320460209383611cf5565b810103126106595761321590611ebe565b3861221a565b3d91506131f7565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b60ff6002541661326e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b6002600054146132b7576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9192901561335e5750815115613310575090565b3b156133195790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156133715750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106133b7575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613394565b600160ff1b811461215e5760000390565b600081126133ec5790565b61231d906133d0565b9190820180921161215e57565b9190916000838201938412911290801582169115161761215e57565b8181029291811591840414171561215e57565b949196959390926134468160a08801516133f5565b9788156135f35761345b906080880151613402565b95600087126135a35781613585575b5050600085126135405761348f9061348a84613485886133e1565b6136f6565b61341e565b8610159182613524575b5050156134ea5783116134af5761231d906133e1565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613536925061348a90613485866133e1565b8411153880613499565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b8461359b93979261359592613626565b90613402565b93388061346a565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b949196959390926134468160a088016136208282511015612174565b51612151565b60c081019081519081851480156136b2575b6136a857606001511561367e5750805180841115613666575061231d92613660915190612151565b906137dc565b61367992915061231d9361366091612151565b6133d0565b83811115613695575061231d926136609151612151565b6136799291506136609061231d94612151565b5050505050600090565b508115613638565b916040519160208301936001600160601b03199060601b1684526034830152151560f81b6054820152603581526136f081611cda565b51902090565b906c0c9f2c9cd04674edea400000009060001982840992828102928380861095039480860395146137b8578483111561377b578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b5050809250156137c6570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214613844576c0c9f2c9cd04674edea40000000908282111561377b577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b9115613b0b5761386991614241565b6020810180516001600160a01b03939290600090851615613b04578460105416946040908184019485519783518091632f7ce47360e21b825260049a8b8301528160246101209485935afa918215613afa578692613add575b50506080860151858113613a54575b50508181511695519560c0860151151596606087019788518b811015613a41576139259089519260e08b01519489519661390a88611c74565b87526020870152888601526001606086015260808501611f07565b60a083015260c0820152303b1561138f578351632670e98d60e01b815290613950908a830190611dbb565b848160e48183305af18015613a3757908591613a23575b5050855188811015613a10576139e65784518452600360205261398b8385206141a5565b51169251935191868310156139d357507f7e93a6b00cb3caacf000d7018943b12e2b4ad29e7849df14ebd51caf4fd739b8949550906139ce9151938493846141db565b0390a1565b634e487b7160e01b815260218752602490fd5b855188811015613a105760010361398b57845184526007602052613a0b8385206141a5565b61398b565b634e487b7160e01b855260218952602485fd5b613a2c90611cc7565b61060e578338613967565b84513d87823e3d90fd5b634e487b7160e01b885260218c52602488fd5b838581601254169301511691613a6d85855116926133e1565b92813b15613ad9578651630d172a0160e01b81526001600160a01b039182168d82019081529390911660208401526040830193909352869183919082908490829060600103925af18015613a3757613ac6575b806138d1565b613ad290949194611cc7565b9238613ac0565b8780fd5b613af39250803d1061319e5761318f8183611cf5565b38806138c2565b85513d88823e3d90fd5b5050509050565b613b149161437a565b6020808201805191939290916001600160a01b0390600090821615613e0857816010541690604092838501958651988551808096632f7ce47360e21b825260049c8d8301526101209283916024998a915afa918215613dfe578692613de1575b50506080880151858113613d4e575b5050828251169780519860e08901908c8251151560608c019c8d5192831015613d3b578b928d92613bda9260c08551950151955196613bc188611c74565b8752898701528d8601528a606086015260808501611f07565b60a083015260c0820152303b15610659578851632670e98d60e01b815290613c0590828f0190611dbb565b868160e48183305af18015613d3157908791613d1d575b505090613c339185855116915190511515916136ba565b88518b811015613d0b57613ca857506005908751855252613c55858420614205565b5116935194519680881015613c98575050507fb225fd6bcccad9342bc10ccc7e25ef77175b77348c8393d669ac2dbc98a1ae2993946139ce9151938493846141db565b634e487b7160e01b825260219052fd5b88518b811015613d0b57600103613cd257506009908751855252613ccd858420614205565b613c55565b8452600f81528584208851908b821015613d0b5760099291613cf391611c2b565b60ff1981541690558751855252613ccd858420614205565b634e487b7160e01b865260218c528686fd5b613d2690611cc7565b61093b578538613c1c565b89513d89823e3d90fd5b8f8a60218d92634e487b7160e01b835252fd5b848881601254169301511691613d6786865116926133e1565b92813b15613ad95790879291838f613daf8d5197889687958694630d172a0160e01b8652850160409194939294606082019560018060a01b0380921683521660208201520152565b03925af18015613dd757613dc4575b80613b83565b613dd090949194611cc7565b9238613dbe565b87513d87823e3d90fd5b613df79250803d1061319e5761318f8183611cf5565b3880613b74565b88513d88823e3d90fd5b505050509050565b600019811461215e5760010190565b906004811015611b825760ff80198354169116179055565b80519060006020820151604083015160048110156126bc576060840151608085015190613e9760a087015115159360c08801519560405199613e788b611c8f565b888b526001600160a01b031660208b015260408a015260608901611f07565b608087015260a086015260c085015260e08401524261010084015260408201516004811015612949576140db57600454808452613ed381613e10565b6004558152600360205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc57613f2c9060038301613e1f565b6080840151600482015560a08401516005820155613f5f60c08501511515600683019060ff801983541691151516179055565b60e0840151600782015560086101008501519101555b60018060a01b03602084015116604084015160c08501511515606086015160048110156126a857613fd29087519260e08901519460405196613fb688611c74565b8752602087015260408601526001606086015260808501611f07565b60a083015260c0820152303b1561033357604051630f72794960e01b815290613fff906004830190611dbb565b818160e48183305af1801561269d576140cc575b5060018060a01b03602084015116918351906020810151604082015160048110156126a857917fe83629b11df9fcc6b9ebc666eb284c939d1710576a8d3eac23474d70fae8d478959391610180959361409860608401519160808501519360c060a0870151151596015196604051998a5260208a015260408901526060880190611b75565b608086015260a085015260c084015260e0830152806101008301528061012083015280610140830152610160820152a15190565b6140d590611cc7565b38614013565b604082015160048110156129495760010361290f576008548084526140ff81613e10565b6008558152600760205260408120835181556001810160018060a01b036020860151166001600160601b0360a01b82541617905560408401516002820155606084015160048110156126bc576141589060038301613e1f565b6080840151600482015560a0840151600582015561418b60c08501511515600683019060ff801983541691151516179055565b60e084015160078201556008610100850151910155613f75565b60086000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201550155565b6001600160a01b03909116815260208101919091526060810192916142039160400190611b75565b565b60096000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201558260088201550155565b60409182519161425083611c8f565b60009182845282602085015282858501528260608501528260808501528260a08501528260c08501528260e08501526101009383858201525060048110156126bc578491908061431e57509160089281526003602052208351936142b385611c8f565b8154855260018201546001600160a01b0316602086015260028201549085015260038101546142e89060ff1660608601611f07565b60048101546080850152600581015460a085015260ff600682015416151560c0850152600781015460e085015201549082015290565b90915060010361434157818491600893526007602052208351936142b385611c8f565b835162461bcd60e51b8152602060048201526012602482015271696e76616c6964207472616465207479706560701b6044820152606490fd5b9060409182519161438a83611cab565b600080845280602085015280858501528060608501528060808501528060a08501528060c08501528060e0850152610100928184860152610120928284870152826101408097015260048110156126bc5760ff9492600994928892156000146144835781526005602052209186519661440288611cab565b8354885260018401546001600160a01b03166020890152600284015490880152600383015461443690861660608901611f07565b60048301546080880152600583015460a0880152600683015460c0880152846007840154818116151560e08a015260081c1615159087015260088201549086015201541615159082015290565b815284602052209186519661440288611cab565b91906145375760018060a01b038151166001600160601b0360a01b8354161782556020810151600183015560028201906144e360408201511515839060ff801983541691151516179055565b6060810151825461ff00191690151560081b61ff00161782556080810151906004821015611b82578260c09262ff0000600495549160101b169062ff0000191617905560a081015160038501550151910155565b634e487b7160e01b600052600060045260246000fd5b91604051916020830193151560f81b84526004811015611b825760f81b60218301526022820152602281526136f081611cda565b1561458857565b60405162461bcd60e51b815260206004820152600c60248201526b37b7363ca2bc32b1baba37b960a11b6044820152606490fd5b156145c357565b60405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606490fdfea264697066735822122063cd346105d6068e658d220d8b34401fdfc3c319cf0000644f002db7d5547d4c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9127,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "isHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 299,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 15182,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseMarketOrders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(IncreasePositionOrder)9306_storage)"
      },
      {
        "astId": 15185,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseMarketOrdersIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15190,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseMarketOrders",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(DecreasePositionOrder)9330_storage)"
      },
      {
        "astId": 15193,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseMarketOrdersIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15198,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseLimitOrders",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(IncreasePositionOrder)9306_storage)"
      },
      {
        "astId": 15201,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseLimitOrdersIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 15206,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseLimitOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(DecreasePositionOrder)9330_storage)"
      },
      {
        "astId": 15209,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseLimitOrdersIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15214,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "orderWithTpSl",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(OrderWithTpSl)9215_storage)"
      },
      {
        "astId": 15220,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionOrders",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_array(t_struct(PositionOrder)7484_storage)dyn_storage)"
      },
      {
        "astId": 15226,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionOrderIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 15230,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionDecreaseTotalAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 15237,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionHasTpSl",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_mapping(t_enum(TradeType)9190,t_bool))"
      },
      {
        "astId": 15240,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "pool",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IPool)7948"
      },
      {
        "astId": 15243,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "tradingVault",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IPositionManager)8295"
      },
      {
        "astId": 15246,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionManager",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IPositionManager)8295"
      },
      {
        "astId": 15248,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "addressExecutor",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 15250,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "router",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PositionOrder)7484_storage)dyn_storage": {
        "base": "t_struct(PositionOrder)7484_storage",
        "encoding": "dynamic_array",
        "label": "struct IOrderManager.PositionOrder[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPool)7948": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)8295": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)9190": {
        "encoding": "inplace",
        "label": "enum TradingTypes.TradeType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_struct(PositionOrder)7484_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IOrderManager.PositionOrder[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PositionOrder)7484_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_mapping(t_enum(TradeType)9190,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(enum TradingTypes.TradeType => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)9190,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(OrderWithTpSl)9215_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TradingTypes.OrderWithTpSl)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderWithTpSl)9215_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(TradeType)9190,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)9190",
        "label": "mapping(enum TradingTypes.TradeType => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(DecreasePositionOrder)9330_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TradingTypes.DecreasePositionOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(DecreasePositionOrder)9330_storage"
      },
      "t_mapping(t_uint256,t_struct(IncreasePositionOrder)9306_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TradingTypes.IncreasePositionOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(IncreasePositionOrder)9306_storage"
      },
      "t_struct(DecreasePositionOrder)9330_storage": {
        "encoding": "inplace",
        "label": "struct TradingTypes.DecreasePositionOrder",
        "members": [
          {
            "astId": 9308,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9310,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9312,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9315,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TradeType)9190"
          },
          {
            "astId": 9317,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 9319,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9321,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9323,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9325,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "abovePrice",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9327,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "blockTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9329,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "needADL",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(IncreasePositionOrder)9306_storage": {
        "encoding": "inplace",
        "label": "struct TradingTypes.IncreasePositionOrder",
        "members": [
          {
            "astId": 9288,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9290,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9292,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9295,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TradeType)9190"
          },
          {
            "astId": 9297,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 9299,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "openPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9301,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 9303,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9305,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "blockTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(OrderWithTpSl)9215_storage": {
        "encoding": "inplace",
        "label": "struct TradingTypes.OrderWithTpSl",
        "members": [
          {
            "astId": 9208,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tpPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9210,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9212,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "slPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9214,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sl",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PositionOrder)7484_storage": {
        "encoding": "inplace",
        "label": "struct IOrderManager.PositionOrder",
        "members": [
          {
            "astId": 7470,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7472,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7474,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7476,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isIncrease",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7479,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 2,
            "slot": "2",
            "type": "t_enum(TradeType)9190"
          },
          {
            "astId": 7481,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7483,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}