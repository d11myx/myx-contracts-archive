{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract ITradingVault",
          "name": "_tradingVault",
          "type": "address"
        },
        {
          "internalType": "contract IVaultPriceFeed",
          "name": "_vaultPriceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "CancelDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "CancelIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        }
      ],
      "name": "CreateDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tpPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slAmount",
          "type": "uint256"
        }
      ],
      "name": "CreateIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdatePositionManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "_checkTradingAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "addOrderToPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "sizeAmount",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "tpPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingTypes.CreateOrderRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseLimitOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseLimitOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseMarketOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "abovePrice",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "getDecreaseOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "triggerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "abovePrice",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "blockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needADL",
              "type": "bool"
            }
          ],
          "internalType": "struct TradingTypes.DecreasePositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "getIncreaseOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingTypes.IncreasePositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPositionOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseLimitOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseLimitOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseMarketOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positionDecreaseTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "positionHasTpSl",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positionOrderIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "removeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIncrease",
              "type": "bool"
            },
            {
              "internalType": "enum TradingTypes.TradeType",
              "name": "tradeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOrderManager.PositionOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "removeOrderFromPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isHandler",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        }
      ],
      "name": "setOrderNeedADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "has",
          "type": "bool"
        }
      ],
      "name": "setPositionHasTpSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingVault",
      "outputs": [
        {
          "internalType": "contract ITradingVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updatePositionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPriceFeed",
      "outputs": [
        {
          "internalType": "contract IVaultPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x56a9a0be3859aa48280fdadfb06034d0cecf56181f424b3284c47429a8b639aa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "3993720",
    "logsBloom": "0x
    "blockHash": "0xf7aae0a7e807e93326d6e0d3b455e49b3164a10951cdc2de727209fa5b63ec56",
    "transactionHash": "0x56a9a0be3859aa48280fdadfb06034d0cecf56181f424b3284c47429a8b639aa",
    "logs": [],
    "blockNumber": 33,
    "cumulativeGasUsed": "3993720",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "0x67d269191c92Caf3cD7723F116c85e6E9bf55933",
    "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e"
  ],
  "numDeployments": 1,
  "solcInputHash": "88b9facc694daac1217da6c3f2e56500",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract ITradingVault\",\"name\":\"_tradingVault\",\"type\":\"address\"},{\"internalType\":\"contract IVaultPriceFeed\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"CancelDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"CancelIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"}],\"name\":\"CreateDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slAmount\",\"type\":\"uint256\"}],\"name\":\"CreateIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdatePositionManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"_checkTradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"addOrderToPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"sizeAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingTypes.CreateOrderRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseLimitOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseLimitOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseMarketOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"abovePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"internalType\":\"struct TradingTypes.DecreasePositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingTypes.IncreasePositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPositionOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseLimitOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseLimitOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseMarketOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positionDecreaseTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"positionHasTpSl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positionOrderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"removeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderManager.PositionOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"removeOrderFromPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isHandler\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"}],\"name\":\"setOrderNeedADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"has\",\"type\":\"bool\"}],\"name\":\"setPositionHasTpSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingVault\",\"outputs\":[{\"internalType\":\"contract ITradingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"contract IVaultPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/OrderManager.sol\":\"OrderManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/type/TradingTypes.sol\\\";\\n\\ninterface IOrderManager {\\n\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns(uint256);\\n    function decreaseMarketOrdersIndex() external view returns(uint256);\\n    function increaseLimitOrdersIndex() external view returns(uint256);\\n    function decreaseLimitOrdersIndex() external view returns(uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\\n\\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n}\\n\",\"keccak256\":\"0x1b815e8558fb7886c8b9d358986242362043f457767252c680fa8ef2a2f8a728\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/type/TradingTypes.sol\\\";\\n\\ninterface IPositionManager {\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory _tokens,\\n        uint256[] memory _prices,\\n        uint256 _timestamp,\\n        bytes32[] memory _positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory _positionKeys) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external;\\n\\n    function getValidPrice(uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a95674d49193dd5454e32253d5e157d138f7bff46257d5c9ec30c09501c7307\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function contractWhiteList(address) external view returns (bool);\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n    function addContractWhiteList(address target) external;\\n\\n    function removeContractWhiteList(address target) external;\\n}\\n\",\"keccak256\":\"0xbdc36b44d3b4f20937e76a8d72a334dee7a12c98ad888fb77a8a98494ef8cb6b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface ITradingVault {\\n\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function buyIndexToken(uint256 _pairIndex, uint256 _amount) external;\\n\\n    function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0xbf040e8ef400f708355e18c06dd3a1ca1493b0b7a6299c82f3284c9270279833\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultPriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x18a2c6a576dc0459631a8e1c013d54f82016cb315f5565be2a03c15cc9c55c52\",\"license\":\"MIT\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 amount) internal pure returns(uint256) {\\n        return amount >= 0 ? uint256(amount) : uint256(- amount);\\n    }\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1d6ee47f8a773dd43a96e00d5072feb1dd323e259fc8e49393fcb99866e582f4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/type/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice) {return 0;}\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // console.log(\\\"validLeverage sizeAmount\\\", _sizeAmount, \\\"collateral\\\", _collateral.toString());\\n\\n        // bytes32 key = PositionKey.getPositionKey(account, pairIndex, isLong);\\n        // Position.Info memory position = tradingVault.getPositionByKey(key);\\n        // IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        // uint256 price = getPrice(pair.indexToken);\\n\\n        // IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (self.positionAmount > 0) {\\n            // uint256 price = getPrice(pair.indexToken);\\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\\n        }\\n\\n        // console.log(\\\"validLeverage totalCollateral\\\", totalCollateral.toString());\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        // console.log(\\\"validLeverage afterPosition\\\", afterPosition, \\\"collateralDelta\\\", totalCollateral.abs().divPrice(price));\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xad8f2801ace60cb24398b5c40067bf664ebfefbda4a42c39506cae39d3577662\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/type/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x071cef1c2606341079c97f436be603234dab04022e60ff8034d8bdec1a63829d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable is Initializable {\\n    address public gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function __Governable_init() internal onlyInitializing {\\n        gov = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x31fc5e583be08ae049f33ed30bc71e48c0aafaa26d47bccb2f9754e5aa0bc7c8\",\"license\":\"MIT\"},\"contracts/libraries/access/Handleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./Governable.sol\\\";\\nimport \\\"../../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../../interfaces/IRoleManager.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Handleable {\\n\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    modifier onlyHandler() {\\n        require(msg.sender == address(this) || isHandler[msg.sender], \\\"Handleable: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\\n        isHandler[_handler] = _isHandler;\\n    }\\n}\\n\",\"keccak256\":\"0x33560372f60bb0f7446191a7dbcb9ce2108162c057d2fd3908cc0cc731d0673c\",\"license\":\"MIT\"},\"contracts/libraries/type/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n\\n    enum TradeType {MARKET, LIMIT, TP, SL}\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        int256 sizeAmount;             // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        uint256 sizeAmount;            // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice;          // 1e30, price\\n        uint256 sizeAmount;            // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        bool isLong;\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        TradeType tradeType;            // 0: MARKET, 1: LIMIT\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 openPrice;              // 1e30 Market acceptable price/Limit opening price\\n        bool isLong;                    // Long/short\\n        uint256 sizeAmount;             // Number of positions\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 triggerPrice;            // Limit trigger price\\n        uint256 sizeAmount;              // Number of customs documents\\n        bool isLong;\\n        bool abovePrice;                 // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0xae53ed399a2f12c87f4476563e06ba5ff839db466d17b17690453c63bae65fc8\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap;\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP;\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // 10000 for 100%\\n        uint256 priceSlipP;\\n        uint256 maxPriceDeviationP;\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        uint256 minFundingRate;             // \\u6700\\u5c0f\\u8d44\\u91d1\\u8d39\\u7387   1000000 for 100%\\n        uint256 maxFundingRate;             // \\u6700\\u5927\\u8d44\\u91d1\\u8d39\\u7387   1000000 for 100%\\n        uint256 fundingWeightFactor;        // \\u591a\\u7a7a\\u53cc\\u65b9\\u8d44\\u91d1\\u8d39\\u7387\\u6743\\u91cd\\u7cfb\\u6570 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // \\u6d41\\u52a8\\u6027\\u5bf9\\u4e8e\\u6ea2\\u4ef7\\u7684\\u7cfb\\u6570  10000 for 100%\\n        uint256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0xb40fee3ca5f9b665947d7f34df1a477b7a70be8c09b86371b295371176b4609c\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit, uint256 _price) external;\\n}\\n\",\"keccak256\":\"0xc76f797033b96609795fd3c21753f4c0764ea40720682f6c12f2e4369151b759\",\"license\":\"UNLICENSED\"},\"contracts/trading/OrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../pair/interfaces/IPairInfo.sol\\\";\\nimport \\\"../pair/interfaces/IPairVault.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/access/Handleable.sol\\\";\\nimport \\\"../libraries/type/TradingTypes.sol\\\";\\n\\nimport \\\"../interfaces/ITradingVault.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/IOrderManager.sol\\\";\\nimport \\\"../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../interfaces/IRoleManager.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\n\\ncontract OrderManager is IOrderManager, ReentrancyGuardUpgradeable, Handleable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseMarketOrders;\\n    uint256 public override increaseMarketOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseMarketOrders;\\n    uint256 public override decreaseMarketOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.IncreasePositionOrder) public increaseLimitOrders;\\n    uint256 public override increaseLimitOrdersIndex;\\n\\n    mapping(uint256 => TradingTypes.DecreasePositionOrder) public decreaseLimitOrders;\\n    uint256 public override decreaseLimitOrdersIndex;\\n\\n    mapping(bytes32 => PositionOrder[]) public positionOrders;\\n    mapping(bytes32 => mapping(bytes32 => uint256)) public positionOrderIndex;\\n\\n    mapping(bytes32 => uint256) public positionDecreaseTotalAmount;\\n\\n    mapping(bytes32 => mapping(TradingTypes.TradeType => bool)) public positionHasTpSl; // PositionKey -> TradeType -> bool\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    ITradingVault public tradingVault;\\n    IVaultPriceFeed public vaultPriceFeed;\\n    IPositionManager public positionManager;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        ITradingVault _tradingVault,\\n        IVaultPriceFeed _vaultPriceFeed\\n    ) Handleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        tradingVault = _tradingVault;\\n        vaultPriceFeed = _vaultPriceFeed;\\n    }\\n\\n    modifier onlyWhiteListOrSelf(address account) {\\n        require(\\n            IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || account == msg.sender, \\\"no access\\\");\\n        _;\\n    }\\n\\n    function getPositionOrders(bytes32 key) public view override returns (PositionOrder[] memory) {\\n        return positionOrders[key];\\n    }\\n\\n    function updatePositionManager(address newAddress) external onlyPoolAdmin {\\n        address oldAddress = address(positionManager);\\n        positionManager = IPositionManager(newAddress);\\n        emit UpdatePositionManager(oldAddress, newAddress);\\n    }\\n\\n    function createOrder(\\n        TradingTypes.CreateOrderRequest memory request\\n    ) public nonReentrant onlyWhiteListOrSelf(request.account) returns (uint256 orderId) {\\n        require(address(positionManager) != address(0), \\\"zero address\\\");\\n\\n        address account = request.account;\\n        require(!tradingVault.isFrozen(account), \\\"account is frozen\\\");\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(request.pairIndex);\\n        require(pair.enable, \\\"trade pair not supported\\\");\\n\\n        if (request.tradeType == TradingTypes.TradeType.MARKET || request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            // check size\\n            require(request.sizeAmount == 0 || _checkTradingAmount(request.pairIndex, request.sizeAmount.abs()), \\\"invalid trade size\\\");\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(account, request.pairIndex, request.isLong);\\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\\n            uint256 price = vaultPriceFeed.getPrice(pair.indexToken);\\n            IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\\n            //TODO if size = 0\\n            if (request.sizeAmount >= 0) {\\n                // check leverage\\n                (uint256 afterPosition,) = position.validLeverage(price, request.collateral, uint256(request.sizeAmount), true, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\\n                // (uint256 afterPosition,) = tradingUtils.validLeverage(account, request.pairIndex, request.isLong, request.collateral, uint256(request.sizeAmount), true);\\n                require(afterPosition > 0, \\\"zero position amount\\\");\\n\\n                // check tp sl\\n                require(request.tp <= afterPosition && request.sl <= afterPosition, \\\"tp/sl exceeds max size\\\");\\n                require(request.tp == 0 || !positionHasTpSl[positionKey][TradingTypes.TradeType.TP], \\\"tp already exists\\\");\\n                require(request.sl == 0 || !positionHasTpSl[positionKey][TradingTypes.TradeType.SL], \\\"sl already exists\\\");\\n            }\\n            if (request.sizeAmount <= 0) {\\n                // check leverage\\n                position.validLeverage(price, request.collateral, uint256(request.sizeAmount.abs()), false, tradingConfig.minLeverage, tradingConfig.maxLeverage, tradingConfig.maxPositionAmount);\\n\\n                //TODO if request size exceed position size, can calculate the max size\\n                require(uint256(request.sizeAmount.abs()) <= position.positionAmount - positionDecreaseTotalAmount[positionKey], \\\"decrease amount exceed position\\\");\\n            }\\n\\n            // transfer collateral\\n            if (request.collateral > 0) {\\n                IERC20(pair.stableToken).safeTransferFrom(account, address(positionManager), request.collateral.abs());\\n            }\\n        }\\n\\n        if (request.tradeType == TradingTypes.TradeType.TP || request.tradeType == TradingTypes.TradeType.SL) {\\n            Position.Info memory position = tradingVault.getPosition(account, request.pairIndex, request.isLong);\\n            require(request.tp <= position.positionAmount && request.sl <= position.positionAmount, \\\"tp/sl exceeds max size\\\");\\n            require(request.collateral == 0, \\\"no collateral required\\\");\\n        }\\n\\n        if (request.sizeAmount > 0) {\\n            return _createIncreaseOrder(\\n                TradingTypes.IncreasePositionRequest({\\n                    account: account,\\n                    pairIndex: request.pairIndex,\\n                    tradeType: request.tradeType,\\n                    collateral: request.collateral,\\n                    openPrice: request.openPrice,\\n                    isLong: request.isLong,\\n                    sizeAmount: uint256(request.sizeAmount),\\n                    tpPrice: request.tpPrice,\\n                    tp: request.tp,\\n                    slPrice: request.slPrice,\\n                    sl: request.sl\\n                })\\n            );\\n        } else if (request.sizeAmount < 0) {\\n            return _createDecreaseOrder(\\n                TradingTypes.DecreasePositionRequest({\\n                    account: account,\\n                    pairIndex: request.pairIndex,\\n                    tradeType: request.tradeType,\\n                    collateral: request.collateral,\\n                    triggerPrice: request.openPrice,\\n                    sizeAmount: uint256(request.sizeAmount.abs()),\\n                    isLong: request.isLong\\n                })\\n            );\\n        } else {\\n            //todo\\n            revert('size eq 0');\\n        }\\n        return 0;\\n    }\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) public nonReentrant {\\n        console.log(\\\"cancelIncreaseOrder orderId\\\", orderId, \\\"tradeType\\\", uint8(tradeType));\\n        console.log(\\\"cancelIncreaseOrder orderId\\\", orderId, \\\"isIncrease\\\", isIncrease);\\n\\n        if (isIncrease) {\\n            TradingTypes.IncreasePositionOrder memory order = getIncreaseOrder(orderId, tradeType);\\n            if (order.account == address(0)) {\\n                return;\\n            }\\n            require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || order.account == msg.sender, \\\"no access\\\");\\n\\n            _cancelIncreaseOrder(order);\\n        } else {\\n            TradingTypes.DecreasePositionOrder memory order = getDecreaseOrder(orderId, tradeType);\\n            if (order.account == address(0)) {\\n                return;\\n            }\\n            require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).contractWhiteList(msg.sender) || order.account == msg.sender, \\\"no access\\\");\\n\\n            _cancelDecreaseOrder(order);\\n        }\\n    }\\n\\n    function _checkTradingAmount(uint256 pairIndex, uint256 size) public returns (bool) {\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n        return size >= tradingConfig.minTradeAmount && size <= tradingConfig.maxTradeAmount;\\n    }\\n\\n    function _createIncreaseOrder(TradingTypes.IncreasePositionRequest memory _request) internal returns (uint256) {\\n        TradingTypes.IncreasePositionOrder memory order = TradingTypes.IncreasePositionOrder(\\n            0,\\n            _request.account,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.openPrice,\\n            _request.isLong,\\n            _request.sizeAmount,\\n            _request.tpPrice,\\n            _request.tp,\\n            _request.slPrice,\\n            _request.sl,\\n            block.timestamp\\n        );\\n\\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\\n            order.orderId = increaseMarketOrdersIndex;\\n\\n            increaseMarketOrders[increaseMarketOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            order.orderId = increaseLimitOrdersIndex;\\n\\n            increaseLimitOrders[increaseLimitOrdersIndex++] = order;\\n            console.log(\\\"orderId\\\", order.orderId, \\\"increaseLimitOrdersIndex\\\", increaseLimitOrdersIndex);\\n        } else {\\n            revert(\\\"invalid trade type\\\");\\n        }\\n\\n        this.addOrderToPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            ));\\n\\n        emit CreateIncreaseOrder(\\n            order.account,\\n            order.orderId,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.openPrice,\\n            _request.isLong,\\n            _request.sizeAmount,\\n            _request.tpPrice,\\n            _request.tp,\\n            _request.slPrice,\\n            _request.sl\\n        );\\n        return order.orderId;\\n    }\\n\\n    function _createDecreaseOrder(TradingTypes.DecreasePositionRequest memory _request) internal returns (uint256) {\\n        TradingTypes.DecreasePositionOrder memory order = TradingTypes.DecreasePositionOrder(\\n            0, // orderId\\n            _request.account,\\n            _request.pairIndex,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.triggerPrice,\\n            _request.sizeAmount,\\n            _request.isLong,\\n            false, // abovePrice\\n            block.timestamp,\\n            false\\n        );\\n\\n        // abovePrice\\n        // market\\uff1along: true,  short: false\\n        //  limit\\uff1along: false, short: true\\n        //     tp\\uff1along: false, short: true\\n        //     sl\\uff1along: true,  short: false\\n        if (_request.tradeType == TradingTypes.TradeType.MARKET) {\\n            order.orderId = decreaseMarketOrdersIndex;\\n            order.abovePrice = _request.isLong;\\n\\n            decreaseMarketOrders[decreaseMarketOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.LIMIT) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = !_request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n        } else if (_request.tradeType == TradingTypes.TradeType.TP) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = !_request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\\n            positionHasTpSl[positionKey][TradingTypes.TradeType.TP] = true;\\n        } else if (_request.tradeType == TradingTypes.TradeType.SL) {\\n            order.orderId = decreaseLimitOrdersIndex;\\n            order.abovePrice = _request.isLong;\\n\\n            decreaseLimitOrders[decreaseLimitOrdersIndex++] = order;\\n\\n            bytes32 positionKey = PositionKey.getPositionKey(_request.account, _request.pairIndex, _request.isLong);\\n            positionHasTpSl[positionKey][TradingTypes.TradeType.SL] = true;\\n        } else {\\n            revert(\\\"invalid trade type\\\");\\n        }\\n\\n        // add decrease order\\n        this.addOrderToPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            ));\\n\\n        emit CreateDecreaseOrder(\\n            order.account,\\n            order.orderId,\\n            _request.tradeType,\\n            _request.collateral,\\n            _request.pairIndex,\\n            _request.triggerPrice,\\n            _request.sizeAmount,\\n            _request.isLong,\\n            order.abovePrice\\n        );\\n        return order.orderId;\\n    }\\n\\n    function _cancelIncreaseOrder(TradingTypes.IncreasePositionOrder memory order) internal {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\\n\\n        if (order.collateral > 0) {\\n            IERC20(pair.stableToken).safeTransfer(order.account, order.collateral.abs());\\n        }\\n\\n        this.removeOrderFromPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            ));\\n\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            delete increaseMarketOrders[order.orderId];\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            delete increaseLimitOrders[order.orderId];\\n        }\\n\\n        emit CancelIncreaseOrder(order.account, order.orderId, order.tradeType);\\n    }\\n\\n    function _cancelDecreaseOrder(TradingTypes.DecreasePositionOrder memory order) internal {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\\n\\n        if (order.collateral > 0) {\\n            IERC20(pair.stableToken).safeTransfer(order.account, order.collateral.abs());\\n        }\\n\\n        this.removeOrderFromPosition(\\n            PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            ));\\n\\n        bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            delete decreaseMarketOrders[order.orderId];\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            delete decreaseLimitOrders[order.orderId];\\n        } else {\\n            positionHasTpSl[key][order.tradeType] = false;\\n            delete decreaseLimitOrders[order.orderId];\\n        }\\n\\n        emit CancelDecreaseOrder(order.account, order.orderId, order.tradeType);\\n    }\\n\\n    function getIncreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) public view returns (TradingTypes.IncreasePositionOrder memory order) {\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = increaseMarketOrders[orderId];\\n        } else if (tradeType == TradingTypes.TradeType.LIMIT) {\\n            order = increaseLimitOrders[orderId];\\n        } else {\\n            revert(\\\"invalid trade type\\\");\\n        }\\n        return order;\\n    }\\n\\n    function getDecreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) public view returns (TradingTypes.DecreasePositionOrder memory order) {\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = decreaseMarketOrders[orderId];\\n        } else {\\n            order = decreaseLimitOrders[orderId];\\n        }\\n        return order;\\n    }\\n\\n    function addOrderToPosition(PositionOrder memory order) public onlyHandler {\\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\\n        positionOrderIndex[positionKey][orderKey] = positionOrders[positionKey].length;\\n        positionOrders[positionKey].push(order);\\n        console.log(\\\"positionOrders add orderId\\\", order.orderId, \\\"tradeType\\\", uint8(order.tradeType));\\n\\n        if (!order.isIncrease && (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)) {\\n            positionDecreaseTotalAmount[positionKey] += order.sizeAmount;\\n        }\\n    }\\n\\n    function removeOrderFromPosition(PositionOrder memory order) public onlyHandler {\\n        console.log(\\\"removeOrderFromPosition account %s orderId %s tradeType %s \\\", order.account, order.orderId, uint8(order.tradeType));\\n        bytes32 positionKey = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n        bytes32 orderKey = PositionKey.getOrderKey(order.isIncrease, order.tradeType, order.orderId);\\n\\n        uint256 index = positionOrderIndex[positionKey][orderKey];\\n        uint256 lastIndex = positionOrders[positionKey].length - 1;\\n\\n        if (index < lastIndex) {\\n            // swap last order\\n            PositionOrder memory lastOrder = positionOrders[positionKey][positionOrders[positionKey].length - 1];\\n            bytes32 lastOrderKey = PositionKey.getOrderKey(lastOrder.isIncrease, lastOrder.tradeType, lastOrder.orderId);\\n\\n            positionOrders[positionKey][index] = lastOrder;\\n            positionOrderIndex[positionKey][lastOrderKey] = index;\\n        }\\n        delete positionOrderIndex[positionKey][orderKey];\\n        positionOrders[positionKey].pop();\\n        console.log(\\\"positionOrders remove orderId\\\", order.orderId, \\\"tradeType\\\", uint8(order.tradeType));\\n\\n        if (!order.isIncrease && (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT)) {\\n            positionDecreaseTotalAmount[positionKey] -= order.sizeAmount;\\n        }\\n    }\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) public onlyHandler {\\n        positionHasTpSl[key][tradeType] = has;\\n    }\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) public onlyHandler {\\n        delete increaseMarketOrders[orderId];\\n    }\\n\\n    function removeIncreaseLimitOrders(uint256 orderId) public onlyHandler {\\n        delete increaseLimitOrders[orderId];\\n    }\\n\\n    function removeDecreaseMarketOrders(uint256 orderId) public onlyHandler {\\n        delete decreaseMarketOrders[orderId];\\n    }\\n\\n    function removeDecreaseLimitOrders(uint256 orderId) public onlyHandler {\\n        delete decreaseLimitOrders[orderId];\\n    }\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) public onlyHandler {\\n        TradingTypes.DecreasePositionOrder storage order;\\n        if (tradeType == TradingTypes.TradeType.MARKET) {\\n            order = decreaseMarketOrders[orderId];\\n        } else {\\n            order = decreaseLimitOrders[orderId];\\n            require(order.tradeType == tradeType, \\\"trade type not match\\\");\\n        }\\n        order.needADL = needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x0f1a5e0ba60fb0f19a41be6824e1525bbabf59a211fd464dbbc67a551b12223c\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200011b57601f6200467638819003918201601f191683019291906001600160401b0384118385101762000120578160a092849260409687528339810103126200011b5780516001600160a01b039182821682036200011b576020810151918383168093036200011b5784820151908482168092036200011b576060830151928584168094036200011b57608001519485168095036200011b5733600052603360205285600020600160ff1982541617905560805260018060a01b0319928386541617855582604154161760415581604254161760425560435416176043555161453f9081620001378239608051818181610557015281816108be015281816111490152818161144a0152818161388f0152613bc00152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004908136101561001757600080fd5b60009060e08235811c918262c5ecd21461160b57508163021a34dd146115715781630573a06e146113905781630bc628fb1461134e5781630f727949146111785781631848effa146111345781632670e98d14610d515781633946fd4214610d325781633954552914610d005781633e5005e514610cb15781634136de9f14610c3c57816346ea87af14610bfe578163499a83c714610bd55781634cc42b5114610ae65781634d3cb81014610a97578163671e110714610a165781636881d8cb146108835781636db415cc146108565781636e30e016146107d5578163791b98bc146107ac57816379f5927e1461078d5781638168c0b6146106eb57816386249bab146106cc57816390a4a7681461067d5781639cb7de4b1461050f578163a31a7b44146104e6578163ab9b4ca8146104c7578163be82e5b114610478578163c1872cf314610383578163c25098591461035c578163eeaa783a14610333578163f1bd27a81461030a578163f9d244fd1461025257508063fc2a5b1d146102265763fca5c793146101a757600080fd5b34610223576020366003190112610223578261021f91833581526036602052209283549360018060a01b036001820154169360028201549560ff60038401541691830154600584015460068501549160078601549460ff600960088901549801541697519a8b9a60ff808960081c169816968c6116a8565b0390f35b80fd5b50823461024e578160031936011261024e57805490516001600160a01b039091168152602090f35b5080fd5b84915034610306576101a0925061027161026b3661197d565b906140d8565b908251928251845260018060a01b03602084015116602085015280830151908401526102a560608301516060850190611685565b6080820151608084015260a082015160a084015260c0820151151560c0840152808201519083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152f35b8280fd5b82853461024e578160031936011261024e5760425490516001600160a01b039091168152602090f35b82853461024e578160031936011261024e5760435490516001600160a01b039091168152602090f35b82346102235761037c61036e3661199c565b91610377613038565b613782565b6001805580f35b5050903461024e576103943661199c565b923033148015610463575b6103a89061436f565b8082101561045057816103d257505082936009916103cf9452603660205284205b016119e9565b80f35b90918452603a6020528484209160ff6003840154168281101561043d570361040357506103cf9293506009906103c9565b606490602086519162461bcd60e51b835282015260146024820152730e8e4c2c8ca40e8f2e0ca40dcdee840dac2e8c6d60631b6044820152fd5b634e487b7160e01b865260218352602486fd5b634e487b7160e01b855260219052602484fd5b5033855260336020528585205460ff1661039f565b50509134610306576020366003190112610306576103cf9130331480156104b2575b6104a39061436f565b3583526036602052822061409c565b5033845260336020528184205460ff1661049a565b82853461024e578160031936011261024e576020906039549051908152f35b82853461024e578160031936011261024e5760415490516001600160a01b039091168152602090f35b5050823461024e578060031936011261024e5761052a61180e565b906024359182151583036106795781516351331ad760e01b81526020956001600160a01b039291878183817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561063857849189918991610642575b506024875180948193630935e01b60e21b83523388840152165afa9081156106385787916105ff575b50156105d05750946033916103cf95961686525283206119e9565b835162461bcd60e51b8152908101879052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508781813d8311610631575b61061681836117ed565b8101031261062d57610627906119dc565b886105b5565b8680fd5b503d61060c565b85513d89823e3d90fd5b92505081813d8311610672575b61065981836117ed565b8101031261062d578761066c85926119c8565b8a61058c565b503d61064f565b8380fd5b50509134610306576020366003190112610306576103cf9130331480156106b7575b6106a89061436f565b35835260386020528220613fd5565b5033845260336020528184205460ff1661069f565b82853461024e578160031936011261024e576020906035549051908152f35b8491503461030657610160925061070a6107043661197d565b90614251565b908251928251845260018060a01b036020840151166020850152808301519084015261073e60608301516060850190611685565b6080820151608084015260a082015160a084015260c082015160c08401528082015115159083015261010080820151151590830152610120808201519083015261014080910151151590820152f35b82853461024e578160031936011261024e57602090603b549051908152f35b82853461024e578160031936011261024e5760445490516001600160a01b039091168152602090f35b83858434610223576020366003190112610223578161021f91843581526038602052209182549260018060a01b036001820154169460028201549060ff60038401541690830154600584015460ff600686015416600786015491600887015493600988015495600a89015497600c600b8b01549a01549a519d8e9d8e611911565b838584346102235781600319360112610223575061087a6020926024359035613ef5565b90519015158152f35b5050823461024e5760209283600319360112610306576108a161180e565b82516351331ad760e01b815290916001600160a01b0391868183817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156109d5578391889188916109df575b506024875180948193637be53ca160e01b83523388840152165afa9081156109d557869161099c575b501561096957507ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e9394816044549316918260018060a01b0319851617604455845193168352820152a180f35b835162461bcd60e51b8152908101869052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508681813d83116109ce575b6109b381836117ed565b810103126109ca576109c4906119dc565b8761091c565b8580fd5b503d6109a9565b85513d88823e3d90fd5b92505081813d8311610a0f575b6109f681836117ed565b810103126109ca5786610a0984926119c8565b896108f3565b503d6109ec565b83858434610223576020366003190112610223578161021f91843581526034602052209182549260018060a01b036001820154169460028201549060ff60038401541690830154600584015460ff600686015416600786015491600887015493600988015495600a89015497600c600b8b01549a01549a519d8e9d8e611911565b50509134610306576020366003190112610306576103cf913033148015610ad1575b610ac29061436f565b358352603a602052822061409c565b5033845260336020528184205460ff16610ab9565b929190503461022357602090816003193601126102235782358152603c8252848120938454936001600160401b038511610bc2575094939290918451916005610b338383831b01856117ed565b8184528284018096865283862086915b848310610b985750505050508451958695828701938388525180945286019493905b838210610b725786860387f35b918496508286610b8860019496988498516118bc565b0196019201869594929391610b65565b8386600192610bad859e999b9a9c9d9e611a06565b81520192019201919099989795969499610b43565b634e487b7160e01b835260419052602482fd5b82858534610306576020366003190112610306576020928291358152603e845220549051908152f35b82853461024e57602036600319011261024e5760209160ff9082906001600160a01b03610c2961180e565b1681526033855220541690519015158152f35b8285853461030657606036600319011261030657602435908082101561067957604435918215158303610cad576103cf93610c93923033148015610c98575b610c849061436f565b358652603f6020528520611829565b6119e9565b5033875260336020528187205460ff16610c7b565b8480fd5b50509134610306576020366003190112610306576103cf913033148015610ceb575b610cdc9061436f565b35835260346020528220613fd5565b5033845260336020528184205460ff16610cd3565b828585346103065781600319360112610306576020928291358152603d84528181206024358252845220549051908152f35b82853461024e578160031936011261024e576020906037549051908152f35b8285853461030657610d6236611841565b91303314801561111f575b610d769061436f565b60018060a01b03928381511660a082019485519460808401918251968288101561110c57898091885196610da9886117d2565b603b885260209a8b89017f72656d6f76654f7264657246726f6d506f736974696f6e206163636f756e742090528a89017a012b99037b93232b924b21012b9903a3930b232aa3cb8329012b99602d1b90528a519182918d830194637c7a8d8f60e11b865260249b8c85016080905260a48501610e2491613265565b926044850152606484015260ff16608483015203601f1981018252610e4990826117ed565b51905a6a636f6e736f6c652e6c6f6790fa508451168685015186860151151590610e7292613589565b966060850190815115158451848110156110fa5790610e9391835191614461565b898b52603d8952878b20818c528952878b20548a8c52603c8a52888c20546000199291908381019081116110e857811061103c575b508a8c52603d8a52888c20908c5289528a88812055898b52603c8952878b20908154801561102a570190610efc8282611709565b6110195785818e809355826001820155826002820155826003820155015555518351838110156110075790610f7291885191610f37836117b7565b601d83527f706f736974696f6e4f72646572732072656d6f7665206f7264657249640000008b84015260ff610f6a61375d565b921692614495565b51159283610fa9575b505050610f86578480f35b610f9f9260c0603e920151948652528320918254611c95565b9055818080808480f35b90918093505182811015610ff55715928315610fcb575b505050868080610f7b565b5192509080831015610fe4575050600114868080610fc0565b634e487b7160e01b88526021905286fd5b50634e487b7160e01b88526021825287fd5b634e487b7160e01b8b5260218452858bfd5b634e487b7160e01b8d528c8652878dfd5b634e487b7160e01b8d5260318652878dfd5b8b8d52603c8b52898d208054848101919082116110d6576110669161106091611709565b50611a06565b606081015115156080820151888110156110c3578f928f928f8f603c889261109a6110a5956110ab9860a089015191614461565b978952528620611709565b906143b3565b8d8252603d8d528b822091528b52898d20558c610ec8565b50634e487b7160e01b8f5260218852898ffd5b634e487b7160e01b8f5260118852898ffd5b634e487b7160e01b8e5260118752888efd5b634e487b7160e01b8c5260218552868cfd5b634e487b7160e01b8a526021835260248afd5b5033845260336020528084205460ff16610d6d565b82853461024e578160031936011261024e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b505091346103065761118936611841565b903033148015611339575b61119d9061436f565b8151602080840151838501519194926111c292151591906001600160a01b0316613589565b93606082018051151590608084019182519084821015611313576111ed9060a0870192835191614461565b888a52603c8852868a205490603d8952878b20908b528852868a2055878952603c8752858920805490600160401b821015611326576110a5828892600161123695018155611709565b51825184811015611313579061128291875191611252836117b7565b601a8352791c1bdcda5d1a5bdb93dc99195c9cc8185919081bdc99195c925960321b8a84015260ff610f6a61375d565b511591826112b8575b5050611295578480f35b6112ae9260c0603e9201519486525283209182546132cd565b9055388080808480f35b90809250518181101561130057159182156112d7575b5050388061128b565b519150808210156112ed575060011438806112ce565b634e487b7160e01b875260219052602486fd5b634e487b7160e01b885260218252602488fd5b634e487b7160e01b8a526021855260248afd5b634e487b7160e01b8b526041865260248bfd5b5033845260336020528084205460ff16611194565b8285853461030657816003193601126103065760243590808210156106795760ff918360209561138593358152603f875220611829565b541690519015158152f35b8484843461022357610160366003190112610223578251916113b18361173b565b6113b961180e565b8352602094602435868501526044358281101561067957858501526064356060850152608435608085015260a43580151581036106795760a085015260c43560c085015260e4359084015261010435610100840152610124356101208401526101443561014084015261142a613038565b825184516351331ad760e01b81526001600160a01b0391821692878282817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156115675790889291869261152c575b5060249088519485938492635401a55160e11b84523390840152165afa9283156115215780936114dd575b5050816114c3916114c8949391156114d3575b50611a6e565b611d04565b906001805551908152f35b90503314866114bd565b909192508582813d831161151a575b6114f681836117ed565b8101031261022357506114c892916115106114c3926119dc565b92938192506114aa565b503d6114ec565b8551903d90823e3d90fd5b8092508391933d8311611560575b61154481836117ed565b81010312610cad5790602461155989936119c8565b919061147f565b503d61153a565b87513d87823e3d90fd5b838584346102235781600319360112610223576024359083358152603c6020528281209081548310156102235750906115a991611709565b506115ff60018060a01b03825416936001830154936002840154916003850154940154948151968752602087015260ff821615159086015260ff8160081c161515606086015260ff608086019160101c16611685565b60a083015260c0820152f35b8390858734610679576020366003190112610679579061021f91839482358152603a6020522080549160018060a01b036001830154169260028301549160ff6003850154169084015460058501549060068601549260078701549560ff600960088a0154990154169860ff808960081c169816968c6116a8565b9060048210156116925752565b634e487b7160e01b600052602160045260246000fd5b9996936101409996936116de929d9c9996936101608d019e8d5260018060a01b031660208d015260408c015260608b0190611685565b608089015260a088015260c0870152151560e086015215156101008501526101208401521515910152565b8054821015611725576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b61016081019081106001600160401b0382111761175757604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b0382111761175757604052565b6001600160401b03811161175757604052565b6101a081019081106001600160401b0382111761175757604052565b604081019081106001600160401b0382111761175757604052565b606081019081106001600160401b0382111761175757604052565b90601f801991011681019081106001600160401b0382111761175757604052565b600435906001600160a01b038216820361182457565b600080fd5b90600481101561169257600052602052604060002090565b60e0906003190112611824576040516118598161176d565b6004356001600160a01b0381168103611824578152602435602082015260443580151581036118245760408201526064358015158103611824576060820152608435600481101561182457608082015260a43560a082015260c43560c082015290565b60c0809160018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261190060808201516080860190611685565b60a081015160a08501520151910152565b9a98969492909d9c9b99979593916101a08c019e8c52600160a01b600190031660208c015260408b015260608a0161194891611685565b608089015260a0880152151560c087015260e08601526101008501526101208401526101408301526101608201526101800152565b6040906003190112611824576004359060243560048110156118245790565b606090600319011261182457600435906024356004811015611824579060443580151581036118245790565b51906001600160a01b038216820361182457565b5190811515820361182457565b9060ff801983541691151516179055565b60048210156116925752565b90604051611a138161176d565b60c06004829460018060a01b03815416845260018101546020850152611a5d60ff600283015481811615156040880152818160081c161515606088015260101c16608086016119fa565b600381015460a08501520154910152565b15611a7557565b60405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b6044820152606490fd5b908160e09103126118245760c060405191611ac08361176d565b611ac9816119c8565b8352611ad7602082016119c8565b6020840152611ae8604082016119c8565b6040840152611af9606082016119dc565b60608401526080810151608084015260a081015160a0840152015160c082015290565b80916101409283910312611824576040519182018281106001600160401b038211176117575760405280518252611b55602082016119c8565b602083015260408101516040830152611b70606082016119dc565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b6001600160a01b0390911681526020810191909152901515604082015260600190565b8091610100928391031261182457604051918201908282106001600160401b038311176117575760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b15611c5757565b60405162461bcd60e51b815260206004820152601660248201527574702f736c2065786365656473206d61782073697a6560501b6044820152606490fd5b91908203918211611ca257565b634e487b7160e01b600052601160045260246000fd5b15611cbf57565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b6044546000916001600160a01b039091169081156130045780516042546040516372c1cc1b60e11b81526001600160a01b0392831660048201819052949290911690602081602481855afa908115612ff9578691612fbf575b50612f86576040805460208501519151632f7ce47360e21b815260048101929092529091906001600160a01b031660e083602481845afa928315612f7b578793612f4a575b50606083015115612f0a5760408501516004811015612ef657158015612edf575b612a7c575b5050505060408101516004811015612a68576002148015612a51575b61294a575b60c0810190838251818113600014612382575050602081015191604082015190600482101561236e5760608301519060808401519060a0850151151590519160e086015193611e62610100880151966101406101208a0151990151996040519b611e528d61173b565b8c5260208c015260408b016119fa565b6060890152608088015260a087015260c086015260e085015261010084015261012083015261014082015260018060a01b03815116916020820151604083015160048110156121d9576060840151608085015160a0860151151560c08701519060e088015192610100890151946101208a0151966101408b0151986040519c611eea8e61179b565b8b8e5260208e015260408d0152611f049060608d016119fa565b60808b015260a08a015260c089015260e0880152610100870152610120860152610140850152610160840152426101808401526040820151600481101561235a576121ed57603554808452611f5881613fae565b603555815260346020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957611fb69060038301613fbd565b6080840151600482015560a08401516005820155611fdd60c08501511515600683016119e9565b60e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155600c6101808501519101555b60018060a01b03602084015116604084015160c08501511515606086015160048110156121c55761207c9087519260e089015194604051966120608861176d565b87526020870152604086015260016060860152608085016119fa565b60a083015260c0820152303b1561024e57604051630f72794960e01b8152906120a99060048301906118bc565b818160e48183305af180156121ba579082916121a6575b505060018060a01b0360208401511691835191602082015190604083015190600482101561219257509161018093917fe83629b11df9fcc6b9ebc666eb284c939d1710576a8d3eac23474d70fae8d47895936060830151608084015160a085015115159060c08601519261216160e088015195610100890151976101406101208b01519a01519a6040519c8d5260208d015260408c015260608b0190611685565b608089015260a088015260c087015260e0860152610100850152610120840152610140830152610160820152a15190565b634e487b7160e01b81526021600452602490fd5b6121af90611788565b6102235780386120c0565b6040513d84823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b6040820151600481101561235a5760010361233d5760395480845261221181613fae565b603955815260386020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d95761226f9060038301613fbd565b6080840151600482015560a0840151600582015561229660c08501511515600683016119e9565b60e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155600c610180850151910155612338835160395490604051906122ed826117b7565b60078252661bdc99195c925960ca1b60208301526040519161230e836117b7565b60188352770d2dcc6e4cac2e6ca98d2dad2e89ee4c8cae4e692dcc8caf60431b6020840152614495565b61201f565b60405162461bcd60e51b81528061235660048201613f81565b0390fd5b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b1215612919576020810151916040820151600481101561236e576123d960608401519160a06123b6608087015195516132b6565b950151151595604051976123c98961176d565b88526020880152604087016119fa565b6060850152608084015260a083015260c082015260018060a01b03815116916020820151604083015160048110156121d957606084015160808501519061244a60a08701519360c0880151151595604051996124348b61173b565b888b5260208b015260408a0152606089016119fa565b608087015260a086015260c085015260e08401528061010084015242610120840152806101408401526040820151600481101561235a576126cb5760375480845260c083015115156101008501526124a181613fae565b603755815260366020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036125709260038301613fbd565b6080850151600482015560a0850151600582015560c085015160068201556125546007820161253860e08801511515826119e9565b610100870151815461ff00191690151560081b61ff0016179055565b61012085015160088201556009610140860151151591016119e9565b60018060a01b03602084015116604084015160e08501511515606086015160048110156121c5576125cc9087519260c089015194604051966125b18861176d565b875260208701526040860152856060860152608085016119fa565b60a083015260c0820152303b1561024e57604051630f72794960e01b8152906125f99060048301906118bc565b818160e48183305af180156121ba576126bc575b506020830151835160408401516001600160a01b0390921693909260048310156121925750917fe71a68544c2c9cf2a006d283baa849468003198fa8d8026335170198a30349dd9391836060610120950151602082015160808301519161269860c060a08601519501511515956101008c0151151597604051998a5260208a01526040890190611685565b6060870152608086015260a085015260c084015260e0830152610100820152a15190565b6126c590611788565b3861260d565b6040820151600481101561235a5760010361276257603b5480845260c0830151156101008501526126fb81613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d9579061250361275d9260038301613fbd565b612570565b6040820151600481101561235a5760020361283d57603b5480845260c08301511561010085015261279281613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036127f49260038301613fbd565b8151602083015160c08401516128179290151591906001600160a01b0316613589565b8152603f602052604081206002825260205260408120600160ff19825416179055612570565b6040820151600481101561235a5760030361233d57603b5480845260c0830151151561010085015261286e81613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036128d09260038301613fbd565b8151602083015160c08401516128f39290151591906001600160a01b0316613589565b8152603f602052604081206003825260205260408120600160ff19825416179055612570565b60405162461bcd60e51b8152602060048201526009602482015268073697a6520657120360bc1b6044820152606490fd5b604254602082015160a083015160405163bc95baad60e01b8152610140939092849284926001600160a01b0316918391829161298d911515908b60048501611bb6565b03915afa908115612a4657906129c392918691612a19575b5060a0610100850151910151809111159182612a0b575b5050611c50565b606081015115611de95760405162461bcd60e51b81526020600482015260166024820152751b9bc818dbdb1b185d195c985b081c995c5d5a5c995960521b6044820152606490fd5b8401511115905038806129bc565b612a399150823d8411612a3f575b612a3181836117ed565b810190611b1c565b386129a5565b503d612a27565b6040513d87823e3d90fd5b5060408101516004811015612a6857600314611de4565b634e487b7160e01b84526021600452602484fd5b60c08501518015908115612ec0575b5015612e8657612ad9906101406020870151612ab060a089019182511515908b613589565b94602089015191511515918a6040519687948593849363bc95baad60e01b855260048501611bb6565b03915afa918215612e7b578892612e58575b5060435484516040516341976e0960e01b81526001600160a01b039182166004820152949160209186916024918391165afa938415612e15578994612e20575b5061010060408401516024604051809581936330a66e1560e01b835260048301525afa918215612e15578992612de2575b5060c087015189811215612c74575b5060c087015189811315612c0e575b5050505050606083015190858213612b93575b80611dc8565b602001516001600160a01b031690612baa906132b6565b604051926323b872dd60e01b6020850152856024850152604484015260648301526064825260a082018281106001600160401b03821117612bfa57604052612bf2919061308e565b388080612b8d565b634e487b7160e01b86526041600452602486fd5b612c6a94612c6393612c3c92612c2860608c0151916132b6565b8251916080602085015194015194896134e0565b505060a0612c4d60c08901516132b6565b930151908952603e602052604089205490611c95565b1015611cb8565b3880808080612b7a565b612c939060608901519084516020860151916080870151938989613309565b508015612da65780612cb4916101008a015111159081612d96575b50611c50565b610100870151158015612d74575b15612d3b57610140870151158015612d19575b15612ce05738612b6b565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b50808952603f6020526040892060038a5260205260ff60408a20541615612cd5565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b50808952603f6020526040892060028a5260205260ff60408a20541615612cc2565b9050610140890151111538612cae565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612e079192506101003d61010011612e0e575b612dff81836117ed565b810190611bd9565b9038612b5c565b503d612df5565b6040513d8b823e3d90fd5b9093506020813d602011612e50575b81612e3c602093836117ed565b81010312612e4c57519238612b2b565b8880fd5b3d9150612e2f565b612e749192506101403d61014011612a3f57612a3181836117ed565b9038612aeb565b6040513d8a823e3d90fd5b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b612ed99150612ed36020880151916132b6565b90613ef5565b38612a8b565b5060408501516004811015612ef657600114611dc3565b634e487b7160e01b88526021600452602488fd5b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b612f6d91935060e03d60e011612f74575b612f6581836117ed565b810190611aa6565b9138611da2565b503d612f5b565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d602011612ff1575b81612fda602093836117ed565b810103126109ca57612feb906119dc565b38611d5d565b3d9150612fcd565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b600260015414613049576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b0316906040516130a3816117b7565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d156131c6573d916001600160401b0383116131b2579061311d9392916040519261311088601f19601f84011601856117ed565b83523d868885013e6131d0565b90815190838215928315613190575b5050509050156131395750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8480929394500103126102235750816131a991016119dc565b8038838161312c565b634e487b7160e01b85526041600452602485fd5b9061311d92916060915b9192901561323257508151156131e4575090565b3b156131ed5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156132455750805190602001fd5b60405162461bcd60e51b8152602060048201529081906123569060248301905b919082519283825260005b848110613291575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201613270565b600160ff1b8114611ca25760000390565b600081126132c15790565b6132ca906132a5565b90565b91908201809211611ca257565b91909160008382019384129112908015821691151617611ca257565b81810292918115918404141715611ca257565b969593909294919661332060a082019687516132cd565b9788156134cf576133359060808301516132da565b956000871261347f57519081613461575b50506000851261341c5761336b9061336684613361886132b6565b6135c4565b6132f6565b8610159182613400575b5050156133c657831161338b576132ca906132b6565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613412925061336690613361866132b6565b8411153880613375565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b8461347793979261347192613504565b906132da565b933880613346565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b969593909294919661332060a08201966134fd8189511015611cb8565b8751611c95565b60c081019081519081851461357f576060015115613555575080518084111561353d57506132ca92613537915190611c95565b906136a9565b6135509291506132ca9361353791611c95565b6132a5565b8381111561356c57506132ca926135379151611c95565b613550929150613537906132ca94611c95565b5050505050600090565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526135be816117d2565b51902090565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146136855784831115613648578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505080925015613693570490565b634e487b7160e01b600052601260045260246000fd5b90600019818309818302918280831092039180830392146137105768327cb2734119d3b7a9601e1b9082821115613648577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b505068327cb2734119d3b7a9601e1b9004919050565b60405190613733826117b7565b601b82527a18d85b98d95b125b98dc99585cd953dc99195c881bdc99195c9259602a1b6020830152565b6040519061376a826117b7565b600982526874726164655479706560b81b6020830152565b90929160009160049485811015613ee25761382f9392916080916137ba6137a7613726565b6137af61375d565b8460ff851692614495565b6137c2613726565b93858060409661381761384589516137d9816117b7565b600a815260209c81696973496e63726561736560b01b8f809401528c51948593840196637d24491d60e01b885260249d8e86015260a4850190613265565b908b6044850152602319848303016064850152613265565b871515608483015203601f1981018352826117ed565b51906a636f6e736f6c652e6c6f675afa5015613b8c57613864916140d8565b84810180519194916001600160a01b039190821615613b815784516351331ad760e01b815287818b817f000000000000000000000000000000000000000000000000000000000000000087165afa908115613b4057839189918691613b4a575b508751635401a55160e11b815233818e015292839188918391165afa908115613b40578491613b0b575b508015613aff575b6138ff90611a6e565b81855416968587019760e08951878d8a519485938492632f7ce47360e21b84528301525afa908115611567578591613ae1575b5060808801518483878313613abd575b5091505082511697519760c088015115159860608901998a518d811015613aaa57613996908b519260e08d0151948c519661397c8861176d565b8752878701528b86015260016060860152608085016119fa565b60a083015260c0820152303b15610cad578651632670e98d60e01b8152906139c1908c8301906118bc565b848160e48183305af1801561156757908591613a96575b505087518a811015613a8457613a535760349087518552526139fb858420613fd5565b5116935194519680881015613a43575050507f7e93a6b00cb3caacf000d7018943b12e2b4ad29e7849df14ebd51caf4fd739b89394613a3e915193849384614023565b0390a1565b634e487b7160e01b825260219052fd5b87518a811015613a8457600114613a6b575b506139fb565b6038908751855252613a7e858420613fd5565b38613a65565b634e487b7160e01b855260218b528585fd5b613a9f90611788565b6106795783386139d8565b50634e487b7160e01b875260218d528787fd5b613ad89301511690613ad286865116916132b6565b9161404d565b38808483613942565b613af9915060e03d8111612f7457612f6581836117ed565b38613932565b508051821633146138f6565b90508781813d8311613b39575b613b2281836117ed565b8101031261067957613b33906119dc565b386138ee565b503d613b18565b86513d86823e3d90fd5b92505081813d8311613b7a575b613b6181836117ed565b810103126106795787613b7484926119c8565b386138c4565b503d613b57565b505050505050509050565b613b9591614251565b84810180519194916001600160a01b039190821615613b815784516351331ad760e01b815287818b817f000000000000000000000000000000000000000000000000000000000000000087165afa908115613b4057839189918691613eab575b508751635401a55160e11b815233818e015292839188918391165afa908115613b40578491613e76575b508015613e6a575b613c3090611a6e565b81855416968587019760e08951878d8a519485938492632f7ce47360e21b84528301525afa908115611567578591613e4c575b5060808801518483878313613e2e575b509150508251169780519860e08901908c8251151560608c019c8d5192831015613e1b578b928d92613ccb9260c08551950151955196613cb28861176d565b8752898701528d8601528a6060860152608085016119fa565b60a083015260c0820152303b1561062d578851632670e98d60e01b815290613cf690828f01906118bc565b868160e48183305af18015613e1157613dfa575b5090613d20918585511691519051151591613589565b88518b811015613de857613d8557506036908751855252613d4285842061409c565b5116935194519680881015613a43575050507fb225fd6bcccad9342bc10ccc7e25ef77175b77348c8393d669ac2dbc98a1ae299394613a3e915193849384614023565b88518b811015613de857600103613daf5750603a908751855252613daa85842061409c565b613d42565b8452603f81528584208851908b821015613de857603a9291613dd091611829565b60ff1981541690558751855252613daa85842061409c565b634e487b7160e01b865260218c528686fd5b95613e09613d20939297611788565b959091613d0a565b89513d89823e3d90fd5b8f8a60218d92634e487b7160e01b835252fd5b613e439301511690613ad286865116916132b6565b38808483613c73565b613e64915060e03d8111612f7457612f6581836117ed565b38613c63565b50805182163314613c27565b90508781813d8311613ea4575b613e8d81836117ed565b8101031261067957613e9e906119dc565b38613c1f565b503d613e83565b92505081813d8311613edb575b613ec281836117ed565b810103126106795787613ed584926119c8565b38613bf5565b503d613eb8565b634e487b7160e01b845260218652602484fd5b6040805490516330a66e1560e01b815260048101929092526101009291908390829060249082906001600160a01b03165afa928315613f7557600093613f56575b505060408201518110159182613f4b57505090565b606001511015919050565b613f6d929350803d10612e0e57612dff81836117ed565b903880613f36565b6040513d6000823e3d90fd5b606090602081526012602082015271696e76616c6964207472616465207479706560701b60408201520190565b6000198114611ca25760010190565b9060048110156116925760ff80198354169116179055565b600c60009182815582600182015582600282015582600382015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015582600b8201550155565b6001600160a01b039091168152602081019190915260608101929161404b9160400190611685565b565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176117575761404b9260405261308e565b60096000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201558260088201550155565b9190916040908151906140ea8261179b565b60009485835285602084015285848401528560608401528560808401528560a08401528560c08401528560e08401526101009186838501526101208781860152610140918883870152610160938985880152610180968a8882015250600481101561423d578061420157509588600c969782999a52603460205220938751976141728961179b565b8554895260018601546001600160a01b031660208a015260028601549089015260038501546141a79060ff1660608a016119fa565b60048501546080890152600585015460a089015260ff600686015416151560c0890152600785015460e0890152600885015490880152600984015490870152600a83015490860152600b8201549085015201549082015290565b600103614225579588600c969782999a52603860205220938751976141728961179b565b865162461bcd60e51b81528061235660048201613f81565b634e487b7160e01b8a52602160045260248afd5b906040918251916142618361173b565b600080845280602085015280858501528060608501528060808501528060a08501528060c08501528060e0850152610100928184860152610120928284870152826101408097015260048110156121d95760ff94926009949288921560001461435a578152603660205220918651966142d98861173b565b8354885260018401546001600160a01b03166020890152600284015490880152600383015461430d908616606089016119fa565b60048301546080880152600583015460a0880152600683015460c0880152846007840154818116151560e08a015260081c1615159087015260088201549086015201541615159082015290565b8152603a60205220918651966142d98861173b565b1561437657565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b919061444b57805182546001600160a01b0319166001600160a01b03919091161782556020810151600183015560408101516002830191906143f7901515836119e9565b6060810151825461ff00191690151560081b61ff00161782556080810151906004821015611692578260c09262ff0000600495549160101b169062ff0000191617905560a081015160038501550151910155565b634e487b7160e01b600052600060045260246000fd5b91604051916020830193151560f81b845260048110156116925760f81b60218301526022820152602281526135be816117d2565b906144f66000949385946144e26040519485936144cb602086019863c67ea9d160e01b8a526080602488015260a4870190613265565b916044860152602319858303016064860152613265565b90608483015203601f1981018352826117ed565b51906a636f6e736f6c652e6c6f675afa5056fea2646970667358221220a56d890244d73ff2146b2995d77938d06615caec44b45dd8ef8035ff8c0bef1064736f6c63430008110033",
  "deployedBytecode": "0x60806040908082526004908136101561001757600080fd5b60009060e08235811c918262c5ecd21461160b57508163021a34dd146115715781630573a06e146113905781630bc628fb1461134e5781630f727949146111785781631848effa146111345781632670e98d14610d515781633946fd4214610d325781633954552914610d005781633e5005e514610cb15781634136de9f14610c3c57816346ea87af14610bfe578163499a83c714610bd55781634cc42b5114610ae65781634d3cb81014610a97578163671e110714610a165781636881d8cb146108835781636db415cc146108565781636e30e016146107d5578163791b98bc146107ac57816379f5927e1461078d5781638168c0b6146106eb57816386249bab146106cc57816390a4a7681461067d5781639cb7de4b1461050f578163a31a7b44146104e6578163ab9b4ca8146104c7578163be82e5b114610478578163c1872cf314610383578163c25098591461035c578163eeaa783a14610333578163f1bd27a81461030a578163f9d244fd1461025257508063fc2a5b1d146102265763fca5c793146101a757600080fd5b34610223576020366003190112610223578261021f91833581526036602052209283549360018060a01b036001820154169360028201549560ff60038401541691830154600584015460068501549160078601549460ff600960088901549801541697519a8b9a60ff808960081c169816968c6116a8565b0390f35b80fd5b50823461024e578160031936011261024e57805490516001600160a01b039091168152602090f35b5080fd5b84915034610306576101a0925061027161026b3661197d565b906140d8565b908251928251845260018060a01b03602084015116602085015280830151908401526102a560608301516060850190611685565b6080820151608084015260a082015160a084015260c0820151151560c0840152808201519083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152f35b8280fd5b82853461024e578160031936011261024e5760425490516001600160a01b039091168152602090f35b82853461024e578160031936011261024e5760435490516001600160a01b039091168152602090f35b82346102235761037c61036e3661199c565b91610377613038565b613782565b6001805580f35b5050903461024e576103943661199c565b923033148015610463575b6103a89061436f565b8082101561045057816103d257505082936009916103cf9452603660205284205b016119e9565b80f35b90918452603a6020528484209160ff6003840154168281101561043d570361040357506103cf9293506009906103c9565b606490602086519162461bcd60e51b835282015260146024820152730e8e4c2c8ca40e8f2e0ca40dcdee840dac2e8c6d60631b6044820152fd5b634e487b7160e01b865260218352602486fd5b634e487b7160e01b855260219052602484fd5b5033855260336020528585205460ff1661039f565b50509134610306576020366003190112610306576103cf9130331480156104b2575b6104a39061436f565b3583526036602052822061409c565b5033845260336020528184205460ff1661049a565b82853461024e578160031936011261024e576020906039549051908152f35b82853461024e578160031936011261024e5760415490516001600160a01b039091168152602090f35b5050823461024e578060031936011261024e5761052a61180e565b906024359182151583036106795781516351331ad760e01b81526020956001600160a01b039291878183817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561063857849189918991610642575b506024875180948193630935e01b60e21b83523388840152165afa9081156106385787916105ff575b50156105d05750946033916103cf95961686525283206119e9565b835162461bcd60e51b8152908101879052600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b90508781813d8311610631575b61061681836117ed565b8101031261062d57610627906119dc565b886105b5565b8680fd5b503d61060c565b85513d89823e3d90fd5b92505081813d8311610672575b61065981836117ed565b8101031261062d578761066c85926119c8565b8a61058c565b503d61064f565b8380fd5b50509134610306576020366003190112610306576103cf9130331480156106b7575b6106a89061436f565b35835260386020528220613fd5565b5033845260336020528184205460ff1661069f565b82853461024e578160031936011261024e576020906035549051908152f35b8491503461030657610160925061070a6107043661197d565b90614251565b908251928251845260018060a01b036020840151166020850152808301519084015261073e60608301516060850190611685565b6080820151608084015260a082015160a084015260c082015160c08401528082015115159083015261010080820151151590830152610120808201519083015261014080910151151590820152f35b82853461024e578160031936011261024e57602090603b549051908152f35b82853461024e578160031936011261024e5760445490516001600160a01b039091168152602090f35b83858434610223576020366003190112610223578161021f91843581526038602052209182549260018060a01b036001820154169460028201549060ff60038401541690830154600584015460ff600686015416600786015491600887015493600988015495600a89015497600c600b8b01549a01549a519d8e9d8e611911565b838584346102235781600319360112610223575061087a6020926024359035613ef5565b90519015158152f35b5050823461024e5760209283600319360112610306576108a161180e565b82516351331ad760e01b815290916001600160a01b0391868183817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156109d5578391889188916109df575b506024875180948193637be53ca160e01b83523388840152165afa9081156109d557869161099c575b501561096957507ff105ec4818f6dabbb000fe156cb8096a5e98f3124a5c11a0533c0fc4a7bb678e9394816044549316918260018060a01b0319851617604455845193168352820152a180f35b835162461bcd60e51b8152908101869052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508681813d83116109ce575b6109b381836117ed565b810103126109ca576109c4906119dc565b8761091c565b8580fd5b503d6109a9565b85513d88823e3d90fd5b92505081813d8311610a0f575b6109f681836117ed565b810103126109ca5786610a0984926119c8565b896108f3565b503d6109ec565b83858434610223576020366003190112610223578161021f91843581526034602052209182549260018060a01b036001820154169460028201549060ff60038401541690830154600584015460ff600686015416600786015491600887015493600988015495600a89015497600c600b8b01549a01549a519d8e9d8e611911565b50509134610306576020366003190112610306576103cf913033148015610ad1575b610ac29061436f565b358352603a602052822061409c565b5033845260336020528184205460ff16610ab9565b929190503461022357602090816003193601126102235782358152603c8252848120938454936001600160401b038511610bc2575094939290918451916005610b338383831b01856117ed565b8184528284018096865283862086915b848310610b985750505050508451958695828701938388525180945286019493905b838210610b725786860387f35b918496508286610b8860019496988498516118bc565b0196019201869594929391610b65565b8386600192610bad859e999b9a9c9d9e611a06565b81520192019201919099989795969499610b43565b634e487b7160e01b835260419052602482fd5b82858534610306576020366003190112610306576020928291358152603e845220549051908152f35b82853461024e57602036600319011261024e5760209160ff9082906001600160a01b03610c2961180e565b1681526033855220541690519015158152f35b8285853461030657606036600319011261030657602435908082101561067957604435918215158303610cad576103cf93610c93923033148015610c98575b610c849061436f565b358652603f6020528520611829565b6119e9565b5033875260336020528187205460ff16610c7b565b8480fd5b50509134610306576020366003190112610306576103cf913033148015610ceb575b610cdc9061436f565b35835260346020528220613fd5565b5033845260336020528184205460ff16610cd3565b828585346103065781600319360112610306576020928291358152603d84528181206024358252845220549051908152f35b82853461024e578160031936011261024e576020906037549051908152f35b8285853461030657610d6236611841565b91303314801561111f575b610d769061436f565b60018060a01b03928381511660a082019485519460808401918251968288101561110c57898091885196610da9886117d2565b603b885260209a8b89017f72656d6f76654f7264657246726f6d506f736974696f6e206163636f756e742090528a89017a012b99037b93232b924b21012b9903a3930b232aa3cb8329012b99602d1b90528a519182918d830194637c7a8d8f60e11b865260249b8c85016080905260a48501610e2491613265565b926044850152606484015260ff16608483015203601f1981018252610e4990826117ed565b51905a6a636f6e736f6c652e6c6f6790fa508451168685015186860151151590610e7292613589565b966060850190815115158451848110156110fa5790610e9391835191614461565b898b52603d8952878b20818c528952878b20548a8c52603c8a52888c20546000199291908381019081116110e857811061103c575b508a8c52603d8a52888c20908c5289528a88812055898b52603c8952878b20908154801561102a570190610efc8282611709565b6110195785818e809355826001820155826002820155826003820155015555518351838110156110075790610f7291885191610f37836117b7565b601d83527f706f736974696f6e4f72646572732072656d6f7665206f7264657249640000008b84015260ff610f6a61375d565b921692614495565b51159283610fa9575b505050610f86578480f35b610f9f9260c0603e920151948652528320918254611c95565b9055818080808480f35b90918093505182811015610ff55715928315610fcb575b505050868080610f7b565b5192509080831015610fe4575050600114868080610fc0565b634e487b7160e01b88526021905286fd5b50634e487b7160e01b88526021825287fd5b634e487b7160e01b8b5260218452858bfd5b634e487b7160e01b8d528c8652878dfd5b634e487b7160e01b8d5260318652878dfd5b8b8d52603c8b52898d208054848101919082116110d6576110669161106091611709565b50611a06565b606081015115156080820151888110156110c3578f928f928f8f603c889261109a6110a5956110ab9860a089015191614461565b978952528620611709565b906143b3565b8d8252603d8d528b822091528b52898d20558c610ec8565b50634e487b7160e01b8f5260218852898ffd5b634e487b7160e01b8f5260118852898ffd5b634e487b7160e01b8e5260118752888efd5b634e487b7160e01b8c5260218552868cfd5b634e487b7160e01b8a526021835260248afd5b5033845260336020528084205460ff16610d6d565b82853461024e578160031936011261024e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b505091346103065761118936611841565b903033148015611339575b61119d9061436f565b8151602080840151838501519194926111c292151591906001600160a01b0316613589565b93606082018051151590608084019182519084821015611313576111ed9060a0870192835191614461565b888a52603c8852868a205490603d8952878b20908b528852868a2055878952603c8752858920805490600160401b821015611326576110a5828892600161123695018155611709565b51825184811015611313579061128291875191611252836117b7565b601a8352791c1bdcda5d1a5bdb93dc99195c9cc8185919081bdc99195c925960321b8a84015260ff610f6a61375d565b511591826112b8575b5050611295578480f35b6112ae9260c0603e9201519486525283209182546132cd565b9055388080808480f35b90809250518181101561130057159182156112d7575b5050388061128b565b519150808210156112ed575060011438806112ce565b634e487b7160e01b875260219052602486fd5b634e487b7160e01b885260218252602488fd5b634e487b7160e01b8a526021855260248afd5b634e487b7160e01b8b526041865260248bfd5b5033845260336020528084205460ff16611194565b8285853461030657816003193601126103065760243590808210156106795760ff918360209561138593358152603f875220611829565b541690519015158152f35b8484843461022357610160366003190112610223578251916113b18361173b565b6113b961180e565b8352602094602435868501526044358281101561067957858501526064356060850152608435608085015260a43580151581036106795760a085015260c43560c085015260e4359084015261010435610100840152610124356101208401526101443561014084015261142a613038565b825184516351331ad760e01b81526001600160a01b0391821692878282817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156115675790889291869261152c575b5060249088519485938492635401a55160e11b84523390840152165afa9283156115215780936114dd575b5050816114c3916114c8949391156114d3575b50611a6e565b611d04565b906001805551908152f35b90503314866114bd565b909192508582813d831161151a575b6114f681836117ed565b8101031261022357506114c892916115106114c3926119dc565b92938192506114aa565b503d6114ec565b8551903d90823e3d90fd5b8092508391933d8311611560575b61154481836117ed565b81010312610cad5790602461155989936119c8565b919061147f565b503d61153a565b87513d87823e3d90fd5b838584346102235781600319360112610223576024359083358152603c6020528281209081548310156102235750906115a991611709565b506115ff60018060a01b03825416936001830154936002840154916003850154940154948151968752602087015260ff821615159086015260ff8160081c161515606086015260ff608086019160101c16611685565b60a083015260c0820152f35b8390858734610679576020366003190112610679579061021f91839482358152603a6020522080549160018060a01b036001830154169260028301549160ff6003850154169084015460058501549060068601549260078701549560ff600960088a0154990154169860ff808960081c169816968c6116a8565b9060048210156116925752565b634e487b7160e01b600052602160045260246000fd5b9996936101409996936116de929d9c9996936101608d019e8d5260018060a01b031660208d015260408c015260608b0190611685565b608089015260a088015260c0870152151560e086015215156101008501526101208401521515910152565b8054821015611725576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b61016081019081106001600160401b0382111761175757604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b0382111761175757604052565b6001600160401b03811161175757604052565b6101a081019081106001600160401b0382111761175757604052565b604081019081106001600160401b0382111761175757604052565b606081019081106001600160401b0382111761175757604052565b90601f801991011681019081106001600160401b0382111761175757604052565b600435906001600160a01b038216820361182457565b600080fd5b90600481101561169257600052602052604060002090565b60e0906003190112611824576040516118598161176d565b6004356001600160a01b0381168103611824578152602435602082015260443580151581036118245760408201526064358015158103611824576060820152608435600481101561182457608082015260a43560a082015260c43560c082015290565b60c0809160018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261190060808201516080860190611685565b60a081015160a08501520151910152565b9a98969492909d9c9b99979593916101a08c019e8c52600160a01b600190031660208c015260408b015260608a0161194891611685565b608089015260a0880152151560c087015260e08601526101008501526101208401526101408301526101608201526101800152565b6040906003190112611824576004359060243560048110156118245790565b606090600319011261182457600435906024356004811015611824579060443580151581036118245790565b51906001600160a01b038216820361182457565b5190811515820361182457565b9060ff801983541691151516179055565b60048210156116925752565b90604051611a138161176d565b60c06004829460018060a01b03815416845260018101546020850152611a5d60ff600283015481811615156040880152818160081c161515606088015260101c16608086016119fa565b600381015460a08501520154910152565b15611a7557565b60405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b6044820152606490fd5b908160e09103126118245760c060405191611ac08361176d565b611ac9816119c8565b8352611ad7602082016119c8565b6020840152611ae8604082016119c8565b6040840152611af9606082016119dc565b60608401526080810151608084015260a081015160a0840152015160c082015290565b80916101409283910312611824576040519182018281106001600160401b038211176117575760405280518252611b55602082016119c8565b602083015260408101516040830152611b70606082016119dc565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b6001600160a01b0390911681526020810191909152901515604082015260600190565b8091610100928391031261182457604051918201908282106001600160401b038311176117575760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b15611c5757565b60405162461bcd60e51b815260206004820152601660248201527574702f736c2065786365656473206d61782073697a6560501b6044820152606490fd5b91908203918211611ca257565b634e487b7160e01b600052601160045260246000fd5b15611cbf57565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b6044546000916001600160a01b039091169081156130045780516042546040516372c1cc1b60e11b81526001600160a01b0392831660048201819052949290911690602081602481855afa908115612ff9578691612fbf575b50612f86576040805460208501519151632f7ce47360e21b815260048101929092529091906001600160a01b031660e083602481845afa928315612f7b578793612f4a575b50606083015115612f0a5760408501516004811015612ef657158015612edf575b612a7c575b5050505060408101516004811015612a68576002148015612a51575b61294a575b60c0810190838251818113600014612382575050602081015191604082015190600482101561236e5760608301519060808401519060a0850151151590519160e086015193611e62610100880151966101406101208a0151990151996040519b611e528d61173b565b8c5260208c015260408b016119fa565b6060890152608088015260a087015260c086015260e085015261010084015261012083015261014082015260018060a01b03815116916020820151604083015160048110156121d9576060840151608085015160a0860151151560c08701519060e088015192610100890151946101208a0151966101408b0151986040519c611eea8e61179b565b8b8e5260208e015260408d0152611f049060608d016119fa565b60808b015260a08a015260c089015260e0880152610100870152610120860152610140850152610160840152426101808401526040820151600481101561235a576121ed57603554808452611f5881613fae565b603555815260346020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957611fb69060038301613fbd565b6080840151600482015560a08401516005820155611fdd60c08501511515600683016119e9565b60e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155600c6101808501519101555b60018060a01b03602084015116604084015160c08501511515606086015160048110156121c55761207c9087519260e089015194604051966120608861176d565b87526020870152604086015260016060860152608085016119fa565b60a083015260c0820152303b1561024e57604051630f72794960e01b8152906120a99060048301906118bc565b818160e48183305af180156121ba579082916121a6575b505060018060a01b0360208401511691835191602082015190604083015190600482101561219257509161018093917fe83629b11df9fcc6b9ebc666eb284c939d1710576a8d3eac23474d70fae8d47895936060830151608084015160a085015115159060c08601519261216160e088015195610100890151976101406101208b01519a01519a6040519c8d5260208d015260408c015260608b0190611685565b608089015260a088015260c087015260e0860152610100850152610120840152610140830152610160820152a15190565b634e487b7160e01b81526021600452602490fd5b6121af90611788565b6102235780386120c0565b6040513d84823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b6040820151600481101561235a5760010361233d5760395480845261221181613fae565b603955815260386020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d95761226f9060038301613fbd565b6080840151600482015560a0840151600582015561229660c08501511515600683016119e9565b60e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155600c610180850151910155612338835160395490604051906122ed826117b7565b60078252661bdc99195c925960ca1b60208301526040519161230e836117b7565b60188352770d2dcc6e4cac2e6ca98d2dad2e89ee4c8cae4e692dcc8caf60431b6020840152614495565b61201f565b60405162461bcd60e51b81528061235660048201613f81565b0390fd5b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b1215612919576020810151916040820151600481101561236e576123d960608401519160a06123b6608087015195516132b6565b950151151595604051976123c98961176d565b88526020880152604087016119fa565b6060850152608084015260a083015260c082015260018060a01b03815116916020820151604083015160048110156121d957606084015160808501519061244a60a08701519360c0880151151595604051996124348b61173b565b888b5260208b015260408a0152606089016119fa565b608087015260a086015260c085015260e08401528061010084015242610120840152806101408401526040820151600481101561235a576126cb5760375480845260c083015115156101008501526124a181613fae565b603755815260366020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036125709260038301613fbd565b6080850151600482015560a0850151600582015560c085015160068201556125546007820161253860e08801511515826119e9565b610100870151815461ff00191690151560081b61ff0016179055565b61012085015160088201556009610140860151151591016119e9565b60018060a01b03602084015116604084015160e08501511515606086015160048110156121c5576125cc9087519260c089015194604051966125b18861176d565b875260208701526040860152856060860152608085016119fa565b60a083015260c0820152303b1561024e57604051630f72794960e01b8152906125f99060048301906118bc565b818160e48183305af180156121ba576126bc575b506020830151835160408401516001600160a01b0390921693909260048310156121925750917fe71a68544c2c9cf2a006d283baa849468003198fa8d8026335170198a30349dd9391836060610120950151602082015160808301519161269860c060a08601519501511515956101008c0151151597604051998a5260208a01526040890190611685565b6060870152608086015260a085015260c084015260e0830152610100820152a15190565b6126c590611788565b3861260d565b6040820151600481101561235a5760010361276257603b5480845260c0830151156101008501526126fb81613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d9579061250361275d9260038301613fbd565b612570565b6040820151600481101561235a5760020361283d57603b5480845260c08301511561010085015261279281613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036127f49260038301613fbd565b8151602083015160c08401516128179290151591906001600160a01b0316613589565b8152603f602052604081206002825260205260408120600160ff19825416179055612570565b6040820151600481101561235a5760030361233d57603b5480845260c0830151151561010085015261286e81613fae565b603b558152603a6020908152604080832085518155918501516001830180546001600160a01b0319166001600160a01b03929092169190911790558401516002820155606084015160048110156121d957906125036128d09260038301613fbd565b8151602083015160c08401516128f39290151591906001600160a01b0316613589565b8152603f602052604081206003825260205260408120600160ff19825416179055612570565b60405162461bcd60e51b8152602060048201526009602482015268073697a6520657120360bc1b6044820152606490fd5b604254602082015160a083015160405163bc95baad60e01b8152610140939092849284926001600160a01b0316918391829161298d911515908b60048501611bb6565b03915afa908115612a4657906129c392918691612a19575b5060a0610100850151910151809111159182612a0b575b5050611c50565b606081015115611de95760405162461bcd60e51b81526020600482015260166024820152751b9bc818dbdb1b185d195c985b081c995c5d5a5c995960521b6044820152606490fd5b8401511115905038806129bc565b612a399150823d8411612a3f575b612a3181836117ed565b810190611b1c565b386129a5565b503d612a27565b6040513d87823e3d90fd5b5060408101516004811015612a6857600314611de4565b634e487b7160e01b84526021600452602484fd5b60c08501518015908115612ec0575b5015612e8657612ad9906101406020870151612ab060a089019182511515908b613589565b94602089015191511515918a6040519687948593849363bc95baad60e01b855260048501611bb6565b03915afa918215612e7b578892612e58575b5060435484516040516341976e0960e01b81526001600160a01b039182166004820152949160209186916024918391165afa938415612e15578994612e20575b5061010060408401516024604051809581936330a66e1560e01b835260048301525afa918215612e15578992612de2575b5060c087015189811215612c74575b5060c087015189811315612c0e575b5050505050606083015190858213612b93575b80611dc8565b602001516001600160a01b031690612baa906132b6565b604051926323b872dd60e01b6020850152856024850152604484015260648301526064825260a082018281106001600160401b03821117612bfa57604052612bf2919061308e565b388080612b8d565b634e487b7160e01b86526041600452602486fd5b612c6a94612c6393612c3c92612c2860608c0151916132b6565b8251916080602085015194015194896134e0565b505060a0612c4d60c08901516132b6565b930151908952603e602052604089205490611c95565b1015611cb8565b3880808080612b7a565b612c939060608901519084516020860151916080870151938989613309565b508015612da65780612cb4916101008a015111159081612d96575b50611c50565b610100870151158015612d74575b15612d3b57610140870151158015612d19575b15612ce05738612b6b565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b50808952603f6020526040892060038a5260205260ff60408a20541615612cd5565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b50808952603f6020526040892060028a5260205260ff60408a20541615612cc2565b9050610140890151111538612cae565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612e079192506101003d61010011612e0e575b612dff81836117ed565b810190611bd9565b9038612b5c565b503d612df5565b6040513d8b823e3d90fd5b9093506020813d602011612e50575b81612e3c602093836117ed565b81010312612e4c57519238612b2b565b8880fd5b3d9150612e2f565b612e749192506101403d61014011612a3f57612a3181836117ed565b9038612aeb565b6040513d8a823e3d90fd5b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b612ed99150612ed36020880151916132b6565b90613ef5565b38612a8b565b5060408501516004811015612ef657600114611dc3565b634e487b7160e01b88526021600452602488fd5b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b612f6d91935060e03d60e011612f74575b612f6581836117ed565b810190611aa6565b9138611da2565b503d612f5b565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d602011612ff1575b81612fda602093836117ed565b810103126109ca57612feb906119dc565b38611d5d565b3d9150612fcd565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b600260015414613049576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b0316906040516130a3816117b7565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d156131c6573d916001600160401b0383116131b2579061311d9392916040519261311088601f19601f84011601856117ed565b83523d868885013e6131d0565b90815190838215928315613190575b5050509050156131395750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8480929394500103126102235750816131a991016119dc565b8038838161312c565b634e487b7160e01b85526041600452602485fd5b9061311d92916060915b9192901561323257508151156131e4575090565b3b156131ed5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156132455750805190602001fd5b60405162461bcd60e51b8152602060048201529081906123569060248301905b919082519283825260005b848110613291575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201613270565b600160ff1b8114611ca25760000390565b600081126132c15790565b6132ca906132a5565b90565b91908201809211611ca257565b91909160008382019384129112908015821691151617611ca257565b81810292918115918404141715611ca257565b969593909294919661332060a082019687516132cd565b9788156134cf576133359060808301516132da565b956000871261347f57519081613461575b50506000851261341c5761336b9061336684613361886132b6565b6135c4565b6132f6565b8610159182613400575b5050156133c657831161338b576132ca906132b6565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613412925061336690613361866132b6565b8411153880613375565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b8461347793979261347192613504565b906132da565b933880613346565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b969593909294919661332060a08201966134fd8189511015611cb8565b8751611c95565b60c081019081519081851461357f576060015115613555575080518084111561353d57506132ca92613537915190611c95565b906136a9565b6135509291506132ca9361353791611c95565b6132a5565b8381111561356c57506132ca926135379151611c95565b613550929150613537906132ca94611c95565b5050505050600090565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526135be816117d2565b51902090565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146136855784831115613648578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505080925015613693570490565b634e487b7160e01b600052601260045260246000fd5b90600019818309818302918280831092039180830392146137105768327cb2734119d3b7a9601e1b9082821115613648577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b505068327cb2734119d3b7a9601e1b9004919050565b60405190613733826117b7565b601b82527a18d85b98d95b125b98dc99585cd953dc99195c881bdc99195c9259602a1b6020830152565b6040519061376a826117b7565b600982526874726164655479706560b81b6020830152565b90929160009160049485811015613ee25761382f9392916080916137ba6137a7613726565b6137af61375d565b8460ff851692614495565b6137c2613726565b93858060409661381761384589516137d9816117b7565b600a815260209c81696973496e63726561736560b01b8f809401528c51948593840196637d24491d60e01b885260249d8e86015260a4850190613265565b908b6044850152602319848303016064850152613265565b871515608483015203601f1981018352826117ed565b51906a636f6e736f6c652e6c6f675afa5015613b8c57613864916140d8565b84810180519194916001600160a01b039190821615613b815784516351331ad760e01b815287818b817f000000000000000000000000000000000000000000000000000000000000000087165afa908115613b4057839189918691613b4a575b508751635401a55160e11b815233818e015292839188918391165afa908115613b40578491613b0b575b508015613aff575b6138ff90611a6e565b81855416968587019760e08951878d8a519485938492632f7ce47360e21b84528301525afa908115611567578591613ae1575b5060808801518483878313613abd575b5091505082511697519760c088015115159860608901998a518d811015613aaa57613996908b519260e08d0151948c519661397c8861176d565b8752878701528b86015260016060860152608085016119fa565b60a083015260c0820152303b15610cad578651632670e98d60e01b8152906139c1908c8301906118bc565b848160e48183305af1801561156757908591613a96575b505087518a811015613a8457613a535760349087518552526139fb858420613fd5565b5116935194519680881015613a43575050507f7e93a6b00cb3caacf000d7018943b12e2b4ad29e7849df14ebd51caf4fd739b89394613a3e915193849384614023565b0390a1565b634e487b7160e01b825260219052fd5b87518a811015613a8457600114613a6b575b506139fb565b6038908751855252613a7e858420613fd5565b38613a65565b634e487b7160e01b855260218b528585fd5b613a9f90611788565b6106795783386139d8565b50634e487b7160e01b875260218d528787fd5b613ad89301511690613ad286865116916132b6565b9161404d565b38808483613942565b613af9915060e03d8111612f7457612f6581836117ed565b38613932565b508051821633146138f6565b90508781813d8311613b39575b613b2281836117ed565b8101031261067957613b33906119dc565b386138ee565b503d613b18565b86513d86823e3d90fd5b92505081813d8311613b7a575b613b6181836117ed565b810103126106795787613b7484926119c8565b386138c4565b503d613b57565b505050505050509050565b613b9591614251565b84810180519194916001600160a01b039190821615613b815784516351331ad760e01b815287818b817f000000000000000000000000000000000000000000000000000000000000000087165afa908115613b4057839189918691613eab575b508751635401a55160e11b815233818e015292839188918391165afa908115613b40578491613e76575b508015613e6a575b613c3090611a6e565b81855416968587019760e08951878d8a519485938492632f7ce47360e21b84528301525afa908115611567578591613e4c575b5060808801518483878313613e2e575b509150508251169780519860e08901908c8251151560608c019c8d5192831015613e1b578b928d92613ccb9260c08551950151955196613cb28861176d565b8752898701528d8601528a6060860152608085016119fa565b60a083015260c0820152303b1561062d578851632670e98d60e01b815290613cf690828f01906118bc565b868160e48183305af18015613e1157613dfa575b5090613d20918585511691519051151591613589565b88518b811015613de857613d8557506036908751855252613d4285842061409c565b5116935194519680881015613a43575050507fb225fd6bcccad9342bc10ccc7e25ef77175b77348c8393d669ac2dbc98a1ae299394613a3e915193849384614023565b88518b811015613de857600103613daf5750603a908751855252613daa85842061409c565b613d42565b8452603f81528584208851908b821015613de857603a9291613dd091611829565b60ff1981541690558751855252613daa85842061409c565b634e487b7160e01b865260218c528686fd5b95613e09613d20939297611788565b959091613d0a565b89513d89823e3d90fd5b8f8a60218d92634e487b7160e01b835252fd5b613e439301511690613ad286865116916132b6565b38808483613c73565b613e64915060e03d8111612f7457612f6581836117ed565b38613c63565b50805182163314613c27565b90508781813d8311613ea4575b613e8d81836117ed565b8101031261067957613e9e906119dc565b38613c1f565b503d613e83565b92505081813d8311613edb575b613ec281836117ed565b810103126106795787613ed584926119c8565b38613bf5565b503d613eb8565b634e487b7160e01b845260218652602484fd5b6040805490516330a66e1560e01b815260048101929092526101009291908390829060249082906001600160a01b03165afa928315613f7557600093613f56575b505060408201518110159182613f4b57505090565b606001511015919050565b613f6d929350803d10612e0e57612dff81836117ed565b903880613f36565b6040513d6000823e3d90fd5b606090602081526012602082015271696e76616c6964207472616465207479706560701b60408201520190565b6000198114611ca25760010190565b9060048110156116925760ff80198354169116179055565b600c60009182815582600182015582600282015582600382015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015582600b8201550155565b6001600160a01b039091168152602081019190915260608101929161404b9160400190611685565b565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176117575761404b9260405261308e565b60096000918281558260018201558260028201558260038201558260048201558260058201558260068201558260078201558260088201550155565b9190916040908151906140ea8261179b565b60009485835285602084015285848401528560608401528560808401528560a08401528560c08401528560e08401526101009186838501526101208781860152610140918883870152610160938985880152610180968a8882015250600481101561423d578061420157509588600c969782999a52603460205220938751976141728961179b565b8554895260018601546001600160a01b031660208a015260028601549089015260038501546141a79060ff1660608a016119fa565b60048501546080890152600585015460a089015260ff600686015416151560c0890152600785015460e0890152600885015490880152600984015490870152600a83015490860152600b8201549085015201549082015290565b600103614225579588600c969782999a52603860205220938751976141728961179b565b865162461bcd60e51b81528061235660048201613f81565b634e487b7160e01b8a52602160045260248afd5b906040918251916142618361173b565b600080845280602085015280858501528060608501528060808501528060a08501528060c08501528060e0850152610100928184860152610120928284870152826101408097015260048110156121d95760ff94926009949288921560001461435a578152603660205220918651966142d98861173b565b8354885260018401546001600160a01b03166020890152600284015490880152600383015461430d908616606089016119fa565b60048301546080880152600583015460a0880152600683015460c0880152846007840154818116151560e08a015260081c1615159087015260088201549086015201541615159082015290565b8152603a60205220918651966142d98861173b565b1561437657565b60405162461bcd60e51b81526020600482015260156024820152742430b7323632b0b136329d103337b93134b23232b760591b6044820152606490fd5b919061444b57805182546001600160a01b0319166001600160a01b03919091161782556020810151600183015560408101516002830191906143f7901515836119e9565b6060810151825461ff00191690151560081b61ff00161782556080810151906004821015611692578260c09262ff0000600495549160101b169062ff0000191617905560a081015160038501550151910155565b634e487b7160e01b600052600060045260246000fd5b91604051916020830193151560f81b845260048110156116925760f81b60218301526022820152602281526135be816117d2565b906144f66000949385946144e26040519485936144cb602086019863c67ea9d160e01b8a526080602488015260a4870190613265565b916044860152602319858303016064860152613265565b90608483015203601f1981018352826117ed565b51906a636f6e736f6c652e6c6f675afa5056fea2646970667358221220a56d890244d73ff2146b2995d77938d06615caec44b45dd8ef8035ff8c0bef1064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 182,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 251,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6539,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "isHandler",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13353,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseMarketOrders",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint256,t_struct(IncreasePositionOrder)6745_storage)"
      },
      {
        "astId": 13356,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseMarketOrdersIndex",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 13361,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseMarketOrders",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_struct(DecreasePositionOrder)6769_storage)"
      },
      {
        "astId": 13364,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseMarketOrdersIndex",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 13369,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseLimitOrders",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_struct(IncreasePositionOrder)6745_storage)"
      },
      {
        "astId": 13372,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "increaseLimitOrdersIndex",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 13377,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseLimitOrders",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_uint256,t_struct(DecreasePositionOrder)6769_storage)"
      },
      {
        "astId": 13380,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "decreaseLimitOrdersIndex",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 13386,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionOrders",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_bytes32,t_array(t_struct(PositionOrder)4998_storage)dyn_storage)"
      },
      {
        "astId": 13392,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionOrderIndex",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 13396,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionDecreaseTotalAmount",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 13403,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionHasTpSl",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_bytes32,t_mapping(t_enum(TradeType)6638,t_bool))"
      },
      {
        "astId": 13406,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "pairInfo",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(IPairInfo)11580"
      },
      {
        "astId": 13409,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "pairVault",
        "offset": 0,
        "slot": "65",
        "type": "t_contract(IPairVault)11675"
      },
      {
        "astId": 13412,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "tradingVault",
        "offset": 0,
        "slot": "66",
        "type": "t_contract(ITradingVault)5775"
      },
      {
        "astId": 13415,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "vaultPriceFeed",
        "offset": 0,
        "slot": "67",
        "type": "t_contract(IVaultPriceFeed)5810"
      },
      {
        "astId": 13418,
        "contract": "contracts/trading/OrderManager.sol:OrderManager",
        "label": "positionManager",
        "offset": 0,
        "slot": "68",
        "type": "t_contract(IPositionManager)5275"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PositionOrder)4998_storage)dyn_storage": {
        "base": "t_struct(PositionOrder)4998_storage",
        "encoding": "dynamic_array",
        "label": "struct IOrderManager.PositionOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPairInfo)11580": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)11675": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)5275": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITradingVault)5775": {
        "encoding": "inplace",
        "label": "contract ITradingVault",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultPriceFeed)5810": {
        "encoding": "inplace",
        "label": "contract IVaultPriceFeed",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)6638": {
        "encoding": "inplace",
        "label": "enum TradingTypes.TradeType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_struct(PositionOrder)4998_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IOrderManager.PositionOrder[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PositionOrder)4998_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_mapping(t_enum(TradeType)6638,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(enum TradingTypes.TradeType => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)6638,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(TradeType)6638,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)6638",
        "label": "mapping(enum TradingTypes.TradeType => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(DecreasePositionOrder)6769_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TradingTypes.DecreasePositionOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(DecreasePositionOrder)6769_storage"
      },
      "t_mapping(t_uint256,t_struct(IncreasePositionOrder)6745_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TradingTypes.IncreasePositionOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(IncreasePositionOrder)6745_storage"
      },
      "t_struct(DecreasePositionOrder)6769_storage": {
        "encoding": "inplace",
        "label": "struct TradingTypes.DecreasePositionOrder",
        "members": [
          {
            "astId": 6747,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6749,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6751,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6754,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TradeType)6638"
          },
          {
            "astId": 6756,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 6758,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6760,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6762,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 6764,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "abovePrice",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 6766,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "blockTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6768,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "needADL",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(IncreasePositionOrder)6745_storage": {
        "encoding": "inplace",
        "label": "struct TradingTypes.IncreasePositionOrder",
        "members": [
          {
            "astId": 6719,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6721,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6723,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6726,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TradeType)6638"
          },
          {
            "astId": 6728,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 6730,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "openPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6732,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 6734,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6736,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tpPrice",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6738,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6740,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "slPrice",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6742,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sl",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 6744,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "blockTime",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(PositionOrder)4998_storage": {
        "encoding": "inplace",
        "label": "struct IOrderManager.PositionOrder",
        "members": [
          {
            "astId": 4984,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4986,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4988,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isLong",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4990,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "isIncrease",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4993,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "tradeType",
            "offset": 2,
            "slot": "2",
            "type": "t_enum(TradeType)6638"
          },
          {
            "astId": 4995,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "orderId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4997,
            "contract": "contracts/trading/OrderManager.sol:OrderManager",
            "label": "sizeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}