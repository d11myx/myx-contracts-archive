{
  "address": "0x367761085BF3C12e5DA2Df99AC6E1a824612b8fb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_slipReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "getMintLpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "slipToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slipAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getReceivedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveIndexTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiveStableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "lpFairPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "_pairStorage",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_slipReceiver",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slipReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "swapForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "swapInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPairTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x47a34060bfcd9009e8521df3bf4c66277222afdca925e16a23aee4c69276b64d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x367761085BF3C12e5DA2Df99AC6E1a824612b8fb",
    "transactionIndex": 0,
    "gasUsed": "3867892",
    "logsBloom": "0x
    "blockHash": "0x854de9e8260b53b5c280752ab7bd9ee89e43bc6f40399f0a564dad23f9e48f4c",
    "transactionHash": "0x47a34060bfcd9009e8521df3bf4c66277222afdca925e16a23aee4c69276b64d",
    "logs": [],
    "blockNumber": 90,
    "cumulativeGasUsed": "3867892",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "0x1c85638e118b37167e9298c2268758e058DdfDA0",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
  ],
  "numDeployments": 1,
  "solcInputHash": "d12abf55450080ab9ed90de90073e0f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slipReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"getMintLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"slipToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slipAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getReceivedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveIndexTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveStableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"lpFairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairStorage\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slipReceiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slipReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"swapForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"swapInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPairTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/PairLiquidity.sol\":\"PairLiquidity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ac72f22ea80e64abc0138d2a4e7976b7efcf4b089faa217a66e4271f7ca46cb\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity =0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdcae9624c1d487eb9400e4c9d4a875b65c7d6741170690b6a62d6aa8a45399f3\"},\"contracts/libraries/AMMUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary AMMUtils {\\n\\n    function getReserve(\\n        uint256 k,\\n        uint256 price,\\n        uint256 pricePrecision\\n    ) internal pure returns (uint256 reserveA, uint256 reserveB) {\\n        require(price > 0, \\\"Invalid price\\\");\\n        require(k > 0, \\\"Invalid k\\\");\\n\\n        reserveB = Math.sqrt(Math.mulDiv(k, price, pricePrecision));\\n        reserveA = k / reserveB;\\n        return (reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"Invalid reserve\\\");\\n        amountOut = Math.mulDiv(amountIn, reserveOut, reserveIn + amountIn);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7deaa3c41f439533f8489c46b379cf7af0c0c03ad39eac45ca93252214e7588a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/pair/PairLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../interfaces/IWETH.sol';\\nimport './interfaces/IPairInfo.sol';\\nimport './interfaces/IPairLiquidity.sol';\\nimport './interfaces/IPairVault.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../libraries/AMMUtils.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../token/PairToken.sol';\\n\\nimport 'hardhat/console.sol';\\n\\ncontract PairLiquidity is IPairLiquidity, Roleable {\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    // IOraclePriceFeed public vaultPriceFeed;\\n\\n    address public feeReceiver;\\n\\n    address public slipReceiver;\\n\\n    address public weth;\\n\\n    // pairToken => user => amount\\n    mapping(address => mapping(address => uint256)) public userPairTokens;\\n\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        address _feeReceiver,\\n        address _slipReceiver,\\n        address _weth\\n    ) Roleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        feeReceiver = _feeReceiver;\\n        slipReceiver = _slipReceiver;\\n        weth = _weth;\\n    }\\n\\n    function setContract(IPairInfo _pairStorage, IPairVault _pairVault) external onlyPoolAdmin {\\n        pairInfo = _pairStorage;\\n        pairVault = _pairVault;\\n    }\\n\\n    function setReceiver(address _feeReceiver, address _slipReceiver) external onlyPoolAdmin {\\n        feeReceiver = _feeReceiver;\\n        slipReceiver = _slipReceiver;\\n    }\\n\\n    function addLiquidity(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) external returns (uint256) {\\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function addLiquidityETH(uint256 _pairIndex, uint256 _stableAmount) external payable returns (uint256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.indexToken == weth && pair.pairToken != address(0), 'invalid pair');\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n\\n        IWETH(pair.stableToken).transferFrom(msg.sender, address(this), _stableAmount);\\n        return _addLiquidity(address(this), msg.sender, _pairIndex, msg.value, _stableAmount);\\n    }\\n\\n    function addLiquidityForAccount(\\n        address _funder,\\n        address _account,\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) external returns (uint256) {\\n        return _addLiquidity(_funder, _account, _pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function removeLiquidity(\\n        uint256 _pairIndex,\\n        uint256 _amount\\n    ) external returns (uint256 receivedIndexAmount, uint256 receivedStableAmount) {\\n        (receivedIndexAmount, receivedStableAmount) = _removeLiquidity(msg.sender, address(this), _pairIndex, _amount);\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        if (receivedIndexAmount > 0 && pair.indexToken == weth) {\\n            IWETH(weth).withdraw(receivedIndexAmount);\\n            payable(msg.sender).sendValue(receivedIndexAmount);\\n        }\\n        if (receivedStableAmount > 0) {\\n            IERC20(pair.stableToken).transfer(msg.sender, receivedStableAmount);\\n        }\\n        return (receivedIndexAmount, receivedStableAmount);\\n    }\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        uint256 _amount\\n    ) external returns (uint256, uint256) {\\n        return _removeLiquidity(_account, _receiver, _pairIndex, _amount);\\n    }\\n\\n    function swapInEth(\\n        uint256 _pairIndex,\\n        uint256 _minOut\\n    ) external payable returns (uint256 amountIn, uint256 amountOut) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.indexToken == weth && pair.pairToken != address(0), 'invalid pair');\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n        IERC20(weth).approve(address(this), msg.value);\\n\\n        (amountIn, amountOut) = _swap(address(this), msg.sender, _pairIndex, false, msg.value, _minOut);\\n\\n        // send last eth back\\n        if (amountIn < msg.value) {\\n            uint256 lastETH = msg.value - amountIn;\\n            IWETH(weth).withdraw(lastETH);\\n            payable(msg.sender).sendValue(lastETH);\\n        }\\n        return (amountIn, amountOut);\\n    }\\n\\n    function swap(\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut\\n    ) external returns (uint256 amountIn, uint256 amountOut) {\\n        (amountIn, amountOut) = _swap(msg.sender, address(this), _pairIndex, _isBuy, _amountIn, _minOut);\\n        if (amountOut > 0 && _isBuy && pairInfo.getPair(_pairIndex).indexToken == weth) {\\n            IWETH(weth).withdraw(amountOut);\\n            payable(msg.sender).sendValue(amountOut);\\n        }\\n        return (amountIn, amountOut);\\n    }\\n\\n    function swapForAccount(\\n        address _funder,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut\\n    ) external returns (uint256 amountIn, uint256 amountOut) {\\n        return _swap(_funder, _receiver, _pairIndex, _isBuy, _amountIn, _minOut);\\n    }\\n\\n    function _swap(\\n        address _funder,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        console.log('swap funder %s receiver %s', _funder, _receiver);\\n        console.log('swap pairIndex %s isBuy %s expectAmountIn %s', _pairIndex, _isBuy, _amountIn);\\n\\n        require(_amountIn > 0, 'swap invalid amount in');\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'swap invalid pair');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n\\n        // total delta\\n        uint256 indexTotalDelta = vault.indexTotalAmount.mulPrice(price);\\n        uint256 stableTotalDelta = vault.stableTotalAmount;\\n        console.log('swap indexTotalDelta %s stableTotalDelta %s', indexTotalDelta, stableTotalDelta);\\n\\n        uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n        console.log('swap expectIndexDelta %s expectStableDelta %s', expectIndexDelta, expectStableDelta);\\n\\n        if (_isBuy) {\\n            // index out stable in\\n            require(expectStableDelta > stableTotalDelta, 'no need stable token');\\n\\n            uint256 stableInDelta = _amountIn;\\n            stableInDelta = stableInDelta.min(expectStableDelta - stableTotalDelta);\\n            console.log('swap stableInDelta', stableInDelta);\\n\\n            amountOut = stableInDelta.divPrice(price);\\n            uint256 availableIndex = vault.indexTotalAmount - vault.indexReservedAmount;\\n            console.log('swap amountOut indexToken %s availableIndex %s', amountOut, availableIndex);\\n\\n            require(availableIndex > 0, 'no available index token');\\n\\n            amountOut = amountOut.min(availableIndex);\\n            amountIn = amountOut.divPrice(price);\\n\\n            console.log('swap amountIn %s amountOut %s', amountIn, amountOut);\\n            require(amountOut >= _minOut, 'insufficient minOut');\\n\\n            pairVault.swap(_pairIndex, _isBuy, amountIn, amountOut);\\n\\n            pairVault.transferTokenTo(pair.indexToken, _receiver, amountOut);\\n            IERC20(pair.stableToken).safeTransferFrom(_funder, address(pairVault), amountIn);\\n        } else {\\n            // index in stable out\\n            require(expectIndexDelta > indexTotalDelta, 'no need index token');\\n\\n            uint256 indexInDelta = _amountIn.mulPrice(price);\\n            indexInDelta = indexInDelta.min(expectIndexDelta - indexTotalDelta);\\n            console.log('swap indexInDelta', indexInDelta);\\n\\n            amountOut = indexInDelta;\\n            uint256 availableStable = vault.stableTotalAmount - vault.stableReservedAmount;\\n            console.log('swap amountOut stableToken %s availableStable %s', amountOut, availableStable);\\n\\n            require(availableStable > 0, 'no stable token');\\n\\n            amountOut = amountOut.min(availableStable);\\n            amountIn = amountOut.divPrice(price);\\n\\n            IERC20(pair.indexToken).safeTransferFrom(_funder, address(pairVault), amountIn);\\n            pairVault.transferTokenTo(pair.stableToken, _receiver, amountOut);\\n        }\\n\\n        emit Swap(_funder, _receiver, _pairIndex, _isBuy, amountIn, amountOut);\\n    }\\n\\n    function _addLiquidity(\\n        address _funder,\\n        address _account,\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) private returns (uint256 mintAmount) {\\n        require(_indexAmount > 0 || _stableAmount > 0, 'invalid amount');\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        console.log('addLiquidity indexAmount', _indexAmount, 'stableAmount', _stableAmount);\\n        // transfer token\\n        if (_funder != address(this)) {\\n            IERC20(pair.indexToken).safeTransferFrom(_funder, address(this), _indexAmount);\\n            IERC20(pair.stableToken).safeTransferFrom(_funder, address(this), _stableAmount);\\n        }\\n        // fee\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        {\\n            // transfer fee\\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n            console.log('addLiquidity indexFeeAmount', indexFeeAmount, 'stableFeeAmount', stableFeeAmount);\\n\\n            IERC20(pair.indexToken).safeTransfer(feeReceiver, indexFeeAmount);\\n            IERC20(pair.stableToken).safeTransfer(feeReceiver, stableFeeAmount);\\n\\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n        }\\n\\n        // usdt value of reserve\\n        {\\n            uint256 price = _getPrice(pair.indexToken);\\n            require(price > 0, 'invalid price');\\n\\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n            // usdt value of deposit\\n            uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n\\n            // calculate deposit usdt value without slippage\\n            uint256 slipDelta;\\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n                // after deposit\\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n                console.log('addLiquidity indexTotalDelta', indexTotalDelta, 'stableTotalDelta', stableTotalDelta);\\n\\n                // expect delta\\n                uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n                uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n                uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n                console.log('addLiquidity expectIndexDelta', expectIndexDelta, 'expectStableDelta', expectStableDelta);\\n\\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n                if (indexTotalDelta > expectIndexDelta) {\\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta\\n                        ? (indexDepositDelta - needSwapIndexDelta)\\n                        : indexDepositDelta;\\n                    console.log(\\n                        'addLiquidity needSwapIndexDelta',\\n                        needSwapIndexDelta,\\n                        'swapIndexDelta',\\n                        swapIndexDelta\\n                    );\\n\\n                    slipDelta = AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                    uint256 slipAmount = _getAmount(slipDelta, price);\\n\\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                    IERC20(pair.indexToken).safeTransfer(slipReceiver, slipAmount);\\n                    console.log('addLiquidity slipDelta', slipDelta, 'afterFeeIndexAmount', afterFeeIndexAmount);\\n                } else if (stableTotalDelta > expectStableDelta) {\\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta\\n                        ? (afterFeeStableAmount - needSwapStableDelta)\\n                        : afterFeeStableAmount;\\n                    console.log(\\n                        'addLiquidity needSwapStableDelta',\\n                        needSwapStableDelta,\\n                        'swapStableDelta',\\n                        swapStableDelta\\n                    );\\n\\n                    slipDelta =\\n                        swapStableDelta -\\n                        _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n\\n                    afterFeeStableAmount = afterFeeStableAmount - slipDelta;\\n                    IERC20(pair.stableToken).safeTransfer(slipReceiver, slipDelta);\\n                    console.log('addLiquidity slipDelta', slipDelta, 'afterFeeStableAmount', afterFeeStableAmount);\\n                }\\n            }\\n            // mint lp\\n            mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n            console.log(\\n                'addLiquidity indexDepositDelta',\\n                indexDepositDelta,\\n                'afterFeeStableAmount',\\n                afterFeeStableAmount\\n            );\\n        }\\n        IPairToken(pair.pairToken).mint(address(this), mintAmount);\\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] + mintAmount;\\n\\n        pairVault.increaseTotalAmount(_pairIndex, afterFeeIndexAmount, afterFeeStableAmount);\\n\\n        IERC20(pair.indexToken).safeTransfer(address(pairVault), afterFeeIndexAmount);\\n        IERC20(pair.stableToken).safeTransfer(address(pairVault), afterFeeStableAmount);\\n        console.log(\\n            'addLiquidity afterFeeIndexAmount',\\n            afterFeeIndexAmount,\\n            'afterFeeStableAmount',\\n            afterFeeStableAmount\\n        );\\n\\n        emit AddLiquidity(_funder, _account, _pairIndex, _indexAmount, _stableAmount, mintAmount);\\n\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(\\n        address _account,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        uint256 _amount\\n    ) private returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        require(_amount > 0, 'invalid amount');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        require(userPairTokens[pair.pairToken][_account] >= _amount, 'insufficient balance');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        (receiveIndexTokenAmount, receiveStableTokenAmount) = getReceivedAmount(_pairIndex, _amount);\\n\\n        require(\\n            receiveIndexTokenAmount <= vault.indexTotalAmount - vault.indexReservedAmount,\\n            'insufficient indexToken amount'\\n        );\\n        require(\\n            receiveStableTokenAmount <= vault.stableTotalAmount - vault.stableReservedAmount,\\n            'insufficient stableToken amount'\\n        );\\n\\n        pairVault.decreaseTotalAmount(_pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount);\\n\\n        IPairToken(pair.pairToken).burn(address(this), _amount);\\n        userPairTokens[pair.pairToken][_account] = userPairTokens[pair.pairToken][_account] - _amount;\\n\\n        pairVault.transferTokenTo(pair.indexToken, _receiver, receiveIndexTokenAmount);\\n        pairVault.transferTokenTo(pair.stableToken, _receiver, receiveStableTokenAmount);\\n\\n        emit RemoveLiquidity(\\n            _account,\\n            _receiver,\\n            _pairIndex,\\n            receiveIndexTokenAmount,\\n            receiveStableTokenAmount,\\n            _amount\\n        );\\n\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function lpFairPrice(uint256 _pairIndex) public view returns (uint256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n        uint256 price = _getPrice(pair.indexToken);\\n        uint256 lpFairDelta = _getDelta(vault.indexTotalAmount, price) + vault.stableTotalAmount;\\n        return\\n            lpFairDelta > 0\\n                ? Math.mulDiv(lpFairDelta, PRICE_PRECISION, IERC20(pair.pairToken).totalSupply())\\n                : 1 * PRICE_PRECISION;\\n    }\\n\\n    function _getDelta(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function _getAmount(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    // calculate lp amount for add liquidity\\n    function getMintLpAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) external view returns (uint256 mintAmount, address slipToken, uint256 slipAmount) {\\n        require(_indexAmount > 0 || _stableAmount > 0, 'invalid amount');\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        console.log('getMintLpAmount indexAmount', _indexAmount, 'stableAmount', _stableAmount);\\n\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        {\\n            // transfer fee\\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n\\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n        }\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        // calculate deposit usdt value without slippage\\n        uint256 slipDelta;\\n\\n        // usdt value of deposit\\n        uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n        console.log('getMintLpAmount indexDepositDelta', indexDepositDelta);\\n\\n        {\\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n                // after deposit\\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n                console.log('getMintLpAmount indexTotalDelta', indexTotalDelta, 'stableTotalDelta', stableTotalDelta);\\n\\n                uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n                uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n                uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n                console.log(\\n                    'getMintLpAmount expectIndexDelta',\\n                    expectIndexDelta,\\n                    'expectStableDelta',\\n                    expectStableDelta\\n                );\\n\\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n                if (indexTotalDelta > expectIndexDelta) {\\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta\\n                        ? (indexDepositDelta - needSwapIndexDelta)\\n                        : indexDepositDelta;\\n                    console.log(\\n                        'getMintLpAmount needSwapIndexDelta',\\n                        needSwapIndexDelta,\\n                        'swapIndexDelta',\\n                        swapIndexDelta\\n                    );\\n\\n                    slipDelta = AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                    slipAmount = _getAmount(slipDelta, price);\\n                    slipToken = pair.indexToken;\\n\\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                    console.log('getMintLpAmount slipDelta', slipDelta, 'afterFeeIndexAmount', afterFeeIndexAmount);\\n                } else if (stableTotalDelta > expectStableDelta) {\\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta\\n                        ? (afterFeeStableAmount - needSwapStableDelta)\\n                        : afterFeeStableAmount;\\n                    console.log(\\n                        'getMintLpAmount needSwapStableDelta',\\n                        needSwapStableDelta,\\n                        'swapStableDelta',\\n                        swapStableDelta\\n                    );\\n\\n                    slipDelta =\\n                        swapStableDelta -\\n                        _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n                    slipAmount = slipDelta;\\n                    slipToken = pair.stableToken;\\n\\n                    afterFeeStableAmount = afterFeeStableAmount - slipAmount;\\n                    console.log('getMintLpAmount slipDelta', slipDelta, 'afterFeeStableAmount', afterFeeStableAmount);\\n                }\\n            }\\n        }\\n        console.log(\\n            'getMintLpAmount afterFeeIndexAmount',\\n            afterFeeIndexAmount,\\n            'afterFeeStableAmount',\\n            afterFeeStableAmount\\n        );\\n        // mint lp\\n        mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n        console.log(\\n            'getMintLpAmount indexDepositDelta',\\n            indexDepositDelta,\\n            'afterFeeStableAmount',\\n            afterFeeStableAmount\\n        );\\n        return (mintAmount, slipToken, slipAmount);\\n    }\\n\\n    // calculate deposit amount for add liquidity\\n    function getDepositAmount(\\n        uint256 _pairIndex,\\n        uint256 _lpAmount\\n    ) external view returns (uint256 depositIndexAmount, uint256 depositStableAmount) {\\n        require(_lpAmount > 0, 'invalid amount');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n        uint256 depositDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n        console.log('getMintLpAmount depositDelta', depositDelta);\\n\\n        // expect delta\\n        uint256 totalDelta = (indexReserveDelta + stableReserveDelta + depositDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n        console.log('getDepositAmount expectIndexDelta', expectIndexDelta, 'expectStableDelta', expectStableDelta);\\n\\n        uint256 depositIndexTokenDelta;\\n        uint256 depositStableTokenDelta;\\n\\n        if (expectIndexDelta >= indexReserveDelta) {\\n            uint256 extraIndexReserveDelta = expectIndexDelta - indexReserveDelta;\\n            if (extraIndexReserveDelta >= depositDelta) {\\n                depositIndexTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = extraIndexReserveDelta;\\n                depositStableTokenDelta = depositDelta - extraIndexReserveDelta;\\n            }\\n            console.log(\\n                'getDepositAmount depositIndexTokenDelta',\\n                depositIndexTokenDelta,\\n                'depositStableTokenDelta',\\n                depositStableTokenDelta\\n            );\\n        } else {\\n            uint256 extraStableReserveDelta = expectStableDelta - stableReserveDelta;\\n            if (extraStableReserveDelta >= depositDelta) {\\n                depositStableTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = depositDelta - extraStableReserveDelta;\\n                depositStableTokenDelta = extraStableReserveDelta;\\n            }\\n            console.log(\\n                'getDepositAmount depositIndexTokenDelta',\\n                depositIndexTokenDelta,\\n                'depositStableTokenDelta',\\n                depositStableTokenDelta\\n            );\\n        }\\n        depositIndexAmount = _getAmount(depositIndexTokenDelta, price);\\n        depositStableAmount = depositStableTokenDelta;\\n        console.log(\\n            'getDepositAmount depositIndexAmount',\\n            depositIndexAmount,\\n            'depositStableAmount',\\n            depositStableAmount\\n        );\\n\\n        // add fee\\n        depositIndexAmount = depositIndexAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\\n        depositStableAmount = depositStableAmount.divPercentage(PrecisionUtils.oneHundredPercentage() - pair.addLpFeeP);\\n        console.log(\\n            'getDepositAmount depositIndexAmount',\\n            depositIndexAmount,\\n            'depositStableAmount',\\n            depositStableAmount\\n        );\\n        return (depositIndexAmount, depositStableAmount);\\n    }\\n\\n    // calculate amount for remove liquidity\\n    function getReceivedAmount(\\n        uint256 _pairIndex,\\n        uint256 _lpAmount\\n    ) public view returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        require(_lpAmount > 0, 'invalid amount');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPairVault.Vault memory vault = pairVault.getVault(_pairIndex);\\n\\n        // usdt value of reserve\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n\\n        uint256 receiveDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n        console.log('getReceivedAmount receiveDelta', receiveDelta);\\n\\n        // expect delta\\n        uint256 totalDelta = (indexReserveDelta + stableReserveDelta - receiveDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n        console.log('getReceivedAmount expectIndexDelta', expectIndexDelta, 'expectStableDelta', expectStableDelta);\\n\\n        // received delta of indexToken and stableToken\\n        uint256 receiveIndexTokenDelta;\\n        uint256 receiveStableTokenDelta;\\n\\n        if (indexReserveDelta > expectIndexDelta) {\\n            uint256 extraIndexReserveDelta = indexReserveDelta - expectIndexDelta;\\n            if (extraIndexReserveDelta >= receiveDelta) {\\n                receiveIndexTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = extraIndexReserveDelta;\\n                receiveStableTokenDelta = receiveDelta - extraIndexReserveDelta;\\n            }\\n            console.log(\\n                'getReceivedAmount receiveIndexTokenDelta',\\n                receiveIndexTokenDelta,\\n                'receiveStableTokenDelta',\\n                receiveStableTokenDelta\\n            );\\n        } else {\\n            uint256 extraStableReserveDelta = stableReserveDelta - expectStableDelta;\\n            if (extraStableReserveDelta >= receiveDelta) {\\n                receiveStableTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = receiveDelta - extraStableReserveDelta;\\n                receiveStableTokenDelta = extraStableReserveDelta;\\n            }\\n            console.log(\\n                'getReceivedAmount receiveIndexTokenDelta',\\n                receiveIndexTokenDelta,\\n                'receiveStableTokenDelta',\\n                receiveStableTokenDelta\\n            );\\n        }\\n        receiveIndexTokenAmount = _getAmount(receiveIndexTokenDelta, price);\\n        receiveStableTokenAmount = receiveStableTokenDelta;\\n        console.log(\\n            'getReceivedAmount receiveIndexTokenAmount',\\n            receiveIndexTokenAmount,\\n            'receiveStableTokenAmount',\\n            receiveStableTokenAmount\\n        );\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function _getPrice(address _token) internal view returns (uint256) {\\n        return IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(_token);\\n    }\\n}\\n\",\"keccak256\":\"0xf180a8965ff8315aec1f00fef6bfb8282b18d169876c3ddb0edea5668bffb943\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairLiquidity {\\n    event AddLiquidity(\\n        address indexed funder,\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed account,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    event Swap(\\n        address indexed funder,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        bool isBuy, // buy indexToken with stableToken\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n}\\n\",\"keccak256\":\"0x11e2a16cca1f7fe15f7cd5314a6006dc608d9cb71a3c3dba9b3205707c63378e\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external returns (uint256 diffIndexAmount);\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0xa031e4c72c52f9a8fd5f8adb314245bf5e3298e07c30902335253738f3316273\",\"license\":\"UNLICENSED\"},\"contracts/token/PairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPairToken.sol\\\";\\n\\ncontract PairToken is IPairToken, ERC20, Ownable {\\n\\n    address public token0;\\n    address public token1;\\n\\n    mapping(address => bool) public miners;\\n\\n    constructor(address _token0, address _token1) ERC20(\\\"MYX LPs\\\", \\\"MYX-LP\\\") {\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(miners[msg.sender], 'miner forbidden');\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyMiner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMiner {\\n        _burn(account, amount);\\n    }\\n\\n    function setMiner(address account, bool enable) external onlyOwner {\\n        miners[account] = enable;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x978b0fd6de1e1aa8f389df15f59875fb9146108ad9b7aacd46509a6652fd48ae\",\"license\":\"UNLICENSED\"},\"contracts/token/interfaces/IPairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPairToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0x78bc94988822f8020827c58cde53509198946381e496e2b23c737cc0f51f5a85\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c9081630552415114611a51575080630738aa3114611a0a5780631848effa146119c55780632bf6e0a514611882578063346d5d75146115ab5780633fc8cef314611582578063422f10431461156657806346ea87af146115285780634b57f96e146115095780634c3c0f5814610fca578063653c45e614610f925780637a5240751461081b5780637a9d1ac4146106d057806386dcb95e146105845780638ffc80a11461042a57806392771c3c1461041057806395082d25146103e85780639d7de6b314610230578063a31a7b4414610207578063b3f00674146101de578063bef77c591461018f578063e05def241461014e5763fc2a5b1d0361000f573461014b578060031936011261014b576001546040516001600160a01b039091168152602090f35b80fd5b503461014b57608036600319011261014b57604061018361016d611a76565b610175611a8c565b9060643591604435916135f0565b82519182526020820152f35b503461014b57604036600319011261014b576101a9611a76565b60406101b3611a8c565b9260018060a01b03809316815260066020522091166000526020526020604060002054604051908152f35b503461014b578060031936011261014b576003546040516001600160a01b039091168152602090f35b503461014b578060031936011261014b576002546040516001600160a01b039091168152602090f35b503461014b5761024c61024236611aa2565b81929130336135f0565b909160018060a01b039060e0826001541691602460405180948193632f7ce47360e21b835260048301525afa9081156103dd5785916103ae575b508315158061039e575b610330575b826102ab575b6040848482519182526020820152f35b6020015116926020604051809563a9059cbb60e01b82528184816102d3883360048401611c94565b03925af18015610323576102e8575b8061029b565b6020843d821161031b575b8161030060209383611b31565b8101031261014b5750610314604093611b66565b50386102e2565b3d91506102f3565b50604051903d90823e3d90fd5b848260055416803b1561039a57818091602460405180948193632e1a7d4d60e01b83528b60048401525af1801561038f57610377575b50506103728433611cee565b610295565b61038090611ad2565b61038b578438610366565b8480fd5b6040513d84823e3d90fd5b5080fd5b5081815116826005541614610290565b6103d0915060e03d60e0116103d6575b6103c88183611b31565b810190611baf565b38610286565b503d6103be565b6040513d87823e3d90fd5b503461014b578060031936011261014b5760405168327cb2734119d3b7a9601e1b8152602090f35b503461014b57604061018361042436611aa2565b90613d31565b50602461043636611aa2565b9060018060a01b0360e0816001541660405195868092632f7ce47360e21b82528660048301525afa9384156103dd578594610563575b508481855116826005541680911480610554575b61048990611c37565b803b1561039a578160049160405192838092630d0e30db60e41b825234905af1801561038f57610540575b505060208094015116938360405180966323b872dd60e01b82528184816104e089303360048501611c72565b03925af1801561032357610506575b50906104fe9134903330612bd0565b604051908152f35b8385813d8311610539575b61051b8183611b31565b8101031261014b57506105316104fe9394611b66565b5083926104ef565b503d610511565b61054990611ad2565b61038b5784386104b4565b50604086015183161515610480565b61057d91945060e03d60e0116103d6576103c88183611b31565b923861046c565b503461014b57604036600319011261014b5761059e611a76565b6105a6611a8c565b6040516351331ad760e01b81526001600160a01b039190602080826004817f000000000000000000000000000000000000000000000000000000000000000088165afa80156106885784928791610693575b508190602460405180958193637be53ca160e01b8352336004840152165afa908115610688578691610651575b506106309150611b73565b8160018060a01b031993168360035416176003551690600454161760045580f35b905081813d8311610681575b6106678183611b31565b8101031261038b5761067b61063091611b66565b38610625565b503d61065d565b6040513d88823e3d90fd5b809350828092503d83116106c9575b6106ac8183611b31565b810103126106c557806106bf8593611b52565b906105f8565b8580fd5b503d6106a2565b503461014b57608036600319011261014b5760043560243580151581036108165761070360643560443583853033611e68565b919092821515918261080e575b50816107a1575b5061072d575b6040809350519182526020820152f35b60055483906001600160a01b0316803b1561039a578190602460405180948193632e1a7d4d60e01b83528760048401525af180156107965761077e575b50604092506107798133611cee565b61071d565b6107888491611ad2565b610792578261076a565b8280fd5b6040513d86823e3d90fd5b600154604051632f7ce47360e21b815260048101929092526001600160a01b03925060e0908290602490829086165afa80156103dd57829186916107ef575b50511690600554161438610717565b610808915060e03d60e0116103d6576103c88183611b31565b386107e0565b915038610710565b600080fd5b5061082536611aa2565b5090602460e060018060a01b036001541660405192838092632f7ce47360e21b82528760048301525afa90811561038f578291610f73575b5080516005546001600160a01b03908116926108859290911683149081610f5c575b50611c37565b803b1561039a578160049160405192838092630d0e30db60e41b825234905af1801561038f57610f4d575b5060055460405163095ea7b360e01b81529192919060209082906001600160a01b03168186816108e4343060048401611c94565b03925af18015610ecb57610f14575b50600090818061095360405161090881611afb565b601a815279737761702066756e64657220257320726563656976657220257360301b60208201526040519182916307e763af60e51b60208401526060602484015260848301906126d4565b30604483015233606483015203610972601f1991828101845283611b31565b8280835160206a636f6e736f6c652e6c6f679501855afa506040519061099782611b16565b602c82527f737761702070616972496e64657820257320697342757920257320657870656360208301526b74416d6f756e74496e20257360a01b6040830152610a1f6040519182610a01602082019563e41b6f6f60e01b87526080602484015260a48301906126d4565b89604483015287606483015234608483015203908101835282611b31565b51915afa503415610ed657600154604051632f7ce47360e21b815260048101839052919060e090839060249082906001600160a01b03165afa918215610ecb578392610eaa575b5060408201516001600160a01b031615610e7157600254604051632500ed8d60e21b8152600481018390526001600160a01b0390911693909260c084602481885afa93841561038f578294610e41575b508051610acb906001600160a01b0316614019565b93610ad7858251612734565b610b396040830151610b338184604051610af081611b16565b602b81527f7377617020696e646578546f74616c44656c746120257320737461626c65546f60208201526a74616c44656c746120257360a81b6040820152614165565b82611e5b565b93610ba7610b55610b4e60a0870151886127ee565b8097611dec565b86604051610b6281611b16565b602d81527f7377617020657870656374496e64657844656c7461202573206578706563745360208201526c7461626c6544656c746120257360981b6040820152614165565b9381811115610e0657610bc7610c1592610bc18934612734565b92611dec565b80821015610dfe5750915b610c0583604051610be281611afb565b60118152707377617020696e646578496e44656c746160781b602082015261410d565b6060604082015191015190611dec565b610c6e8183604051610c2681611b16565b603081527f7377617020616d6f756e744f757420737461626c65546f6b656e20257320617660208201526f61696c61626c65537461626c6520257360801b6040820152614165565b8015610dc757610ca391610c8d9180821015610dbf5750955b86612856565b82519096879130906001600160a01b031661250d565b6002546020909101516001600160a01b039081169116803b156108165784600091610ce79383604051809681958294630d172a0160e01b8452339060048501611c72565b03925af18015610db357610da1575b50604051908152836020820152826040820152339060008051602061421283398151915260603092a4348210610d36576040809350519182526020820152f35b610d408234611dec565b6005549093906001600160a01b0316803b1561039a57818091602460405180948193632e1a7d4d60e01b83528a60048401525af1801561038f57610d8d575b505061077960409333611cee565b610d978291611ad2565b61014b5780610d7f565b610dab9150611ad2565b600038610cf6565b6040513d6000823e3d90fd5b905095610c87565b60405162461bcd60e51b815260206004820152600f60248201526e37379039ba30b13632903a37b5b2b760891b6044820152606490fd5b905091610bd2565b60405162461bcd60e51b81526020600482015260136024820152723737903732b2b21034b73232bc103a37b5b2b760691b6044820152606490fd5b610e6391945060c03d8111610e6a575b610e5b8183611b31565b810190611df9565b9238610ab6565b503d610e51565b60405162461bcd60e51b815260206004820152601160248201527039bbb0b81034b73b30b634b2103830b4b960791b6044820152606490fd5b610ec491925060e03d60e0116103d6576103c88183611b31565b9038610a66565b6040513d85823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527539bbb0b81034b73b30b634b21030b6b7bab73a1034b760511b6044820152606490fd5b6020813d602011610f45575b81610f2d60209383611b31565b8101031261079257610f3e90611b66565b50386108f3565b3d9150610f20565b610f5690611ad2565b386108b0565b604001516001600160a01b0316151590503861087f565b610f8c915060e03d60e0116103d6576103c88183611b31565b3861085d565b503461014b5760a036600319011261014b5760206104fe610fb1611a76565b610fb9611a8c565b608435916064359160443591612bd0565b503461014b57602490610fdc36611ab8565b909291829182918515801590611500575b610ff6906129da565b600154604051632f7ce47360e21b815260048101839052976001600160a01b03959160e0918a91829089165afa9283156103235760249882946114df575b50611046866040860151161515611c37565b60c086600254166040519a8b8092632500ed8d60e21b82528760048301525afa97881561038f5760609983996114bb575b506110e0906110c38360405161108c81611afb565b601b81527a19d95d135a5b9d131c105b5bdd5b9d081a5b99195e105b5bdd5b9d602a1b6020820152836110bd612a17565b916141b0565b610bc160c08701610bc16110d88251856127ee565b9151866127ee565b936110ed87825116614019565b6110f8811515612a3f565b836111038285612734565b809b61111682611111613b4c565b61410d565b6040611123858351612734565b910190611131825182611e5b565b6111db575b505050505050916111b06111aa6111b69361119b876111c898976040519061115d82611b16565b602382527f6765744d696e744c70416d6f756e74206166746572466565496e646578416d6f6020830152621d5b9d60ea1b60408301526110bd612b31565b6111a5868c611e5b565b611dec565b916139e1565b90612856565b956111bf613b4c565b906110bd612b31565b6040519384521660208301526040820152f35b9b859c9a85986112b685969760808a9b9f8f60a061120f6112649261125b9f9c6112089061126b96611e5b565b9b51611e5b565b9d8e611255818d6040519061122382611afb565b601f82527f6765744d696e744c70416d6f756e7420696e646578546f74616c44656c74610060208301526110bd612a7b565b8b611e5b565b9a01518a6127ee565b8099611dec565b9b6112af8d60405161127c81611afb565b602081527f6765744d696e744c70416d6f756e7420657870656374496e64657844656c746160208201528b6110bd612aa7565b015161337a565b999098868611156113a3575050505050976113788b9c61136d611366849b996111b0996113616111c89f9d6111aa9b6111b69f829c6112fb61119b9d61135c93611dec565b9250828082111561139b5761130f91611dec565b80925b6040519061131f82611b16565b602282527f6765744d696e744c70416d6f756e74206e65656453776170496e64657844656c602083015261746160f01b60408301526110bd612b61565b612856565b613551565b9586612856565b9d8e9151169b611dec565b61138d81611384613b8f565b866110bd612b8b565b9597988397508d9250611136565b508092611312565b929d999450929e9794509894508181116113d8575b50505050505050916111b06111aa6111b69361119b876111c8989761138d565b6111b0969d508a9b506111b698506111aa95936114779361146c6111c89d61140a61147d99969c9e9c61147296611dec565b975087808211156114b35761141e91611dec565b80975b6040519061142e82611b16565b602382527f6765744d696e744c70416d6f756e74206e65656453776170537461626c6544656020830152626c746160e81b60408301526110bd612ad4565b85613551565b612734565b90611dec565b61119b611492828b6020829e0151169a611dec565b80976114a9826114a0613b8f565b866110bd612b31565b95979883976113b8565b508097611421565b6110e09199506114d89060c03d8111610e6a57610e5b8183611b31565b9890611077565b6114f991945060e03d60e0116103d6576103c88183611b31565b9238611034565b50811515610fed565b503461014b57602036600319011261014b5760206104fe6004356139e1565b503461014b57602036600319011261014b5760209060ff906040906001600160a01b03611553611a76565b1681528084522054166040519015158152f35b503461014b5760206104fe61157a36611ab8565b913333612bd0565b503461014b578060031936011261014b576005546040516001600160a01b039091168152602090f35b503461014b5760246115bc36611aa2565b6115c78115156129da565b600154604051632f7ce47360e21b815260048101849052936001600160a01b039160e0918691829085165afa9384156103dd57859461185e575b50806116166024926040870151161515611c37565b60c0816002541660405193848092632500ed8d60e21b82528860048301525afa918215610688579186916117b395949360409892611836575b5061165f61168991885116614019565b9361166b851515612a3f565b6116838961167a878651612734565b940151966139e1565b90612734565b916116c783895161169981611afb565b601c81527b6765744d696e744c70416d6f756e74206465706f73697444656c746160201b602082015261410d565b6116da836116d58785611e5b565b611e5b565b906116f36116ec60a08a0151846127ee565b8093611dec565b9561173f878b5161170381611b16565b602181527f6765744465706f736974416d6f756e7420657870656374496e64657844656c746020820152606160f81b8d820152856110bd612aa7565b8196848410156000146117e8575050509061175991611dec565b8181106117c8575060c06117846117a6936117ac935b61135c8761177b613bc4565b836110bd613c0d565b9561179a85611791613c40565b896110bd613c85565b01946117a68651611dc6565b906128ea565b9351611dc6565b610183816117bf613c40565b846110bd613c85565b6117ac9193506117846117a6936117e28360c09497611dec565b9561176f565b91965091506117f79250611dec565b818110611819575060c06117846117a6936117ac939561135c8761177b613bc4565b925060c06117846117a693611831866117ac95611dec565b61176f565b61168991925061185661165f9160c03d8111610e6a57610e5b8183611b31565b92915061164f565b602491945061187b9060e03d60e0116103d6576103c88183611b31565b9390611601565b503461014b57604036600319011261014b576001600160a01b03600435818116908190036107925760243591808316809303611984576040516351331ad760e01b815260209081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa8015610688578291879161198f575b50602460405180958193637be53ca160e01b8352336004840152165afa9081156103dd578591611954575b506119379150611b73565b60018060a01b031990816001541617600155600254161760025580f35b905081813d8311611988575b61196a8183611b31565b810103126119845761197e61193791611b66565b3861192c565b8380fd5b503d611960565b82819392503d83116119be575b6119a68183611b31565b810103126106c5576119b88291611b52565b38611901565b503d61199c565b503461014b578060031936011261014b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461014b5760c036600319011261014b57611a24611a76565b90611a2d611a8c565b9060643590811515820361014b57604061018360a43560843585604435888a611e68565b90503461039a578160031936011261039a576004546001600160a01b03168152602090f35b600435906001600160a01b038216820361081657565b602435906001600160a01b038216820361081657565b6040906003190112610816576004359060243590565b606090600319011261081657600435906024359060443590565b6001600160401b038111611ae557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117611ae557604052565b606081019081106001600160401b03821117611ae557604052565b90601f801991011681019081106001600160401b03821117611ae557604052565b51906001600160a01b038216820361081657565b5190811515820361081657565b15611b7a57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b908160e0910312610816576040519060e08201908282106001600160401b03831117611ae55760c091604052611be481611b52565b8352611bf260208201611b52565b6020840152611c0360408201611b52565b6040840152611c1460608201611b66565b60608401526080810151608084015260a081015160a0840152015160c082015290565b15611c3e57565b60405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103830b4b960a11b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b3d15611ce9573d906001600160401b038211611ae55760405191611cdd601f8201601f191660200184611b31565b82523d6000602084013e565b606090565b814710611d81576000918291829182916001600160a01b03165af1611d11611caf565b5015611d1957565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b90612710918203918211611dd657565b634e487b7160e01b600052601160045260246000fd5b91908203918211611dd657565b908160c0910312610816576040519060c08201908282106001600160401b03831117611ae55760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b91908201809211611dd657565b9192909593949560008080611ed0611ef5604051611e8581611afb565b601a815279737761702066756e64657220257320726563656976657220257360301b60208201526040519283916307e763af60e51b60208401526060602484015260848301906126d4565b6001600160a01b038a811660448401528816606483015203601f198101835282611b31565b6020815191016a636f6e736f6c652e6c6f675afa508080611f81611fa3604051611f1e81611b16565b602c81527f737761702070616972496e64657820257320697342757920257320657870656360208201526b74416d6f756e74496e20257360a01b604082015260405192839163e41b6f6f60e01b60208401526080602484015260a48301906126d4565b8a604483015288151560648301528c608483015203601f198101835282611b31565b6020815191016a636f6e736f6c652e6c6f675afa508615610ed657600154604051632f7ce47360e21b815260048101879052919060e090839060249082906001600160a01b03165afa9182156103235781926124ed575b5060408201516001600160a01b031615610e7157600254604051632500ed8d60e21b8152600481018890526001600160a01b039091169860c0826024818d5afa918215610ecb5783926124cd575b50835161205d906001600160a01b0316614019565b996120698b8451612734565b906040840151906120818284604051610af081611b16565b61208b8284611e5b565b926120a461209d60a08a0151866127ee565b8095611dec565b936120b68582604051610b6281611b16565b8a156123d1575050508082111561239557612125926120d98d9261211794611dec565b8082101561238e57505b61135c816040516120f381611afb565b60128152717377617020737461626c65496e44656c746160701b602082015261410d565b916020815191015190611dec565b61217c818360405161213681611b16565b602e81527f7377617020616d6f756e744f757420696e646578546f6b656e2025732061766160208201526d696c61626c65496e64657820257360901b6040820152614165565b801561234e57808210156123465750905b612198829983612856565b996121d9838c6040516121aa81611afb565b601d81527f7377617020616d6f756e74496e20257320616d6f756e744f75742025730000006020820152614165565b821061230b576002546001600160a01b0316803b1561039a57818b60848a836040519586948593631ea746b160e21b855260048501528c1515602485015260448401528860648401525af1801561038f576122fc575b5060025483519192916001600160a01b039182169116813b156119845791839186836122729560405196879586948593630d172a0160e01b855260048501611c72565b03925af1801561038f57908a9392916122e2575b5050602001516002546000805160206142128339815191529360609390926122bc926001600160a01b039081169189911661250d565b604080519415158552602085018a905284018890526001600160a01b03908116941692a4565b819293506122ef90611ad2565b61014b5790818992612286565b61230590611ad2565b3861222f565b60405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d081b5a5b93dd5d606a1b6044820152606490fd5b90509061218d565b60405162461bcd60e51b815260206004820152601860248201527737379030bb30b4b630b136329034b73232bc103a37b5b2b760411b6044820152606490fd5b90506120e3565b60405162461bcd60e51b81526020600482015260146024820152733737903732b2b21039ba30b13632903a37b5b2b760611b6044820152606490fd5b93509391509c5082829695961115610e06576123f492610bc18d610bc793612734565b6124058183604051610c2681611b16565b8015610dc757808210156124c55750905b61243a612424839a84612856565b8251909b8c9189906001600160a01b031661250d565b6002546020909101516001600160a01b039182169116813b156119845791839291858461247f969460405197889586948593630d172a0160e01b855260048501611c72565b03925af19081156124b9575091606091600080516020614212833981519152936124aa575b506122bc565b6124b390611ad2565b386124a4565b604051903d90823e3d90fd5b905090612416565b6124e691925060c03d8111610e6a57610e5b8183611b31565b9038612048565b61250691925060e03d81116103d6576103c88183611b31565b9038611ffa565b9061254390612535612548956040519586936323b872dd60e01b602086015260248501611c72565b03601f198101845283611b31565b61254a565b565b6040516125a8916001600160a01b031661256382611afb565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16125a2611caf565b91612637565b8051828115918215612618575b50509050156125c15750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8380929350010312610816578161262f9101611b66565b8082386125b5565b91929015612699575081511561264b575090565b3b156126545790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156126ac5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906126d09060248301906126d4565b0390fd5b919082519283825260005b848110612700575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016126df565b811561271e570490565b634e487b7160e01b600052601260045260246000fd5b90600019818309818302918280831092039180830392146127d85768327cb2734119d3b7a9601e1b908282111561279b577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b906000198183098183029182808310920391808303921461284b57612710908282111561279b577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146128da578483111561279b578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906128e79250612714565b90565b906127109060001982840992828102928380861095039480860395146128da578483111561279b578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b9160001982840992828102928380861095039480860395146128da578483111561279b578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b156129e157565b60405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b60405190612a2482611afb565b600c82526b1cdd18589b19505b5bdd5b9d60a21b6020830152565b15612a4657565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606490fd5b60405190612a8882611afb565b601082526f737461626c65546f74616c44656c746160801b6020830152565b60405190612ab482611afb565b6011825270657870656374537461626c6544656c746160781b6020830152565b60405190612ae182611afb565b600f82526e73776170537461626c6544656c746160881b6020830152565b60405190612b0c82611afb565b60168252756164644c697175696469747920736c697044656c746160501b6020830152565b60405190612b3e82611afb565b601482527318599d195c91995954dd18589b19505b5bdd5b9d60621b6020830152565b60405190612b6e82611afb565b600e82526d73776170496e64657844656c746160901b6020830152565b60405190612b9882611afb565b601382527218599d195c919959525b99195e105b5bdd5b9d606a1b6020830152565b6040919493926060820195825260208201520152565b91929093602495946000831580159061334a575b612bed906129da565b600154604051632f7ce47360e21b8152600481018890529860e0918a919082906001600160a01b03165afa80156103235760249798829161332c575b506040810151612c43906001600160a01b03161515611c37565b600254604051632500ed8d60e21b8152600481018990529860c0918a919082906001600160a01b03165afa97881561038f57829861330c575b50612cbb84604051612c8d81611afb565b6018815277185919131a5c5d5a591a5d1e481a5b99195e105b5bdd5b9d60421b6020820152876110bd612a17565b306001600160a01b038716036132da575b612cda60c0820151866127ee565b90612da1612d9a612cef60c0840151886127ee565b93612d5785604051612d0081611afb565b601b81527a185919131a5c5d5a591a5d1e481a5b99195e119959505b5bdd5b9d602a1b60208201528360405191612d3683611afb565b600f83526e1cdd18589b19519959505b5bdd5b9d608a1b60208401526141b0565b8351600354612d749183916001600160a01b039081169116613353565b6020840151600354612d949187916001600160a01b039081169116613353565b88611dec565b9286611dec565b8151909390612db8906001600160a01b0316614019565b99612dc48b1515612a3f565b84612dd08c8351612734565b612dda8d87612734565b9c8d9185604081960191612def835182611e5b565b613035575b50505050612e0c612e55936111a584612e1594611e5b565b6111b08d6139e1565b9b60405190612e2382611afb565b601e82527f6164644c697175696469747920696e6465784465706f73697444656c7461000060208301526110bd612b31565b60408201516001600160a01b0316803b1561039a5781612e8e81928d6040519485809481936340c10f1960e01b83523060048401611c94565b03925af1801561038f57613026575b5060018060a01b03604083015116815260066020526040812060018060a01b038616600052602052612ed48a604060002054611e5b565b6040838101516001600160a01b0390811684526006602090815282852089831660009081529152919091209190915560025416803b1561039a578185612f349286838e60405196879586948593633431529d60e21b855260048501612bba565b03925af1801561038f57613012575b50509181612faa827fae2a8a26a2b64d8d971277b87c24d1a12181aef23cf76b898a32ce8dd14c7591979695612f91612fe99660018060a01b0383511660018060a01b036002541690613353565b602001516002546001600160a01b039081169116613353565b60405190612fb782611afb565b602082527f6164644c6971756964697479206166746572466565496e646578416d6f756e7460208301526110bd612b31565b6040516001600160a01b0391821695909116939091829161300c91899184612bba565b0390a490565b61301c8291611ad2565b61014b5780612f43565b61302f90611ad2565b38612e9d565b856130468661304d93979697611e5b565b9351611e5b565b916130908360405161305e81611afb565b601c81527b6164644c697175696469747920696e646578546f74616c44656c746160201b6020820152836110bd612a7b565b61309a8382611e5b565b906130ac6116ec60a08c0151846127ee565b976130f0896040516130bd81611afb565b601d81527f6164644c697175696469747920657870656374496e64657844656c74610000006020820152856110bd612aa7565b6130fe8760808d015161337a565b999095848411156131de57505050936131ba6131a0613199613192612e559b8a98611361612e159c6111a59a8f9a61313990612e0c9f611dec565b9050808a11156131d35761135c613150828c611dec565b80925b6040519061316082611afb565b601f82527f6164644c6971756964697479206e65656453776170496e64657844656c74610060208301526110bd612b61565b9687612856565b809d611dec565b8b51600454919d916001600160a01b039081169116613353565b6131c68b611384612aff565b9450829650879150612df4565b61135c8a8092613153565b9350935097959496505081811161320a575b5050505050612e15612e0c612e55936111a58980956131c6565b612e559650612e1594611477612e0c956114726111a59e966132326132919761328a97611dec565b94858911156132cf5761146c613248878b611dec565b80975b6040519061325882611afb565b602082527f6164644c6971756964697479206e65656453776170537461626c6544656c746160208301526110bd612ad4565b8092611dec565b6020880151600454919a8b96909287926132b99186916001600160a01b039182169116613353565b6132c5826114a0612aff565b95508296506131f0565b61146c89809761324b565b6132ef85308860018060a01b0385511661250d565b61330784308860018060a01b0360208601511661250d565b612ccc565b61332591985060c03d8111610e6a57610e5b8183611b31565b9638612c7c565b613344915060e03d81116103d6576103c88183611b31565b38612c29565b50821515612be4565b612543612548939261253560405194859263a9059cbb60e01b602085015260248401611c94565b919080156133d95782156133a85761339d6133986133a49285612734565b61340e565b8093612714565b9190565b60405162461bcd60e51b8152602060048201526009602482015268496e76616c6964206b60b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606490fd5b801561354b576134d9816000908360801c8061353f575b508060401c80613532575b508060201c80613525575b508060101c80613518575b508060081c8061350b575b508060041c806134fe575b508060021c806134f1575b50600191828092811c6134ea575b1c1b6134818185612714565b01811c61348e8185612714565b01811c61349b8185612714565b01811c6134a88185612714565b01811c6134b58185612714565b01811c6134c28185612714565b01811c6134cf8185612714565b01901c8092612714565b808210156134e5575090565b905090565b0181613475565b6002915091019038613467565b600491509101903861345c565b6008915091019038613451565b6010915091019038613446565b602091509101903861343b565b6040915091019038613430565b91505060809038613425565b50600090565b909181156135ba57821515806135b1575b1561357a57613574826128e794611e5b565b91612964565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207265736572766560881b6044820152606490fd5b50801515613562565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b60009493916136008315156129da565b60018060a01b03908160015416966040978851632f7ce47360e21b815260e0816024816004958c878301525afa9081156139d75783916139b9575b508981019161364e868451161515611c37565b85835116845260209260068452868c86209816978886528452888c8620541061397f579160c09b9391879695938b9a9998600254169d8e602488519e8f928391632500ed8d60e21b8352878301525afa9b8c1561397557859c613955575b506136b78a8c613d31565b9e909c8d6136ca82518884015190611dec565b10613912578f908060608a6136e493015191015190611dec565b106138cf57803b156106c557858f613715928f8f84908c5196879586948593631a8c15b360e21b85528c8501612bba565b03925af1801561389e576138bc575b5087815116803b156106c5578561375281928d8a51948580948193632770a7eb60e21b8352308b8401611c94565b03925af1801561389e579086916138a8575b505087815116855260068452858520896000528452876137888b8860002054611dec565b91511685526006845285852089600052845285600020558660025416928783511693803b156106c557858d6137d5928a838b51809681958294630d172a0160e01b9d8e85528c8501611c72565b03925af1801561389e578992918791613885575b505081600254169301511692823b1561038b5791869391858f9461381a82968a519889978896879586528501611c72565b03925af1801561387b57613867575b5050906138607f6291bcce50c38c39d79a98ff5fad7f35319722e73285b50a6140dbfac75d511e93925192839216958a8984612bba565b0390a49190565b6138718291611ad2565b61014b5780613829565b83513d84823e3d90fd5b61389191929350611ad2565b61038b57879085386137e9565b87513d88823e3d90fd5b6138b190611ad2565b61038b578438613764565b6138c890959195611ad2565b9338613724565b865162461bcd60e51b8152808401869052601f60248201527f696e73756666696369656e7420737461626c65546f6b656e20616d6f756e74006044820152606490fd5b875162461bcd60e51b8152808501879052601e60248201527f696e73756666696369656e7420696e646578546f6b656e20616d6f756e7400006044820152606490fd5b61396e919c5060c03d8111610e6a57610e5b8183611b31565b9a386136ac565b86513d87823e3d90fd5b8b5162461bcd60e51b81528083018590526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606490fd5b6139d1915060e03d81116103d6576103c88183611b31565b3861363b565b8a513d85823e3d90fd5b90602460018060a01b0380600154169360e0604095865194858092632f7ce47360e21b82528560048301525afa928315613b2157600093613b2c575b5060c08260025416916024875180948193632500ed8d60e21b835260048301525afa8015613b2157613a7291600091613b03575b5085613a69613a6285875116614019565b8351612734565b91015190611e5b565b918215613aef5784015184516318160ddd60e01b81529160209183916004918391165afa938415613ae55750600093613ab2575b50916128e79192612856565b6020813d8211613add575b81613aca60209383611b31565b81010312611984575192506128e7613aa6565b3d9150613abd565b513d6000823e3d90fd5b5068327cb2734119d3b7a9601e1b93505050565b613b1b915060c03d8111610e6a57610e5b8183611b31565b38613a51565b85513d6000823e3d90fd5b613b4591935060e03d81116103d6576103c88183611b31565b9138613a1d565b60405190613b5982611b16565b60218252606160f81b6040837f6765744d696e744c70416d6f756e7420696e6465784465706f73697444656c7460208201520152565b60405190613b9c82611afb565b60198252786765744d696e744c70416d6f756e7420736c697044656c746160381b6020830152565b60405190613bd182611b16565b6027825266656e44656c746160c81b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578546f6b60208201520152565b60405190613c1a82611afb565b60178252766465706f736974537461626c65546f6b656e44656c746160481b6020830152565b60405190613c4d82611b16565b60238252621d5b9d60ea1b6040837f6765744465706f736974416d6f756e74206465706f736974496e646578416d6f60208201520152565b60405190613c9282611afb565b601382527219195c1bdcda5d14dd18589b19505b5bdd5b9d606a1b6020830152565b60405190613cc182611b16565b60288252676b656e44656c746160c01b6040837f6765745265636569766564416d6f756e742072656365697665496e646578546f60208201520152565b60405190613d0b82611afb565b601782527672656365697665537461626c65546f6b656e44656c746160481b6020830152565b9190613d3e8115156129da565b60015460408051632f7ce47360e21b8152600481018690529092916001600160a01b039060e0908390602490829085165afa91821561400e579060249291600092613fee575b50613d958186840151161515611c37565b60c08160025416865194858092632500ed8d60e21b82528b60048301525afa928315613b2157600093613fc6575b50613dd3613df791835116614019565b93613ddf851515612a3f565b61168386613dee878751612734565b950151986139e1565b91613e36838651613e0781611afb565b601e81527f6765745265636569766564416d6f756e74207265636569766544656c74610000602082015261410d565b613e556116ec60a0613e4c866111a58c87611e5b565b940151846127ee565b613ea1818751613e6481611b16565b602281527f6765745265636569766564416d6f756e7420657870656374496e64657844656c602082015261746160f01b89820152856110bd612aa7565b6000908198848411600014613f7e5750505090613ebd91611dec565b818110613f625750613ee46133a49286925b61135c84613edb613cb4565b836110bd613cfe565b9283815191613ef283611b16565b602983527f6765745265636569766564416d6f756e742072656365697665496e646578546f6020840152681ad95b905b5bdd5b9d60ba1b818401525191613f3883611afb565b60188352771c9958d95a5d9954dd18589b19551bdad95b905b5bdd5b9d60421b60208401526141b0565b6133a4929550613f7681613ee49293611dec565b958692613ecf565b90919493506133a4959850613f939250611dec565b818110613fae5750613ee49095869261135c84613edb613cb4565b9150613fbd82613ee492611dec565b91958692613ecf565b613df7919350613fe6613dd39160c03d8111610e6a57610e5b8183611b31565b939150613dc3565b61400791925060e03d81116103d6576103c88183611b31565b9038613d84565b84513d6000823e3d90fd5b604051631f94a27560e31b8152906020906001600160a01b039082846004817f000000000000000000000000000000000000000000000000000000000000000086165afa938415610db3576000946140d0575b506040516341976e0960e01b8152908216600482015292829184916024918391165afa908115610db3576000916140a4575b50905090565b82813d83116140c9575b6140b88183611b31565b8101031261014b575051803861409e565b503d6140ae565b90938382813d8311614106575b6140e78183611b31565b8101031261014b57509060246140fd8493611b52565b9491925061406c565b503d6140dd565b600091908291614152604051809261413e6020830195632d839cb360e21b87526040602485015260648401906126d4565b90604483015203601f198101835282611b31565b51906a636f6e736f6c652e6c6f675afa50565b600092916141528493604051928391614197602084019663ca47c4eb60e01b88526060602486015260848501906126d4565b916044840152606483015203601f198101835282611b31565b906141526000949385946141fd6040519485936141e6602086019863c67ea9d160e01b8a526080602488015260a48701906126d4565b9160448601526023198583030160648601526126d4565b90608483015203601f198101835282611b3156fe2424e4440d8e90b9be053a61916674e21e7603a28f7dccf3ff7b88b755c2e619a2646970667358221220aa93df769c6d4f717d49a843b45a0e1f5ac61da3970929ba88b4f090acda419464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17714,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "isHandler",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19959,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "pairInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPairInfo)23457"
      },
      {
        "astId": 19962,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "pairVault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPairVault)23605"
      },
      {
        "astId": 19964,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19966,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "slipReceiver",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19968,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 19974,
        "contract": "contracts/pair/PairLiquidity.sol:PairLiquidity",
        "label": "userPairTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPairInfo)23457": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)23605": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
