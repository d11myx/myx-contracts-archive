{
  "address": "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradingFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fundingInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "DecreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "IncreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "NeedBuyIndexToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairInfo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "UpdatePairInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "UpdatePairVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "UpdateTradingFeeReceiver",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getCurrentFundingRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPositionByKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "longTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "netExposureAmountChecker",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressExecutor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shortTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateCumulativeFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "updateFundingInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "updatePairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "updatePairVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "updateTradingFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c625042a4cdf7eddbafd24c0c0efa617892959977a41d1e6481303527ecdc0b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
    "transactionIndex": 0,
    "gasUsed": "5495121",
    "logsBloom": "0x
    "blockHash": "0x494334409c00563c33a1f87498a8e0e4996e14c5e92eb1ab0acca9c3ed4917bc",
    "transactionHash": "0x6c625042a4cdf7eddbafd24c0c0efa617892959977a41d1e6481303527ecdc0b",
    "logs": [],
    "blockNumber": 92,
    "cumulativeGasUsed": "5495121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "0x1c85638e118b37167e9298c2268758e058DdfDA0",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    28800
  ],
  "numDeployments": 1,
  "solcInputHash": "d12abf55450080ab9ed90de90073e0f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"DecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"IncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"NeedBuyIndexToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairInfo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"UpdatePairInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"UpdatePairVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"UpdateTradingFeeReceiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentFundingRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPositionByKey\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"netExposureAmountChecker\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressExecutor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"updateFundingInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"updatePairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"updatePairVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateTradingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/TradingVault.sol\":\"TradingVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ac72f22ea80e64abc0138d2a4e7976b7efcf4b089faa217a66e4271f7ca46cb\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface ITradingVault {\\n\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n     function getTradingFee(uint256 _pairIndex, bool _isLong, uint256 _sizeAmount) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(address _account, uint256 _pairIndex, bool _isLong) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xcd9561cc653de1d84ce5b0cfe9ce1eba77261799d31e940f7c5955b3935fbfe2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice) {return 0;}\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (self.positionAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self,self.positionAmount,price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7c9b4d0dd15ecfc7b3cdf602f65a601ae399acc9408d0636b0791647390532f5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14b07e1484e9a71f8b74c0e7e77c0850c3172e0d1ee821197e104266f2399ef1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x6dbfdfe9e3efa5876b6bdf69eba75e537b8541ebdb145ba2b177fa1d384fb396\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external returns (uint256 diffIndexAmount);\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0xa031e4c72c52f9a8fd5f8adb314245bf5e3298e07c30902335253738f3316273\",\"license\":\"UNLICENSED\"},\"contracts/trading/TradingVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../libraries/Position.sol';\\nimport '../libraries/PositionKey.sol';\\nimport '../interfaces/ITradingVault.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../pair/interfaces/IPairInfo.sol';\\nimport '../pair/interfaces/IPairVault.sol';\\nimport 'hardhat/console.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\ncontract TradingVault is ITradingVault, ReentrancyGuard, Roleable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    mapping(bytes32 => Position.Info) public positions;\\n\\n    mapping(address => bool) public override isFrozen;\\n\\n    mapping(uint256 => int256) public override netExposureAmountChecker;\\n    mapping(uint256 => uint256) public override longTracker;\\n    mapping(uint256 => uint256) public override shortTracker;\\n\\n    // cumulativeFundingRates tracks the funding rates based on utilization\\n    mapping(uint256 => int256) public cumulativeFundingRates;\\n    mapping(uint256 => int256) public lastFundingRates;\\n    // lastFundingTimes tracks the last time funding was updated for a token\\n    mapping(uint256 => uint256) public lastFundingTimes;\\n\\n    uint256 public fundingInterval;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    address public tradingFeeReceiver;\\n    address public addressExecutor;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        address _tradingFeeReceiver,\\n        uint256 _fundingInterval\\n    ) Roleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        tradingFeeReceiver = _tradingFeeReceiver;\\n        fundingInterval = _fundingInterval;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == addressExecutor, 'Position Manager: forbidden');\\n        _;\\n    }\\n\\n    function setExecutor(address _addressExecutor) external onlyPoolAdmin {\\n        addressExecutor = _addressExecutor;\\n    }\\n\\n    function updatePairInfo(address newPairInfo) external onlyPoolAdmin {\\n        address oldPairInfo = address(pairInfo);\\n        pairInfo = IPairInfo(newPairInfo);\\n        emit UpdatePairInfo(oldPairInfo, newPairInfo);\\n    }\\n\\n    function updatePairVault(address newPairVault) external onlyPoolAdmin {\\n        address oldPairVault = address(pairVault);\\n        pairVault = IPairVault(newPairVault);\\n        emit UpdatePairVault(oldPairVault, newPairVault);\\n    }\\n\\n    function updateTradingFeeReceiver(address newReceiver) external onlyPoolAdmin {\\n        address oldReceiver = tradingFeeReceiver;\\n        tradingFeeReceiver = newReceiver;\\n        emit UpdateTradingFeeReceiver(oldReceiver, newReceiver);\\n    }\\n\\n    function updateFundingInterval(uint256 newInterval) external onlyPoolAdmin {\\n        uint256 oldInterval = fundingInterval;\\n        fundingInterval = newInterval;\\n        emit UpdateFundingInterval(oldInterval, newInterval);\\n    }\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external nonReentrant onlyExecutor returns (uint256 tradingFee, int256 fundingFee) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        position.key = positionKey;\\n\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n        console.log('increasePosition sizeAmount', _sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        // \\u4fee\\u6539\\u4ed3\\u4f4d\\n        if (position.positionAmount == 0) {\\n            position.account = _account;\\n            position.pairIndex = _pairIndex;\\n            position.isLong = _isLong;\\n            position.averagePrice = _price;\\n        }\\n\\n        if (position.positionAmount > 0 && sizeDelta > 0) {\\n            position.averagePrice = (position.positionAmount.mulPrice(position.averagePrice) + sizeDelta).mulDiv(\\n                PrecisionUtils.pricePrecision(),\\n                (position.positionAmount + _sizeAmount)\\n            );\\n        }\\n        console.log('increasePosition averagePrice', position.averagePrice);\\n\\n        position.collateral = (int256(position.collateral) + _collateral).abs();\\n        position.positionAmount = position.positionAmount + _sizeAmount;\\n\\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(true, _account, _pairIndex, _isLong, _sizeAmount);\\n        console.log('increasePosition lastFundingTimes', lastFundingTimes[_pairIndex]);\\n        console.log('increasePosition cumulativeFundingRates', cumulativeFundingRates[_pairIndex].toString());\\n        console.log('increasePosition fundingFee', fundingFee.toString());\\n\\n        if (fundingFee >= 0) {\\n            uint256 absFundingFee = uint256(fundingFee);\\n            if (_isLong) {\\n                require(position.collateral >= absFundingFee, 'collateral not enough for funding fee');\\n                position.collateral -= absFundingFee;\\n                console.log('increasePosition long pay funding fee');\\n            } else {\\n                transferOut += absFundingFee; // todo distribute\\n                console.log('increasePosition long take funding fee');\\n            }\\n        } else {\\n            uint256 absFundingFee = uint256(-fundingFee);\\n            if (!_isLong) {\\n                require(position.collateral >= absFundingFee, 'collateral not enough for funding fee');\\n                position.collateral = position.collateral - absFundingFee;\\n                console.log('increasePosition short pay funding fee');\\n            } else {\\n                transferOut += absFundingFee; // todo distribute\\n                console.log('increasePosition short take funding fee');\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, _isLong, _sizeAmount, _price);\\n        require(position.collateral + transferOut >= tradingFee, 'collateral not enough for trading fee');\\n\\n        if (transferOut >= tradingFee) {\\n            transferOut -= tradingFee;\\n        } else {\\n            transferOut == 0;\\n            position.collateral -= tradingFee - transferOut;\\n        }\\n        // todo distribute\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n        console.log('increasePosition tradingFee', tradingFee);\\n\\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n        netExposureAmountChecker[_pairIndex] =\\n            prevNetExposureAmountChecker +\\n            (_isLong ? int256(_sizeAmount) : -int256(_sizeAmount));\\n        if (_isLong) {\\n            longTracker[_pairIndex] += _sizeAmount;\\n        } else {\\n            shortTracker[_pairIndex] += _sizeAmount;\\n        }\\n\\n        console.log('increasePosition prevNetExposureAmountChecker', prevNetExposureAmountChecker.toString());\\n        console.log('increasePosition netExposureAmountChecker', netExposureAmountChecker[_pairIndex].toString());\\n        console.log('increasePosition longTracker', longTracker[_pairIndex], 'shortTracker', shortTracker[_pairIndex]);\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        console.log('increasePosition lp averagePrice', lpVault.averagePrice, 'price', _price);\\n        uint256 extraIndexAmount;\\n        if (prevNetExposureAmountChecker > 0) {\\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                console.log('increasePosition BTO long increase');\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) +\\n                    sizeDelta).calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log('increasePosition BTO update averagePrice', averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log('increasePosition STO long decrease');\\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('increasePosition STO decreaseProfit', profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('increasePosition STO increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log('increasePosition STO long to short');\\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('increasePosition STO decreaseProfit', profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('increasePosition STO increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n\\n                pairVault.increaseReserveAmount(\\n                    _pairIndex,\\n                    0,\\n                    (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price)\\n                );\\n                console.log('increasePosition STO Long to Short update averagePrice', _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else if (prevNetExposureAmountChecker < 0) {\\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                console.log('increasePosition STO short increase');\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                uint256 averagePrice = (uint256(-prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) +\\n                    sizeDelta).calculatePrice(uint256(-prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log('increasePosition STO update averagePrice', averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\\n                console.log('increasePosition BTO short decrease');\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('increasePosition BTO decreaseProfit', profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('increasePosition BTO increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log('increasePosition BTO short to long');\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('increasePosition BTO increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('increasePosition BTO decreaseProfit', profit);\\n                    extraIndexAmount = pairVault.decreaseProfit(_pairIndex, profit);\\n                }\\n\\n                pairVault.increaseReserveAmount(\\n                    _pairIndex,\\n                    0,\\n                    (_sizeAmount - uint256(-prevNetExposureAmountChecker)).mulPrice(_price)\\n                );\\n                console.log('increasePosition BTO Long to Short update averagePrice', _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else {\\n            if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log('increasePosition BTO zero to long');\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n            } else {\\n                console.log('increasePosition STO zero to short');\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n            }\\n            pairVault.updateAveragePrice(_pairIndex, _price);\\n        }\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n        emit IncreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _collateral,\\n            _isLong,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n\\n        console.log('increase position finish');\\n    }\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external onlyExecutor nonReentrant returns (uint256 tradingFee, int256 fundingFee, int256 pnl) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        require(\\n            _sizeAmount >= tradingConfig.minTradeAmount && _sizeAmount <= tradingConfig.maxTradeAmount,\\n            'invalid size'\\n        );\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        require(position.account != address(0), 'position already closed');\\n\\n        // update position size\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n        console.log('decreasePosition sizeAmount', _sizeAmount, 'sizeDelta', sizeDelta);\\n\\n        position.collateral = (int256(position.collateral) + _collateral).abs();\\n        position.positionAmount -= _sizeAmount;\\n        console.log(\\n            'decreasePosition position collateral',\\n            position.collateral,\\n            'positionAmount',\\n            position.positionAmount\\n        );\\n\\n        uint256 transferOut = _collateral > 0 ? 0 : _collateral.abs();\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(false, _account, _pairIndex, _isLong, _sizeAmount);\\n        console.log('decreasePosition lastFundingTimes', lastFundingTimes[_pairIndex]);\\n        console.log('decreasePosition cumulativeFundingRates', cumulativeFundingRates[_pairIndex].toString());\\n        console.log('decreasePosition fundingFee', fundingFee.toString());\\n\\n        if (fundingFee >= 0) {\\n            uint256 absFundingFee = uint256(fundingFee);\\n            if (_isLong) {\\n                require(position.collateral >= absFundingFee, 'collateral not enough for funding fee');\\n                position.collateral -= absFundingFee;\\n                console.log('decreasePosition long pay funding fee');\\n            } else {\\n                transferOut += absFundingFee; // todo distribute\\n                console.log('decreasePosition long take funding fee');\\n            }\\n        } else {\\n            uint256 absFundingFee = uint256(-fundingFee);\\n            if (!_isLong) {\\n                require(position.collateral >= absFundingFee, 'collateral not enough for funding fee');\\n                position.collateral = position.collateral - absFundingFee;\\n                console.log('decreasePosition short pay funding fee');\\n            } else {\\n                transferOut += absFundingFee; // todo distribute\\n                console.log('decreasePosition short take funding fee');\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, !_isLong, _sizeAmount, _price);\\n        require(position.collateral + transferOut >= tradingFee, 'collateral not enough for trading fee');\\n\\n        if (transferOut >= tradingFee) {\\n            transferOut -= tradingFee;\\n        } else {\\n            transferOut == 0;\\n            position.collateral -= tradingFee - transferOut;\\n        }\\n        // todo fee distribute\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n        console.log('decreasePosition tradingFee', tradingFee);\\n\\n        int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n        netExposureAmountChecker[_pairIndex] =\\n            prevNetExposureAmountChecker +\\n            (_isLong ? -int256(_sizeAmount) : int256(_sizeAmount));\\n        if (_isLong) {\\n            longTracker[_pairIndex] -= _sizeAmount;\\n        } else {\\n            shortTracker[_pairIndex] -= _sizeAmount;\\n        }\\n\\n        console.log('decreasePosition prevNetExposureAmountChecker', prevNetExposureAmountChecker.toString());\\n        console.log('decreasePosition netExposureAmountChecker', netExposureAmountChecker[_pairIndex].toString());\\n        console.log('decreasePosition longTracker', longTracker[_pairIndex], 'shortTracker', shortTracker[_pairIndex]);\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        if (prevNetExposureAmountChecker > 0) {\\n            if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                console.log('decreasePosition STC long increase');\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n                uint256 averagePrice = (uint256(prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) +\\n                    sizeDelta).calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log('decreasePosition STC update averagePrice', averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log('decreasePosition BTC long decrease');\\n                pairVault.decreaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('decreasePosition BTC decreaseProfit', profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('decreasePosition BTC increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log('decreasePosition BTC long to short');\\n                pairVault.decreaseReserveAmount(_pairIndex, lpVault.indexReservedAmount, 0);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('decreasePosition BTC decreaseProfit', profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('decreasePosition BTC increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n                pairVault.increaseReserveAmount(\\n                    _pairIndex,\\n                    0,\\n                    (_sizeAmount - uint256(prevNetExposureAmountChecker)).mulPrice(_price)\\n                );\\n                console.log('decreasePosition BTC Long to Short update averagePrice', _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else if (prevNetExposureAmountChecker < 0) {\\n            if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                console.log('decreasePosition BTC short increase');\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                uint256 averagePrice = (uint256(-prevNetExposureAmountChecker).mulPrice(lpVault.averagePrice) +\\n                    sizeDelta).calculatePrice(uint256(-prevNetExposureAmountChecker) + _sizeAmount);\\n                console.log('decreasePosition BTC update averagePrice', averagePrice);\\n                pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n            } else if (netExposureAmountChecker[_pairIndex] < 0) {\\n                console.log('decreasePosition STC short decrease');\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, _sizeAmount.mulPrice(lpVault.averagePrice));\\n\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('decreasePosition STC decreaseProfit', profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('decreasePosition STC increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                }\\n            } else {\\n                console.log('decreasePosition STC short to long');\\n                pairVault.decreaseReserveAmount(_pairIndex, 0, lpVault.stableReservedAmount);\\n                if (_price > lpVault.averagePrice) {\\n                    uint256 profit = _sizeAmount.mulPrice(_price - lpVault.averagePrice);\\n                    console.log('decreasePosition STC increaseProfit', profit);\\n                    IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                    pairVault.increaseProfit(_pairIndex, profit);\\n                } else {\\n                    uint256 profit = _sizeAmount.mulPrice(lpVault.averagePrice - _price);\\n                    console.log('decreasePosition STC decreaseProfit', profit);\\n                    pairVault.decreaseProfit(_pairIndex, profit);\\n                }\\n                pairVault.increaseReserveAmount(\\n                    _pairIndex,\\n                    0,\\n                    (_sizeAmount - uint256(-prevNetExposureAmountChecker)).mulPrice(_price)\\n                );\\n                console.log('decreasePosition STC Long to Short update averagePrice', _price);\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        } else {\\n            if (netExposureAmountChecker[_pairIndex] > 0) {\\n                console.log('decreasePosition STC zero to long');\\n                pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n            } else {\\n                console.log('decreasePosition BTC zero to short');\\n                pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n            }\\n            pairVault.updateAveragePrice(_pairIndex, _price);\\n        }\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        pnl = position.getUnrealizedPnl(_sizeAmount, price);\\n        console.log('decreasePosition pnl', pnl.toString());\\n\\n        if (pnl > 0) {\\n            transferOut += pnl.abs();\\n        } else {\\n            position.collateral -= position.collateral.min(uint256(-pnl));\\n        }\\n        position.realisedPnl += pnl;\\n\\n        console.log('decreasePosition collateral', position.collateral);\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n        if (position.positionAmount == 0) {\\n            if (position.collateral > 0) {\\n                IERC20(pair.stableToken).safeTransfer(position.account, position.collateral);\\n            }\\n\\n            console.log('decreasePosition position close');\\n            delete positions[positionKey];\\n            emit ClosePosition(positionKey, _account, _pairIndex, _isLong);\\n        }\\n\\n        emit DecreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            _collateral,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            pnl,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n    }\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) public {\\n        console.log('updateCumulativeFundingRate pairIndex', _pairIndex, 'price', _price);\\n\\n        if (lastFundingTimes[_pairIndex] == 0) {\\n            lastFundingTimes[_pairIndex] = (block.timestamp / fundingInterval) * fundingInterval;\\n            return;\\n        }\\n\\n        if (block.timestamp - lastFundingTimes[_pairIndex] < fundingInterval) {\\n            console.log('updateCumulativeFundingRate no need update');\\n            return;\\n        }\\n\\n        uint256 intervals = (block.timestamp - lastFundingTimes[_pairIndex]) / fundingInterval;\\n        int256 nextFundingRate = _currentFundingRate(_pairIndex, _price);\\n\\n        lastFundingRates[_pairIndex] = nextFundingRate;\\n        cumulativeFundingRates[_pairIndex] = cumulativeFundingRates[_pairIndex] + nextFundingRate * int256(intervals);\\n        lastFundingTimes[_pairIndex] = (block.timestamp / fundingInterval) * fundingInterval;\\n\\n        emit UpdateFundingRate(_pairIndex, cumulativeFundingRates[_pairIndex], lastFundingTimes[_pairIndex]);\\n    }\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view override returns (uint256 tradingFee) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        return _tradingFee(_pairIndex, _isLong, _sizeAmount, price);\\n    }\\n\\n    function _tradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount,\\n        uint256 _price\\n    ) internal view returns (uint256 tradingFee) {\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n\\n        IPairInfo.TradingFeeConfig memory tradingFeeConfig = pairInfo.getTradingFeeConfig(_pairIndex);\\n        if (netExposureAmountChecker[_pairIndex] >= 0) {\\n            if (_isLong) {\\n                // fee\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            }\\n        } else {\\n            if (_isLong) {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            }\\n        }\\n        return tradingFee;\\n    }\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) public view override returns (int256) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n\\n        uint256 interval = block.timestamp - position.entryFundingTime;\\n        if (interval < fundingInterval) {\\n            if (!_increase) {\\n                int256 fundingRate = (lastFundingRates[_pairIndex] * int256(interval)) / int256(fundingInterval);\\n                return (int256(_sizeAmount) * fundingRate) / int256(PrecisionUtils.fundingRatePrecision());\\n            }\\n        }\\n\\n        int256 fundingRate = cumulativeFundingRates[_pairIndex] - position.entryFundingRate;\\n        return (int256(position.positionAmount) * fundingRate) / int256(PrecisionUtils.fundingRatePrecision());\\n    }\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view override returns (int256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        return _currentFundingRate(_pairIndex, price);\\n    }\\n\\n    function _currentFundingRate(uint256 _pairIndex, uint256 _price) internal view returns (int256 fundingRate) {\\n        console.log('currentFundingRate pairIndex', _pairIndex, '_price', _price);\\n\\n        IPairInfo.FundingFeeConfig memory fundingFeeConfig = pairInfo.getFundingFeeConfig(_pairIndex);\\n\\n        uint256 absNetExposure = netExposureAmountChecker[_pairIndex].abs();\\n        uint256 w = fundingFeeConfig.fundingWeightFactor;\\n        uint256 q = longTracker[_pairIndex] + shortTracker[_pairIndex];\\n        uint256 k = fundingFeeConfig.liquidityPremiumFactor;\\n        console.log('currentFundingRate w %s q %s k %s', w, q, k);\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        uint256 l = (lpVault.indexTotalAmount - lpVault.indexReservedAmount).mulPrice(_price) +\\n            (lpVault.stableTotalAmount - lpVault.stableReservedAmount);\\n        console.log('currentFundingRate l', l);\\n\\n        uint256 absFundingRate;\\n        if (q == 0 || l == 0) {\\n            fundingRate = fundingFeeConfig.defaultFundingRate;\\n        } else {\\n            absFundingRate =\\n                (w * absNetExposure * PrecisionUtils.fundingRatePrecision()) /\\n                (k * q) +\\n                ((PrecisionUtils.fundingRatePrecision() - w) * absNetExposure) /\\n                (k * l);\\n            fundingRate = netExposureAmountChecker[_pairIndex] >= 0 ? int256(absFundingRate) : -int256(absFundingRate);\\n        }\\n\\n        fundingRate = (fundingRate - fundingFeeConfig.interest).min(fundingFeeConfig.minFundingRate).max(\\n            fundingFeeConfig.maxFundingRate\\n        );\\n        console.log('getCurrentFundingRate fundingRate', fundingRate.toString());\\n    }\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n        return position;\\n    }\\n\\n    function getPositionByKey(bytes32 key) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions[key];\\n        return position;\\n    }\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) public pure returns (bytes32) {\\n        return PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n    }\\n}\\n\",\"keccak256\":\"0xecbd4f44d66ef2b064cc867486714b2ff0a367b96bec1bc2eae0ca5f21802309\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200012757601f6200612a38819003918201601f19168301916001600160401b038311848410176200012c5780849260a09460405283398101031262000127578051906001600160a01b0390818316830362000127576020810151908282168092036200012757604081015190838216809203620001275760608101519384168094036200012757608001519360016000553360005260016020526040600020600160ff1982541617905560805260018060a01b03199182600b541617600b5581600c541617600c55600d541617600d55600a55604051615fe79081620001438239608051818181611c9501528181611f86015281816120c801528181612a9301528181613f47015281816141ab015281816143660152818161450501526146160152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6102a080604052600436101561001457600080fd5b60006102005260003560e01c90816301fd38f71461465e575080630298e273146146455780631848effa146145fd5780631c3c0ea8146144ce57806323fc61601461449e5780632cbc82bf1461446e5780632e4d2cda146142eb57806337e415a01461417657806346ea87af14614133578063514ea4bf146140925780635e55f98414613f0f57806383d532e814613ebd57806387d4f0d5146122135780638b78fba5146120905780638c1b753a14611f215780639391faf914611ef15780639849e41214611ed0578063a28feb8b14611ea4578063a31a7b4414611e78578063ad249b5214611e52578063bc95baad14611e16578063bd40e1c014611dea578063c4995cb214611c5d578063c8d0805214611ba5578063e054d7f214611b75578063e17ee6161461020e578063e5839836146101cb578063f879ffd21461019b5763fc2a5b1d1461016557600080fd5b3461019457610200518060031936011261019157600b546040516001600160a01b039091168152602090f35b80fd5b6102005180fd5b34610194576020366003190112610194576004356102005152600860205260206040610200512054604051908152f35b34610194576020366003190112610194576001600160a01b036101ec614686565b1661020051526003602052602060ff6040610200512054166040519015158152f35b3461019457602461021e366146cf565b9193909261022d969596614c62565b61024260018060a01b03600e5416331461483c565b600b54604051632f7ce47360e21b8152600481018490529660e09188919082906001600160a01b03165afa958615610b1f576102005196611b44575b50606086015115611b04576102948483896152c6565b93846102005152600260205260406102005120918583556102b58588614f12565b6102fc816040516102c58161476e565b601b81527a1a5b98dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b60208201528a6102f6614929565b91615ef0565b61037d8860058601548015611abf575b80151580611ab6575b611a8f575b61035d600688015460405161032e8161476e565b601d81527f696e637265617365506f736974696f6e206176657261676550726963650000006020820152615e64565b61037361036e8660048a0154614971565b6150c8565b600488015561494e565b600585015561020051821315611a805761020051975b88998b85886103a28b8261554e565b6103ab926152c6565b600090600052600260205260406000206103c490615415565b9061010082015142906103d6916149f8565b600a54119161040e91620f424093611a78575b6104066040828d60a094526007602052205460e084015190615832565b91015161552b565b0599876102005152600960205261046b604061020051205460405161043281614789565b602181527f696e637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615e64565b87610200515260076020526104d461048960406102005120546150dc565b60405161049581614789565b602781527f696e637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615ea9565b6105196104e08c6150dc565b6040516104ec8161476e565b601b81527a696e637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615ea9565b610200518b126119a757508415611949576105448a600488015461053f8282101561499e565b6149f8565b600487015561059560405161055881614789565b602581527f696e637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615e15565b86610200515260076020526040610200518181205460078901556009602052205460088701556105c78883878a615700565b809b60048801546105e3836105dc848461494e565b1015614a05565b82821061192a5750906105f5916149f8565b925b6020820151600d54610617918e916001600160a01b039081169116614cb8565b6106548c6040516106278161476e565b601b81527a696e637265617365506f736974696f6e2074726164696e6746656560281b6020820152615e64565b6102008051899052600460205251604090205490861561191957610679845b83614971565b896102005152600460205261020051906040822055876000146118fe57508861020051526005602052604061020051206106b485825461494e565b90555b6107146106c3836150dc565b6040516106cf81614789565b602d81527f696e637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615ea9565b886102005152600460205261077f61073260406102005120546150dc565b60405161073e81614789565b602981527f696e637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615ea9565b88610200515260056020526107de61020051604080822054916006602052205490604051906107ad8261476e565b601c82527b34b731b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b60208301526102f6614a5f565b600c54604051632500ed8d60e21b8152600481018b905291906001600160a01b031660c083602481845afa928315610b1f5761020051936118ce575b506108638c6080850151604051906108318261476e565b602082527f696e637265617365506f736974696f6e206c702061766572616765507269636560208301526102f6614ad7565b8a6102005180861360001461112657509050610200515260046020526102005183604082205413600014610b4b57506108db6040516108a181614789565b602281527f696e637265617365506f736974696f6e2042544f206c6f6e6720696e63726561602082015261736560f01b6040820152615e15565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152866024850152610200516044850152836064816102005180945af1928315610b1f578693610b2d575b509161094b6109519261094660806109579796015186614f12565b61494e565b9261494e565b90614fcc565b6109a78160405161096781614789565b602881527f696e637265617365506f736974696f6e2042544f207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102005180945af18015610b1f57610b09575b50610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f52833981519152945b828d81610ae8575b5050508f51928b845260018060a01b038d166020850152604089908501526060840152851515608084015260a08301528760c08301528d60e08301528c610100830152610120820152a16004820154600583015460068401549160078501549360096008870154960154968f519b8c9b8c614c0c565b0390a1610ad58351610aab8161476e565b60188152770d2dcc6e4cac2e6ca40e0dee6d2e8d2dedc40ccd2dcd2e6d60431b6020820152615e15565b6001610200515582519182526020820152f35b602090920151610b0192906001600160a01b0316614cb8565b38828d610a24565b610b129061470e565b6102005180156109ea5780fd5b6040513d61020051823e3d90fd5b610b399192935061470e565b6102005180610191579085929161092b565b6040812054949f9c9b9a99989796959492939213159050610de35750610bb0604051610b7681614789565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b8252886004830152836024830152610200516044830152816064816102005180945af18015610b1f57610dcd575b50608081015180891115610cf25750610c1d6080610c23920151896149f8565b82614f12565b610c3481610c2f614bc7565b615e64565b600c54604051632d23f44960e01b81526004810189905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f57610cae575b50610140600080516020615f728339815191529998979593610a9a979593600080516020615f528339815191529360409f610a1c565b602090819a999896949a979593973d8311610ceb575b610cce81836147a4565b81010312610ce6578c98929496979895919395610c78565b600080fd5b503d610cc4565b610d12915088610d0c919e939495969798999a9b9e6149f8565b83614f12565b610d1e81610c2f614b82565b6020820151600c54610d3e9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528960048401526024830152816044816102005180945af18015610b1f57610db7575b50610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b610dc09061470e565b610200518015610d815780fd5b610dd69061470e565b610200518015610bfd5780fd5b90610e3860409e939495969798999a9b9e51610dfe81614789565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615e15565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526024830152610200516044830152816064816102005180945af18015610b1f57611110575b50896080820151808211600014611076575050610eae6080610eb49201518b6149f8565b84614f12565b610ec081610c2f614bc7565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f5761104b575b505b600c546001600160a01b031690610f28908a90610f2390866149f8565b614f12565b90803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f57611035575b50610fbc88604051610f7981614789565b603681527f696e637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152600080516020615f928339815191526040820152615e64565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b61103e9061470e565b610200518015610f685780fd5b602090813d831161106f575b61106181836147a4565b81010312610ce6578d610f04565b503d611057565b611085925090610eae916149f8565b61109181610c2f614b82565b6020830151600c546110b19183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102005180945af18015610b1f576110fa575b50610f06565b6111039061470e565b6102005180156110f45780fd5b6111199061470e565b610200518015610e8a5780fd5b808612156116e7575090506102005152600460205261020051836040822054126000146112fc575061119860405161115d81614789565b602381527f696e637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615e15565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152610200516024850152826044850152836064816102005180945af1928315610b1f5786936112de575b509161094661121061095193610946879660806112076112169a61498d565b91015190614f12565b9361498d565b6112668160405161122681614789565b602881527f696e637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b6112ea9192935061470e565b610200518061019157908592916111e8565b6040812054949f9c9b9a99989796959492939212159050611424575061136260405161132781614789565b602381527f696e637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615e15565b60018060a01b03600c541661137b608083015184614f12565b90803b156101945760405191637c7c829d60e01b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f5761140e575b506080810151808911156113e85750610c1d60806113dc920151896149f8565b610c3481610c2f614af8565b611402915088610d0c919e939495969798999a9b9e6149f8565b610d1e81610c2f614b3d565b6114179061470e565b6102005180156113bc5780fd5b9061147960409e939495969798999a9b9e5161143f81614789565b602281527f696e637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152616e6760f01b6040820152615e15565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526102005160248401526044830152816064816102005180945af18015610b1f576116d1575b50896080820151808211600014611641575050610eae60806114ef9201518b6149f8565b6114fb81610c2f614b3d565b6020830151600c5461151b9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102005180945af18015610b1f5761162b575b505b61158189610f2361157b60018060a01b03600c54169461498d565b866149f8565b90803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f57611615575b50610fbc886040516115d281614789565b603681527f696e637265617365506f736974696f6e2042544f204c6f6e6720746f2053686f6020820152600080516020615f928339815191526040820152615e64565b61161e9061470e565b6102005180156115c15780fd5b6116349061470e565b61020051801561155e5780fd5b611650925090610eae916149f8565b61165c81610c2f614af8565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f576116a6575b50611560565b602090813d83116116ca575b6116bc81836147a4565b81010312610ce6578d6116a0565b503d6116b2565b6116da9061470e565b6102005180156114cb5780fd5b9193509193505260046020526102005160408120541360001461182a57505061174e60405161171581614789565b602181527f696e637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252886004830152836024830152610200516044830152816064816102005180945af18015610b1f57611814575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b61181d9061470e565b61020051801561179a5780fd5b61187360405161183981614789565b602281527f696e637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615e15565b803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f576118b8575b50610fbc565b6118c19061470e565b6102005180156118b25780fd5b6118f091935060c03d81116118f7575b6118e881836147a4565b810190614a87565b913861081a565b503d6118de565b60409060066020522061191285825461494e565b90556106b7565b6106796119258561498d565b610673565b6119398261193f9397946149f8565b906149f8565b60048801556105f7565b99896119549161494e565b996119a260405161196481614789565b602681527f696e637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615e15565b610595565b6119b08b61498d565b9086611a1e57506119cc90600488015461053f8282101561499e565b60048701556119a26040516119e081614789565b602681527f696e637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615e15565b611a29929c5061494e565b996119a2604051611a3981614789565b602781527f696e637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615e15565b5060006103e9565b611a89826150c8565b97610393565b60068701611aaf611aa586610946845486614f12565b610951858561494e565b905561031a565b50831515610315565b6001870180546001600160a01b038f166001600160a01b03199091161790556002870188905560038701805460ff191660ff881515161790556006870189905561030c565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b611b6791965060e03d60e011611b6e575b611b5f81836147a4565b810190614886565b948761027e565b503d611b55565b34610194576020366003190112610194576004356102005152600660205260206040610200512054604051908152f35b3461019457602036600319011261019457611bbe615dc9565b5060043561020051526002602052611c59611bde60406102005120615415565b604051918291829190916101408101928051825260018060a01b036020820151166020830152604081015160408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080910151910152565b0390f35b346101945760208060031936011261019457611c77614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f57839185916102005191611db3575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194611d5a575b5050611d277f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16936147e6565b600d80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b0390a16102005180f35b90809450813d8311611dac575b611d7181836147a4565b8101031261019457611d27611da67f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16946147d9565b93611cfb565b503d611d67565b92505081813d8311611de3575b611dca81836147a4565b810103126101945783611ddd84926147c5565b86611ccd565b503d611dc0565b3461019457610200518060031936011261019157600e546040516001600160a01b039091168152602090f35b3461019457611e36611e273661469c565b91611e30615dc9565b506152c6565b61020051526002602052611c59611bde60406102005120615415565b3461019457604036600319011261019457611e7160243560043561554e565b6102005180f35b3461019457610200518060031936011261019157600c546040516001600160a01b039091168152602090f35b3461019457610200518060031936011261019157600d546040516001600160a01b039091168152602090f35b34610194576102005180600319360112610191576020600a54604051908152f35b34610194576020366003190112610194576004356102005152600760205260206040610200512054604051908152f35b34610194576020806003193601126101945760043560018060a01b0390602460e083600b541660405192838092632f7ce47360e21b82528660048301525afa908115610b1f576102005191612071575b50604051631f94a27560e31b815284816004817f000000000000000000000000000000000000000000000000000000000000000088165afa908115610b1f57859285916102005193612033575b50516040516341976e0960e01b8152911660048201529384916024918391165afa908115610b1f576102005191612002575b611ffa9250615953565b604051908152f35b90508282813d831161202c575b61201981836147a4565b81010312610ce657611ffa915190611ff0565b503d61200f565b93849193508092503d831161206a575b61204d81836147a4565b810103126101945760248461206287946147c5565b929091611fbe565b503d612043565b61208a915060e03d60e011611b6e57611b5f81836147a4565b84611f71565b3461019457602080600319360112610194576120aa614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f578391859161020051916121dc575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194612183575b505061215a7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7936147e6565b600c80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b90809450813d83116121d5575b61219a81836147a4565b810103126101945761215a6121cf7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7946147d9565b9361212e565b503d612190565b92505081813d831161220c575b6121f381836147a4565b81010312610194578361220684926147c5565b86612100565b503d6121e9565b3461019457612221366146cf565b6102209594939552610140526101e052610100526101805261224e60018060a01b03600e5416331461483c565b612256614c62565b600b54604051632f7ce47360e21b8152610100516004820152906001600160a01b031660e082602481845afa908115610b1f57602492610100926102005160e052613e9c575b506040516330a66e1560e01b81528251600482015292839182905afa908115610b1f576102005191613de5575b5060408101516101e051908110159182613dd6575b505015613da2576122f96101405161010051610180516152c6565b80610280526102005152600260205260406102005120908160a05260018060a01b0360018301541615613d6357612336610220516101e051614f12565b90612382826040516123478161476e565b601b81527a191958dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b6020820152612377614929565b906101e05190615ef0565b61243461239d61036e83600460a05101806102405254614971565b8061024051556123bc600560a0510180610260526101e05190546149f8565b90816102605155604051906123d082614789565b602482527f6465637265617365506f736974696f6e20706f736974696f6e20636f6c6c6174602083015263195c985b60e21b6040830152604051916124148361476e565b600e83526d1c1bdcda5d1a5bdb905b5bdd5b9d60921b6020840152615ef0565b61020051811315613d5557610200515b80608052612458610220516101005161554e565b6124706101e05161014051610100516101805161584b565b6101c05261010051610200515260096020526124d2604061020051205460405161249981614789565b602181527f6465637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615e64565b610100516102005152600760205261253e6124f360406102005120546150dc565b6040516124ff81614789565b602781527f6465637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615ea9565b61258661254d6101c0516150dc565b6040516125598161476e565b601b81527a6465637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615ea9565b610200516101c051908112613c825750506101405115613c1e576125c161024051546125b76101c05182101561499e565b6101c051906149f8565b61024051556126126040516125d581614789565b602581527f6465637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615e15565b61010051610200515260076020526102005160086040808320549260a051936007850160c052600785015560096020522054918181016101a0520155610140511591612669610220516101e0518561010051615700565b80610160526126836102405154916105dc6080518461494e565b610160516080519190808310613c07575050506126a5610160516080516149f8565b6080525b60e0516020015161016051600d546126cd926001600160a01b039182169116614cb8565b61270e6040516126dc8161476e565b601b81527a6465637265617365506f736974696f6e2074726164696e6746656560281b60208201526101605190615e64565b610100516102005152600460205261020051906040822054915061014051600014613bfb576127426106736101e05161498d565b61010051610200515260046020526102005190604082205561014051600014613bdd57506101005161020051526005602052604061020051206127896101e05182546149f8565b90555b6127e9612798836150dc565b6040516127a481614789565b602d81527f6465637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615ea9565b610100516102005152600460205261285761280a60406102005120546150dc565b60405161281681614789565b602981527f6465637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615ea9565b61010051610200515260056020526128b961020051604080822054916006602052205490604051906128888261476e565b601c82527b3232b1b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b60208301526102f6614a5f565b600c54604051632500ed8d60e21b8152610100516004820152906001600160a01b031660c082602481845afa918215610b1f576102005192613bbc575b50610200518085131561346757505061010051610200515260046020526102005183604082205413600014612f3a575061296f60405161293581614789565b602281527f6465637265617365506f736974696f6e20535443206c6f6e6720696e63726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57612f24575b506129db6129e69392610946608061095194015185614f12565b916101e0519061494e565b612a36816040516129f681614789565b602881527f6465637265617365506f736974696f6e20535443207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101005160048401526024830152816044816102005180945af18015610b1f57612f0e575b505b604051631f94a27560e31b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610b1f576102005191612ed4575b5060e051516040516341976e0960e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115610b1f576102005191612e7c575b50907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c2093612b91612b5f612b5561016096956101e051612b5060a051615415565b615493565b80610120526150dc565b604051612b6b8161476e565b6014815273191958dc99585cd9541bdcda5d1a5bdb881c1b9b60621b6020820152615ea9565b610200516101205190811315612e515750612bb9612bb1610120516150c8565b60805161494e565b6080525b612bd061012051600960a0510154614971565b600960a0510155612c186102405154604051612beb8161476e565b601b81527a191958dc99585cd9541bdcda5d1a5bdb8818dbdb1b185d195c985b602a1b6020820152615e64565b60805180612e2c575b50610260515415612d14575b506040519161028051835260018060a01b036101805116602084015261010051604084015215606083015260808201526101e05160a08201526102205160c0820152815160e08201526101c05161010082015261012051610120820152608051610140820152a1600080516020615f7283398151915261024051546102605154612ceb60a0519260068401549360c051549060096101a05154910154916040519687966102205195610140516101005161018051610280518c614c0c565b0390a16001610200515560606040516101605181526101c0516020820152610120516040820152f35b610240515480612e02575b5050612d5f604051612d308161476e565b601f81527f6465637265617365506f736974696f6e20706f736974696f6e20636c6f7365006020820152615e15565b610280516102005152600260205260006009610200516040812090838255806001830155836002830155600382015582600482015582600582015582600682015582600782015582600882015501557f1ffb81f32d2d371994fb39b875fbe035d34386083d2a85a3cf2894709c4581a2608060405161028051815260018060a01b036101805116602082015261010051604082015284156060820152a184612c2d565b60e05160200151600190920154612e25926001600160a01b039182169116614cb8565b8480612d1f565b6101805160e05160200151612e4b9291906001600160a01b0316614cb8565b85612c21565b612e7290612e6361024051549161498d565b808210156119395750806149f8565b6102405155612bbd565b929190506020833d602011612ecc575b81612e99602093836147a4565b81010312610ce65791519091907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c20612b0f565b3d9150612e8c565b90506020813d602011612f06575b81612eef602093836147a4565b8101031261019457612f00906147c5565b84612ace565b3d9150612ee2565b612f179061470e565b610200518015612a7c5780fd5b612f2d9061470e565b6102005180156129c15780fd5b9092915060408120541360001461314e5750612f95604051612f5b81614789565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720646563726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57613138575b50608001805161022051908082111561309a57505061300e6130179151610220516149f8565b6101e051614f12565b61302381610c2f6153d0565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f5761306f575b50612a7e565b602090813d8311613093575b61308581836147a4565b81010312610ce65783613069565b503d61307b565b6130a992509061300e916149f8565b6130b581610c2f61538b565b60e05160200151600c546130d79183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f576131225750612a7e565b61312b9061470e565b6102005180156130695780fd5b6131419061470e565b610200518015612fe85780fd5b9061319860405161315e81614789565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615e15565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101005160048401526024830152610200516044830152816064816102005180945af18015610b1f57613451575b5060800180516102205190808211156133b257505061300e6132139151610220516149f8565b61321f81610c2f6153d0565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f57613387575b505b61328760018060a01b03600c541691610f2361022051916101e0516149f8565b90803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613371575b506133226040516132da81614789565b603681527f6465637265617365506f736974696f6e20425443204c6f6e6720746f2053686f6020820152600080516020615f9283398151915260408201526102205190615e64565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252610100516004830152610220516024830152816044816102005180945af18015610b1f576131225750612a7e565b61337a9061470e565b6102005180156132ca5780fd5b602090813d83116133ab575b61339d81836147a4565b81010312610ce65784613265565b503d613393565b6133c192509061300e916149f8565b6133cd81610c2f61538b565b60e05160200151600c546133ef9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f5761343b575b50613267565b6134449061470e565b6102005180156134355780fd5b61345a9061470e565b6102005180156131ed5780fd5b808512156139f95750506101005161020051526004602052610200518360408220541260001461360557506134dc6040516134a181614789565b602381527f6465637265617365506f736974696f6e204254432073686f727420696e63726560208201526261736560e81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252610100516004830152610200516024830152836044830152816064816102005180945af18015610b1f576135ef575b5061354683926109466109519360806112076135549861498d565b916109466101e0519161498d565b6135a48160405161356481614789565b602881527f6465637265617365506f736974696f6e20425443207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101005160048401526024830152816044816102005180945af18015610b1f576131225750612a7e565b6135f89061470e565b61020051801561352b5780fd5b90929150604081205412600014613727575061366160405161362681614789565b602381527f6465637265617365506f736974696f6e205354432073686f727420646563726560208201526261736560e81b6040820152615e15565b60018060a01b03600c541661367d60808301516101e051614f12565b90803b156101945760405191637c7c829d60e01b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613711575b5060808101516102205190808211156136f657505061300e60806136ea920151610220516149f8565b61302381610c2f615301565b61370592509061300e916149f8565b6130b581610c2f615346565b61371a9061470e565b6102005180156136c15780fd5b9061377160405161373781614789565b602281527f6465637265617365506f736974696f6e205354432073686f727420746f206c6f6020820152616e6760f01b6040820152615e15565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f576139e3575b50608001805161022051908082111561395157505061300e6137ec9151610220516149f8565b6137f881610c2f615346565b60e05160200151600c5461381a9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f5761393b575b505b61388a60018060a01b03600c541691610f23613881610220519261498d565b6101e0516149f8565b90803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613925575b506133226040516138dd81614789565b603681527f6465637265617365506f736974696f6e20535443204c6f6e6720746f2053686f6020820152600080516020615f9283398151915260408201526102205190615e64565b61392e9061470e565b6102005180156138cd5780fd5b6139449061470e565b6102005180156138605780fd5b61396092509061300e916149f8565b61396c81610c2f615301565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f576139b8575b50613862565b602090813d83116139dc575b6139ce81836147a4565b81010312610ce657846139b2565b503d6139c4565b6139ec9061470e565b6102005180156137c65780fd5b9150919250610100519052600460205261020051604081205413600014613b1c575050613a64604051613a2b81614789565b602181527f6465637265617365506f736974696f6e20535443207a65726f20746f206c6f6e6020820152606760f81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57613b06575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252610100516004830152610220516024830152816044816102005180945af18015610b1f576131225750612a7e565b613b0f9061470e565b610200518015613ab65780fd5b613b65604051613b2b81614789565b602281527f6465637265617365506f736974696f6e20425443207a65726f20746f2073686f6020820152611c9d60f21b6040820152615e15565b803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613bad575b50613322565b613bb69061470e565b83613ba7565b613bd691925060c03d60c0116118f7576118e881836147a4565b90876128f6565b604090600660205220613bf46101e05182546149f8565b905561278c565b6127426101e051610673565b613c1492611939916149f8565b61024051556126a9565b613c2d6101c05160805161494e565b608052613c7d604051613c3f81614789565b602681527f6465637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615e15565b612612565b613c8b9061498d565b61014051613cfb57613ca99150610240515461053f8282101561499e565b6102405155613c7d604051613cbd81614789565b602681527f6465637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615e15565b613d049161494e565b608052613c7d604051613d1681614789565b602781527f6465637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615e15565b613d5e816150c8565b612444565b60405162461bcd60e51b81526020600482015260176024820152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606490fd5b606001511015905082806122de565b9050610100813d61010011613e94575b81613e0361010093836147a4565b8101031261019457604051906101008201908282106001600160401b03831117613e7a5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e0820152826122c9565b634e487b7160e01b61020051526041600452602461020051fd5b3d9150613df5565b613eb49060e03d60e011611b6e57611b5f81836147a4565b60e0528461229c565b346101945760a036600319011261019457600435801515810361019457602435906001600160a01b03821682036101945760643591821515830361019457602092611ffa9260843592604435916158df565b346101945760208060031936011261019457613f29614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f5783918591610200519161405b575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194614002575b5050613fd97f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050936147e6565b600b80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b90809450813d8311614054575b61401981836147a4565b8101031261019457613fd961404e7f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050946147d9565b93613fad565b503d61400f565b92505081813d831161408b575b61407281836147a4565b81010312610194578361408584926147c5565b86613f7f565b503d614068565b3461019457602036600319011261019457600435610200515260026020526101406040610200512080549060018060a01b0360018201541690600281015460ff60038301541660048301546005840154906006850154926007860154946009600888015497015497604051998a5260208a0152604089015215156060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b34610194576020366003190112610194576001600160a01b03614154614686565b1661020051526001602052602060ff6040610200512054166040519015158152f35b3461019457602080600319360112610194576040516351331ad760e01b81526004803592916001600160a01b039183908290817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610b1f57839161020051916142b5575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610b1f576102005191614254575b7f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b210504353246040848661423c866147e6565b600a549181600a558351928352820152a16102005180f35b9180915082813d83116142ae575b61426c81836147a4565b81010312610194577f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b210504353249261423c6142a46040946147d9565b929350509261420e565b503d614262565b82819392503d83116142e4575b6142cc81836147a4565b81010312610194576142de83916147c5565b856141e0565b503d6142c2565b3461019457606036600319011261019457602435600435811515820361019457600b54604051632f7ce47360e21b815260048101839052926001600160a01b0392909160e0908590602490829087165afa938415610b1f57610200519461444d575b50604051631f94a27560e31b81526020949085816004817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610b1f5786928691610200519361440f575b50516040516341976e0960e01b8152911660048201529485916024918391165afa918215610b1f5761020051926143de575b611ffa935060443591615700565b91508383813d8311614408575b6143f581836147a4565b8101031261019457611ffa9251916143d0565b503d6143eb565b93849193508092503d8311614446575b61442981836147a4565b810103126101945760248561443e88946147c5565b92909161439e565b503d61441f565b61446791945060e03d60e011611b6e57611b5f81836147a4565b928461434d565b34610194576020366003190112610194576004356102005152600560205260206040610200512054604051908152f35b34610194576020366003190112610194576004356102005152600960205260206040610200512054604051908152f35b3461019457602080600319360112610194576144e8614686565b6040516351331ad760e01b81526001600160a01b039280826004817f000000000000000000000000000000000000000000000000000000000000000088165afa8015610b1f57849261020051916145c4575b508190602460405180958193637be53ca160e01b8352336004840152165afa908115610b1f57610200519161458d575b5061457591506147e6565b1660018060a01b0319600e541617600e556102005180f35b905081813d83116145bd575b6145a381836147a4565b81010312610194576145b7614575916147d9565b8461456a565b503d614599565b809350828092503d83116145f6575b6145dd81836147a4565b8101031261019457806145f085936147c5565b9061453a565b503d6145d3565b34610194576102005180600319360112610191576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610194576020611ffa6146583661469c565b916152c6565b34610ce6576020366003190112610ce657602090600435600052600482526040600020548152f35b600435906001600160a01b0382168203610ce657565b6060906003190112610ce6576004356001600160a01b0381168103610ce65790602435906044358015158103610ce65790565b60c0906003190112610ce6576004356001600160a01b0381168103610ce657906024359060443590606435906084358015158103610ce6579060a43590565b6001600160401b03811161472157604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761472157604052565b61014081019081106001600160401b0382111761472157604052565b604081019081106001600160401b0382111761472157604052565b606081019081106001600160401b0382111761472157604052565b90601f801991011681019081106001600160401b0382111761472157604052565b51906001600160a01b0382168203610ce657565b51908115158203610ce657565b156147ed57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b0391821681529116602082015260400190565b1561484357565b60405162461bcd60e51b815260206004820152601b60248201527a2837b9b4ba34b7b71026b0b730b3b2b91d103337b93134b23232b760291b6044820152606490fd5b908160e0910312610ce6576040519060e08201908282106001600160401b038311176147215760c0916040526148bb816147c5565b83526148c9602082016147c5565b60208401526148da604082016147c5565b60408401526148eb606082016147d9565b60608401526080810151608084015260a081015160a0840152015160c082015290565b6001600160401b03811161472157601f01601f191660200190565b604051906149368261476e565b600982526873697a6544656c746160b81b6020830152565b9190820180921161495b57565b634e487b7160e01b600052601160045260246000fd5b9190916000838201938412911290801582169115161761495b57565b600160ff1b811461495b5760000390565b156149a557565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722066756e64696e604482015264672066656560d81b6064820152608490fd5b9190820391821161495b57565b15614a0c57565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722074726164696e604482015264672066656560d81b6064820152608490fd5b60405190614a6c8261476e565b600c82526b39b437b93a2a3930b1b5b2b960a11b6020830152565b908160c0910312610ce65760a060405191614aa183614737565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b60405190614ae48261476e565b6005825264707269636560d81b6020830152565b60405190614b0582614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20646563726561736550726f60208201520152565b60405190614b4a82614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20696e63726561736550726f60208201520152565b60405190614b8f82614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20696e63726561736550726f60208201520152565b60405190614bd482614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20646563726561736550726f60208201520152565b979491926101409996939c9b9a9794919c6101608a019d8a5260018060a01b031660208a0152604089015215156060880152608087015260a086015260c085015260e08401526101008301526101208201520152565b600260005414614c73576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039485166024840152604480840196909652948252926080820191906001600160401b0383118284101761472157614d7493836040521690614d138361476e565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d15614e09573d91614d598361490e565b92614d6760405194856147a4565b83523d868885013e614e0d565b90815190838215928315614de7575b505050905015614d905750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b848092939450010312610191575081614e0091016147d9565b80388381614d83565b6060915b91929015614e6f5750815115614e21575090565b3b15614e2a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015614e825750805190602001fd5b60405162461bcd60e51b815260206004820152908190614ea6906024830190614ecd565b0390fd5b60005b838110614ebd5750506000910152565b8181015183820152602001614ead565b90602091614ee681518092818552858086019101614eaa565b601f01601f1916010190565b8115614efc570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214614fb65768327cb2734119d3b7a9601e1b9082821115614f79577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146150505784831115614f79578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50509061505d9250614ef2565b90565b90600019818309818302918280831092039180830392146150bd576127109082821115614f79577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b600081126150d35790565b61505d9061498d565b600081126152a35760405160208101908082106001600160401b038311176147215761510f9160405260008152916150c8565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015615295575b506904ee2d6d415b85acef8160201b80821015615288575b50662386f26fc100008082101561527b575b506305f5e1008082101561526e575b5061271080821015615261575b506064811015615253575b600a80911015615249575b6001808401928160216151ba6151a48761490e565b966151b260405198896147a4565b80885261490e565b602087019790601f1901368937860101905b615213575b505050506152079261505d9260209260405195836151f88895518092888089019101614eaa565b84019151809386840190614eaa565b010380845201826147a4565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215615244579190826151cc565b6151d1565b916001019161518f565b606460029104920191615184565b6004910492019138615179565b600891049201913861516c565b601091049201913861515d565b602091049201913861514b565b604093508204905038615133565b61510f6040516152b28161476e565b60018152602d60f81b6020820152916150c8565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526152fb81614789565b51902090565b6040519061530e82614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320646563726561736550726f60208201520152565b6040519061535382614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320696e63726561736550726f60208201520152565b6040519061539882614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320696e63726561736550726f60208201520152565b604051906153dd82614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320646563726561736550726f60208201520152565b9060405161542281614752565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460ff161515606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e08201526008830154610100820152600990920154610120830152565b60c081019081519081851461550e5760600151156154e457508051808411156154cc575061505d926154c69151906149f8565b90614f12565b6154df92915061505d936154c6916149f8565b61498d565b838111156154fb575061505d926154c691516149f8565b6154df9291506154c69061505d946149f8565b5050505050600090565b8181029291811591840414171561495b57565b818102929160008212600160ff1b82141661495b57818405149015171561495b57565b90604080519161555d83614789565b602583526155a3816020947f75706461746543756d756c617469766546756e64696e675261746520706169728682015264092dcc8caf60db1b85820152866102f6614ad7565b6000908482526009845282822054156156e2576155c383832054426149f8565b600a5480911061568d579161564386949261563d61562261561b606099977f30ee8c76a6febcb0400fb07183d873b5c18cf9e5ca6a47104676795b989c606d9b87526009895261561688882054426149f8565b614ef2565b9288615953565b9187855260088752828686205560078752858520549261552b565b90614971565b8482526007845282822055615663600a5461565e8142614ef2565b615518565b848252600984528282205560078352818082205491600985522054928251948552840152820152a1565b5050506156e09250807f75706461746543756d756c617469766546756e64696e6752617465206e6f206e696565642075706461746560b01b9251936156d185614789565b602a8552840152820152615e15565b565b5090916009906156f8600a5461565e8142614ef2565b948352522055565b9160249361570d91614f12565b9160018060a01b03600b54169060c0604092835196878092630da67fe760e01b82528560048301525afa94851561580c57600095615796575b50600090815260046020529081205412615778571561576a5761505d915190615060565b602061505d92015190615060565b1561578b57602061505d92015190615060565b61505d915190615060565b909460c0823d8211615804575b816157b060c093836147a4565b8101031261019157509060009160a08251916157cb83614737565b805183526020810151602084015283810151848401526060810151606084015260808101516080840152015160a0820152949091615746565b3d91506157a3565b82513d6000823e3d90fd5b8115614efc57600160ff1b811460001983141661495b570590565b8181039291600013801582851316918412161761495b57565b8192620f4240949261585c926152c6565b916000928352600260205261587360408420615415565b91615883610100840151426149f8565b600a54908181106158b55750505061040660408460a0936158b196526007602052205460e084015190615832565b0590565b6158d4919294506040866158d9956158b198526008602052205461552b565b615817565b9061552b565b9190620f42409493826158f1926152c6565b926000938452600260205261590860408520615415565b92615918610100850151426149f8565b600a5491828210615948575b5050505061040660408460a0936158b196526007602052205460e084015190615832565b156158b55780615924565b91906040908151936159648561476e565b601c85526159b7826020967b0c6eae4e4cadce88ceadcc8d2dccea4c2e8ca40e0c2d2e492dcc8caf60231b88820152838651916159a08361476e565b60068352655f707269636560d01b8a840152615ef0565b600b54835163694b193160e11b81526004808201849052909390916001600160a01b039060249061012090819088908490829087165afa968715615dbe57600097615d11575b5050846000528389528660002054615a14906150c8565b6060870151938660005260058b52886000205460068c528960002054615a399161494e565b906080890151948a51615a4b81614789565b602181528d81017f63757272656e7446756e64696e675261746520772025732071202573206b202590528b8101607360f81b90528d8c51809181019263a7a8785360e01b84528882016080905260a48201615aa591614ecd565b8a604483015286606483015289608483015203601f1981018252615ac990826147a4565b51905a91600092916a636f6e736f6c652e6c6f678493fa50600c548b51632500ed8d60e21b81528981018b90529291168286815a9360c094fa918215615d0657908d615b469392600093615cd8575b50615b4091610f23615b3092855190860151906149f8565b9160608d820151910151906149f8565b9061494e565b92615b7c848d7318dd5c9c995b9d119d5b991a5b99d4985d19481b60621b8d5191615b708361476e565b60148352820152615e64565b81158015615cd0575b15615c20575050505050505050908184615bab836156e09501515b60a084015190615832565b825180821215615c185750915b015180821315615c105750935b606560f81b615bd3866150dc565b927f67657443757272656e7446756e64696e67526174652066756e64696e67526174815193615c0185614789565b60218552840152820152615ea9565b905093615bc5565b905091615bb8565b615c2a8387615518565b620f42409283820291808304851490151715615cbc5790615c4e615c549288615518565b90614ef2565b958203918211615ca9575093615b406156e099989794615c4e8d9895615c80615c8696615bab9a615518565b92615518565b9160005283526000858120541215600003615ba057615ca49061498d565b615ba0565b634e487b7160e01b600090815260118852fd5b8260118a634e487b7160e01b600052526000fd5b508315615b85565b615b3091935091610f23615cfc615b409460c03d81116118f7576118e881836147a4565b9492505091615b18565b8b513d6000823e3d90fd5b9091968282813d8311615db7575b615d2981836147a4565b81010312610191578851928301908382106001600160401b03831117615da55750885280518252898101518a8301528781015188830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529438806159fd565b634e487b7160e01b8152604187528890fd5b503d615d1f565b88513d6000823e3d90fd5b60405190615dd682614752565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b60008091604051615e5181615e43602082019463104c13eb60e21b8652602060248401526044830190614ecd565b03601f1981018352826147a4565b51906a636f6e736f6c652e6c6f675afa50565b600091908291615e516040518092615e956020830195632d839cb360e21b8752604060248501526064840190614ecd565b90604483015203601f1981018352826147a4565b60009190615e43615e518493604051928391615ede6020840196634b5c427760e01b8852604060248601526064850190614ecd565b83810360231901604485015290614ecd565b90615e51600094938594615f3d604051948593615f26602086019863c67ea9d160e01b8a526080602488015260a4870190614ecd565b916044860152602319858303016064860152614ecd565b90608483015203601f1981018352826147a456fe07777c9f149d310fb8670fb9752de106d0ebc29093eb6df2be370406a7d742a39a23c22b6372bd11ffa0aced0db638ca7c144fc3996ecc8fbe3f9a639ef285ad7274207570646174652061766572616765507269636500000000000000000000a2646970667358221220270c9fc92d0d4e865eacbc1b0349443152bd6d9636aa940d6620ab5ca1a27af064736f6c63430008110033",
  "deployedBytecode": "0x6102a080604052600436101561001457600080fd5b60006102005260003560e01c90816301fd38f71461465e575080630298e273146146455780631848effa146145fd5780631c3c0ea8146144ce57806323fc61601461449e5780632cbc82bf1461446e5780632e4d2cda146142eb57806337e415a01461417657806346ea87af14614133578063514ea4bf146140925780635e55f98414613f0f57806383d532e814613ebd57806387d4f0d5146122135780638b78fba5146120905780638c1b753a14611f215780639391faf914611ef15780639849e41214611ed0578063a28feb8b14611ea4578063a31a7b4414611e78578063ad249b5214611e52578063bc95baad14611e16578063bd40e1c014611dea578063c4995cb214611c5d578063c8d0805214611ba5578063e054d7f214611b75578063e17ee6161461020e578063e5839836146101cb578063f879ffd21461019b5763fc2a5b1d1461016557600080fd5b3461019457610200518060031936011261019157600b546040516001600160a01b039091168152602090f35b80fd5b6102005180fd5b34610194576020366003190112610194576004356102005152600860205260206040610200512054604051908152f35b34610194576020366003190112610194576001600160a01b036101ec614686565b1661020051526003602052602060ff6040610200512054166040519015158152f35b3461019457602461021e366146cf565b9193909261022d969596614c62565b61024260018060a01b03600e5416331461483c565b600b54604051632f7ce47360e21b8152600481018490529660e09188919082906001600160a01b03165afa958615610b1f576102005196611b44575b50606086015115611b04576102948483896152c6565b93846102005152600260205260406102005120918583556102b58588614f12565b6102fc816040516102c58161476e565b601b81527a1a5b98dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b60208201528a6102f6614929565b91615ef0565b61037d8860058601548015611abf575b80151580611ab6575b611a8f575b61035d600688015460405161032e8161476e565b601d81527f696e637265617365506f736974696f6e206176657261676550726963650000006020820152615e64565b61037361036e8660048a0154614971565b6150c8565b600488015561494e565b600585015561020051821315611a805761020051975b88998b85886103a28b8261554e565b6103ab926152c6565b600090600052600260205260406000206103c490615415565b9061010082015142906103d6916149f8565b600a54119161040e91620f424093611a78575b6104066040828d60a094526007602052205460e084015190615832565b91015161552b565b0599876102005152600960205261046b604061020051205460405161043281614789565b602181527f696e637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615e64565b87610200515260076020526104d461048960406102005120546150dc565b60405161049581614789565b602781527f696e637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615ea9565b6105196104e08c6150dc565b6040516104ec8161476e565b601b81527a696e637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615ea9565b610200518b126119a757508415611949576105448a600488015461053f8282101561499e565b6149f8565b600487015561059560405161055881614789565b602581527f696e637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615e15565b86610200515260076020526040610200518181205460078901556009602052205460088701556105c78883878a615700565b809b60048801546105e3836105dc848461494e565b1015614a05565b82821061192a5750906105f5916149f8565b925b6020820151600d54610617918e916001600160a01b039081169116614cb8565b6106548c6040516106278161476e565b601b81527a696e637265617365506f736974696f6e2074726164696e6746656560281b6020820152615e64565b6102008051899052600460205251604090205490861561191957610679845b83614971565b896102005152600460205261020051906040822055876000146118fe57508861020051526005602052604061020051206106b485825461494e565b90555b6107146106c3836150dc565b6040516106cf81614789565b602d81527f696e637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615ea9565b886102005152600460205261077f61073260406102005120546150dc565b60405161073e81614789565b602981527f696e637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615ea9565b88610200515260056020526107de61020051604080822054916006602052205490604051906107ad8261476e565b601c82527b34b731b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b60208301526102f6614a5f565b600c54604051632500ed8d60e21b8152600481018b905291906001600160a01b031660c083602481845afa928315610b1f5761020051936118ce575b506108638c6080850151604051906108318261476e565b602082527f696e637265617365506f736974696f6e206c702061766572616765507269636560208301526102f6614ad7565b8a6102005180861360001461112657509050610200515260046020526102005183604082205413600014610b4b57506108db6040516108a181614789565b602281527f696e637265617365506f736974696f6e2042544f206c6f6e6720696e63726561602082015261736560f01b6040820152615e15565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152866024850152610200516044850152836064816102005180945af1928315610b1f578693610b2d575b509161094b6109519261094660806109579796015186614f12565b61494e565b9261494e565b90614fcc565b6109a78160405161096781614789565b602881527f696e637265617365506f736974696f6e2042544f207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102005180945af18015610b1f57610b09575b50610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f52833981519152945b828d81610ae8575b5050508f51928b845260018060a01b038d166020850152604089908501526060840152851515608084015260a08301528760c08301528d60e08301528c610100830152610120820152a16004820154600583015460068401549160078501549360096008870154960154968f519b8c9b8c614c0c565b0390a1610ad58351610aab8161476e565b60188152770d2dcc6e4cac2e6ca40e0dee6d2e8d2dedc40ccd2dcd2e6d60431b6020820152615e15565b6001610200515582519182526020820152f35b602090920151610b0192906001600160a01b0316614cb8565b38828d610a24565b610b129061470e565b6102005180156109ea5780fd5b6040513d61020051823e3d90fd5b610b399192935061470e565b6102005180610191579085929161092b565b6040812054949f9c9b9a99989796959492939213159050610de35750610bb0604051610b7681614789565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b8252886004830152836024830152610200516044830152816064816102005180945af18015610b1f57610dcd575b50608081015180891115610cf25750610c1d6080610c23920151896149f8565b82614f12565b610c3481610c2f614bc7565b615e64565b600c54604051632d23f44960e01b81526004810189905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f57610cae575b50610140600080516020615f728339815191529998979593610a9a979593600080516020615f528339815191529360409f610a1c565b602090819a999896949a979593973d8311610ceb575b610cce81836147a4565b81010312610ce6578c98929496979895919395610c78565b600080fd5b503d610cc4565b610d12915088610d0c919e939495969798999a9b9e6149f8565b83614f12565b610d1e81610c2f614b82565b6020820151600c54610d3e9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528960048401526024830152816044816102005180945af18015610b1f57610db7575b50610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b610dc09061470e565b610200518015610d815780fd5b610dd69061470e565b610200518015610bfd5780fd5b90610e3860409e939495969798999a9b9e51610dfe81614789565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615e15565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526024830152610200516044830152816064816102005180945af18015610b1f57611110575b50896080820151808211600014611076575050610eae6080610eb49201518b6149f8565b84614f12565b610ec081610c2f614bc7565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f5761104b575b505b600c546001600160a01b031690610f28908a90610f2390866149f8565b614f12565b90803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f57611035575b50610fbc88604051610f7981614789565b603681527f696e637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152600080516020615f928339815191526040820152615e64565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b61103e9061470e565b610200518015610f685780fd5b602090813d831161106f575b61106181836147a4565b81010312610ce6578d610f04565b503d611057565b611085925090610eae916149f8565b61109181610c2f614b82565b6020830151600c546110b19183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102005180945af18015610b1f576110fa575b50610f06565b6111039061470e565b6102005180156110f45780fd5b6111199061470e565b610200518015610e8a5780fd5b808612156116e7575090506102005152600460205261020051836040822054126000146112fc575061119860405161115d81614789565b602381527f696e637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615e15565b600c546001600160a01b031691823b15610194576040519262a0151560e21b84528b6004850152610200516024850152826044850152836064816102005180945af1928315610b1f5786936112de575b509161094661121061095193610946879660806112076112169a61498d565b91015190614f12565b9361498d565b6112668160405161122681614789565b602881527f696e637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83528960048401526024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b6112ea9192935061470e565b610200518061019157908592916111e8565b6040812054949f9c9b9a99989796959492939212159050611424575061136260405161132781614789565b602381527f696e637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615e15565b60018060a01b03600c541661137b608083015184614f12565b90803b156101945760405191637c7c829d60e01b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f5761140e575b506080810151808911156113e85750610c1d60806113dc920151896149f8565b610c3481610c2f614af8565b611402915088610d0c919e939495969798999a9b9e6149f8565b610d1e81610c2f614b3d565b6114179061470e565b6102005180156113bc5780fd5b9061147960409e939495969798999a9b9e5161143f81614789565b602281527f696e637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152616e6760f01b6040820152615e15565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83528b60048401526102005160248401526044830152816064816102005180945af18015610b1f576116d1575b50896080820151808211600014611641575050610eae60806114ef9201518b6149f8565b6114fb81610c2f614b3d565b6020830151600c5461151b9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83528a60048401526024830152816044816102005180945af18015610b1f5761162b575b505b61158189610f2361157b60018060a01b03600c54169461498d565b866149f8565b90803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f57611615575b50610fbc886040516115d281614789565b603681527f696e637265617365506f736974696f6e2042544f204c6f6e6720746f2053686f6020820152600080516020615f928339815191526040820152615e64565b61161e9061470e565b6102005180156115c15780fd5b6116349061470e565b61020051801561155e5780fd5b611650925090610eae916149f8565b61165c81610c2f614af8565b600c54604051632d23f44960e01b8152600481018b905260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f576116a6575b50611560565b602090813d83116116ca575b6116bc81836147a4565b81010312610ce6578d6116a0565b503d6116b2565b6116da9061470e565b6102005180156114cb5780fd5b9193509193505260046020526102005160408120541360001461182a57505061174e60405161171581614789565b602181527f696e637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252886004830152836024830152610200516044830152816064816102005180945af18015610b1f57611814575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252886004830152896024830152816044816102005180945af18015610b1f57610db75750610140600080516020615f72833981519152999794610a9a979460409e9a9794600080516020615f5283398151915294610a1c565b61181d9061470e565b61020051801561179a5780fd5b61187360405161183981614789565b602281527f696e637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615e15565b803b15610194576040519162a0151560e21b83528960048401526102005160248401526044830152816064816102005180945af18015610b1f576118b8575b50610fbc565b6118c19061470e565b6102005180156118b25780fd5b6118f091935060c03d81116118f7575b6118e881836147a4565b810190614a87565b913861081a565b503d6118de565b60409060066020522061191285825461494e565b90556106b7565b6106796119258561498d565b610673565b6119398261193f9397946149f8565b906149f8565b60048801556105f7565b99896119549161494e565b996119a260405161196481614789565b602681527f696e637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615e15565b610595565b6119b08b61498d565b9086611a1e57506119cc90600488015461053f8282101561499e565b60048701556119a26040516119e081614789565b602681527f696e637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615e15565b611a29929c5061494e565b996119a2604051611a3981614789565b602781527f696e637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615e15565b5060006103e9565b611a89826150c8565b97610393565b60068701611aaf611aa586610946845486614f12565b610951858561494e565b905561031a565b50831515610315565b6001870180546001600160a01b038f166001600160a01b03199091161790556002870188905560038701805460ff191660ff881515161790556006870189905561030c565b60405162461bcd60e51b81526020600482015260186024820152771d1c985919481c185a5c881b9bdd081cdd5c1c1bdc9d195960421b6044820152606490fd5b611b6791965060e03d60e011611b6e575b611b5f81836147a4565b810190614886565b948761027e565b503d611b55565b34610194576020366003190112610194576004356102005152600660205260206040610200512054604051908152f35b3461019457602036600319011261019457611bbe615dc9565b5060043561020051526002602052611c59611bde60406102005120615415565b604051918291829190916101408101928051825260018060a01b036020820151166020830152604081015160408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080910151910152565b0390f35b346101945760208060031936011261019457611c77614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f57839185916102005191611db3575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194611d5a575b5050611d277f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16936147e6565b600d80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b0390a16102005180f35b90809450813d8311611dac575b611d7181836147a4565b8101031261019457611d27611da67f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d16946147d9565b93611cfb565b503d611d67565b92505081813d8311611de3575b611dca81836147a4565b810103126101945783611ddd84926147c5565b86611ccd565b503d611dc0565b3461019457610200518060031936011261019157600e546040516001600160a01b039091168152602090f35b3461019457611e36611e273661469c565b91611e30615dc9565b506152c6565b61020051526002602052611c59611bde60406102005120615415565b3461019457604036600319011261019457611e7160243560043561554e565b6102005180f35b3461019457610200518060031936011261019157600c546040516001600160a01b039091168152602090f35b3461019457610200518060031936011261019157600d546040516001600160a01b039091168152602090f35b34610194576102005180600319360112610191576020600a54604051908152f35b34610194576020366003190112610194576004356102005152600760205260206040610200512054604051908152f35b34610194576020806003193601126101945760043560018060a01b0390602460e083600b541660405192838092632f7ce47360e21b82528660048301525afa908115610b1f576102005191612071575b50604051631f94a27560e31b815284816004817f000000000000000000000000000000000000000000000000000000000000000088165afa908115610b1f57859285916102005193612033575b50516040516341976e0960e01b8152911660048201529384916024918391165afa908115610b1f576102005191612002575b611ffa9250615953565b604051908152f35b90508282813d831161202c575b61201981836147a4565b81010312610ce657611ffa915190611ff0565b503d61200f565b93849193508092503d831161206a575b61204d81836147a4565b810103126101945760248461206287946147c5565b929091611fbe565b503d612043565b61208a915060e03d60e011611b6e57611b5f81836147a4565b84611f71565b3461019457602080600319360112610194576120aa614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f578391859161020051916121dc575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194612183575b505061215a7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7936147e6565b600c80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b90809450813d83116121d5575b61219a81836147a4565b810103126101945761215a6121cf7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a7946147d9565b9361212e565b503d612190565b92505081813d831161220c575b6121f381836147a4565b81010312610194578361220684926147c5565b86612100565b503d6121e9565b3461019457612221366146cf565b6102209594939552610140526101e052610100526101805261224e60018060a01b03600e5416331461483c565b612256614c62565b600b54604051632f7ce47360e21b8152610100516004820152906001600160a01b031660e082602481845afa908115610b1f57602492610100926102005160e052613e9c575b506040516330a66e1560e01b81528251600482015292839182905afa908115610b1f576102005191613de5575b5060408101516101e051908110159182613dd6575b505015613da2576122f96101405161010051610180516152c6565b80610280526102005152600260205260406102005120908160a05260018060a01b0360018301541615613d6357612336610220516101e051614f12565b90612382826040516123478161476e565b601b81527a191958dc99585cd9541bdcda5d1a5bdb881cda5e99505b5bdd5b9d602a1b6020820152612377614929565b906101e05190615ef0565b61243461239d61036e83600460a05101806102405254614971565b8061024051556123bc600560a0510180610260526101e05190546149f8565b90816102605155604051906123d082614789565b602482527f6465637265617365506f736974696f6e20706f736974696f6e20636f6c6c6174602083015263195c985b60e21b6040830152604051916124148361476e565b600e83526d1c1bdcda5d1a5bdb905b5bdd5b9d60921b6020840152615ef0565b61020051811315613d5557610200515b80608052612458610220516101005161554e565b6124706101e05161014051610100516101805161584b565b6101c05261010051610200515260096020526124d2604061020051205460405161249981614789565b602181527f6465637265617365506f736974696f6e206c61737446756e64696e6754696d656020820152607360f81b6040820152615e64565b610100516102005152600760205261253e6124f360406102005120546150dc565b6040516124ff81614789565b602781527f6465637265617365506f736974696f6e2063756d756c617469766546756e64696020820152666e67526174657360c81b6040820152615ea9565b61258661254d6101c0516150dc565b6040516125598161476e565b601b81527a6465637265617365506f736974696f6e2066756e64696e6746656560281b6020820152615ea9565b610200516101c051908112613c825750506101405115613c1e576125c161024051546125b76101c05182101561499e565b6101c051906149f8565b61024051556126126040516125d581614789565b602581527f6465637265617365506f736974696f6e206c6f6e67207061792066756e64696e602082015264672066656560d81b6040820152615e15565b61010051610200515260076020526102005160086040808320549260a051936007850160c052600785015560096020522054918181016101a0520155610140511591612669610220516101e0518561010051615700565b80610160526126836102405154916105dc6080518461494e565b610160516080519190808310613c07575050506126a5610160516080516149f8565b6080525b60e0516020015161016051600d546126cd926001600160a01b039182169116614cb8565b61270e6040516126dc8161476e565b601b81527a6465637265617365506f736974696f6e2074726164696e6746656560281b60208201526101605190615e64565b610100516102005152600460205261020051906040822054915061014051600014613bfb576127426106736101e05161498d565b61010051610200515260046020526102005190604082205561014051600014613bdd57506101005161020051526005602052604061020051206127896101e05182546149f8565b90555b6127e9612798836150dc565b6040516127a481614789565b602d81527f6465637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615ea9565b610100516102005152600460205261285761280a60406102005120546150dc565b60405161281681614789565b602981527f6465637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615ea9565b61010051610200515260056020526128b961020051604080822054916006602052205490604051906128888261476e565b601c82527b3232b1b932b0b9b2a837b9b4ba34b7b7103637b733aa3930b1b5b2b960211b60208301526102f6614a5f565b600c54604051632500ed8d60e21b8152610100516004820152906001600160a01b031660c082602481845afa918215610b1f576102005192613bbc575b50610200518085131561346757505061010051610200515260046020526102005183604082205413600014612f3a575061296f60405161293581614789565b602281527f6465637265617365506f736974696f6e20535443206c6f6e6720696e63726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57612f24575b506129db6129e69392610946608061095194015185614f12565b916101e0519061494e565b612a36816040516129f681614789565b602881527f6465637265617365506f736974696f6e20535443207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101005160048401526024830152816044816102005180945af18015610b1f57612f0e575b505b604051631f94a27560e31b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610b1f576102005191612ed4575b5060e051516040516341976e0960e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115610b1f576102005191612e7c575b50907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c2093612b91612b5f612b5561016096956101e051612b5060a051615415565b615493565b80610120526150dc565b604051612b6b8161476e565b6014815273191958dc99585cd9541bdcda5d1a5bdb881c1b9b60621b6020820152615ea9565b610200516101205190811315612e515750612bb9612bb1610120516150c8565b60805161494e565b6080525b612bd061012051600960a0510154614971565b600960a0510155612c186102405154604051612beb8161476e565b601b81527a191958dc99585cd9541bdcda5d1a5bdb8818dbdb1b185d195c985b602a1b6020820152615e64565b60805180612e2c575b50610260515415612d14575b506040519161028051835260018060a01b036101805116602084015261010051604084015215606083015260808201526101e05160a08201526102205160c0820152815160e08201526101c05161010082015261012051610120820152608051610140820152a1600080516020615f7283398151915261024051546102605154612ceb60a0519260068401549360c051549060096101a05154910154916040519687966102205195610140516101005161018051610280518c614c0c565b0390a16001610200515560606040516101605181526101c0516020820152610120516040820152f35b610240515480612e02575b5050612d5f604051612d308161476e565b601f81527f6465637265617365506f736974696f6e20706f736974696f6e20636c6f7365006020820152615e15565b610280516102005152600260205260006009610200516040812090838255806001830155836002830155600382015582600482015582600582015582600682015582600782015582600882015501557f1ffb81f32d2d371994fb39b875fbe035d34386083d2a85a3cf2894709c4581a2608060405161028051815260018060a01b036101805116602082015261010051604082015284156060820152a184612c2d565b60e05160200151600190920154612e25926001600160a01b039182169116614cb8565b8480612d1f565b6101805160e05160200151612e4b9291906001600160a01b0316614cb8565b85612c21565b612e7290612e6361024051549161498d565b808210156119395750806149f8565b6102405155612bbd565b929190506020833d602011612ecc575b81612e99602093836147a4565b81010312610ce65791519091907ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c20612b0f565b3d9150612e8c565b90506020813d602011612f06575b81612eef602093836147a4565b8101031261019457612f00906147c5565b84612ace565b3d9150612ee2565b612f179061470e565b610200518015612a7c5780fd5b612f2d9061470e565b6102005180156129c15780fd5b9092915060408120541360001461314e5750612f95604051612f5b81614789565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720646563726561602082015261736560f01b6040820152615e15565b600c546001600160a01b0316803b156101945760405190637c7c829d60e01b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57613138575b50608001805161022051908082111561309a57505061300e6130179151610220516149f8565b6101e051614f12565b61302381610c2f6153d0565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f5761306f575b50612a7e565b602090813d8311613093575b61308581836147a4565b81010312610ce65783613069565b503d61307b565b6130a992509061300e916149f8565b6130b581610c2f61538b565b60e05160200151600c546130d79183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f576131225750612a7e565b61312b9061470e565b6102005180156130695780fd5b6131419061470e565b610200518015612fe85780fd5b9061319860405161315e81614789565b602281527f6465637265617365506f736974696f6e20425443206c6f6e6720746f2073686f6020820152611c9d60f21b6040820152615e15565b600c546020820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101005160048401526024830152610200516044830152816064816102005180945af18015610b1f57613451575b5060800180516102205190808211156133b257505061300e6132139151610220516149f8565b61321f81610c2f6153d0565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f57613387575b505b61328760018060a01b03600c541691610f2361022051916101e0516149f8565b90803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613371575b506133226040516132da81614789565b603681527f6465637265617365506f736974696f6e20425443204c6f6e6720746f2053686f6020820152600080516020615f9283398151915260408201526102205190615e64565b600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252610100516004830152610220516024830152816044816102005180945af18015610b1f576131225750612a7e565b61337a9061470e565b6102005180156132ca5780fd5b602090813d83116133ab575b61339d81836147a4565b81010312610ce65784613265565b503d613393565b6133c192509061300e916149f8565b6133cd81610c2f61538b565b60e05160200151600c546133ef9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f5761343b575b50613267565b6134449061470e565b6102005180156134355780fd5b61345a9061470e565b6102005180156131ed5780fd5b808512156139f95750506101005161020051526004602052610200518360408220541260001461360557506134dc6040516134a181614789565b602381527f6465637265617365506f736974696f6e204254432073686f727420696e63726560208201526261736560e81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b8252610100516004830152610200516024830152836044830152816064816102005180945af18015610b1f576135ef575b5061354683926109466109519360806112076135549861498d565b916109466101e0519161498d565b6135a48160405161356481614789565b602881527f6465637265617365506f736974696f6e20425443207570646174652061766572602082015267616765507269636560c01b6040820152615e64565b600c546001600160a01b0316803b156101945760405191630e13da9f60e11b83526101005160048401526024830152816044816102005180945af18015610b1f576131225750612a7e565b6135f89061470e565b61020051801561352b5780fd5b90929150604081205412600014613727575061366160405161362681614789565b602381527f6465637265617365506f736974696f6e205354432073686f727420646563726560208201526261736560e81b6040820152615e15565b60018060a01b03600c541661367d60808301516101e051614f12565b90803b156101945760405191637c7c829d60e01b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613711575b5060808101516102205190808211156136f657505061300e60806136ea920151610220516149f8565b61302381610c2f615301565b61370592509061300e916149f8565b6130b581610c2f615346565b61371a9061470e565b6102005180156136c15780fd5b9061377160405161373781614789565b602281527f6465637265617365506f736974696f6e205354432073686f727420746f206c6f6020820152616e6760f01b6040820152615e15565b600c546060820151906001600160a01b0316803b156101945760405191637c7c829d60e01b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f576139e3575b50608001805161022051908082111561395157505061300e6137ec9151610220516149f8565b6137f881610c2f615346565b60e05160200151600c5461381a9183916001600160a01b039081169116614cb8565b600c546001600160a01b0316803b1561019457604051916354ab60f960e01b83526101005160048401526024830152816044816102005180945af18015610b1f5761393b575b505b61388a60018060a01b03600c541691610f23613881610220519261498d565b6101e0516149f8565b90803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613925575b506133226040516138dd81614789565b603681527f6465637265617365506f736974696f6e20535443204c6f6e6720746f2053686f6020820152600080516020615f9283398151915260408201526102205190615e64565b61392e9061470e565b6102005180156138cd5780fd5b6139449061470e565b6102005180156138605780fd5b61396092509061300e916149f8565b61396c81610c2f615301565b600c54604051632d23f44960e01b815261010051600482015260248101929092526102005160209183916044918391906001600160a01b03165af18015610b1f576139b8575b50613862565b602090813d83116139dc575b6139ce81836147a4565b81010312610ce657846139b2565b503d6139c4565b6139ec9061470e565b6102005180156137c65780fd5b9150919250610100519052600460205261020051604081205413600014613b1c575050613a64604051613a2b81614789565b602181527f6465637265617365506f736974696f6e20535443207a65726f20746f206c6f6e6020820152606760f81b6040820152615e15565b600c546001600160a01b0316803b15610194576040519062a0151560e21b82526101005160048301526101e0516024830152610200516044830152816064816102005180945af18015610b1f57613b06575b50600c546001600160a01b0316803b156101945760405190630e13da9f60e11b8252610100516004830152610220516024830152816044816102005180945af18015610b1f576131225750612a7e565b613b0f9061470e565b610200518015613ab65780fd5b613b65604051613b2b81614789565b602281527f6465637265617365506f736974696f6e20425443207a65726f20746f2073686f6020820152611c9d60f21b6040820152615e15565b803b15610194576040519162a0151560e21b83526101005160048401526102005160248401526044830152816064816102005180945af18015610b1f57613bad575b50613322565b613bb69061470e565b83613ba7565b613bd691925060c03d60c0116118f7576118e881836147a4565b90876128f6565b604090600660205220613bf46101e05182546149f8565b905561278c565b6127426101e051610673565b613c1492611939916149f8565b61024051556126a9565b613c2d6101c05160805161494e565b608052613c7d604051613c3f81614789565b602681527f6465637265617365506f736974696f6e206c6f6e672074616b652066756e64696020820152656e672066656560d01b6040820152615e15565b612612565b613c8b9061498d565b61014051613cfb57613ca99150610240515461053f8282101561499e565b6102405155613c7d604051613cbd81614789565b602681527f6465637265617365506f736974696f6e2073686f7274207061792066756e64696020820152656e672066656560d01b6040820152615e15565b613d049161494e565b608052613c7d604051613d1681614789565b602781527f6465637265617365506f736974696f6e2073686f72742074616b652066756e64602082015266696e672066656560c81b6040820152615e15565b613d5e816150c8565b612444565b60405162461bcd60e51b81526020600482015260176024820152761c1bdcda5d1a5bdb88185b1c9958591e4818db1bdcd959604a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606490fd5b606001511015905082806122de565b9050610100813d61010011613e94575b81613e0361010093836147a4565b8101031261019457604051906101008201908282106001600160401b03831117613e7a5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e0820152826122c9565b634e487b7160e01b61020051526041600452602461020051fd5b3d9150613df5565b613eb49060e03d60e011611b6e57611b5f81836147a4565b60e0528461229c565b346101945760a036600319011261019457600435801515810361019457602435906001600160a01b03821682036101945760643591821515830361019457602092611ffa9260843592604435916158df565b346101945760208060031936011261019457613f29614686565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa908115610b1f5783918591610200519161405b575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610b1f576102005194614002575b5050613fd97f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050936147e6565b600b80546001600160a01b0319811684841617909155604051928392611d509290911683614822565b90809450813d8311614054575b61401981836147a4565b8101031261019457613fd961404e7f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d173050946147d9565b93613fad565b503d61400f565b92505081813d831161408b575b61407281836147a4565b81010312610194578361408584926147c5565b86613f7f565b503d614068565b3461019457602036600319011261019457600435610200515260026020526101406040610200512080549060018060a01b0360018201541690600281015460ff60038301541660048301546005840154906006850154926007860154946009600888015497015497604051998a5260208a0152604089015215156060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b34610194576020366003190112610194576001600160a01b03614154614686565b1661020051526001602052602060ff6040610200512054166040519015158152f35b3461019457602080600319360112610194576040516351331ad760e01b81526004803592916001600160a01b039183908290817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610b1f57839161020051916142b5575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610b1f576102005191614254575b7f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b210504353246040848661423c866147e6565b600a549181600a558351928352820152a16102005180f35b9180915082813d83116142ae575b61426c81836147a4565b81010312610194577f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b210504353249261423c6142a46040946147d9565b929350509261420e565b503d614262565b82819392503d83116142e4575b6142cc81836147a4565b81010312610194576142de83916147c5565b856141e0565b503d6142c2565b3461019457606036600319011261019457602435600435811515820361019457600b54604051632f7ce47360e21b815260048101839052926001600160a01b0392909160e0908590602490829087165afa938415610b1f57610200519461444d575b50604051631f94a27560e31b81526020949085816004817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610b1f5786928691610200519361440f575b50516040516341976e0960e01b8152911660048201529485916024918391165afa918215610b1f5761020051926143de575b611ffa935060443591615700565b91508383813d8311614408575b6143f581836147a4565b8101031261019457611ffa9251916143d0565b503d6143eb565b93849193508092503d8311614446575b61442981836147a4565b810103126101945760248561443e88946147c5565b92909161439e565b503d61441f565b61446791945060e03d60e011611b6e57611b5f81836147a4565b928461434d565b34610194576020366003190112610194576004356102005152600560205260206040610200512054604051908152f35b34610194576020366003190112610194576004356102005152600960205260206040610200512054604051908152f35b3461019457602080600319360112610194576144e8614686565b6040516351331ad760e01b81526001600160a01b039280826004817f000000000000000000000000000000000000000000000000000000000000000088165afa8015610b1f57849261020051916145c4575b508190602460405180958193637be53ca160e01b8352336004840152165afa908115610b1f57610200519161458d575b5061457591506147e6565b1660018060a01b0319600e541617600e556102005180f35b905081813d83116145bd575b6145a381836147a4565b81010312610194576145b7614575916147d9565b8461456a565b503d614599565b809350828092503d83116145f6575b6145dd81836147a4565b8101031261019457806145f085936147c5565b9061453a565b503d6145d3565b34610194576102005180600319360112610191576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610194576020611ffa6146583661469c565b916152c6565b34610ce6576020366003190112610ce657602090600435600052600482526040600020548152f35b600435906001600160a01b0382168203610ce657565b6060906003190112610ce6576004356001600160a01b0381168103610ce65790602435906044358015158103610ce65790565b60c0906003190112610ce6576004356001600160a01b0381168103610ce657906024359060443590606435906084358015158103610ce6579060a43590565b6001600160401b03811161472157604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761472157604052565b61014081019081106001600160401b0382111761472157604052565b604081019081106001600160401b0382111761472157604052565b606081019081106001600160401b0382111761472157604052565b90601f801991011681019081106001600160401b0382111761472157604052565b51906001600160a01b0382168203610ce657565b51908115158203610ce657565b156147ed57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b6001600160a01b0391821681529116602082015260400190565b1561484357565b60405162461bcd60e51b815260206004820152601b60248201527a2837b9b4ba34b7b71026b0b730b3b2b91d103337b93134b23232b760291b6044820152606490fd5b908160e0910312610ce6576040519060e08201908282106001600160401b038311176147215760c0916040526148bb816147c5565b83526148c9602082016147c5565b60208401526148da604082016147c5565b60408401526148eb606082016147d9565b60608401526080810151608084015260a081015160a0840152015160c082015290565b6001600160401b03811161472157601f01601f191660200190565b604051906149368261476e565b600982526873697a6544656c746160b81b6020830152565b9190820180921161495b57565b634e487b7160e01b600052601160045260246000fd5b9190916000838201938412911290801582169115161761495b57565b600160ff1b811461495b5760000390565b156149a557565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722066756e64696e604482015264672066656560d81b6064820152608490fd5b9190820391821161495b57565b15614a0c57565b60405162461bcd60e51b815260206004820152602560248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f722074726164696e604482015264672066656560d81b6064820152608490fd5b60405190614a6c8261476e565b600c82526b39b437b93a2a3930b1b5b2b960a11b6020830152565b908160c0910312610ce65760a060405191614aa183614737565b8051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b60405190614ae48261476e565b6005825264707269636560d81b6020830152565b60405190614b0582614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20646563726561736550726f60208201520152565b60405190614b4a82614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2042544f20696e63726561736550726f60208201520152565b60405190614b8f82614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20696e63726561736550726f60208201520152565b60405190614bd482614789565b6023825262199a5d60ea1b6040837f696e637265617365506f736974696f6e2053544f20646563726561736550726f60208201520152565b979491926101409996939c9b9a9794919c6101608a019d8a5260018060a01b031660208a0152604089015215156060880152608087015260a086015260c085015260e08401526101008301526101208201520152565b600260005414614c73576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039485166024840152604480840196909652948252926080820191906001600160401b0383118284101761472157614d7493836040521690614d138361476e565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d15614e09573d91614d598361490e565b92614d6760405194856147a4565b83523d868885013e614e0d565b90815190838215928315614de7575b505050905015614d905750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b848092939450010312610191575081614e0091016147d9565b80388381614d83565b6060915b91929015614e6f5750815115614e21575090565b3b15614e2a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015614e825750805190602001fd5b60405162461bcd60e51b815260206004820152908190614ea6906024830190614ecd565b0390fd5b60005b838110614ebd5750506000910152565b8181015183820152602001614ead565b90602091614ee681518092818552858086019101614eaa565b601f01601f1916010190565b8115614efc570490565b634e487b7160e01b600052601260045260246000fd5b9060001981830981830291828083109203918083039214614fb65768327cb2734119d3b7a9601e1b9082821115614f79577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505068327cb2734119d3b7a9601e1b9004919050565b9068327cb2734119d3b7a9601e1b9060001982840992828102928380861095039480860395146150505784831115614f79578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50509061505d9250614ef2565b90565b90600019818309818302918280831092039180830392146150bd576127109082821115614f79577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b600081126150d35790565b61505d9061498d565b600081126152a35760405160208101908082106001600160401b038311176147215761510f9160405260008152916150c8565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015615295575b506904ee2d6d415b85acef8160201b80821015615288575b50662386f26fc100008082101561527b575b506305f5e1008082101561526e575b5061271080821015615261575b506064811015615253575b600a80911015615249575b6001808401928160216151ba6151a48761490e565b966151b260405198896147a4565b80885261490e565b602087019790601f1901368937860101905b615213575b505050506152079261505d9260209260405195836151f88895518092888089019101614eaa565b84019151809386840190614eaa565b010380845201826147a4565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215615244579190826151cc565b6151d1565b916001019161518f565b606460029104920191615184565b6004910492019138615179565b600891049201913861516c565b601091049201913861515d565b602091049201913861514b565b604093508204905038615133565b61510f6040516152b28161476e565b60018152602d60f81b6020820152916150c8565b9160405191602083019360018060601b03199060601b1684526034830152151560f81b6054820152603581526152fb81614789565b51902090565b6040519061530e82614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320646563726561736550726f60208201520152565b6040519061535382614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2053544320696e63726561736550726f60208201520152565b6040519061539882614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320696e63726561736550726f60208201520152565b604051906153dd82614789565b6023825262199a5d60ea1b6040837f6465637265617365506f736974696f6e2042544320646563726561736550726f60208201520152565b9060405161542281614752565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460ff161515606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e08201526008830154610100820152600990920154610120830152565b60c081019081519081851461550e5760600151156154e457508051808411156154cc575061505d926154c69151906149f8565b90614f12565b6154df92915061505d936154c6916149f8565b61498d565b838111156154fb575061505d926154c691516149f8565b6154df9291506154c69061505d946149f8565b5050505050600090565b8181029291811591840414171561495b57565b818102929160008212600160ff1b82141661495b57818405149015171561495b57565b90604080519161555d83614789565b602583526155a3816020947f75706461746543756d756c617469766546756e64696e675261746520706169728682015264092dcc8caf60db1b85820152866102f6614ad7565b6000908482526009845282822054156156e2576155c383832054426149f8565b600a5480911061568d579161564386949261563d61562261561b606099977f30ee8c76a6febcb0400fb07183d873b5c18cf9e5ca6a47104676795b989c606d9b87526009895261561688882054426149f8565b614ef2565b9288615953565b9187855260088752828686205560078752858520549261552b565b90614971565b8482526007845282822055615663600a5461565e8142614ef2565b615518565b848252600984528282205560078352818082205491600985522054928251948552840152820152a1565b5050506156e09250807f75706461746543756d756c617469766546756e64696e6752617465206e6f206e696565642075706461746560b01b9251936156d185614789565b602a8552840152820152615e15565b565b5090916009906156f8600a5461565e8142614ef2565b948352522055565b9160249361570d91614f12565b9160018060a01b03600b54169060c0604092835196878092630da67fe760e01b82528560048301525afa94851561580c57600095615796575b50600090815260046020529081205412615778571561576a5761505d915190615060565b602061505d92015190615060565b1561578b57602061505d92015190615060565b61505d915190615060565b909460c0823d8211615804575b816157b060c093836147a4565b8101031261019157509060009160a08251916157cb83614737565b805183526020810151602084015283810151848401526060810151606084015260808101516080840152015160a0820152949091615746565b3d91506157a3565b82513d6000823e3d90fd5b8115614efc57600160ff1b811460001983141661495b570590565b8181039291600013801582851316918412161761495b57565b8192620f4240949261585c926152c6565b916000928352600260205261587360408420615415565b91615883610100840151426149f8565b600a54908181106158b55750505061040660408460a0936158b196526007602052205460e084015190615832565b0590565b6158d4919294506040866158d9956158b198526008602052205461552b565b615817565b9061552b565b9190620f42409493826158f1926152c6565b926000938452600260205261590860408520615415565b92615918610100850151426149f8565b600a5491828210615948575b5050505061040660408460a0936158b196526007602052205460e084015190615832565b156158b55780615924565b91906040908151936159648561476e565b601c85526159b7826020967b0c6eae4e4cadce88ceadcc8d2dccea4c2e8ca40e0c2d2e492dcc8caf60231b88820152838651916159a08361476e565b60068352655f707269636560d01b8a840152615ef0565b600b54835163694b193160e11b81526004808201849052909390916001600160a01b039060249061012090819088908490829087165afa968715615dbe57600097615d11575b5050846000528389528660002054615a14906150c8565b6060870151938660005260058b52886000205460068c528960002054615a399161494e565b906080890151948a51615a4b81614789565b602181528d81017f63757272656e7446756e64696e675261746520772025732071202573206b202590528b8101607360f81b90528d8c51809181019263a7a8785360e01b84528882016080905260a48201615aa591614ecd565b8a604483015286606483015289608483015203601f1981018252615ac990826147a4565b51905a91600092916a636f6e736f6c652e6c6f678493fa50600c548b51632500ed8d60e21b81528981018b90529291168286815a9360c094fa918215615d0657908d615b469392600093615cd8575b50615b4091610f23615b3092855190860151906149f8565b9160608d820151910151906149f8565b9061494e565b92615b7c848d7318dd5c9c995b9d119d5b991a5b99d4985d19481b60621b8d5191615b708361476e565b60148352820152615e64565b81158015615cd0575b15615c20575050505050505050908184615bab836156e09501515b60a084015190615832565b825180821215615c185750915b015180821315615c105750935b606560f81b615bd3866150dc565b927f67657443757272656e7446756e64696e67526174652066756e64696e67526174815193615c0185614789565b60218552840152820152615ea9565b905093615bc5565b905091615bb8565b615c2a8387615518565b620f42409283820291808304851490151715615cbc5790615c4e615c549288615518565b90614ef2565b958203918211615ca9575093615b406156e099989794615c4e8d9895615c80615c8696615bab9a615518565b92615518565b9160005283526000858120541215600003615ba057615ca49061498d565b615ba0565b634e487b7160e01b600090815260118852fd5b8260118a634e487b7160e01b600052526000fd5b508315615b85565b615b3091935091610f23615cfc615b409460c03d81116118f7576118e881836147a4565b9492505091615b18565b8b513d6000823e3d90fd5b9091968282813d8311615db7575b615d2981836147a4565b81010312610191578851928301908382106001600160401b03831117615da55750885280518252898101518a8301528781015188830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529438806159fd565b634e487b7160e01b8152604187528890fd5b503d615d1f565b88513d6000823e3d90fd5b60405190615dd682614752565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b60008091604051615e5181615e43602082019463104c13eb60e21b8652602060248401526044830190614ecd565b03601f1981018352826147a4565b51906a636f6e736f6c652e6c6f675afa50565b600091908291615e516040518092615e956020830195632d839cb360e21b8752604060248501526064840190614ecd565b90604483015203601f1981018352826147a4565b60009190615e43615e518493604051928391615ede6020840196634b5c427760e01b8852604060248601526064850190614ecd565b83810360231901604485015290614ecd565b90615e51600094938594615f3d604051948593615f26602086019863c67ea9d160e01b8a526080602488015260a4870190614ecd565b916044860152602319858303016064860152614ecd565b90608483015203601f1981018352826147a456fe07777c9f149d310fb8670fb9752de106d0ebc29093eb6df2be370406a7d742a39a23c22b6372bd11ffa0aced0db638ca7c144fc3996ecc8fbe3f9a639ef285ad7274207570646174652061766572616765507269636500000000000000000000a2646970667358221220270c9fc92d0d4e865eacbc1b0349443152bd6d9636aa940d6620ab5ca1a27af064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1095,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17714,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "isHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29833,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "positions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Info)17238_storage)"
      },
      {
        "astId": 29838,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "isFrozen",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29843,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "netExposureAmountChecker",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29848,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "longTracker",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29853,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "shortTracker",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29857,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "cumulativeFundingRates",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29861,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "lastFundingRates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29865,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "lastFundingTimes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29867,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "fundingInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 29870,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "pairInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPairInfo)23457"
      },
      {
        "astId": 29873,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "pairVault",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IPairVault)23605"
      },
      {
        "astId": 29875,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "tradingFeeReceiver",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 29877,
        "contract": "contracts/trading/TradingVault.sol:TradingVault",
        "label": "addressExecutor",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPairInfo)23457": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)23605": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Info)17238_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)17238_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Info)17238_storage": {
        "encoding": "inplace",
        "label": "struct Position.Info",
        "members": [
          {
            "astId": 17219,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17221,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17223,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17225,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "isLong",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 17227,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17229,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "positionAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17231,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "averagePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 17233,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 17235,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "entryFundingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 17237,
            "contract": "contracts/trading/TradingVault.sol:TradingVault",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "9",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
