{
  "address": "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradingFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fundingInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "DecreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferOut",
          "type": "uint256"
        }
      ],
      "name": "IncreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "NeedBuyIndexToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateFundingRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairInfo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "UpdatePairInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPairVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "UpdatePairVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "UpdateTradingFeeReceiver",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getCurrentFundingRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPositionByKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct Position.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        }
      ],
      "name": "getTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getValidPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_collateral",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingRates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "longTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "netExposureAmountChecker",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "entryFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressExecutor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shortTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateCumulativeFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "updateFundingInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairInfo",
          "type": "address"
        }
      ],
      "name": "updatePairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPairVault",
          "type": "address"
        }
      ],
      "name": "updatePairVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "updateTradingFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeee933d6b337a97b1c7af23e4af2c909f03cd873b9d1a91303e5a4c181be2b70",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
    "transactionIndex": 0,
    "gasUsed": "5031533",
    "logsBloom": "0x
    "blockHash": "0x27c61341df97f8235b342c67b6a8638ec237c9be6f20f302a292979347ac76cc",
    "transactionHash": "0xeee933d6b337a97b1c7af23e4af2c909f03cd873b9d1a91303e5a4c181be2b70",
    "logs": [],
    "blockNumber": 104,
    "cumulativeGasUsed": "5031533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "0x1c85638e118b37167e9298c2268758e058DdfDA0",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    28800
  ],
  "numDeployments": 1,
  "solcInputHash": "3bfb618664e377f23f48757fd7cd2af1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"DecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"}],\"name\":\"IncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"NeedBuyIndexToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairInfo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"UpdatePairInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"UpdatePairVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"UpdateTradingFeeReceiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentFundingRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPositionByKey\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct Position.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"}],\"name\":\"getTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getValidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_collateral\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingRates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"netExposureAmountChecker\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressExecutor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"updateFundingInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairInfo\",\"type\":\"address\"}],\"name\":\"updatePairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairVault\",\"type\":\"address\"}],\"name\":\"updatePairVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateTradingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ac72f22ea80e64abc0138d2a4e7976b7efcf4b089faa217a66e4271f7ca46cb\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface IPositionManager {\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n\\n    function getValidPrice(address token, uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aeac3a43af593e2c7c43e9d16f170eea508da26168e4ac05c15e263ff4f3ece\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\nimport 'hardhat/console.sol';\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice || self.averagePrice == 0) {\\n            return 0;\\n        }\\n\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (_sizeAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self, _sizeAmount, price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe37dda35b2eaa18bcf4aa524ffe80fac3c391e5f2b8fa9f4ea8765a7219530ce\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14b07e1484e9a71f8b74c0e7e77c0850c3172e0d1ee821197e104266f2399ef1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x6dbfdfe9e3efa5876b6bdf69eba75e537b8541ebdb145ba2b177fa1d384fb396\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate; // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate; // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate; // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor; // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor; // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        uint256 lpDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns (Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns (TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns (TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns (FundingFeeConfig memory);\\n}\\n\",\"keccak256\":\"0x0386c82ba0511ec563f23f2a08e929f4e2ae70a8a57c10540259a46f0619e0c2\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0x19c2daec07bc3e3e7a8eac919831c09b67cdf0bd5f84a75bcf441fc1a9244719\",\"license\":\"UNLICENSED\"},\"contracts/trading/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../libraries/Position.sol';\\nimport '../libraries/PositionKey.sol';\\nimport '../interfaces/IPositionManager.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../pair/interfaces/IPairInfo.sol';\\nimport '../pair/interfaces/IPairVault.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\ncontract PositionManager is IPositionManager, ReentrancyGuard, Roleable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    mapping(bytes32 => Position.Info) public positions;\\n\\n    mapping(address => bool) public override isFrozen;\\n\\n    mapping(uint256 => int256) public override netExposureAmountChecker;\\n    mapping(uint256 => uint256) public override longTracker;\\n    mapping(uint256 => uint256) public override shortTracker;\\n\\n    // cumulativeFundingRates tracks the funding rates based on utilization\\n    mapping(uint256 => int256) public cumulativeFundingRates;\\n    mapping(uint256 => int256) public lastFundingRates;\\n    // lastFundingTimes tracks the last time funding was updated for a token\\n    mapping(uint256 => uint256) public lastFundingTimes;\\n\\n    uint256 public fundingInterval;\\n\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    address public tradingFeeReceiver;\\n    address public addressExecutor;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        address _tradingFeeReceiver,\\n        uint256 _fundingInterval\\n    ) Roleable(addressProvider) {\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        tradingFeeReceiver = _tradingFeeReceiver;\\n        fundingInterval = _fundingInterval;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == addressExecutor, 'Position Manager: forbidden');\\n        _;\\n    }\\n\\n    function setExecutor(address _addressExecutor) external onlyPoolAdmin {\\n        addressExecutor = _addressExecutor;\\n    }\\n\\n    function updatePairInfo(address newPairInfo) external onlyPoolAdmin {\\n        address oldPairInfo = address(pairInfo);\\n        pairInfo = IPairInfo(newPairInfo);\\n        emit UpdatePairInfo(oldPairInfo, newPairInfo);\\n    }\\n\\n    function updatePairVault(address newPairVault) external onlyPoolAdmin {\\n        address oldPairVault = address(pairVault);\\n        pairVault = IPairVault(newPairVault);\\n        emit UpdatePairVault(oldPairVault, newPairVault);\\n    }\\n\\n    function updateTradingFeeReceiver(address newReceiver) external onlyPoolAdmin {\\n        address oldReceiver = tradingFeeReceiver;\\n        tradingFeeReceiver = newReceiver;\\n        emit UpdateTradingFeeReceiver(oldReceiver, newReceiver);\\n    }\\n\\n    function updateFundingInterval(uint256 newInterval) external onlyPoolAdmin {\\n        uint256 oldInterval = fundingInterval;\\n        fundingInterval = newInterval;\\n        emit UpdateFundingInterval(oldInterval, newInterval);\\n    }\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external nonReentrant onlyExecutor returns (uint256 tradingFee, int256 fundingFee) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        position.key = positionKey;\\n\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n\\n        // \\u4fee\\u6539\\u4ed3\\u4f4d\\n        if (position.positionAmount == 0) {\\n            position.account = _account;\\n            position.pairIndex = _pairIndex;\\n            position.isLong = _isLong;\\n            position.averagePrice = _price;\\n        }\\n\\n        if (position.positionAmount > 0 && sizeDelta > 0) {\\n            position.averagePrice = (position.positionAmount.mulPrice(position.averagePrice) + sizeDelta).mulDiv(\\n                PrecisionUtils.pricePrecision(),\\n                (position.positionAmount + _sizeAmount)\\n            );\\n        }\\n\\n        position.positionAmount = position.positionAmount + _sizeAmount;\\n\\n        int256 afterCollateral = int256(position.collateral);\\n        uint256 transferOut;\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(true, _account, _pairIndex, _isLong, _sizeAmount);\\n\\n        if (fundingFee >= 0) {\\n            if (_isLong) {\\n                afterCollateral -= fundingFee;\\n            } else {\\n                (uint256 userAmount, ) = _distributeFundingFee(_pairIndex, fundingFee.abs());\\n                transferOut += userAmount;\\n            }\\n        } else {\\n            if (!_isLong) {\\n                afterCollateral += fundingFee;\\n            } else {\\n                (uint256 userAmount, ) = _distributeFundingFee(_pairIndex, fundingFee.abs());\\n                transferOut += userAmount;\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, _isLong, _sizeAmount, _price);\\n        afterCollateral -= int256(tradingFee);\\n\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n\\n        // final collateral & out\\n        afterCollateral += _collateral;\\n        transferOut += _collateral < 0 ? _collateral.abs() : 0;\\n        console.log(\\\"increasePosition afterCollateral\\\", afterCollateral.toString(), \\\"transferOut\\\", transferOut);\\n\\n        require(afterCollateral > 0, \\\"collateral not enough\\\");\\n\\n        position.collateral = afterCollateral.abs();\\n\\n        // update lp vault\\n        if (_sizeAmount > 0) {\\n            int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n            netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? int256(_sizeAmount) : - int256(_sizeAmount));\\n            if (_isLong) {\\n                longTracker[_pairIndex] += _sizeAmount;\\n            } else {\\n                shortTracker[_pairIndex] += _sizeAmount;\\n            }\\n\\n            console.log(\\\"increasePosition prevNetExposureAmountChecker\\\", prevNetExposureAmountChecker.toString());\\n            console.log(\\\"increasePosition netExposureAmountChecker\\\", netExposureAmountChecker[_pairIndex].toString());\\n            console.log(\\\"increasePosition longTracker\\\", longTracker[_pairIndex], \\\"shortTracker\\\", shortTracker[_pairIndex]);\\n\\n            IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n            console.log(\\\"increasePosition lp averagePrice\\\", lpVault.averagePrice, \\\"price\\\", _price);\\n            if (prevNetExposureAmountChecker > 0) {\\n                if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                    console.log(\\\"increasePosition BTO long increase\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                    uint256 averagePrice = (uint256(prevNetExposureAmountChecker)\\n                    .mulPrice(lpVault.averagePrice) + sizeDelta)\\n                        .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                    console.log(\\\"increasePosition BTO update averagePrice\\\", averagePrice);\\n                    pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n                } else {\\n                    uint256 decreaseLong;\\n                    uint256 increaseShort;\\n\\n                    if (netExposureAmountChecker[_pairIndex] >= 0) {\\n                        decreaseLong = _sizeAmount;\\n                    } else {\\n                        decreaseLong = uint256(prevNetExposureAmountChecker);\\n                        increaseShort = _sizeAmount - decreaseLong;\\n                    }\\n\\n                    // decrease reserve & pnl\\n                    console.log(\\\"increasePosition STO long decrease\\\");\\n                    pairVault.decreaseReserveAmount(_pairIndex, decreaseLong, 0);\\n                    if (_price > lpVault.averagePrice) {\\n                        uint256 profit = decreaseLong.mulPrice(_price - lpVault.averagePrice);\\n                        console.log(\\\"increasePosition STO decreaseProfit\\\", profit);\\n                        pairVault.decreaseProfit(_pairIndex, profit);\\n                    } else {\\n                        uint256 profit = decreaseLong.mulPrice(lpVault.averagePrice - _price);\\n                        console.log(\\\"increasePosition STO increaseProfit\\\", profit);\\n                        IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                        pairVault.increaseProfit(_pairIndex, profit);\\n                    }\\n\\n                    // increase reserve\\n                    if (increaseShort > 0) {\\n                        pairVault.increaseReserveAmount(_pairIndex, 0, increaseShort.mulPrice(_price));\\n                        console.log(\\\"increasePosition STO Long to Short update averagePrice\\\", _price);\\n                        pairVault.updateAveragePrice(_pairIndex, _price);\\n                    }\\n\\n                    // zero exposure\\n                    if (netExposureAmountChecker[_pairIndex] == 0) {\\n                        pairVault.updateAveragePrice(_pairIndex, 0);\\n                    }\\n                }\\n            } else if (prevNetExposureAmountChecker < 0) {\\n                if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                    console.log(\\\"increasePosition STO short increase\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                    uint256 averagePrice = (uint256(- prevNetExposureAmountChecker)\\n                    .mulPrice(lpVault.averagePrice) + sizeDelta)\\n                        .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\\n                    console.log(\\\"increasePosition STO update averagePrice\\\", averagePrice);\\n                    pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n                } else {\\n                    uint256 decreaseShort;\\n                    uint256 increaseLong;\\n\\n                    if (netExposureAmountChecker[_pairIndex] <= 0) {\\n                        decreaseShort = _sizeAmount;\\n                    } else {\\n                        decreaseShort = uint256(- prevNetExposureAmountChecker);\\n                        increaseLong = _sizeAmount - decreaseShort;\\n                    }\\n\\n                    // decrease reserve & pnl\\n                    console.log(\\\"increasePosition BTO short decrease\\\");\\n                    pairVault.decreaseReserveAmount(_pairIndex, 0,\\n                        netExposureAmountChecker[_pairIndex] >= 0 ? lpVault.stableReservedAmount : decreaseShort.mulPrice(lpVault.averagePrice));\\n                    if (_price > lpVault.averagePrice) {\\n                        uint256 profit = decreaseShort.mulPrice(_price - lpVault.averagePrice);\\n                        console.log(\\\"increasePosition BTO increaseProfit\\\", profit);\\n                        IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                        pairVault.increaseProfit(_pairIndex, profit);\\n                    } else {\\n                        uint256 profit = decreaseShort.mulPrice(lpVault.averagePrice - _price);\\n                        console.log(\\\"increasePosition BTO decreaseProfit\\\", profit);\\n                        pairVault.decreaseProfit(_pairIndex, profit);\\n                    }\\n\\n                    // increase reserve\\n                    if (increaseLong > 0) {\\n                        pairVault.increaseReserveAmount(_pairIndex, increaseLong, 0);\\n                        console.log(\\\"increasePosition BTO short to long update averagePrice\\\", _price);\\n                        pairVault.updateAveragePrice(_pairIndex, _price);\\n                    }\\n\\n                    // zero exposure\\n                    if (netExposureAmountChecker[_pairIndex] == 0) {\\n                        pairVault.updateAveragePrice(_pairIndex, 0);\\n                    }\\n                }\\n            } else {\\n                if (netExposureAmountChecker[_pairIndex] > 0) {\\n                    console.log(\\\"increasePosition BTO zero to long\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n                } else {\\n                    console.log(\\\"increasePosition STO zero to short\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n                }\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        }\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n        emit IncreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _collateral,\\n            _isLong,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n    }\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external onlyExecutor nonReentrant returns (uint256 tradingFee, int256 fundingFee, int256 pnl) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        require(\\n            _sizeAmount >= tradingConfig.minTradeAmount && _sizeAmount <= tradingConfig.maxTradeAmount,\\n            'invalid size'\\n        );\\n\\n        // get position\\n        bytes32 positionKey = PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n        Position.Info storage position = positions[positionKey];\\n        require(position.account != address(0), 'position already closed');\\n\\n        // update position size\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n\\n        position.positionAmount -= _sizeAmount;\\n\\n        int256 afterCollateral = int256(position.collateral);\\n        uint256 transferOut;\\n\\n        // funding fee\\n        updateCumulativeFundingRate(_pairIndex, _price);\\n        fundingFee = getFundingFee(false, _account, _pairIndex, _isLong, _sizeAmount);\\n\\n        if (fundingFee >= 0) {\\n            if (_isLong) {\\n                afterCollateral -= fundingFee;\\n            } else {\\n                (uint256 userAmount, ) = _distributeFundingFee(_pairIndex, fundingFee.abs());\\n                transferOut += userAmount;\\n            }\\n        } else {\\n            if (!_isLong) {\\n                afterCollateral -= (- fundingFee);\\n            } else {\\n                (uint256 userAmount, ) = _distributeFundingFee(_pairIndex, fundingFee.abs());\\n                transferOut += userAmount;\\n            }\\n        }\\n\\n        position.entryFundingRate = cumulativeFundingRates[_pairIndex];\\n        position.entryFundingTime = lastFundingTimes[_pairIndex];\\n\\n        // trading fee\\n        tradingFee = _tradingFee(_pairIndex, !_isLong, _sizeAmount, _price);\\n        afterCollateral -= int256(tradingFee);\\n\\n        IERC20(pair.stableToken).safeTransfer(tradingFeeReceiver, tradingFee);\\n\\n        // update lp vault\\n        if (_sizeAmount > 0) {\\n            int256 prevNetExposureAmountChecker = netExposureAmountChecker[_pairIndex];\\n            netExposureAmountChecker[_pairIndex] = prevNetExposureAmountChecker + (_isLong ? - int256(_sizeAmount) : int256(_sizeAmount));\\n            if (_isLong) {\\n                longTracker[_pairIndex] -= _sizeAmount;\\n            } else {\\n                shortTracker[_pairIndex] -= _sizeAmount;\\n            }\\n\\n            console.log(\\\"decreasePosition prevNetExposureAmountChecker\\\", prevNetExposureAmountChecker.toString());\\n            console.log(\\\"decreasePosition netExposureAmountChecker\\\", netExposureAmountChecker[_pairIndex].toString());\\n            console.log(\\\"decreasePosition longTracker\\\", longTracker[_pairIndex], \\\"shortTracker\\\", shortTracker[_pairIndex]);\\n\\n            IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n            if (prevNetExposureAmountChecker > 0) {\\n                if (netExposureAmountChecker[_pairIndex] > prevNetExposureAmountChecker) {\\n                    console.log(\\\"decreasePosition STC long increase\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n\\n                    uint256 averagePrice = (uint256(prevNetExposureAmountChecker)\\n                    .mulPrice(lpVault.averagePrice) + sizeDelta)\\n                        .calculatePrice(uint256(prevNetExposureAmountChecker) + _sizeAmount);\\n                    console.log(\\\"decreasePosition STC update averagePrice\\\", averagePrice);\\n                    pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n                } else {\\n                    uint256 decreaseLong;\\n                    uint256 increaseShort;\\n\\n                    if (netExposureAmountChecker[_pairIndex] >= 0) {\\n                        decreaseLong = _sizeAmount;\\n                    } else {\\n                        decreaseLong = uint256(prevNetExposureAmountChecker);\\n                        increaseShort = _sizeAmount - decreaseLong;\\n                    }\\n\\n                    // decrease reserve & pnl\\n                    console.log(\\\"decreasePosition STO long decrease\\\");\\n                    pairVault.decreaseReserveAmount(_pairIndex, decreaseLong, 0);\\n                    if (_price > lpVault.averagePrice) {\\n                        uint256 profit = decreaseLong.mulPrice(_price - lpVault.averagePrice);\\n                        console.log(\\\"decreasePosition STO decreaseProfit\\\", profit);\\n                        pairVault.decreaseProfit(_pairIndex, profit);\\n                    } else {\\n                        uint256 profit = decreaseLong.mulPrice(lpVault.averagePrice - _price);\\n                        console.log(\\\"decreasePosition STO increaseProfit\\\", profit);\\n                        IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                        pairVault.increaseProfit(_pairIndex, profit);\\n                    }\\n\\n                    // increase reserve\\n                    if (increaseShort > 0) {\\n                        pairVault.increaseReserveAmount(_pairIndex, 0, increaseShort.mulPrice(_price));\\n                        console.log(\\\"decreasePosition STO Long to Short update averagePrice\\\", _price);\\n                        pairVault.updateAveragePrice(_pairIndex, _price);\\n                    }\\n\\n                    // zero exposure\\n                    if (netExposureAmountChecker[_pairIndex] == 0) {\\n                        pairVault.updateAveragePrice(_pairIndex, 0);\\n                    }\\n                }\\n            } else if (prevNetExposureAmountChecker < 0) {\\n                if (netExposureAmountChecker[_pairIndex] < prevNetExposureAmountChecker) {\\n                    console.log(\\\"decreasePosition STO short increase\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n\\n                    uint256 averagePrice = (uint256(- prevNetExposureAmountChecker)\\n                    .mulPrice(lpVault.averagePrice) + sizeDelta)\\n                        .calculatePrice(uint256(- prevNetExposureAmountChecker) + _sizeAmount);\\n                    console.log(\\\"decreasePosition STO update averagePrice\\\", averagePrice);\\n                    pairVault.updateAveragePrice(_pairIndex, averagePrice);\\n                } else {\\n                    uint256 decreaseShort;\\n                    uint256 increaseLong;\\n\\n                    if (netExposureAmountChecker[_pairIndex] <= 0) {\\n                        decreaseShort = _sizeAmount;\\n                    } else {\\n                        decreaseShort = uint256(- prevNetExposureAmountChecker);\\n                        increaseLong = _sizeAmount - decreaseShort;\\n                    }\\n\\n                    // decrease reserve & pnl\\n                    console.log(\\\"decreasePosition BTO short decrease\\\");\\n                    pairVault.decreaseReserveAmount(_pairIndex, 0,\\n                        netExposureAmountChecker[_pairIndex] >= 0 ? lpVault.stableReservedAmount : decreaseShort.mulPrice(lpVault.averagePrice));\\n                    if (_price > lpVault.averagePrice) {\\n                        uint256 profit = decreaseShort.mulPrice(_price - lpVault.averagePrice);\\n                        console.log(\\\"decreasePosition BTO increaseProfit\\\", profit);\\n                        IERC20(pair.stableToken).safeTransfer(address(pairVault), profit);\\n                        pairVault.increaseProfit(_pairIndex, profit);\\n                    } else {\\n                        uint256 profit = decreaseShort.mulPrice(lpVault.averagePrice - _price);\\n                        console.log(\\\"decreasePosition BTO decreaseProfit\\\", profit);\\n                        pairVault.decreaseProfit(_pairIndex, profit);\\n                    }\\n\\n                    // increase reserve\\n                    if (increaseLong > 0) {\\n                        pairVault.increaseReserveAmount(_pairIndex, increaseLong, 0);\\n                        console.log(\\\"decreasePosition BTO short to long update averagePrice\\\", _price);\\n                        pairVault.updateAveragePrice(_pairIndex, _price);\\n                    }\\n\\n                    // zero exposure\\n                    if (netExposureAmountChecker[_pairIndex] == 0) {\\n                        pairVault.updateAveragePrice(_pairIndex, 0);\\n                    }\\n                }\\n            } else {\\n                if (netExposureAmountChecker[_pairIndex] > 0) {\\n                    console.log(\\\"decreasePosition BTO zero to long\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, _sizeAmount, 0);\\n                } else {\\n                    console.log(\\\"decreasePosition STO zero to short\\\");\\n                    pairVault.increaseReserveAmount(_pairIndex, 0, sizeDelta);\\n                }\\n                pairVault.updateAveragePrice(_pairIndex, _price);\\n            }\\n        }\\n\\n        // pnl\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        pnl = position.getUnrealizedPnl(_sizeAmount, price);\\n\\n        if (pnl > 0) {\\n            transferOut += pnl.abs();\\n        } else {\\n            afterCollateral += pnl;\\n        }\\n        position.realisedPnl += pnl;\\n\\n        // final collateral & out\\n        if (position.positionAmount == 0) {\\n            // transfer out all collateral and _collateral\\n            int256 allTransferOut = int256(transferOut) + afterCollateral + (_collateral > 0 ? _collateral : int256(0));\\n            transferOut = allTransferOut > 0 ? allTransferOut.abs() : 0;\\n            console.log(\\\"decreasePosition afterCollateral allTransferOut\\\", allTransferOut.toString());\\n            console.log(\\\"decreasePosition position close\\\");\\n            delete positions[positionKey];\\n            emit ClosePosition(positionKey, _account, _pairIndex, _isLong);\\n        } else {\\n            afterCollateral += _collateral;\\n            transferOut += (_collateral < 0 ? uint256(- _collateral) : 0);\\n            require(afterCollateral > 0, \\\"collateral not enough\\\");\\n            position.collateral = afterCollateral.abs();\\n\\n            console.log(\\\"decreasePosition afterCollateral\\\", afterCollateral.toString(), \\\"transferOut\\\", transferOut);\\n        }\\n\\n        if (transferOut > 0) {\\n            IERC20(pair.stableToken).safeTransfer(_account, transferOut);\\n        }\\n\\n        emit DecreasePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            _collateral,\\n            _sizeAmount,\\n            _price,\\n            tradingFee,\\n            fundingFee,\\n            pnl,\\n            transferOut\\n        );\\n\\n        emit UpdatePosition(\\n            positionKey,\\n            _account,\\n            _pairIndex,\\n            _isLong,\\n            position.collateral,\\n            position.positionAmount,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.entryFundingTime,\\n            position.realisedPnl,\\n            _price\\n        );\\n    }\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) public {\\n        if (lastFundingTimes[_pairIndex] == 0) {\\n            lastFundingTimes[_pairIndex] = (block.timestamp / fundingInterval) * fundingInterval;\\n            return;\\n        }\\n\\n        if (block.timestamp - lastFundingTimes[_pairIndex] < fundingInterval) {\\n            return;\\n        }\\n\\n        uint256 intervals = (block.timestamp - lastFundingTimes[_pairIndex]) / fundingInterval;\\n        int256 nextFundingRate = _currentFundingRate(_pairIndex, _price);\\n\\n        lastFundingRates[_pairIndex] = nextFundingRate;\\n        cumulativeFundingRates[_pairIndex] = cumulativeFundingRates[_pairIndex] + nextFundingRate * int256(intervals);\\n        lastFundingTimes[_pairIndex] = (block.timestamp / fundingInterval) * fundingInterval;\\n\\n        emit UpdateFundingRate(_pairIndex, cumulativeFundingRates[_pairIndex], lastFundingTimes[_pairIndex]);\\n    }\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view override returns (uint256 tradingFee) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        return _tradingFee(_pairIndex, _isLong, _sizeAmount, price);\\n    }\\n\\n    function _tradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount,\\n        uint256 _price\\n    ) internal view returns (uint256 tradingFee) {\\n        uint256 sizeDelta = _sizeAmount.mulPrice(_price);\\n\\n        IPairInfo.TradingFeeConfig memory tradingFeeConfig = pairInfo.getTradingFeeConfig(_pairIndex);\\n        if (netExposureAmountChecker[_pairIndex] >= 0) {\\n            if (_isLong) {\\n                // fee\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            }\\n        } else {\\n            if (_isLong) {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.makerFeeP);\\n            } else {\\n                tradingFee = sizeDelta.mulPercentage(tradingFeeConfig.takerFeeP);\\n            }\\n        }\\n        return tradingFee;\\n    }\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) public view override returns (int256) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n\\n        uint256 interval = block.timestamp - position.entryFundingTime;\\n        if (interval < fundingInterval) {\\n            if (!_increase) {\\n                int256 fundingRate = (lastFundingRates[_pairIndex] * int256(interval)) / int256(fundingInterval);\\n                return (int256(_sizeAmount) * fundingRate) / int256(PrecisionUtils.fundingRatePrecision());\\n            }\\n        }\\n\\n        int256 fundingRate = cumulativeFundingRates[_pairIndex] - position.entryFundingRate;\\n        return (int256(position.positionAmount) * fundingRate) / int256(PrecisionUtils.fundingRatePrecision());\\n    }\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view override returns (int256) {\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 price = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(pair.indexToken);\\n        return _currentFundingRate(_pairIndex, price);\\n    }\\n\\n    function _currentFundingRate(uint256 _pairIndex, uint256 _price) internal view returns (int256 fundingRate) {\\n        IPairInfo.FundingFeeConfig memory fundingFeeConfig = pairInfo.getFundingFeeConfig(_pairIndex);\\n\\n        uint256 absNetExposure = netExposureAmountChecker[_pairIndex].abs();\\n        uint256 w = fundingFeeConfig.fundingWeightFactor;\\n        uint256 q = longTracker[_pairIndex] + shortTracker[_pairIndex];\\n        uint256 k = fundingFeeConfig.liquidityPremiumFactor;\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(_pairIndex);\\n        uint256 l = (lpVault.indexTotalAmount - lpVault.indexReservedAmount).mulPrice(_price) +\\n            (lpVault.stableTotalAmount - lpVault.stableReservedAmount);\\n\\n        uint256 absFundingRate;\\n        if (q == 0 || l == 0) {\\n            fundingRate = fundingFeeConfig.defaultFundingRate;\\n        } else {\\n            absFundingRate =\\n                (w * absNetExposure * PrecisionUtils.fundingRatePrecision()) /\\n                (k * q) +\\n                ((PrecisionUtils.fundingRatePrecision() - w) * absNetExposure) /\\n                (k * l);\\n            fundingRate = netExposureAmountChecker[_pairIndex] >= 0 ? int256(absFundingRate) : -int256(absFundingRate);\\n        }\\n\\n        fundingRate = (fundingRate - fundingFeeConfig.interest).min(fundingFeeConfig.minFundingRate).max(\\n            fundingFeeConfig.maxFundingRate\\n        );\\n    }\\n\\n    function _distributeFundingFee(uint256 _pairIndex, uint256 _fundingFee) internal returns (uint256 userAmount, uint256 lpAmount) {\\n        console.log(\\\"distributeFundingFee  fundingFee\\\", _fundingFee);\\n\\n        IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        IPairInfo.FundingFeeConfig memory fundingFeeConfig = pairInfo.getFundingFeeConfig(_pairIndex);\\n\\n        lpAmount = _fundingFee.mulPercentage(fundingFeeConfig.lpDistributeP);\\n        userAmount = _fundingFee - lpAmount;\\n\\n        IERC20(pair.stableToken).safeTransfer(address(pairVault), lpAmount);\\n        pairVault.increaseTotalAmount(_pairIndex, 0, lpAmount);\\n        console.log(\\\"distributeFundingFee userAmount\\\", userAmount, \\\"lpAmount\\\", lpAmount);\\n        return (userAmount, lpAmount);\\n    }\\n\\n    function getValidPrice(address token, uint256 _pairIndex, bool _isLong) public view returns (uint256) {\\n        IOraclePriceFeed oraclePriceFeed = IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle());\\n\\n        // IPairInfo.Pair memory pair = pairInfo.getPair(_pairIndex);\\n        uint256 oraclePrice = oraclePriceFeed.getPrice(token);\\n\\n        uint256 indexPrice = oraclePriceFeed.getIndexPrice(token, 0);\\n\\n        uint256 diffP = oraclePrice > indexPrice ? oraclePrice - indexPrice : indexPrice - oraclePrice;\\n        diffP = diffP.calculatePercentage(oraclePrice);\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(_pairIndex);\\n        require(diffP <= tradingConfig.maxPriceDeviationP, 'exceed max price deviation');\\n        return oraclePrice;\\n    }\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions.get(_account, _pairIndex, _isLong);\\n        return position;\\n    }\\n\\n    function getPositionByKey(bytes32 key) public view returns (Position.Info memory) {\\n        Position.Info memory position = positions[key];\\n        return position;\\n    }\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) public pure returns (bytes32) {\\n        return PositionKey.getPositionKey(_account, _pairIndex, _isLong);\\n    }\\n}\\n\",\"keccak256\":\"0xbf585bb0e3f1439a7e8d8df5dcfec4454b224655de803633548e05c574acfe51\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x61030080604052600436101561001457600080fd5b60006102605260003560e01c90816301fd38f714613fe3575080630298e27314613fca5780630d172a0114613f94578063179a09e314613d595780631848effa14613d115780631c3c0ea814613bda57806323fc616014613baa5780632cbc82bf14613b7a5780632e4d2cda146139f757806337e415a01461388257806346ea87af1461383f578063514ea4bf1461379e5780635e55f9841461360857806383d532e8146135c157806387d4f0d514611e0b5780638b78fba514611c755780638c1b753a14611b015780639391faf914611ad15780639849e41214611ab0578063a28feb8b14611a84578063a31a7b4414611a58578063ad249b5214611a32578063bc95baad146119f6578063bd40e1c0146119ca578063c4995cb21461182e578063c8d0805214611776578063e054d7f214611746578063e17ee61614610224578063e5839836146101e1578063f879ffd2146101b15763fc2a5b1d1461017b57600080fd5b346101aa5761026051806003193601126101a757600b546040516001600160a01b039091168152602090f35b80fd5b6102605180fd5b346101aa5760203660031901126101aa576004356102605152600860205260206040610260512054604051908152f35b346101aa5760203660031901126101aa576001600160a01b0361020261400b565b1661026051526003602052602060ff6040610260512054166040519015158152f35b346101aa5760246102343661406a565b91610243969596949194614463565b61025860018060a01b03600e541633146141c3565b600b54604051632f7ce47360e21b8152600481018490529660e09188919082906001600160a01b03165afa958615610997576102605196611715575b506060860151156116d057846102ac88968488614b4b565b9485610260515260026020528460406102605120938785556102ce82826147db565b996102f1826005880154801561168b575b80151580611682575b61165a57614285565b6005870155620f424061037161031b878a60048b01549e610316610260519983614d46565b614b4b565b60009060005260026020526103336040600020614c04565b9061034361010083015142614400565b600a5411611652575b6103696040828d60a094526007602052205460e0840151906142c4565b910151614d23565b0599610260518b12156000146116215785156115fc578a610391916142c4565b9a5b876102605152600760205261026051604081205460078901556009602052604090205460088801556103c78984888b614e5a565b9b8c6103d2916142c4565b858d600160a01b6001900360208601511690600160a01b60019003600d54166103fa926144b9565b610403916142a8565b93610260518087126000149161042b9161049193610425575061042588614946565b90614285565b9461047e866104398361495a565b6040519061044682614128565b602082527f696e637265617365506f736974696f6e206166746572436f6c6c61746572616c60208301526104786142f9565b916156b0565b61048c610260518213614320565b614946565b600488015582610583575b5061014060008051602061572c833981519152999794848e9a979460409f948260008051602061570c8339815191529661054c9c99610562575b5050508f51928b845260018060a01b038d166020850152604089908501526060840152851515608084015260a08301528760c08301528d60e08301528c610100830152610120820152a16004820154600583015460068401549160078501549360096008870154960154968f519b8c9b8c61440d565b0390a16001610260515582519182526020820152f35b60209092015161057b92906001600160a01b03166144b9565b38828d6104d6565b610260805189905260046020525160409020549086156115eb576105a8845b836142a8565b896102605152600460205261026051906040822055876000146115d057508861026051526005602052604061026051206105e3858254614285565b90555b6106436105f28361495a565b6040516105fe8161410c565b602d81527f696e637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615608565b88610260515260046020526106ae610661604061026051205461495a565b60405161066d8161410c565b602981527f696e637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615608565b886102605152600560205261071461026051604080822054916006602052205490604051906106dc82614128565b601c82527f696e637265617365506f736974696f6e206c6f6e67547261636b657200000000602083015261070e614375565b9161564f565b600c54604051632500ed8d60e21b8152600481018b905291906001600160a01b031660c083602481845afa9283156109975761026051936115a0575b506107b58c60808501516040519061076782614128565b602082527f696e637265617365506f736974696f6e206c702061766572616765507269636560208301526040519161079e83614128565b6005835264707269636560d81b602084015261564f565b8a61026051808613600014610e1a575090506102605152600460205261026051836040822054136000146109c3575061082d6040516107f38161410c565b602281527f696e637265617365506f736974696f6e2042544f206c6f6e6720696e63726561602082015261736560f01b6040820152615574565b600c546001600160a01b031691823b156101aa576040519262a0151560e21b84528b6004850152866024850152610260516044850152836064816102605180945af19283156109975786936109a5575b509161089d6108a39261089860806108a997960151866147db565b614285565b92614285565b90614859565b6108f9816040516108b98161410c565b602881527f696e637265617365506f736974696f6e2042544f207570646174652061766572602082015267616765507269636560c01b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191630e13da9f60e11b83528960048401526024830152816044816102605180945af1801561099757610981575b5061014060008051602061572c83398151915299979461054c979460409e9a979460008051602061570c833981519152945b945094979a9e509497509497995061049c565b61098a906140a9565b61026051801561093c5780fd5b6040513d61026051823e3d90fd5b6109b1919293506140a9565b61026051806101a7579085929161087d565b6040812054909391508313610e085750835b610a1e6040516109e48161410c565b602281527f696e637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615574565b600c546001600160a01b0316803b156101aa5760405190637c7c829d60e01b82528b6004830152826024830152610260516044830152816064816102605180945af1801561099757610df2575b508a6080830151808211600014610d19575050610a8f6080610a959301518c614400565b906147db565b610ae081604051610aa58161410c565b602381527f696e637265617365506f736974696f6e2053544f20646563726561736550726f602082015262199a5d60ea1b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191632d23f44960e01b83528a60048401526024830152816044816102605180945af1801561099757610d03575b505b80610bdc575b50866102605152600460205261026051604081205415610b7c575b5061014060008051602061572c83398151915299979461054c979460409e9a979460008051602061570c8339815191529461096e565b600c546001600160a01b031690813b156101a7575060405190630e13da9f60e11b8252886004830152610260516024830152816044816102605180945af180156109975715610b46575b610bcf906140a9565b610260518015610b465780fd5b600c546001600160a01b031690610bf4908a906147db565b90803b156101aa576040519162a0151560e21b83528960048401526102605160248401526044830152816064816102605180945af1801561099757610ced575b50610c9388604051610c458161410c565b603681527f696e637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152757274207570646174652061766572616765507269636560501b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405190630e13da9f60e11b8252886004830152896024830152816044816102605180945af180156109975715610b2b57610ce0906140a9565b610260518015610b2b5780fd5b610cf6906140a9565b610260518015610c345780fd5b610d0c906140a9565b610260518015610b235780fd5b610d28935090610a8f91614400565b610d7381604051610d388161410c565b602381527f696e637265617365506f736974696f6e2053544f20696e63726561736550726f602082015262199a5d60ea1b60408201526155c3565b6020830151600c54610d939183916001600160a01b0390811691166144b9565b600c546001600160a01b0316803b156101aa57604051916354ab60f960e01b83528a60048401526024830152816044816102605180945af1801561099757610ddc575b50610b25565b610de5906140a9565b610260518015610dd65780fd5b610dfb906140a9565b610260518015610a6b5780fd5b9150610e148285614400565b916109d5565b808612156113b857509050610260515260046020526102605183604082205412600014610ff05750610e8c604051610e518161410c565b602381527f696e637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615574565b600c546001600160a01b031691823b156101aa576040519262a0151560e21b84528b6004850152610260516024850152826044850152836064816102605180945af1928315610997578693610fd2575b5091610898610f046108a39361089887966080610efb610f0a9a614364565b910151906147db565b93614364565b610f5a81604051610f1a8161410c565b602881527f696e637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191630e13da9f60e11b83528960048401526024830152816044816102605180945af1801561099757610bc6575061014060008051602061572c83398151915299979461054c979460409e9a979460008051602061570c8339815191529461096e565b610fde919293506140a9565b61026051806101a75790859291610edc565b604081205490939150831261139c5750835b61104c6040516110118161410c565b602381527f696e637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615574565b600c5461026080518c905260046020525160408120546001600160a01b039092169112611388576060830151905b803b156101aa5760405191637c7c829d60e01b83528c60048401526102605160248401526044830152816064816102605180945af1801561099757611372575b508a60808301518082116000146112b9575050610a8f60806110de9301518c614400565b611129816040516110ee8161410c565b602381527f696e637265617365506f736974696f6e2042544f20696e63726561736550726f602082015262199a5d60ea1b60408201526155c3565b6020830151600c546111499183916001600160a01b0390811691166144b9565b600c546001600160a01b0316803b156101aa57604051916354ab60f960e01b83528a60048401526024830152816044816102605180945af18015610997576112a3575b505b806111e35750866102605152600460205261026051604081205415610b7c575061014060008051602061572c83398151915299979461054c979460409e9a979460008051602061570c8339815191529461096e565b600c546001600160a01b0316803b156101aa576040519162a0151560e21b83528960048401526024830152610260516044830152816064816102605180945af180156109975761128d575b50610c938860405161123f8161410c565b603681527f696e637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152756e67207570646174652061766572616765507269636560501b60408201526155c3565b611296906140a9565b61026051801561122e5780fd5b6112ac906140a9565b61026051801561118c5780fd5b6112c8935090610a8f91614400565b611313816040516112d88161410c565b602381527f696e637265617365506f736974696f6e2042544f20646563726561736550726f602082015262199a5d60ea1b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191632d23f44960e01b83528a60048401526024830152816044816102605180945af180156109975761135c575b5061118e565b611365906140a9565b6102605180156113565780fd5b61137b906140a9565b6102605180156110ba5780fd5b6113966080840151836147db565b9061107a565b6113a7919250614364565b906113b28285614400565b91611002565b919350919350526004602052610260516040812054136000146114fc57505061141f6040516113e68161410c565b602181527f696e637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615574565b600c546001600160a01b0316803b156101aa576040519062a0151560e21b8252886004830152836024830152610260516044830152816064816102605180945af18015610997576114e6575b505b600c546001600160a01b0316803b156101aa5760405190630e13da9f60e11b8252886004830152896024830152816044816102605180945af1801561099757610bc6575061014060008051602061572c83398151915299979461054c979460409e9a979460008051602061570c8339815191529461096e565b6114ef906140a9565b61026051801561146b5780fd5b61154560405161150b8161410c565b602281527f696e637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615574565b803b156101aa576040519162a0151560e21b83528960048401526102605160248401526044830152816064816102605180945af180156109975761158a575b5061146d565b611593906140a9565b6102605180156115845780fd5b6115c291935060c03d81116115c9575b6115ba8183614144565b81019061439d565b9138610750565b503d6115b0565b6040906006602052206115e4858254614285565b90556105e6565b6105a86115f785614364565b6105a2565b9a9261161b9061161461160e8d614946565b8a615343565b5090614285565b92610393565b85611636578a611630916142a8565b9a610393565b9a925061164b6116458b614946565b88615343565b5092610393565b50600061034c565b8d61167b61167160068c01926108988454866147db565b6108a38585614285565b9055614285565b508d15156102e8565b6001890180546001600160a01b038f166001600160a01b0319909116179055600289018a905560038901805460ff191660ff8a151516179055600689018690556102df565b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b61173891965060e03d60e01161173f575b6117308183614144565b81019061420f565b9487610294565b503d611726565b346101aa5760203660031901126101aa576004356102605152600660205260206040610260512054604051908152f35b346101aa5760203660031901126101aa5761178f615528565b506004356102605152600260205261182a6117af60406102605120614c04565b604051918291829190916101408101928051825260018060a01b036020820151166020830152604081015160408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080910151910152565b0390f35b346101aa576020806003193601126101aa5761184861400b565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561099757839185916102605191611993575b50602460405180948193637be53ca160e01b8352336004840152165afa93841561099757610260519461193a575b50506118f87f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d1693614187565b600d80548284166001600160a01b031982161790915560408051939091166001600160a01b0390811684529091166020830152819081015b0390a16102605180f35b90809450813d831161198c575b6119518183614144565b810103126101aa576118f86119867f15828dca8a3c54bc8df99d6b42dba4f0a79568c00f7e1ec53e0b4a3280795d169461417a565b936118cc565b503d611947565b92505081813d83116119c3575b6119aa8183614144565b810103126101aa57836119bd8492614166565b8661189e565b503d6119a0565b346101aa5761026051806003193601126101a757600e546040516001600160a01b039091168152602090f35b346101aa57611a16611a0736614037565b91611a10615528565b50614b4b565b6102605152600260205261182a6117af60406102605120614c04565b346101aa5760403660031901126101aa57611a51602435600435614d46565b6102605180f35b346101aa5761026051806003193601126101a757600c546040516001600160a01b039091168152602090f35b346101aa5761026051806003193601126101a757600d546040516001600160a01b039091168152602090f35b346101aa5761026051806003193601126101a7576020600a54604051908152f35b346101aa5760203660031901126101aa576004356102605152600760205260206040610260512054604051908152f35b346101aa576020806003193601126101aa5760043560018060a01b0390602460e083600b541660405192838092632f7ce47360e21b82528660048301525afa908115610997576102605191611c56575b50604051631f94a27560e31b815284816004817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561099757859285916102605193611c18575b50516040516341976e0960e01b8152911660048201529384916024918391165afa908115610997576102605191611be2575b611bda92506150e9565b604051908152f35b90508282813d8311611c11575b611bf98183614144565b81010312611c0c57611bda915190611bd0565b600080fd5b503d611bef565b93849193508092503d8311611c4f575b611c328183614144565b810103126101aa57602484611c478794614166565b929091611b9e565b503d611c28565b611c6f915060e03d60e01161173f576117308183614144565b84611b51565b346101aa576020806003193601126101aa57611c8f61400b565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561099757839185916102605191611dd4575b50602460405180948193637be53ca160e01b8352336004840152165afa938415610997576102605194611d7b575b5050611d3f7f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a793614187565b600c80548284166001600160a01b031982161790915560408051939091166001600160a01b039081168452909116602083015281908101611930565b90809450813d8311611dcd575b611d928183614144565b810103126101aa57611d3f611dc77f9e119484a33fe999c82b75bd1566c4a9bf52d2d56095e96e736f8de6ba0695a79461417a565b93611d13565b503d611d88565b92505081813d8311611e04575b611deb8183614144565b810103126101aa5783611dfe8492614166565b86611ce5565b503d611de1565b346101aa57611e193661406a565b610200526102e0526102c0526102805260c0526102a052611e4560018060a01b03600e541633146141c3565b611e4d614463565b600b54604051632f7ce47360e21b815260c0516004820152906001600160a01b031660e082602481845afa9081156109975760249261010092610260516102405261359f575b506040516330a66e1560e01b815260c051600482015292839182905afa90811561099757610260519161356e575b5060408101516102c05190811015918261355f575b50501561352b57611ef06102e05160c0516102a051614b4b565b8061014052610260515260026020526040610260512080610220526001808060a01b0391015416156134e657611f2c610200516102c0516147db565b611f466005610220510180610120526102c0519054614400565b610120515561201560046102205101806101005254610260516101c052611f726102005160c051614d46565b611f896102c0516102e05160c0516102a051614f87565b6101808190526102605181126134ac57506102e0511561347f5761018051611fb0916142c4565b60c0516102605152600760205261026051600860408083205492610220519360078501608052600785015560096020522054918181016101a052015561200b6102e05115806101605261020051906102c0519060c051614e5a565b908160e0526142c4565b610240516020015160e051600d5492938493909261204092916001600160a01b0390811691166144b9565b6102c05161253d575b50604051631f94a27560e31b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610997576102605190612503575b610240515160405160a08181526341976e0960e01b90915280516001600160a01b039283166004909101525160209350916024918391165afa80156109975761026051906124cf575b6120fb906102c0516120f661022051614c04565b614c82565b90816101e0526102605182136000146124c057505061212861211f6101e051614946565b6101c051614285565b6101c0525b6121416101e05160096102205101546142a8565b6102205160090155610120515461241c5761219f6121806121686121f2936101c0516142a8565b610260516102805190808213156124145750906142a8565b610260518082131561240f575061219681614946565b6101c05261495a565b6040516121ab8161410c565b602f81527f6465637265617365506f736974696f6e206166746572436f6c6c61746572616c60208201526e08185b1b151c985b9cd9995c93dd5d608a1b6040820152615608565b61223060405161220181614128565b601f81527f6465637265617365506f736974696f6e20706f736974696f6e20636c6f7365006020820152615574565b610140516102605152600260205260006009610260516040812090838255806001830155836002830155600382015582600482015582600582015582600682015582600782015582600882015501557f1ffb81f32d2d371994fb39b875fbe035d34386083d2a85a3cf2894709c4581a2608060405161014051815260018060a01b036102a05116602082015260c051604082015261016051156060820152a15b6101c051806123e9575b7ff1d296a817e8ecfa2709fcd52c61a6dddc7e87ed697b3ba601e88dbee8849c2061016060405161014051815260018060a01b036102a05116602082015260c051604082015281511560608201526102805160808201526102c05160a08201526102005160c082015260e05160e0820152610180516101008201526101e0516101208201526101c051610140820152a160008051602061572c833981519152610100515461012051546123c16102205192600684015493608051549060096101a051549101549160405196879661020051956102e05160c0516102a051610140518c61440d565b0390a160016102605155606060405160e05181526101805160208201526101e0516040820152f35b6102a05161024051602001516124099291906001600160a01b03166144b9565b806122da565b612196565b9050906142a8565b61242d6124b59161028051906142a8565b61247661244f61026051610280518181126000146124ba5761211f9150614364565b91826101c052612463610260518213614320565b61246c81614946565b610100515561495a565b6040519061248382614128565b602082527f6465637265617365506f736974696f6e206166746572436f6c6c61746572616c60208301526104786142f9565b6122d0565b5061211f565b6124ca92506142a8565b61212d565b5060203d6020116124fc575b6124e78160a051614144565b602060a051809281010312611c0c57516120e2565b503d6124db565b506020813d602011612535575b8161251d60209383614144565b810103126101aa57612530602091614166565b612099565b3d9150612510565b60c051610260515260046020526102605190604082205491506102e051600014613473576125706105a26102c051614364565b60c05161026051526004602052610260519060408220556102e051600014613455575060c05161026051526005602052604061026051206125b56102c0518254614400565b90555b6126156125c48361495a565b6040516125d08161410c565b602d81527f6465637265617365506f736974696f6e20707265764e65744578706f7375726560208201526c20b6b7bab73a21b432b1b5b2b960991b6040820152615608565b60c05161026051526004602052612682612635604061026051205461495a565b6040516126418161410c565b602981527f6465637265617365506f736974696f6e206e65744578706f73757265416d6f75602082015268373a21b432b1b5b2b960b91b6040820152615608565b60c051610260515260056020526126e461026051604080822054916006602052205490604051906126b282614128565b601c82527f6465637265617365506f736974696f6e206c6f6e67547261636b657200000000602083015261070e614375565b600c54604051632500ed8d60e21b815260c08051600483015290916001600160a01b03169082602481845afa918215610997576102605192613434575b506102605180851315612d2057505060c0516102605152600460205261026051836040822054136000146128d8575061279960405161275f8161410c565b602281527f6465637265617365506f736974696f6e20535443206c6f6e6720696e63726561602082015261736560f01b6040820152615574565b600c546001600160a01b0316803b156101aa576040519062a0151560e21b825260c05160048301526102c0516024830152610260516044830152816064816102605180945af18015610997576128c2575b5061280461280f939261089860806108a3940151856147db565b916102c05190614285565b61285f8160405161281f8161410c565b602881527f6465637265617365506f736974696f6e20535443207570646174652061766572602082015267616765507269636560c01b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191630e13da9f60e11b835260c05160048401526024830152816044816102605180945af18015610997576128ac575b505b82612049565b6128b5906140a9565b6102605180156128a45780fd5b6128cb906140a9565b6102605180156127ea5780fd5b604081205490939192508313612d0a57506102c051905b6129386040516128fe8161410c565b602281527f6465637265617365506f736974696f6e2053544f206c6f6e6720646563726561602082015261736560f01b6040820152615574565b600c546001600160a01b0316803b156101aa5760405190637c7c829d60e01b825260c0516004830152836024830152610260516044830152816064816102605180945af1801561099757612cf4575b506080019081516102005190808211600014612c16575050610a8f6129b0925161020051614400565b6129fb816040516129c08161410c565b602381527f6465637265617365506f736974696f6e2053544f20646563726561736550726f602082015262199a5d60ea1b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191632d23f44960e01b835260c05160048401526024830152816044816102605180945af1801561099757612c00575b505b80612acd575b5060c0516102605152600460205261026051604081205415612a6b575b506128a6565b600c546001600160a01b031690813b156101a7575060405190630e13da9f60e11b825260c0516004830152610260516024830152816044816102605180945af180156109975715612a65575b612ac0906140a9565b610260518015612a655780fd5b612ae660018060a01b03600c54169161020051906147db565b90803b156101aa576040519162a0151560e21b835260c05160048401526102605160248401526044830152816064816102605180945af1801561099757612bea575b50612b8b604051612b388161410c565b603681527f6465637265617365506f736974696f6e2053544f204c6f6e6720746f2053686f6020820152757274207570646174652061766572616765507269636560501b604082015261020051906155c3565b600c546001600160a01b0316803b156101aa5760405190630e13da9f60e11b825260c0516004830152610200516024830152816044816102605180945af180156109975715612a4857612bdd906140a9565b610260518015612a485780fd5b612bf3906140a9565b610260518015612b285780fd5b612c09906140a9565b610260518015612a405780fd5b612c25935090610a8f91614400565b612c7081604051612c358161410c565b602381527f6465637265617365506f736974696f6e2053544f20696e63726561736550726f602082015262199a5d60ea1b60408201526155c3565b6102405160200151600c54612c939183916001600160a01b0390811691166144b9565b600c546001600160a01b0316803b156101aa57604051916354ab60f960e01b835260c05160048401526024830152816044816102605180945af1801561099757612cde575b50612a42565b612ce7906140a9565b610260518015612cd85780fd5b612cfd906140a9565b6102605180156129875780fd5b909150612d1a816102c051614400565b916128ef565b8085121561327457505060c051610260515260046020526102605183604082205412600014612ebb5750612d94604051612d598161410c565b602381527f6465637265617365506f736974696f6e2053544f2073686f727420696e63726560208201526261736560e81b6040820152615574565b600c546001600160a01b0316803b156101aa576040519062a0151560e21b825260c0516004830152610260516024830152836044830152816064816102605180945af1801561099757612ea5575b50612dfd83926108986108a3936080610efb612e0b98614364565b916108986102c05191614364565b612e5b81604051612e1b8161410c565b602881527f6465637265617365506f736974696f6e2053544f207570646174652061766572602082015267616765507269636560c01b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191630e13da9f60e11b835260c05160048401526024830152816044816102605180945af1801561099757612ab757506128a6565b612eae906140a9565b610260518015612de25780fd5b60408120549093919250831261325657506102c051905b612f1c604051612ee18161410c565b602381527f6465637265617365506f736974696f6e2042544f2073686f727420646563726560208201526261736560e81b6040820152615574565b600c5460c05161026080519190915260046020525160408120546001600160a01b039092169112613242576060820151905b803b156101aa5760405191637c7c829d60e01b835260c05160048401526102605160248401526044830152816064816102605180945af180156109975761322c575b506080019081516102005190808211600014613171575050610a8f612fb9925161020051614400565b61300481604051612fc98161410c565b602381527f6465637265617365506f736974696f6e2042544f20696e63726561736550726f602082015262199a5d60ea1b60408201526155c3565b6102405160200151600c546130279183916001600160a01b0390811691166144b9565b600c546001600160a01b0316803b156101aa57604051916354ab60f960e01b835260c05160048401526024830152816044816102605180945af180156109975761315b575b505b80613095575060c0516102605152600460205261026051604081205415612a6b57506128a6565b600c546001600160a01b0316803b156101aa576040519162a0151560e21b835260c05160048401526024830152610260516044830152816064816102605180945af1801561099757613145575b50612b8b6040516130f28161410c565b603681527f6465637265617365506f736974696f6e2042544f2073686f727420746f206c6f6020820152756e67207570646174652061766572616765507269636560501b604082015261020051906155c3565b61314e906140a9565b6102605180156130e25780fd5b613164906140a9565b61026051801561306c5780fd5b613180935090610a8f91614400565b6131cb816040516131908161410c565b602381527f6465637265617365506f736974696f6e2042544f20646563726561736550726f602082015262199a5d60ea1b60408201526155c3565b600c546001600160a01b0316803b156101aa5760405191632d23f44960e01b835260c05160048401526024830152816044816102605180945af1801561099757613216575b5061306e565b61321f906140a9565b6102605180156132105780fd5b613235906140a9565b610260518015612f905780fd5b6132506080830151846147db565b90612f4e565b613261919250614364565b61326e816102c051614400565b91612ed2565b915091925060c05190526004602052610260516040812054136000146133955750506132de6040516132a58161410c565b602181527f6465637265617365506f736974696f6e2042544f207a65726f20746f206c6f6e6020820152606760f81b6040820152615574565b600c546001600160a01b0316803b156101aa576040519062a0151560e21b825260c05160048301526102c0516024830152610260516044830152816064816102605180945af180156109975761337f575b505b600c546001600160a01b0316803b156101aa5760405190630e13da9f60e11b825260c0516004830152610200516024830152816044816102605180945af1801561099757612ab757506128a6565b613388906140a9565b61026051801561332f5780fd5b6133de6040516133a48161410c565b602281527f6465637265617365506f736974696f6e2053544f207a65726f20746f2073686f6020820152611c9d60f21b6040820152615574565b803b156101aa576040519162a0151560e21b835260c05160048401526102605160248401526044830152816064816102605180945af1801561099757613425575b50613331565b61342e906140a9565b8261341f565b61344e91925060c03d60c0116115c9576115ba8183614144565b9086612721565b60409060066020522061346c6102c0518254614400565b90556125b8565b6125706102c0516105a2565b6134a361349961349161018051614946565b60c051615343565b506101c051614285565b6101c052611fb0565b6102e0516134d057506134cb906134c561018051614364565b906142c4565b611fb0565b6134916134dc91614946565b506101c052611fb0565b60405162461bcd60e51b815260206004820152601760248201527f706f736974696f6e20616c726561647920636c6f7365640000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642073697a6560a01b6044820152606490fd5b60600151101590508180611ed6565b61359291506101003d61010011613598575b61358a8183614144565b810190614b8c565b81611ec1565b503d613580565b6135b79060e03d60e01161173f576117308183614144565b6102405283611e93565b346101aa5760a03660031901126101aa5760043580151581036101aa576135e6614021565b906064359182151583036101aa57602092611bda92608435926044359161501b565b346101aa576020806003193601126101aa5761362261400b565b6040516351331ad760e01b81526001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561099757839185916102605191613767575b50602460405180948193637be53ca160e01b8352336004840152165afa93841561099757610260519461370e575b50506136d27f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d17305093614187565b600b80548284166001600160a01b031982161790915560408051939091166001600160a01b039081168452909116602083015281908101611930565b90809450813d8311613760575b6137258183614144565b810103126101aa576136d261375a7f6989bf2024ce0e244f6a01d548e719e3198628e79cb1fab8e1e856473d1730509461417a565b936136a6565b503d61371b565b92505081813d8311613797575b61377e8183614144565b810103126101aa57836137918492614166565b86613678565b503d613774565b346101aa5760203660031901126101aa57600435610260515260026020526101406040610260512080549060018060a01b0360018201541690600281015460ff60038301541660048301546005840154906006850154926007860154946009600888015497015497604051998a5260208a0152604089015215156060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b346101aa5760203660031901126101aa576001600160a01b0361386061400b565b1661026051526001602052602060ff6040610260512054166040519015158152f35b346101aa576020806003193601126101aa576040516351331ad760e01b81526004803592916001600160a01b039183908290817f000000000000000000000000000000000000000000000000000000000000000086165afa801561099757839161026051916139c1575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610997576102605191613960575b7f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b210504353246040848661394886614187565b600a549181600a558351928352820152a16102605180f35b9180915082813d83116139ba575b6139788183614144565b810103126101aa577f2671c06c8f001757af00d7be47b46a5eed07be3b5ce4fa7260e8b21050435324926139486139b060409461417a565b929350509261391a565b503d61396e565b82819392503d83116139f0575b6139d88183614144565b810103126101aa576139ea8391614166565b856138ec565b503d6139ce565b346101aa5760603660031901126101aa5760243560043581151582036101aa57600b54604051632f7ce47360e21b815260048101839052926001600160a01b0392909160e0908590602490829087165afa938415610997576102605194613b59575b50604051631f94a27560e31b81526020949085816004817f000000000000000000000000000000000000000000000000000000000000000089165afa90811561099757869286916102605193613b1b575b50516040516341976e0960e01b8152911660048201529485916024918391165afa918215610997576102605192613aea575b611bda935060443591614e5a565b91508383813d8311613b14575b613b018183614144565b810103126101aa57611bda925191613adc565b503d613af7565b93849193508092503d8311613b52575b613b358183614144565b810103126101aa57602485613b4a8894614166565b929091613aaa565b503d613b2b565b613b7391945060e03d60e01161173f576117308183614144565b9284613a59565b346101aa5760203660031901126101aa576004356102605152600560205260206040610260512054604051908152f35b346101aa5760203660031901126101aa576004356102605152600960205260206040610260512054604051908152f35b346101aa576020806003193601126101aa57613bf461400b565b6040516351331ad760e01b81526001600160a01b039280826004817f000000000000000000000000000000000000000000000000000000000000000088165afa80156109975784926102605191613cd8575b508190602460405180958193637be53ca160e01b8352336004840152165afa908115610997576102605191613ca1575b50613c819150614187565b166bffffffffffffffffffffffff60a01b600e541617600e556102605180f35b905081813d8311613cd1575b613cb78183614144565b810103126101aa57613ccb613c819161417a565b84613c76565b503d613cad565b809350828092503d8311613d0a575b613cf18183614144565b810103126101aa5780613d048593614166565b90613c46565b503d613ce7565b346101aa5761026051806003193601126101a7576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101aa57613d6736614037565b50604051631f94a27560e31b8152602092916001600160a01b039184816004817f000000000000000000000000000000000000000000000000000000000000000087165afa80156109975783916102605191613f5c575b501682604051946341976e0960e01b865216938460048201528581602481855afa9485156109975786916102605196613f2b575b50604460405180948193637641b69960e01b835260048301526102605160248301525afa801561099757610260518591613efa575b613e4492508181811115613ef15790613e3f91614400565b614714565b91600b5416906040519182916330a66e1560e01b835260048301528160246101009485935afa9081156109975760e0926102605192613ed4575b5050015110613e8f57604051908152f35b60405162461bcd60e51b815260048101839052601a60248201527f657863656564206d617820707269636520646576696174696f6e0000000000006044820152606490fd5b613eea9250803d106135985761358a8183614144565b8580613e7e565b613e3f91614400565b50508481813d8311613f24575b613f118183614144565b810103126101aa5783613e449151613e27565b503d613f07565b8281939297503d8311613f55575b613f438183614144565b810103126101aa578590519487613df2565b503d613f39565b809250868092503d8311613f8d575b613f758183614144565b810103126101aa57613f878391614166565b86613dbe565b503d613f6b565b346101aa5760603660031901126101aa57611a51613fb061400b565b613fb8614021565b604435916001600160a01b03166144b9565b346101aa576020611bda613fdd36614037565b91614b4b565b34611c0c576020366003190112611c0c57602090600435600052600482526040600020548152f35b600435906001600160a01b0382168203611c0c57565b602435906001600160a01b0382168203611c0c57565b6060906003190112611c0c576004356001600160a01b0381168103611c0c5790602435906044358015158103611c0c5790565b60c0906003190112611c0c576004356001600160a01b0381168103611c0c57906024359060443590606435906084358015158103611c0c579060a43590565b67ffffffffffffffff81116140bd57604052565b634e487b7160e01b600052604160045260246000fd5b60e0810190811067ffffffffffffffff8211176140bd57604052565b610140810190811067ffffffffffffffff8211176140bd57604052565b6060810190811067ffffffffffffffff8211176140bd57604052565b6040810190811067ffffffffffffffff8211176140bd57604052565b90601f8019910116810190811067ffffffffffffffff8211176140bd57604052565b51906001600160a01b0382168203611c0c57565b51908115158203611c0c57565b1561418e57565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b156141ca57565b60405162461bcd60e51b815260206004820152601b60248201527f506f736974696f6e204d616e616765723a20666f7262696464656e00000000006044820152606490fd5b908160e0910312611c0c5760c060405191614229836140d3565b61423281614166565b835261424060208201614166565b602084015261425160408201614166565b60408401526142626060820161417a565b60608401526080810151608084015260a081015160a0840152015160c082015290565b9190820180921161429257565b634e487b7160e01b600052601160045260246000fd5b9190916000838201938412911290801582169115161761429257565b8181039291600013801582851316918412161761429257565b67ffffffffffffffff81116140bd57601f01601f191660200190565b6040519061430682614128565b600b82526a1d1c985b9cd9995c93dd5d60aa1b6020830152565b1561432757565b60405162461bcd60e51b81526020600482015260156024820152740c6ded8d8c2e8cae4c2d840dcdee840cadcdeeaced605b1b6044820152606490fd5b600160ff1b81146142925760000390565b6040519061438282614128565b600c82526b39b437b93a2a3930b1b5b2b960a11b6020830152565b908160c0910312611c0c576040519060c082019082821067ffffffffffffffff8311176140bd5760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b9190820391821161429257565b979491926101409996939c9b9a9794919c6101608a019d8a5260018060a01b031660208a0152604089015215156060880152608087015260a086015260c085015260e08401526101008301526101208201520152565b600260005414614474576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208083019182526001600160a01b0394851660248401526044808401969096529482529260808201919067ffffffffffffffff8311828410176140bd576145769383604052169061451583614128565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152600080958192519082855af13d1561460b573d9161455b836142dd565b926145696040519485614144565b83523d868885013e61460f565b908151908382159283156145e9575b5050509050156145925750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8480929394500103126101a7575081614602910161417a565b80388381614585565b6060915b919290156146715750815115614623575090565b3b1561462c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156146845750805190602001fd5b60405162461bcd60e51b8152602060048201529081906146a89060248301906146cf565b0390fd5b60005b8381106146bf5750506000910152565b81810151838201526020016146af565b906020916146e8815180928185528580860191016146ac565b601f01601f1916010190565b81156146fe570490565b634e487b7160e01b600052601260045260246000fd5b906127109060001982840992828102928380861095039480860395146147cb578483111561478e578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b5050906147d892506146f4565b90565b9060001981830981830291828083109203918083039214614843576c0c9f2c9cd04674edea40000000908282111561478e577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b906c0c9f2c9cd04674edea400000009060001982840992828102928380861095039480860395146147cb578483111561478e578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b906000198183098183029182808310920391808303921461493b57612710908282111561478e577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b600081126149515790565b6147d890614364565b60008112614b2857604051602081019080821067ffffffffffffffff8311176140bd5761498e916040526000815291614946565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080831015614b1a575b506d04ee2d6d415b85acef810000000080821015614b0d575b50662386f26fc1000080821015614b00575b506305f5e10080821015614af3575b5061271080821015614ae6575b506064811015614ad8575b600a80911015614ace575b600180840192816021614a3f614a29876142dd565b96614a376040519889614144565b8088526142dd565b602087019790601f1901368937860101905b614a98575b50505050614a8c926147d8926020926040519583614a7d88955180928880890191016146ac565b840191518093868401906146ac565b01038084520182614144565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215614ac957919082614a51565b614a56565b9160010191614a14565b606460029104920191614a09565b60049104920191386149fe565b60089104920191386149f1565b60109104920191386149e2565b60209104920191386149d0565b6040935082049050386149b7565b61498e604051614b3781614128565b60018152602d60f81b602082015291614946565b916040519160208301936bffffffffffffffffffffffff199060601b1684526034830152151560f81b605482015260358152614b868161410c565b51902090565b80916101009283910312611c0c576040519182019082821067ffffffffffffffff8311176140bd5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b90604051614c11816140ef565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460ff161515606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e08201526008830154610100820152600990920154610120830152565b60c08101908151908185148015614d08575b614cfe576060015115614cd45750805180841115614cbc57506147d892610a8f915190614400565b614ccf9291506147d893610a8f91614400565b614364565b83811115614ceb57506147d892610a8f9151614400565b614ccf929150610a8f906147d894614400565b5050505050600090565b508115614c94565b8181029291811591840414171561429257565b818102929160008212600160ff1b82141661429257818405149015171561429257565b9060009180835260206009815260408085205415614e3a57614d6b8186205442614400565b94600a54809610614e3257614de8606095614de2614dc7614dc07f30ee8c76a6febcb0400fb07183d873b5c18cf9e5ca6a47104676795b989c606d9a89875260098952614dbb8888205442614400565b6146f4565b92886150e9565b91878552600887528286862055600787528585205492614d23565b906142a8565b8482526007845282822055614e08600a54614e0381426146f4565b614d10565b848252600984528282205560078352818082205491600985522054928251948552840152820152a1565b505050505050565b9250600990614e52600a95939554614e0381426146f4565b948352522055565b91602493614e67916147db565b9160018060a01b03600b54169060408092815196878092630da67fe760e01b82528560048301525afa948515614f6157600095614eef575b50600090815260046020529081205412614ed15715614ec3576147d89151906148de565b60206147d8920151906148de565b15614ee45760206147d8920151906148de565b6147d89151906148de565b8281819793973d8311614f5a575b614f078183614144565b81010312614f56578251918383019083821067ffffffffffffffff831117614f42575083528051825260209081015190820152936000614e9f565b634e487b7160e01b81526041600452602490fd5b5080fd5b503d614efd565b82513d6000823e3d90fd5b81156146fe57600160ff1b8114600019831416614292570590565b8192620f42409492614f9892614b4b565b9160009283526002602052614faf60408420614c04565b91614fbf61010084015142614400565b600a5490818110614ff15750505061036960408460a093614fed96526007602052205460e0840151906142c4565b0590565b6150109192945060408661501595614fed985260086020522054614d23565b614f6c565b90614d23565b9190620f424094938261502d92614b4b565b926000938452600260205261504460408520614c04565b9261505461010085015142614400565b600a5491828210615084575b5050505061036960408460a093614fed96526007602052205460e0840151906142c4565b15614ff15780615060565b908160e0910312611c0c5760c0604051916150a9836140d3565b805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a0840152015160c082015290565b600b546040805163694b193160e11b8152600480820185905290946001600160a01b03949360e0908790602490829089165afa95861561533857600096615308575b50836000526020948286526151438460002054614946565b916060880151928660005260058852602461516b876000205460068b52886000205490614285565b9260c060808c015195600c5416895193848092632500ed8d60e21b82528d8c8301525afa9182156152fd57906151d192916000926152d5575b506151c1610425916151bc8d85519086015190614400565b6147db565b9160608a82015191015190614400565b91801580156152cd575b15615222575050505050506151fa91508301515b60a0840151906142c4565b82518082121561521a5750915b015180821315615215575090565b905090565b905091615207565b61522c8286614d10565b620f424091828202918083048414901517156152b857906152506152569287614d10565b906146f4565b9481039081116152a357600095936152506152849461527e6151fa9b9a989561042595614d10565b92614d10565b938352855281205412156000036151ef5761529e90614364565b6151ef565b601186634e487b7160e01b6000525260246000fd5b601188634e487b7160e01b6000525260246000fd5b5082156151db565b6104259192506152f56151c19160c03d81116115c9576115ba8183614144565b9291506151a4565b88513d6000823e3d90fd5b61532a91965060e03d8111615331575b6153228183614144565b81019061508f565b943861512b565b503d615318565b83513d6000823e3d90fd5b919091604061538684825161535781614128565b602081527f6469737472696275746546756e64696e67466565202066756e64696e6746656560208201526155c3565b600b548151632f7ce47360e21b81526004810184905292906001600160a01b039060e09082168186602481845afa9586156154f957600096615504575b508160249186519283809263694b193160e11b82528860048301525afa9182156154f957602061540b60c0615423956154149c9588956000926154dc575b50500151846148de565b998a8094614400565b9701511683600c5416906144b9565b600c541690813b15611c0c576000916064839285519485938492633431529d60e21b845260048401528160248401528a60448401525af18015614f61579185916154c9936154cd575b508381519161547a83614128565b601f83527f6469737472696275746546756e64696e674665652075736572416d6f756e7400602084015251916154af83614128565b60088352671b1c105b5bdd5b9d60c21b602084015261564f565b9190565b6154d6906140a9565b3861546c565b6154f29250803d10615331576153228183614144565b3880615401565b85513d6000823e3d90fd5b60249196506155208391823d841161173f576117308183614144565b9691506153c3565b60405190615535826140ef565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b600080916040516155b0816155a2602082019463104c13eb60e21b86526020602484015260448301906146cf565b03601f198101835282614144565b51906a636f6e736f6c652e6c6f675afa50565b6000919082916155b060405180926155f46020830195632d839cb360e21b87526040602485015260648401906146cf565b90604483015203601f198101835282614144565b600091906155a26155b0849360405192839161563d6020840196634b5c427760e01b88526040602486015260648501906146cf565b838103602319016044850152906146cf565b906155b060009493859461569c604051948593615685602086019863c67ea9d160e01b8a526080602488015260a48701906146cf565b9160448601526023198583030160648601526146cf565b90608483015203601f198101835282614144565b906155b060009493859461569c6040519485936156fc6156e96020870199638eafb02b60e01b8b526080602489015260a48801906146cf565b60231993848883030160448901526146cf565b918583030160648601526146cf56fe07777c9f149d310fb8670fb9752de106d0ebc29093eb6df2be370406a7d742a39a23c22b6372bd11ffa0aced0db638ca7c144fc3996ecc8fbe3f9a639ef285ada26469706673582212208c39290236de31f18efe0b969d879f22df0ab6e5387c804978983bf62842e16764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1095,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 18308,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "isHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29321,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "positions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Info)17829_storage)"
      },
      {
        "astId": 29326,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "isFrozen",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29331,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "netExposureAmountChecker",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29336,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "longTracker",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29341,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "shortTracker",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29345,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "cumulativeFundingRates",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29349,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "lastFundingRates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 29353,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "lastFundingTimes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 29355,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "fundingInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 29358,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "pairInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPairInfo)24068"
      },
      {
        "astId": 29361,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "pairVault",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IPairVault)24214"
      },
      {
        "astId": 29363,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "tradingFeeReceiver",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 29365,
        "contract": "contracts/trading/PositionManager.sol:PositionManager",
        "label": "addressExecutor",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPairInfo)24068": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)24214": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Info)17829_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)17829_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Info)17829_storage": {
        "encoding": "inplace",
        "label": "struct Position.Info",
        "members": [
          {
            "astId": 17810,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17812,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17814,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "pairIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17816,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "isLong",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 17818,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17820,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "positionAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17822,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "averagePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 17824,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 17826,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "entryFundingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 17828,
            "contract": "contracts/trading/PositionManager.sol:PositionManager",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "9",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}