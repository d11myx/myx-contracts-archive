{
  "address": "0x32EEce76C2C2e8758584A83Ee2F522D4788feA0f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PairAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairLiquidity",
          "type": "address"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingFeeConfigs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "minFundingRate",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "maxFundingRate",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "defaultFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "fundingWeightFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPremiumFactor",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "interest",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lpDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasuryDistributeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getFundingFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "maxFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "defaultFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "fundingWeightFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPremiumFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "interest",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.FundingFeeConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "kOfSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectIndexTokenP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addLpFeeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.Pair",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getTradingConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPositionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maintainMarginRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceSlipP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.TradingConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getTradingFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "takerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keeperDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refererDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.TradingFeeConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPairListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pairToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "kOfSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectIndexTokenP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addLpFeeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isHandler",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPositionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maintainMarginRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceSlipP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceDeviationP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradingFeeConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keeperDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasuryDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refererDistributeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "maxFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "defaultFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "fundingWeightFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPremiumFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "interest",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.FundingFeeConfig",
          "name": "_fundingFeeConfig",
          "type": "tuple"
        }
      ],
      "name": "updateFundingFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "kOfSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectIndexTokenP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addLpFeeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.Pair",
          "name": "_pair",
          "type": "tuple"
        }
      ],
      "name": "updatePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "updatePairMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPositionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maintainMarginRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceSlipP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.TradingConfig",
          "name": "_tradingConfig",
          "type": "tuple"
        }
      ],
      "name": "updateTradingConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "takerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keeperDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refererDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPairInfo.TradingFeeConfig",
          "name": "_tradingFeeConfig",
          "type": "tuple"
        }
      ],
      "name": "updateTradingFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5567af19c3329fed68d684226414b0221148149ceb3d634df6f7b1691ff1f90",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x32EEce76C2C2e8758584A83Ee2F522D4788feA0f",
    "transactionIndex": 0,
    "gasUsed": "2470667",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcb691095ef69f766bcf29e9ed856aac6a0de977e08cdc01d1849296d4c9ffa4a",
    "transactionHash": "0xd5567af19c3329fed68d684226414b0221148149ceb3d634df6f7b1691ff1f90",
    "logs": [],
    "blockNumber": 148,
    "cumulativeGasUsed": "2470667",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD471836031dc5108809D173A067e8486B9047A3"
  ],
  "numDeployments": 1,
  "solcInputHash": "dbd8b9bdf15109328226d3d4a4bdaf81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairLiquidity\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingFeeConfigs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getFundingFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.FundingFeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.Pair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getTradingConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.TradingConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getTradingFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.TradingFeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPairListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isHandler\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingFeeConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererDistributeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.FundingFeeConfig\",\"name\":\"_fundingFeeConfig\",\"type\":\"tuple\"}],\"name\":\"updateFundingFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.Pair\",\"name\":\"_pair\",\"type\":\"tuple\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"updatePairMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.TradingConfig\",\"name\":\"_tradingConfig\",\"type\":\"tuple\"}],\"name\":\"updateTradingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairInfo.TradingFeeConfig\",\"name\":\"_tradingFeeConfig\",\"type\":\"tuple\"}],\"name\":\"updateTradingFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/PairInfo.sol\":\"PairInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function contractWhiteList(address) external view returns (bool);\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n    function addContractWhiteList(address target) external;\\n\\n    function removeContractWhiteList(address target) external;\\n}\\n\",\"keccak256\":\"0xbdc36b44d3b4f20937e76a8d72a334dee7a12c98ad888fb77a8a98494ef8cb6b\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable is Initializable {\\n    address public gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function __Governable_init() internal onlyInitializing {\\n        gov = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x31fc5e583be08ae049f33ed30bc71e48c0aafaa26d47bccb2f9754e5aa0bc7c8\",\"license\":\"MIT\"},\"contracts/libraries/Handleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./Governable.sol\\\";\\nimport \\\"../../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../../interfaces/IRoleManager.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Handleable {\\n\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    modifier onlyHandler() {\\n        require(msg.sender == address(this) || isHandler[msg.sender], \\\"Handleable: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\\n        isHandler[_handler] = _isHandler;\\n    }\\n}\\n\",\"keccak256\":\"0x33560372f60bb0f7446191a7dbcb9ce2108162c057d2fd3908cc0cc731d0673c\",\"license\":\"MIT\"},\"contracts/pair/PairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../libraries/Handleable.sol\\\";\\nimport \\\"../token/interfaces/IPairToken.sol\\\";\\nimport \\\"../token/PairToken.sol\\\";\\nimport './interfaces/IPairInfo.sol';\\nimport './interfaces/IPairLiquidity.sol';\\nimport \\\"./interfaces/IPairInfo.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ncontract PairInfo is IPairInfo, Handleable {\\n\\n    uint256 public constant PERCENTAGE = 10000;\\n\\n    uint256 public pairsCount;\\n\\n    mapping(address => mapping(address => uint256)) public pairIndexes;\\n\\n    mapping(uint256 => Pair) public pairs;\\n\\n    mapping(uint256 => TradingConfig) public tradingConfigs;\\n\\n    mapping(uint256 => TradingFeeConfig) public tradingFeeConfigs;\\n\\n    mapping(uint256 => FundingFeeConfig) public fundingFeeConfigs;\\n\\n    mapping(address => mapping(address => bool)) public isPairListed;\\n\\n\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    constructor(\\n        IAddressesProvider addressProvider\\n    ) Handleable(addressProvider) {\\n    }\\n\\n    // Manage pairs\\n    function addPair(\\n        address _indexToken,\\n        address _stableToken,\\n        address _pairLiquidity\\n    ) external onlyPoolAdmin {\\n\\n        require(_indexToken != _stableToken, \\\"identical address\\\");\\n        require(_indexToken != address(0) && _stableToken != address(0), \\\"zero address\\\");\\n        require(!isPairListed[_indexToken][_stableToken], 'pair already listed');\\n\\n        address pairToken = _createPair(_indexToken, _stableToken, _pairLiquidity);\\n\\n        isPairListed[_indexToken][_stableToken] = true;\\n        pairIndexes[_indexToken][_stableToken] = pairsCount;\\n\\n        Pair storage pair = pairs[pairsCount];\\n        pair.indexToken = _indexToken;\\n        pair.stableToken = _stableToken;\\n        pair.pairToken = pairToken;\\n\\n        emit PairAdded(_indexToken, _stableToken, pairToken, pairsCount++);\\n    }\\n\\n    function _createPair(address indexToken, address stableToken, address pairLiquidity) private returns (address) {\\n        bytes memory bytecode = abi.encodePacked(type(PairToken).creationCode, abi.encode(indexToken, stableToken));\\n        bytes32 salt = keccak256(abi.encodePacked(indexToken, stableToken));\\n        address pairToken;\\n        assembly {\\n            pairToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IPairToken(pairToken).setMiner(pairLiquidity, true);\\n        return pairToken;\\n    }\\n\\n    function updatePair(uint256 _pairIndex, Pair calldata _pair) external onlyPoolAdmin {\\n        Pair storage pair = pairs[_pairIndex];\\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), \\\"pair not existed\\\");\\n\\n        pair.enable = _pair.enable;\\n        pair.kOfSwap = _pair.kOfSwap;\\n        pair.expectIndexTokenP = _pair.expectIndexTokenP;\\n        pair.addLpFeeP = _pair.addLpFeeP;\\n    }\\n\\n    function updateTradingConfig(uint256 _pairIndex, TradingConfig calldata _tradingConfig) external onlyPoolAdmin {\\n        tradingConfigs[_pairIndex] = _tradingConfig;\\n    }\\n\\n    function updateTradingFeeConfig(uint256 _pairIndex, TradingFeeConfig calldata _tradingFeeConfig) external onlyPoolAdmin {\\n        require(_tradingFeeConfig.lpDistributeP + _tradingFeeConfig.keeperDistributeP + _tradingFeeConfig.treasuryDistributeP\\n            + _tradingFeeConfig.refererDistributeP == PERCENTAGE, \\\"percentage exceed 100%\\\");\\n        tradingFeeConfigs[_pairIndex] = _tradingFeeConfig;\\n    }\\n\\n    function updateFundingFeeConfig(uint256 _pairIndex, FundingFeeConfig calldata _fundingFeeConfig) external onlyPoolAdmin {\\n        require(_fundingFeeConfig.lpDistributeP + _fundingFeeConfig.userDistributeP + _fundingFeeConfig.treasuryDistributeP == PERCENTAGE,\\n            \\\"percentage exceed 100%\\\");\\n        fundingFeeConfigs[_pairIndex] = _fundingFeeConfig;\\n    }\\n\\n    function updatePairMiner(uint256 _pairIndex, address _account, bool _enable) external onlyPoolAdmin {\\n        Pair memory pair = pairs[_pairIndex];\\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), \\\"pair not existed\\\");\\n\\n        IPairToken(pair.pairToken).setMiner(_account, _enable);\\n    }\\n\\n    function getPair(uint256 _pairIndex) external view override returns(Pair memory) {\\n        return pairs[_pairIndex];\\n    }\\n\\n    function getTradingConfig(uint256 _pairIndex) external view override returns(TradingConfig memory) {\\n        return tradingConfigs[_pairIndex];\\n    }\\n\\n    function getTradingFeeConfig(uint256 _pairIndex) external view override returns(TradingFeeConfig memory) {\\n        return tradingFeeConfigs[_pairIndex];\\n    }\\n\\n    function getFundingFeeConfig(uint256 _pairIndex) external view override returns(FundingFeeConfig memory) {\\n        return fundingFeeConfigs[_pairIndex];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x765c98e3d38bd792382a1d47d1b7f17aa1c08fce2524c7a8d99300e92cf9ac88\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 keeperDistributeP;\\n        uint256 treasuryDistributeP;\\n        uint256 refererDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate;             // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate;             // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate;          // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor;        // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor;     // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        // Distribute\\n        uint256 lpDistributeP;\\n        uint256 userDistributeP;\\n        uint256 treasuryDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns(Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns(TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns(TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns(FundingFeeConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x756b96a639cd408d74590aca6ffde567511a029fb5959eaac24beca0e493b691\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairLiquidity {\\n}\\n\",\"keccak256\":\"0xca001ad063d0448953eeb8d5ac2c234c60592ac55269edf94f19dccc9e8dd3b8\",\"license\":\"UNLICENSED\"},\"contracts/token/PairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPairToken.sol\\\";\\n\\ncontract PairToken is IPairToken, ERC20, Ownable {\\n\\n    address public token0;\\n    address public token1;\\n\\n    mapping(address => bool) public miners;\\n\\n    constructor(address _token0, address _token1) ERC20(\\\"MYX LPs\\\", \\\"MYX-LP\\\") {\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(miners[msg.sender], 'miner forbidden');\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyMiner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMiner {\\n        _burn(account, amount);\\n    }\\n\\n    function setMiner(address account, bool enable) external onlyOwner {\\n        miners[account] = enable;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x978b0fd6de1e1aa8f389df15f59875fb9146108ad9b7aacd46509a6652fd48ae\",\"license\":\"UNLICENSED\"},\"contracts/token/interfaces/IPairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPairToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0x78bc94988822f8020827c58cde53509198946381e496e2b23c737cc0f51f5a85\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0346100b457601f612c3d38819003918201601f19168301916001600160401b038311848410176100b9578084926020946040528339810103126100b457516001600160a01b03811681036100b4573360005260006020526040600020600160ff19825416179055608052604051612b6d90816100d082396080518181816102fa01528181610409015281816107ec015281816108fb015281816109f801528181610b4201528181610da501526110190152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101562000014575b600080fd5b60003560e01c80630da67fe714620001f55780631848effa14620001ea5780631f49703414620001df57806326fdad2e14620001d4578063293315f214620001c957806330a66e1514620001be57806346ea87af14620001b35780637734bd4614620001a85780637f1b4a24146200019d5780638327f0e114620001925780639b0f8cb814620001875780639c3d5770146200017c5780639cb7de4b1462000171578063affb60601462000166578063b81b2b71146200015b578063b91ac7881462000150578063bdf391cc1462000145578063cfd336e9146200013a578063d2963262146200012f578063d355a9b414620001245763f1ec23cf146200011a57600080fd5b6200000f62000fb1565b506200000f62000f35565b506200000f62000e08565b506200000f62000d5d565b506200000f62000c46565b506200000f62000bc6565b506200000f62000ba5565b506200000f62000afb565b506200000f6200099e565b506200000f6200095a565b506200000f620008a1565b506200000f620007a4565b506200000f62000765565b506200000f620006d2565b506200000f6200068b565b506200000f62000539565b506200000f62000519565b506200000f620003c3565b506200000f62000329565b506200000f620002e1565b50346200000f5760203660031901126200000f57620002d160408060a081516200021f8162001075565b60009181838093528260208201528285820152826060820152826080820152015260043581526005602052209060058151926200025c8462001075565b80548452600181015460208501526002810154838501526003810154606085015260048101546080850152015460a0830152519182918291909160a08060c083019480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b0390f35b60009103126200000f57565b50346200000f5760003660031901126200000f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200000f5760203660031901126200000f57600435600052600660205260406000208054620002d1600183015492600281015490600381015460048201546005830154906006840154926008600786015495015495604051998a998a95926101009794919a9998959261012088019b8852602088015260408701526060860152608085015260a084015260c083015260e08201520152565b50346200000f5760e03660031901126200000f5760c03660231901126200000f576040516351331ad760e01b81526200048090602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa92831562000509575b600093620004d3575b50604051637be53ca160e01b815292839182908162000461336004830162001170565b0392165afa918215620004c3575b6000926200048f575b5050620011bc565b6200048d60043562001711565b005b620004b39250803d10620004bb575b620004aa818362001111565b81019062001158565b388062000478565b503d6200049e565b620004cd6200114b565b6200046f565b620004f9919350823d841162000501575b620004f0818362001111565b81019062001133565b91386200043e565b503d620004e4565b620005136200114b565b62000435565b50346200000f5760003660031901126200000f5760206040516127108152f35b50346200000f5760203660031901126200000f57620002d1604060e081516200056281620010a7565b600091818380935282602082015282858201528260608201528260808201528260a08201528260c0820152015260043581526004602052206007620005a66200145c565b918054835260018101546020840152600281015460408401526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152015460e08201526040519182918291909160e080610100830194805184526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a085015260c081015160c08501520151910152565b6001600160a01b038116036200000f57565b6001600160a01b0316600090815260076020526040902090565b9060018060a01b0316600052602052604060002090565b50346200000f5760203660031901126200000f57600435620006ad8162000648565b60018060a01b03166000526000602052602060ff604060002054166040519015158152f35b50346200000f5760203660031901126200000f57600435600052600560205260c0604060002080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b60409060031901126200000f57600435620007538162000648565b90602435620007628162000648565b90565b50346200000f5760206200079b6200077d3662000738565b6001600160a01b039091166000908152600284526040902062000674565b54604051908152f35b50346200000f576101203660031901126200000f576101003660231901126200000f576040516351331ad760e01b81526200084290602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d60043560005260046020526040600020602435815560443560018201556064356002820155608435600382015560a435600482015560c435600582015560e4356006820155600761010435910155565b801515036200000f57565b50346200000f5760603660031901126200000f576200048d602435620008c78162000648565b60443590620008d68262000896565b6040516351331ad760e01b81526200095190602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b600435620018a2565b50346200000f57602060ff62000992620009743662000738565b6001600160a01b039091166000908152600785526040902062000674565b54166040519015158152f35b50346200000f5760403660031901126200000f576200048d600435620009c48162000648565b60243590620009d38262000896565b6040516351331ad760e01b815262000a6f90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa92831562000aeb575b60009362000ac7575b50604051630935e01b60e21b815292839182908162000a50336004830162001170565b0392165afa91821562000ab7575b60009262000a95575b505062001183565b60018060a01b0316600052600060205260406000209060ff801983541691151516179055565b62000aaf9250803d10620004bb57620004aa818362001111565b388062000a67565b62000ac16200114b565b62000a5e565b62000ae3919350823d84116200050157620004f0818362001111565b913862000a2d565b62000af56200114b565b62000a24565b50346200000f576101003660031901126200000f5760e03660231901126200000f576040516351331ad760e01b815262000b9890602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d60043562001645565b50346200000f5760003660031901126200000f576020600154604051908152f35b50346200000f5760203660031901126200000f57600435600052600360205260e0604060002060018060a01b038082541691816001820154169160ff6002830154600384015492600560048601549501549560405197885260208801528116604087015260a01c1615156060850152608084015260a083015260c0820152f35b50346200000f5760203660031901126200000f57620002d160408060c0815162000c7081620010c4565b600091818380935282602082015282858201528260608201528260808201528260a08201520152600435815260036020522090600581519262000cb384620010c4565b80546001600160a01b03908116855260018201548116602086015260028201549081168486015260a01c60ff161515606085015260038101546080850152600481015460a0850152015460c0830152519182918291909160c08060e083019460018060a01b0380825116855280602083015116602086015260408201511660408501526060810151151560608501526080810151608085015260a081015160a08501520151910152565b50346200000f576101403660031901126200000f576101203660231901126200000f576040516351331ad760e01b815262000dfb90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d600435620017b2565b50346200000f5760203660031901126200000f57620002d160405162000e2e81620010e0565b6040600080835280602084015280828401528060608401528060808401528060a08401528060c08401528060e08401528061010080940152600435815260066020522090600862000e7e6200146d565b928054845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015201549082015260405191829182919091610120810192805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151910152565b50346200000f5760203660031901126200000f5760043560005260046020526101006040600020805490600181015490600281015460038201546004830154906005840154926007600686015495015495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346200000f5760603660031901126200000f576200048d60043562000fd78162000648565b60243562000fe58162000648565b6044359162000ff48362000648565b6040516351331ad760e01b81526200106f90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b620012cd565b60c081019081106001600160401b038211176200109157604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176200109157604052565b60e081019081106001600160401b038211176200109157604052565b61012081019081106001600160401b038211176200109157604052565b6001600160401b0381116200109157604052565b90601f801991011681019081106001600160401b038211176200109157604052565b908160209103126200000f5751620007628162000648565b506040513d6000823e3d90fd5b908160209103126200000f5751620007628162000896565b6001600160a01b03909116815260200190565b156200118b57565b60405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b15620011c457565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b156200120157565b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b156200123d57565b60405162461bcd60e51b81526020600482015260136024820152721c185a5c88185b1c9958591e481b1a5cdd1959606a1b6044820152606490fd5b80546001600160a01b0319166001600160a01b03909216919091179055565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114620012bf570190565b620012c962001297565b0190565b6001600160a01b0380831693908216929183851462001423577feda679f3434de965730a28b8b694f2a348c09a2c1bb3e226633b6af24841adc1926002620013e49262001368620013dd958815158062001419575b6200132d90620011f9565b620013606200135a620013566200134f8862001349886200065a565b62000674565b5460ff1690565b1590565b62001235565b8483620014b9565b94836200138c6200137f889662001349866200065a565b805460ff19166001179055565b620013d3620013cb60015480620013ba85620013498960018060a01b03166000526002602052604060002090565b556000526003602052604060002090565b938462001278565b6001830162001278565b0162001278565b60015490620013fc620013f783620012ae565b600155565b604080516001600160a01b039290921682526020820192909252a3565b5089151562001322565b60405162461bcd60e51b81526020600482015260116024820152706964656e746963616c206164647265737360781b6044820152606490fd5b604051906200146b82620010a7565b565b604051906200146b82620010e0565b906200146b604051928362001111565b9081519160005b838110620014a5575050016000815290565b806020809284010151818501520162001493565b906200153791620015716200157e61119993620014d9602086016200147c565b948086526200199f6020870139604080516001600160a01b038681166020830152831681830152908152601f19919062001544906200151a60608262001111565b6040519889916200153060208401809b6200148c565b906200148c565b0383810189528862001111565b6040519384916020830196879060289260018060601b0319809260601b16835260601b1660148201520190565b0390810183528262001111565b5190209151906000f5906001600160a01b038216803b156200000f57604051631e2c2eb160e21b81526001600160a01b03929092166004830152600160248301526000908290604490829084905af18015620015f5575b620015de575090565b80620015ee6200076292620010fd565b80620002d5565b620015ff6200114b565b620015d5565b156200160d57565b60405162461bcd60e51b815260206004820152601060248201526f1c185a5c881b9bdd08195e1a5cdd195960821b6044820152606490fd5b600052600360205260406000206200167260018060a01b038083541615159081620016ba575b5062001605565b608435620016808162000896565b60028201805460ff60a01b191691151560a01b60ff60a01b1691909117905560a435600382015560c435600482015560e435600590910155565b90506001830154161515386200166b565b15620016d357565b60405162461bcd60e51b815260206004820152601660248201527570657263656e7461676520657863656564203130302560501b6044820152606490fd5b60056064356084359283820193848311620017a2575b60a4359182860180961162001792575b6200175561271060c4359788810180911162001782575b14620016cb565b60005283602052604060002092602435845560443560018501556002840155600383015560048201550155565b6200178c62001297565b6200174e565b6200179c62001297565b62001737565b620017ac62001297565b62001727565b600860e43561010435808201938483116200182f575b620017e66127106101243596878101809111620017825714620016cb565b6000526006602052604060002091602435835560443560018401556064356002840155608435600384015560a435600484015560c4356005840155600683015560078201550155565b6200183962001297565b620017c8565b906040516200184e81620010c4565b60c06005829460ff60018060a01b038083541686528060018401541660208701526002830154908116604087015260a01c161515606085015260038101546080850152600481015460a08501520154910152565b620018fc620018fc6040620018cf620018c962001908956000526003602052604060002090565b6200183f565b80516001600160a01b031615158062001975575b620018ee9062001605565b01516001600160a01b031690565b6001600160a01b031690565b91823b156200000f57604051631e2c2eb160e21b81526001600160a01b0392909216600483015215156024820152906000908290604490829084905af1801562001965575b620019555750565b80620015ee6200146b92620010fd565b6200196f6200114b565b6200194d565b506020810151620018ee9062001994906001600160a01b0316620018fc565b15159050620018e356fe608034620003a8576001600160401b0390601f90601f19620011993881900384810183168401919086831185841017620002ac578085926040948552833981010312620003a8576200005182620003cd565b93620000616020809401620003cd565b936200006c620003ad565b60078152664d5958204c507360c81b8582015262000089620003ad565b91600683526504d59582d4c560d41b86840152815192848411620002ac5760039384546001948582811c921680156200039d575b8a8310146200038757818584931162000331575b508990858311600114620002ce57600092620002c2575b505060001982871b1c191690841b1784555b8051948511620002ac5760049687548481811c91168015620002a1575b828210146200028c5783811162000241575b5080928611600114620001d5575084955090849291600095620001c9575b50501b92600019911b1c19161790555b60058054336001600160a01b031980831682179093556040519492936001600160a01b0393909284929083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a31683600654161760065516906007541617600755610db69081620003e38239f35b01519350388062000147565b939295859081168860005285600020956000905b898383106200022657505050106200020b575b50505050811b01905562000157565b01519060f884600019921b161c1916905538808080620001fc565b858701518955909701969485019488935090810190620001e9565b88600052816000208480890160051c820192848a1062000282575b0160051c019085905b8281106200027557505062000129565b6000815501859062000265565b925081926200025c565b602289634e487b7160e01b6000525260246000fd5b90607f169062000117565b634e487b7160e01b600052604160045260246000fd5b015190503880620000e8565b908987941691886000528b6000209260005b8d8282106200031a575050841162000301575b505050811b018455620000fa565b015160001983891b60f8161c19169055388080620002f3565b8385015186558a97909501949384019301620002e0565b90915086600052896000208580850160051c8201928c86106200037d575b918891869594930160051c01915b8281106200036d575050620000d1565b600081558594508891016200035d565b925081926200034f565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000bd565b600080fd5b60408051919082016001600160401b03811183821017620002ac57604052565b51906001600160a01b0382168203620003a85756fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146108f857508063095ea7b3146108ce5780630dfe1681146108a557806318160ddd1461088657806323b872dd146107bc578063313ce567146107a0578063395093511461075057806340c10f191461068d578063648ec7b91461064f57806370a0823114610618578063715018a6146105bb57806378b0bac4146105655780638da5cb5b1461053c57806395d89b411461043a5780639dc29fac14610315578063a457c2d71461026e578063a9059cbb1461023d578063d21220a714610214578063dd62ed3e146101c75763f2fde38b146100ff57600080fd5b346101c35760203660031901126101c357610118610a18565b90610121610a49565b6001600160a01b03918216928315610171575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b505034610210578060031936011261021057806020926101e5610a18565b6101ed610a33565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461021057816003193601126102105760075490516001600160a01b039091168152602090f35b50503461021057806003193601126102105760209061026761025d610a18565b6024359033610ac4565b5160018152f35b508234610312578260031936011261031257610288610a18565b918360243592338152600160205281812060018060a01b03861682526020522054908282106102c1576020856102678585038733610c20565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50829034610210578260031936011261021057610330610a18565b6024353384526020916008835261034c60ff8787205416610d22565b6001600160a01b03169283156103ed57838552848352858520549082821061039f575090849581600080516020610d6183398151915294938688528785520381872055816002540360025551908152a380f35b865162461bcd60e51b8152908101849052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b855162461bcd60e51b8152908101839052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b50919034610210578160031936011261021057805190828454600181811c90808316928315610532575b602093848410811461051f5783885290811561050357506001146104cb575b505050829003601f01601f19168201926001600160401b038411838510176104b857508291826104b49252826109cf565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b8385106104ef5750505050830101388080610483565b8054888601830152930192849082016104d9565b60ff1916878501525050151560051b8401019050388080610483565b634e487b7160e01b895260228a52602489fd5b91607f1691610464565b50503461021057816003193601126102105760055490516001600160a01b039091168152602090f35b50503461021057806003193601126102105761057f610a18565b90602435918215158093036105b757610596610a49565b60018060a01b03168352600860205282209060ff8019835416911617905580f35b8380fd5b83346103125780600319360112610312576105d4610a49565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102105760203660031901126102105760209181906001600160a01b03610640610a18565b16815280845220549051908152f35b5050346102105760203660031901126102105760209160ff9082906001600160a01b0361067a610a18565b1681526008855220541690519015158152f35b5090346101c357806003193601126101c3576106a7610a18565b906024359133855260086020526106c360ff8387205416610d22565b6001600160a01b031692831561070e5750602082600080516020610d61833981519152926106f48795600254610aa1565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610210578060031936011261021057610267602092610799610773610a18565b338352600186528483206001600160a01b03821684528652918490205460243590610aa1565b9033610c20565b5050346102105781600319360112610210576020905160128152f35b50829034610210576060366003190112610210576107d8610a18565b6107e0610a33565b91846044359460018060a01b03841681526001602052818120338252602052205490600019820361081a575b602086610267878787610ac4565b84821061084357509183916108386020969561026795033383610c20565b91939481935061080c565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346102105781600319360112610210576020906002549051908152f35b50503461021057816003193601126102105760065490516001600160a01b039091168152602090f35b5050346102105780600319360112610210576020906102676108ee610a18565b6024359033610c20565b84915083346101c357826003193601126101c35782600354600181811c908083169283156109c5575b602093848410811461051f578388529081156109a9575060011461097057505050829003601f01601f19168201926001600160401b038411838510176104b857508291826104b49252826109cf565b91925060038652828620918387935b8385106109955750505050830101858080610483565b80548886018301529301928490820161097f565b60ff1916878501525050151560051b8401019050858080610483565b91607f1691610921565b6020808252825181830181905290939260005b828110610a0457505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109e2565b600435906001600160a01b0382168203610a2e57565b600080fd5b602435906001600160a01b0382168203610a2e57565b6005546001600160a01b03163303610a5d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908201809211610aae57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610bcd5716918215610b7c57600082815280602052604081205491808310610b285760408282600080516020610d61833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610cd15716918215610c815760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610d2957565b60405162461bcd60e51b815260206004820152600f60248201526e36b4b732b9103337b93134b23232b760891b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bd147024338b0e18060c55206c3bd2130f07974683f06e3696fc5a752fc194fa64736f6c63430008110033a2646970667358221220dee1d8c3b81ff790048810a707a80bdfb8e73aaa87a1f935fa131a95537ac69c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b60003560e01c80630da67fe714620001f55780631848effa14620001ea5780631f49703414620001df57806326fdad2e14620001d4578063293315f214620001c957806330a66e1514620001be57806346ea87af14620001b35780637734bd4614620001a85780637f1b4a24146200019d5780638327f0e114620001925780639b0f8cb814620001875780639c3d5770146200017c5780639cb7de4b1462000171578063affb60601462000166578063b81b2b71146200015b578063b91ac7881462000150578063bdf391cc1462000145578063cfd336e9146200013a578063d2963262146200012f578063d355a9b414620001245763f1ec23cf146200011a57600080fd5b6200000f62000fb1565b506200000f62000f35565b506200000f62000e08565b506200000f62000d5d565b506200000f62000c46565b506200000f62000bc6565b506200000f62000ba5565b506200000f62000afb565b506200000f6200099e565b506200000f6200095a565b506200000f620008a1565b506200000f620007a4565b506200000f62000765565b506200000f620006d2565b506200000f6200068b565b506200000f62000539565b506200000f62000519565b506200000f620003c3565b506200000f62000329565b506200000f620002e1565b50346200000f5760203660031901126200000f57620002d160408060a081516200021f8162001075565b60009181838093528260208201528285820152826060820152826080820152015260043581526005602052209060058151926200025c8462001075565b80548452600181015460208501526002810154838501526003810154606085015260048101546080850152015460a0830152519182918291909160a08060c083019480518452602081015160208501526040810151604085015260608101516060850152608081015160808501520151910152565b0390f35b60009103126200000f57565b50346200000f5760003660031901126200000f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200000f5760203660031901126200000f57600435600052600660205260406000208054620002d1600183015492600281015490600381015460048201546005830154906006840154926008600786015495015495604051998a998a95926101009794919a9998959261012088019b8852602088015260408701526060860152608085015260a084015260c083015260e08201520152565b50346200000f5760e03660031901126200000f5760c03660231901126200000f576040516351331ad760e01b81526200048090602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa92831562000509575b600093620004d3575b50604051637be53ca160e01b815292839182908162000461336004830162001170565b0392165afa918215620004c3575b6000926200048f575b5050620011bc565b6200048d60043562001711565b005b620004b39250803d10620004bb575b620004aa818362001111565b81019062001158565b388062000478565b503d6200049e565b620004cd6200114b565b6200046f565b620004f9919350823d841162000501575b620004f0818362001111565b81019062001133565b91386200043e565b503d620004e4565b620005136200114b565b62000435565b50346200000f5760003660031901126200000f5760206040516127108152f35b50346200000f5760203660031901126200000f57620002d1604060e081516200056281620010a7565b600091818380935282602082015282858201528260608201528260808201528260a08201528260c0820152015260043581526004602052206007620005a66200145c565b918054835260018101546020840152600281015460408401526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152015460e08201526040519182918291909160e080610100830194805184526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a085015260c081015160c08501520151910152565b6001600160a01b038116036200000f57565b6001600160a01b0316600090815260076020526040902090565b9060018060a01b0316600052602052604060002090565b50346200000f5760203660031901126200000f57600435620006ad8162000648565b60018060a01b03166000526000602052602060ff604060002054166040519015158152f35b50346200000f5760203660031901126200000f57600435600052600560205260c0604060002080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b60409060031901126200000f57600435620007538162000648565b90602435620007628162000648565b90565b50346200000f5760206200079b6200077d3662000738565b6001600160a01b039091166000908152600284526040902062000674565b54604051908152f35b50346200000f576101203660031901126200000f576101003660231901126200000f576040516351331ad760e01b81526200084290602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d60043560005260046020526040600020602435815560443560018201556064356002820155608435600382015560a435600482015560c435600582015560e4356006820155600761010435910155565b801515036200000f57565b50346200000f5760603660031901126200000f576200048d602435620008c78162000648565b60443590620008d68262000896565b6040516351331ad760e01b81526200095190602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b600435620018a2565b50346200000f57602060ff62000992620009743662000738565b6001600160a01b039091166000908152600785526040902062000674565b54166040519015158152f35b50346200000f5760403660031901126200000f576200048d600435620009c48162000648565b60243590620009d38262000896565b6040516351331ad760e01b815262000a6f90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa92831562000aeb575b60009362000ac7575b50604051630935e01b60e21b815292839182908162000a50336004830162001170565b0392165afa91821562000ab7575b60009262000a95575b505062001183565b60018060a01b0316600052600060205260406000209060ff801983541691151516179055565b62000aaf9250803d10620004bb57620004aa818362001111565b388062000a67565b62000ac16200114b565b62000a5e565b62000ae3919350823d84116200050157620004f0818362001111565b913862000a2d565b62000af56200114b565b62000a24565b50346200000f576101003660031901126200000f5760e03660231901126200000f576040516351331ad760e01b815262000b9890602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d60043562001645565b50346200000f5760003660031901126200000f576020600154604051908152f35b50346200000f5760203660031901126200000f57600435600052600360205260e0604060002060018060a01b038082541691816001820154169160ff6002830154600384015492600560048601549501549560405197885260208801528116604087015260a01c1615156060850152608084015260a083015260c0820152f35b50346200000f5760203660031901126200000f57620002d160408060c0815162000c7081620010c4565b600091818380935282602082015282858201528260608201528260808201528260a08201520152600435815260036020522090600581519262000cb384620010c4565b80546001600160a01b03908116855260018201548116602086015260028201549081168486015260a01c60ff161515606085015260038101546080850152600481015460a0850152015460c0830152519182918291909160c08060e083019460018060a01b0380825116855280602083015116602086015260408201511660408501526060810151151560608501526080810151608085015260a081015160a08501520151910152565b50346200000f576101403660031901126200000f576101203660231901126200000f576040516351331ad760e01b815262000dfb90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b6200048d600435620017b2565b50346200000f5760203660031901126200000f57620002d160405162000e2e81620010e0565b6040600080835280602084015280828401528060608401528060808401528060a08401528060c08401528060e08401528061010080940152600435815260066020522090600862000e7e6200146d565b928054845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015201549082015260405191829182919091610120810192805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151910152565b50346200000f5760203660031901126200000f5760043560005260046020526101006040600020805490600181015490600281015460038201546004830154906005840154926007600686015495015495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346200000f5760603660031901126200000f576200048d60043562000fd78162000648565b60243562000fe58162000648565b6044359162000ff48362000648565b6040516351331ad760e01b81526200106f90602090816001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9283156200050957600093620004d35750604051637be53ca160e01b815292839182908162000461336004830162001170565b620012cd565b60c081019081106001600160401b038211176200109157604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176200109157604052565b60e081019081106001600160401b038211176200109157604052565b61012081019081106001600160401b038211176200109157604052565b6001600160401b0381116200109157604052565b90601f801991011681019081106001600160401b038211176200109157604052565b908160209103126200000f5751620007628162000648565b506040513d6000823e3d90fd5b908160209103126200000f5751620007628162000896565b6001600160a01b03909116815260200190565b156200118b57565b60405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b15620011c457565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b156200120157565b60405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b156200123d57565b60405162461bcd60e51b81526020600482015260136024820152721c185a5c88185b1c9958591e481b1a5cdd1959606a1b6044820152606490fd5b80546001600160a01b0319166001600160a01b03909216919091179055565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114620012bf570190565b620012c962001297565b0190565b6001600160a01b0380831693908216929183851462001423577feda679f3434de965730a28b8b694f2a348c09a2c1bb3e226633b6af24841adc1926002620013e49262001368620013dd958815158062001419575b6200132d90620011f9565b620013606200135a620013566200134f8862001349886200065a565b62000674565b5460ff1690565b1590565b62001235565b8483620014b9565b94836200138c6200137f889662001349866200065a565b805460ff19166001179055565b620013d3620013cb60015480620013ba85620013498960018060a01b03166000526002602052604060002090565b556000526003602052604060002090565b938462001278565b6001830162001278565b0162001278565b60015490620013fc620013f783620012ae565b600155565b604080516001600160a01b039290921682526020820192909252a3565b5089151562001322565b60405162461bcd60e51b81526020600482015260116024820152706964656e746963616c206164647265737360781b6044820152606490fd5b604051906200146b82620010a7565b565b604051906200146b82620010e0565b906200146b604051928362001111565b9081519160005b838110620014a5575050016000815290565b806020809284010151818501520162001493565b906200153791620015716200157e61119993620014d9602086016200147c565b948086526200199f6020870139604080516001600160a01b038681166020830152831681830152908152601f19919062001544906200151a60608262001111565b6040519889916200153060208401809b6200148c565b906200148c565b0383810189528862001111565b6040519384916020830196879060289260018060601b0319809260601b16835260601b1660148201520190565b0390810183528262001111565b5190209151906000f5906001600160a01b038216803b156200000f57604051631e2c2eb160e21b81526001600160a01b03929092166004830152600160248301526000908290604490829084905af18015620015f5575b620015de575090565b80620015ee6200076292620010fd565b80620002d5565b620015ff6200114b565b620015d5565b156200160d57565b60405162461bcd60e51b815260206004820152601060248201526f1c185a5c881b9bdd08195e1a5cdd195960821b6044820152606490fd5b600052600360205260406000206200167260018060a01b038083541615159081620016ba575b5062001605565b608435620016808162000896565b60028201805460ff60a01b191691151560a01b60ff60a01b1691909117905560a435600382015560c435600482015560e435600590910155565b90506001830154161515386200166b565b15620016d357565b60405162461bcd60e51b815260206004820152601660248201527570657263656e7461676520657863656564203130302560501b6044820152606490fd5b60056064356084359283820193848311620017a2575b60a4359182860180961162001792575b6200175561271060c4359788810180911162001782575b14620016cb565b60005283602052604060002092602435845560443560018501556002840155600383015560048201550155565b6200178c62001297565b6200174e565b6200179c62001297565b62001737565b620017ac62001297565b62001727565b600860e43561010435808201938483116200182f575b620017e66127106101243596878101809111620017825714620016cb565b6000526006602052604060002091602435835560443560018401556064356002840155608435600384015560a435600484015560c4356005840155600683015560078201550155565b6200183962001297565b620017c8565b906040516200184e81620010c4565b60c06005829460ff60018060a01b038083541686528060018401541660208701526002830154908116604087015260a01c161515606085015260038101546080850152600481015460a08501520154910152565b620018fc620018fc6040620018cf620018c962001908956000526003602052604060002090565b6200183f565b80516001600160a01b031615158062001975575b620018ee9062001605565b01516001600160a01b031690565b6001600160a01b031690565b91823b156200000f57604051631e2c2eb160e21b81526001600160a01b0392909216600483015215156024820152906000908290604490829084905af1801562001965575b620019555750565b80620015ee6200146b92620010fd565b6200196f6200114b565b6200194d565b506020810151620018ee9062001994906001600160a01b0316620018fc565b15159050620018e356fe608034620003a8576001600160401b0390601f90601f19620011993881900384810183168401919086831185841017620002ac578085926040948552833981010312620003a8576200005182620003cd565b93620000616020809401620003cd565b936200006c620003ad565b60078152664d5958204c507360c81b8582015262000089620003ad565b91600683526504d59582d4c560d41b86840152815192848411620002ac5760039384546001948582811c921680156200039d575b8a8310146200038757818584931162000331575b508990858311600114620002ce57600092620002c2575b505060001982871b1c191690841b1784555b8051948511620002ac5760049687548481811c91168015620002a1575b828210146200028c5783811162000241575b5080928611600114620001d5575084955090849291600095620001c9575b50501b92600019911b1c19161790555b60058054336001600160a01b031980831682179093556040519492936001600160a01b0393909284929083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a31683600654161760065516906007541617600755610db69081620003e38239f35b01519350388062000147565b939295859081168860005285600020956000905b898383106200022657505050106200020b575b50505050811b01905562000157565b01519060f884600019921b161c1916905538808080620001fc565b858701518955909701969485019488935090810190620001e9565b88600052816000208480890160051c820192848a1062000282575b0160051c019085905b8281106200027557505062000129565b6000815501859062000265565b925081926200025c565b602289634e487b7160e01b6000525260246000fd5b90607f169062000117565b634e487b7160e01b600052604160045260246000fd5b015190503880620000e8565b908987941691886000528b6000209260005b8d8282106200031a575050841162000301575b505050811b018455620000fa565b015160001983891b60f8161c19169055388080620002f3565b8385015186558a97909501949384019301620002e0565b90915086600052896000208580850160051c8201928c86106200037d575b918891869594930160051c01915b8281106200036d575050620000d1565b600081558594508891016200035d565b925081926200034f565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000bd565b600080fd5b60408051919082016001600160401b03811183821017620002ac57604052565b51906001600160a01b0382168203620003a85756fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146108f857508063095ea7b3146108ce5780630dfe1681146108a557806318160ddd1461088657806323b872dd146107bc578063313ce567146107a0578063395093511461075057806340c10f191461068d578063648ec7b91461064f57806370a0823114610618578063715018a6146105bb57806378b0bac4146105655780638da5cb5b1461053c57806395d89b411461043a5780639dc29fac14610315578063a457c2d71461026e578063a9059cbb1461023d578063d21220a714610214578063dd62ed3e146101c75763f2fde38b146100ff57600080fd5b346101c35760203660031901126101c357610118610a18565b90610121610a49565b6001600160a01b03918216928315610171575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b505034610210578060031936011261021057806020926101e5610a18565b6101ed610a33565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461021057816003193601126102105760075490516001600160a01b039091168152602090f35b50503461021057806003193601126102105760209061026761025d610a18565b6024359033610ac4565b5160018152f35b508234610312578260031936011261031257610288610a18565b918360243592338152600160205281812060018060a01b03861682526020522054908282106102c1576020856102678585038733610c20565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50829034610210578260031936011261021057610330610a18565b6024353384526020916008835261034c60ff8787205416610d22565b6001600160a01b03169283156103ed57838552848352858520549082821061039f575090849581600080516020610d6183398151915294938688528785520381872055816002540360025551908152a380f35b865162461bcd60e51b8152908101849052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b855162461bcd60e51b8152908101839052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b50919034610210578160031936011261021057805190828454600181811c90808316928315610532575b602093848410811461051f5783885290811561050357506001146104cb575b505050829003601f01601f19168201926001600160401b038411838510176104b857508291826104b49252826109cf565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b8385106104ef5750505050830101388080610483565b8054888601830152930192849082016104d9565b60ff1916878501525050151560051b8401019050388080610483565b634e487b7160e01b895260228a52602489fd5b91607f1691610464565b50503461021057816003193601126102105760055490516001600160a01b039091168152602090f35b50503461021057806003193601126102105761057f610a18565b90602435918215158093036105b757610596610a49565b60018060a01b03168352600860205282209060ff8019835416911617905580f35b8380fd5b83346103125780600319360112610312576105d4610a49565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102105760203660031901126102105760209181906001600160a01b03610640610a18565b16815280845220549051908152f35b5050346102105760203660031901126102105760209160ff9082906001600160a01b0361067a610a18565b1681526008855220541690519015158152f35b5090346101c357806003193601126101c3576106a7610a18565b906024359133855260086020526106c360ff8387205416610d22565b6001600160a01b031692831561070e5750602082600080516020610d61833981519152926106f48795600254610aa1565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610210578060031936011261021057610267602092610799610773610a18565b338352600186528483206001600160a01b03821684528652918490205460243590610aa1565b9033610c20565b5050346102105781600319360112610210576020905160128152f35b50829034610210576060366003190112610210576107d8610a18565b6107e0610a33565b91846044359460018060a01b03841681526001602052818120338252602052205490600019820361081a575b602086610267878787610ac4565b84821061084357509183916108386020969561026795033383610c20565b91939481935061080c565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346102105781600319360112610210576020906002549051908152f35b50503461021057816003193601126102105760065490516001600160a01b039091168152602090f35b5050346102105780600319360112610210576020906102676108ee610a18565b6024359033610c20565b84915083346101c357826003193601126101c35782600354600181811c908083169283156109c5575b602093848410811461051f578388529081156109a9575060011461097057505050829003601f01601f19168201926001600160401b038411838510176104b857508291826104b49252826109cf565b91925060038652828620918387935b8385106109955750505050830101858080610483565b80548886018301529301928490820161097f565b60ff1916878501525050151560051b8401019050858080610483565b91607f1691610921565b6020808252825181830181905290939260005b828110610a0457505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109e2565b600435906001600160a01b0382168203610a2e57565b600080fd5b602435906001600160a01b0382168203610a2e57565b6005546001600160a01b03163303610a5d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908201809211610aae57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610bcd5716918215610b7c57600082815280602052604081205491808310610b285760408282600080516020610d61833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610cd15716918215610c815760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610d2957565b60405162461bcd60e51b815260206004820152600f60248201526e36b4b732b9103337b93134b23232b760891b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bd147024338b0e18060c55206c3bd2130f07974683f06e3696fc5a752fc194fa64736f6c63430008110033a2646970667358221220dee1d8c3b81ff790048810a707a80bdfb8e73aaa87a1f935fa131a95537ac69c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6574,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "isHandler",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8359,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "pairsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8365,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "pairIndexes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8370,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "pairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pair)12259_storage)"
      },
      {
        "astId": 8375,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "tradingConfigs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TradingConfig)12276_storage)"
      },
      {
        "astId": 8380,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "tradingFeeConfigs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(TradingFeeConfig)12289_storage)"
      },
      {
        "astId": 8385,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "fundingFeeConfigs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(FundingFeeConfig)12308_storage)"
      },
      {
        "astId": 8391,
        "contract": "contracts/pair/PairInfo.sol:PairInfo",
        "label": "isPairListed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(FundingFeeConfig)12308_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPairInfo.FundingFeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingFeeConfig)12308_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)12259_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPairInfo.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)12259_storage"
      },
      "t_mapping(t_uint256,t_struct(TradingConfig)12276_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPairInfo.TradingConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TradingConfig)12276_storage"
      },
      "t_mapping(t_uint256,t_struct(TradingFeeConfig)12289_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPairInfo.TradingFeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TradingFeeConfig)12289_storage"
      },
      "t_struct(FundingFeeConfig)12308_storage": {
        "encoding": "inplace",
        "label": "struct IPairInfo.FundingFeeConfig",
        "members": [
          {
            "astId": 12291,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "minFundingRate",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 12293,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maxFundingRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 12295,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "defaultFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 12297,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "fundingWeightFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12299,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "liquidityPremiumFactor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12301,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "interest",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 12303,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "lpDistributeP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12305,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "userDistributeP",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12307,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "treasuryDistributeP",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Pair)12259_storage": {
        "encoding": "inplace",
        "label": "struct IPairInfo.Pair",
        "members": [
          {
            "astId": 12246,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "indexToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12248,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "stableToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12250,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "pairToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12252,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "enable",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12254,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "kOfSwap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12256,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "expectIndexTokenP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12258,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "addLpFeeP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TradingConfig)12276_storage": {
        "encoding": "inplace",
        "label": "struct IPairInfo.TradingConfig",
        "members": [
          {
            "astId": 12261,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "minLeverage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12263,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12265,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "minTradeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12267,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maxTradeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12269,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maxPositionAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12271,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maintainMarginRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12273,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "priceSlipP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12275,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "maxPriceDeviationP",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(TradingFeeConfig)12289_storage": {
        "encoding": "inplace",
        "label": "struct IPairInfo.TradingFeeConfig",
        "members": [
          {
            "astId": 12278,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "takerFeeP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12280,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "makerFeeP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12282,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "lpDistributeP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12284,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "keeperDistributeP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12286,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "treasuryDistributeP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12288,
            "contract": "contracts/pair/PairInfo.sol:PairInfo",
            "label": "refererDistributeP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
