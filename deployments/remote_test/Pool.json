{
  "address": "0xD2605f821EDB524958dbc6202E692f21802369E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPoolTokenFactory",
          "name": "_poolTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "slipToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slipFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PairAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        }
      ],
      "name": "UpdateAveragePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableTotalAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "indexAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stableAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexReservedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableReservedAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateReserveAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "indexAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stableAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexTotalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableTotalAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateTotalAmount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNDING_RATE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableToken",
          "type": "address"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "decreaseProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseReserveAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseTotalAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingFeeConfigs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "minFundingRate",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "maxFundingRate",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "defaultFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "fundingWeightFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPremiumFactor",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "interest",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lpDistributeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getFundingFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "maxFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "defaultFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "fundingWeightFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPremiumFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "interest",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.FundingFeeConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "getMintLpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "slipToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slipAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "kOfSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectIndexTokenP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addLpFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFeeDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.Pair",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getReceivedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveIndexTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiveStableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getTradingConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPositionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maintainMarginRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceSlipP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TradingConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getTradingFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "takerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFeeDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keeperFeeDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TradingFeeConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "indexTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "indexReservedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableReservedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "internalType": "struct IPool.Vault",
          "name": "vault",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "increaseProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseReserveAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPairListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "liqiitySwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "lpFairPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pairToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "kOfSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectIndexTokenP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addLpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeDistributeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolTokenFactory",
      "outputs": [
        {
          "internalType": "contract IPoolTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedIndexAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedStableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver1",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradingVault",
          "type": "address"
        }
      ],
      "name": "setTradingVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPositionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maintainMarginRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceSlipP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceDeviationP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradingFeeConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeDistributeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keeperFeeDistributeP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        }
      ],
      "name": "updateAveragePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "maxFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "defaultFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "fundingWeightFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPremiumFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "interest",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lpDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.FundingFeeConfig",
          "name": "_fundingFeeConfig",
          "type": "tuple"
        }
      ],
      "name": "updateFundingFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "kOfSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectIndexTokenP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addLpFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFeeDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.Pair",
          "name": "_pair",
          "type": "tuple"
        }
      ],
      "name": "updatePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "updatePairMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPositionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maintainMarginRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceSlipP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TradingConfig",
          "name": "_tradingConfig",
          "type": "tuple"
        }
      ],
      "name": "updateTradingConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "takerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFeeDistributeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keeperFeeDistributeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TradingFeeConfig",
          "name": "_tradingFeeConfig",
          "type": "tuple"
        }
      ],
      "name": "updateTradingFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "indexTotalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexReservedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableTotalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableReservedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x15da428fa06bfd7311a0a49c93490eaf707362f1b1d96cfe0500974da45da252",
  "receipt": {
    "to": null,
    "from": "0xa6932e7D4262A9E7D9f6982Bf8849199ab631686",
    "contractAddress": "0xD2605f821EDB524958dbc6202E692f21802369E1",
    "transactionIndex": 0,
    "gasUsed": "3977405",
    "logsBloom": "0x
    "blockHash": "0xc4f3c5829e25b28de010c940ed0b3c6d1f697678bf89b9144c271cbfbe371630",
    "transactionHash": "0x15da428fa06bfd7311a0a49c93490eaf707362f1b1d96cfe0500974da45da252",
    "logs": [],
    "blockNumber": 895,
    "cumulativeGasUsed": "3977405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb07fB1a2F76574FD5243C1aA25Bb992cE9490B9C",
    "0x615a1bDF8Ab19456993b9B133F8417aBe931E882",
    "0xa6932e7D4262A9E7D9f6982Bf8849199ab631686",
    "0xa6932e7D4262A9E7D9f6982Bf8849199ab631686"
  ],
  "numDeployments": 1,
  "solcInputHash": "a0a35a8cc001b329f8e259ab1e7a3059",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPoolTokenFactory\",\"name\":\"_poolTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slipToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slipFeeAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"}],\"name\":\"UpdateAveragePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableTotalAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"indexAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stableAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexReservedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableReservedAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateReserveAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"indexAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stableAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexTotalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableTotalAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateTotalAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDING_RATE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"decreaseProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseReserveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingFeeConfigs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getFundingFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.FundingFeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"getMintLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"slipToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slipAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.Pair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getReceivedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveIndexTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveStableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getTradingConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TradingConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getTradingFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperFeeDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TradingFeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexReservedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableReservedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"internalType\":\"struct IPool.Vault\",\"name\":\"vault\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"increaseProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"increaseReserveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPairListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"liqiitySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"lpFairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenFactory\",\"outputs\":[{\"internalType\":\"contract IPoolTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedIndexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedStableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver1\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingVault\",\"type\":\"address\"}],\"name\":\"setTradingVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingFeeConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperFeeDistributeP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"}],\"name\":\"updateAveragePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"minFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"defaultFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fundingWeightFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPremiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interest\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lpDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.FundingFeeConfig\",\"name\":\"_fundingFeeConfig\",\"type\":\"tuple\"}],\"name\":\"updateFundingFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"kOfSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectIndexTokenP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.Pair\",\"name\":\"_pair\",\"type\":\"tuple\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"updatePairMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintainMarginRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSlipP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TradingConfig\",\"name\":\"_tradingConfig\",\"type\":\"tuple\"}],\"name\":\"updateTradingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"takerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDistributeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperFeeDistributeP\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TradingFeeConfig\",\"name\":\"_tradingFeeConfig\",\"type\":\"tuple\"}],\"name\":\"updateTradingFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"indexTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexReservedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableReservedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n}\\n\",\"keccak256\":\"0xa8384ca808dfa6c2b68b61e7f33da9aa32f828cb40e8d6876d1c0b9ca379f267\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n    function getPrice(address _token) external view returns (uint256);\\n\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n\\n    function setTokenConfig(address _token, address _priceFeed, uint256 _priceDecimals) external;\\n}\\n\",\"keccak256\":\"0xeebc3cb2fb4e34a3eca7245012c58baeea8dd44832702c4e916ebcd2166b3f73\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPool {\\n\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    event UpdateTotalAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexTotalAmount,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateReserveAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexReservedAmount,\\n        uint256 stableReservedAmount\\n    );\\n\\n    event UpdateProfit(\\n        uint256 indexed pairIndex,\\n        int256 profit,\\n        int256 realisedPnl,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateAveragePrice(\\n        uint256 indexed pairIndex,\\n        uint256 averagePrice\\n    );\\n\\n    event Swap(\\n        address indexed funder,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        bool isBuy, // buy indexToken with stableToken\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    event AddLiquidity(\\n        address indexed funder,\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount,\\n        uint256 indexFeeAmount,\\n        uint256 stableFeeAmount,\\n        address slipToken,\\n        uint256 slipFeeAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed account,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    struct Pair {\\n        uint256 pairIndex;\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n        uint256 lpFeeDistributeP;\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // distribute\\n        uint256 lpFeeDistributeP;\\n        uint256 keeperFeeDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate; // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate; // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate; // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor; // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor; // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        uint256 lpDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns (Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns (TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns (TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns (FundingFeeConfig memory);\\n\\n    struct Vault {\\n        uint256 indexTotalAmount; // total amount of tokens\\n        uint256 indexReservedAmount; // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns (Vault memory vault);\\n\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function liqiitySwap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n     function addLiquidity(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdedcca21e3b8cd208cce3501e185a0f7260ef30c2f4a2f658e3ca829b0cba401\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPoolToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0xb436cddb7e29b673df7552d534019a53153ae339d9e826abf53a44d8002cb444\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPoolTokenFactory.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IPoolTokenFactory {\\n    function createPoolToken(address indexToken, address stableToken) external returns (address);\\n}\\n\",\"keccak256\":\"0x347a19ff94196ad6d19a4b955922cd540fe6c20a20e991e1e7929f3c237df68b\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c62451d195ef51205ba29bafb92b799d4d6c3c158829d8f25faee0b7f422d77\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ISwapCallback.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ISwapCallback {\\n    function swapCallback(\\n        address indexToken,\\n        address stableToken,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4a695c7baf252d0751c5c9c74dd4d0ba602d04914edca7758467b5691f6e91e5\"},\"contracts/interfaces/IliquityCallback.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IliquityCallback {\\n    function addLiquityCallback(uint256 amountIndex, uint256 amountStable, bytes calldata data) external;\\n\\n    function removeLiquityCallback(address pairToken,uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5527b71500314b167b3960ae7e6c5e99e6b6db312ceb40992e5549cbca500781\"},\"contracts/libraries/AMMUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nlibrary AMMUtils {\\n    function getReserve(\\n        uint256 k,\\n        uint256 price,\\n        uint256 pricePrecision\\n    ) internal pure returns (uint256 reserveA, uint256 reserveB) {\\n        require(price > 0, 'Invalid price');\\n        require(k > 0, 'Invalid k');\\n\\n        reserveB = Math.sqrt(Math.mulDiv(k, price, pricePrecision));\\n        reserveA = k / reserveB;\\n        return (reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        if (amountIn == 0) {return 0;}\\n\\n        require(reserveIn > 0 && reserveOut > 0, 'Invalid reserve');\\n        amountOut = Math.mulDiv(amountIn, reserveOut, reserveIn + amountIn);\\n    }\\n}\\n\",\"keccak256\":\"0x354ce1d354b52900db64821bf24beb1efb758ae49a2d73f7ffa01e5cffcb2b97\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary Int256Utils {\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function toString(int256 amount) internal pure returns (string memory) {\\n        return string.concat(amount >= 0 ? '' : '-', abs(amount).toString());\\n    }\\n}\\n\",\"keccak256\":\"0x476512ef796febc141171c86f74261c6e24e6112b5adc13b790a43c00551e2f7\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nlibrary PrecisionUtils {\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function percentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xadfaf40535bc6d38097a71bdb78d51e6f8b28c73add432ed1373fcbb1931ed85\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Roleable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\n\\nabstract contract Roleable {\\n    mapping(address => bool) public isHandler;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    constructor(IAddressesProvider addressProvider) {\\n        isHandler[msg.sender] = true;\\n        ADDRESS_PROVIDER = addressProvider;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeac0b3410c0cb6e81ee5189dfb74d6ad5f641729a7c0a75066ee5dde096585e6\",\"license\":\"MIT\"},\"contracts/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/ISwapCallback.sol';\\nimport '../interfaces/IPoolToken.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\nimport '../token/interfaces/IBaseToken.sol';\\n\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Roleable.sol';\\nimport '../libraries/Int256Utils.sol';\\n\\nimport '../libraries/AMMUtils.sol';\\nimport '../libraries/PrecisionUtils.sol';\\n\\nimport '../token/PairToken.sol';\\nimport '../interfaces/IPoolTokenFactory.sol';\\n\\nimport '../interfaces/IliquityCallback.sol';\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Pool is IPool, Roleable {\\n    using PrecisionUtils for uint256;\\n    using SafeERC20 for IERC20;\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n    uint256 public constant PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PERCENTAGE = 1000000;\\n\\n    IPoolTokenFactory public immutable poolTokenFactory;\\n\\n    mapping(uint256 => TradingConfig) public tradingConfigs;\\n    mapping(uint256 => TradingFeeConfig) public tradingFeeConfigs;\\n    mapping(uint256 => FundingFeeConfig) public fundingFeeConfigs;\\n\\n    mapping(address => mapping(address => uint256)) public pairIndexes;\\n    mapping(address => mapping(address => bool)) public isPairListed;\\n    uint256 public pairsCount;\\n    mapping(uint256 => Pair) public pairs;\\n\\n    mapping(uint256 => Vault) public vaults;\\n\\n    address public tradingVault;\\n    address public feeReceiver0;\\n    address public feeReceiver1;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPoolTokenFactory _poolTokenFactory,\\n        address _feeReceiver0,\\n        address _feeReceiver1\\n    ) Roleable(addressProvider) {\\n        poolTokenFactory = _poolTokenFactory;\\n        feeReceiver0 = _feeReceiver0;\\n        feeReceiver1 = _feeReceiver1;\\n    }\\n\\n    modifier onlyPairLiquidityAndVault() {\\n        require(msg.sender == tradingVault, 'forbidden');\\n        _;\\n    }\\n\\n    modifier onlyTradingVault() {\\n        require(msg.sender == tradingVault, 'forbidden');\\n        _;\\n    }\\n\\n    function setTradingVault(address _tradingVault) external onlyPoolAdmin {\\n        tradingVault = _tradingVault;\\n    }\\n\\n    function getPair(uint256 _pairIndex) public view override returns (Pair memory) {\\n        return pairs[_pairIndex];\\n    }\\n\\n    function getTradingConfig(uint256 _pairIndex) external view override returns (TradingConfig memory) {\\n        return tradingConfigs[_pairIndex];\\n    }\\n\\n    function getTradingFeeConfig(uint256 _pairIndex) external view override returns (TradingFeeConfig memory) {\\n        return tradingFeeConfigs[_pairIndex];\\n    }\\n\\n    function getFundingFeeConfig(uint256 _pairIndex) external view override returns (FundingFeeConfig memory) {\\n        return fundingFeeConfigs[_pairIndex];\\n    }\\n\\n    // Manage pairs\\n    function addPair(address _indexToken, address _stableToken) external onlyPoolAdmin {\\n        require(_indexToken != _stableToken, 'identical address');\\n        require(_indexToken != address(0) && _stableToken != address(0), 'zero address');\\n        require(!isPairListed[_indexToken][_stableToken], 'pair already listed');\\n\\n        address pairToken = poolTokenFactory.createPoolToken(_indexToken, _stableToken);\\n\\n        isPairListed[_indexToken][_stableToken] = true;\\n        pairIndexes[_indexToken][_stableToken] = pairsCount;\\n\\n        Pair storage pair = pairs[pairsCount];\\n        pair.pairIndex = pairsCount;\\n        pair.indexToken = _indexToken;\\n        pair.stableToken = _stableToken;\\n        pair.pairToken = pairToken;\\n\\n        emit PairAdded(_indexToken, _stableToken, pairToken, pairsCount++);\\n    }\\n\\n    function updatePair(uint256 _pairIndex, Pair calldata _pair) external onlyPoolAdmin {\\n        Pair storage pair = pairs[_pairIndex];\\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), 'pair not existed');\\n        require(_pair.expectIndexTokenP <= PERCENTAGE && _pair.addLpFeeP <= PERCENTAGE, 'exceed 100%');\\n\\n        pair.enable = _pair.enable;\\n        pair.kOfSwap = _pair.kOfSwap;\\n        pair.expectIndexTokenP = _pair.expectIndexTokenP;\\n        pair.addLpFeeP = _pair.addLpFeeP;\\n    }\\n\\n    function updateTradingConfig(uint256 _pairIndex, TradingConfig calldata _tradingConfig) external onlyPoolAdmin {\\n        require(\\n            _tradingConfig.maintainMarginRate <= PERCENTAGE &&\\n                _tradingConfig.priceSlipP <= PERCENTAGE &&\\n                _tradingConfig.maxPriceDeviationP <= PERCENTAGE,\\n            'exceed 100%'\\n        );\\n        tradingConfigs[_pairIndex] = _tradingConfig;\\n    }\\n\\n    function updateTradingFeeConfig(\\n        uint256 _pairIndex,\\n        TradingFeeConfig calldata _tradingFeeConfig\\n    ) external onlyPoolAdmin {\\n        require(_tradingFeeConfig.takerFeeP <= PERCENTAGE && _tradingFeeConfig.makerFeeP <= PERCENTAGE, 'exceed 100%');\\n        tradingFeeConfigs[_pairIndex] = _tradingFeeConfig;\\n    }\\n\\n    function updateFundingFeeConfig(\\n        uint256 _pairIndex,\\n        FundingFeeConfig calldata _fundingFeeConfig\\n    ) external onlyPoolAdmin {\\n        require(\\n            _fundingFeeConfig.fundingWeightFactor <= PERCENTAGE &&\\n                _fundingFeeConfig.liquidityPremiumFactor <= PERCENTAGE &&\\n                _fundingFeeConfig.lpDistributeP <= PERCENTAGE,\\n            'exceed 100%'\\n        );\\n\\n        fundingFeeConfigs[_pairIndex] = _fundingFeeConfig;\\n    }\\n\\n    function updatePairMiner(uint256 _pairIndex, address _account, bool _enable) external onlyPoolAdmin {\\n        Pair memory pair = pairs[_pairIndex];\\n        require(pair.indexToken != address(0) && pair.stableToken != address(0), 'pair not existed');\\n\\n        IBaseToken(pair.pairToken).setMiner(_account, _enable);\\n    }\\n\\n    function increaseTotalAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) public onlyPairLiquidityAndVault {\\n        _increaseTotalAmount(_pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function _increaseTotalAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) internal {\\n        Vault storage vault = vaults[_pairIndex];\\n        vault.indexTotalAmount = vault.indexTotalAmount + _indexAmount;\\n        vault.stableTotalAmount = vault.stableTotalAmount + _stableAmount;\\n        emit UpdateTotalAmount(_pairIndex, int256(_indexAmount), int256(_stableAmount), vault.indexTotalAmount, vault.stableTotalAmount);\\n    }\\n\\n    function decreaseTotalAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) public onlyPairLiquidityAndVault {\\n        _decreaseTotalAmount(_pairIndex, _indexAmount, _stableAmount);\\n    }\\n\\n    function _decreaseTotalAmount(uint256 _pairIndex, uint256 _indexAmount, uint256 _stableAmount) internal {\\n        Vault storage vault = vaults[_pairIndex];\\n        vault.indexTotalAmount = vault.indexTotalAmount - _indexAmount;\\n        vault.stableTotalAmount = vault.stableTotalAmount - _stableAmount;\\n        emit UpdateTotalAmount(_pairIndex, - int256(_indexAmount), - int256(_stableAmount), vault.indexTotalAmount, vault.stableTotalAmount);\\n    }\\n\\n    function increaseReserveAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) external onlyTradingVault {\\n        Vault storage vault = vaults[_pairIndex];\\n        vault.indexReservedAmount = vault.indexReservedAmount + _indexAmount;\\n        vault.stableReservedAmount = vault.stableReservedAmount + _stableAmount;\\n        emit UpdateReserveAmount(_pairIndex, int256(_indexAmount), int256(_stableAmount), vault.indexReservedAmount, vault.stableReservedAmount);\\n    }\\n\\n    function decreaseReserveAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) external onlyTradingVault {\\n        Vault storage vault = vaults[_pairIndex];\\n        vault.indexReservedAmount = vault.indexReservedAmount - _indexAmount;\\n        vault.stableReservedAmount = vault.stableReservedAmount - _stableAmount;\\n        emit UpdateReserveAmount(_pairIndex, - int256(_indexAmount), - int256(_stableAmount), vault.indexReservedAmount, vault.stableReservedAmount);\\n    }\\n\\n    function getVault(uint256 _pairIndex) public view returns (Vault memory vault) {\\n        return vaults[_pairIndex];\\n    }\\n\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external onlyPairLiquidityAndVault {\\n        vaults[_pairIndex].averagePrice = _averagePrice;\\n        emit UpdateAveragePrice(_pairIndex, _averagePrice);\\n    }\\n\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external onlyPairLiquidityAndVault {\\n        Vault storage vault = vaults[_pairIndex];\\n        vault.stableTotalAmount += _profit;\\n        vault.realisedPnl += int256(_profit);\\n        emit UpdateProfit(_pairIndex, int256(_profit), vault.realisedPnl, vault.stableTotalAmount);\\n    }\\n\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external onlyPairLiquidityAndVault {\\n        Vault storage vault = vaults[_pairIndex];\\n        uint256 availableStable = vault.stableTotalAmount - vault.stableReservedAmount;\\n\\n        require(_profit <= availableStable, 'stable token not enough');\\n\\n        vault.stableTotalAmount -= _profit;\\n        vault.realisedPnl -= int256(_profit);\\n        emit UpdateProfit(_pairIndex, -int256(_profit), vault.realisedPnl, vault.stableTotalAmount);\\n    }\\n\\n    function liqiitySwap(\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _amountOut\\n    ) public onlyPairLiquidityAndVault {\\n        Vault memory vault = vaults[_pairIndex];\\n\\n        if (_isBuy) {\\n            uint256 availableIndex = vault.indexTotalAmount - vault.indexReservedAmount;\\n\\n            require(_amountOut <= availableIndex, 'swap index token not enough');\\n\\n            _increaseTotalAmount(_pairIndex, 0, _amountIn);\\n            _decreaseTotalAmount(_pairIndex, _amountOut, 0);\\n        } else {\\n            uint256 availableStable = vault.stableTotalAmount - vault.stableReservedAmount;\\n\\n            require(_amountOut <= availableStable, 'swap stable token not enough');\\n\\n            _increaseTotalAmount(_pairIndex, _amountIn, 0);\\n            _decreaseTotalAmount(_pairIndex, 0, _amountOut);\\n        }\\n    }\\n\\n    function setReceiver(address _feeReceiver0, address _feeReceiver1) external onlyPoolAdmin {\\n        feeReceiver0 = _feeReceiver0;\\n        feeReceiver1 = _feeReceiver1;\\n    }\\n\\n    function addLiquidity(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) external returns (uint256) {\\n        return _addLiquidity(msg.sender, msg.sender, _pairIndex, _indexAmount, _stableAmount, data);\\n    }\\n\\n    // function addLiquidityETH(uint256 _pairIndex, uint256 _stableAmount) external payable returns (uint256) {\\n    //     IPool.Pair memory pair = getPair(_pairIndex);\\n    //     require(pair.indexToken == weth && pair.pairToken != address(0), 'invalid pair');\\n\\n    //     IWETH(weth).deposit{value: msg.value}();\\n\\n    //     IWETH(pair.stableToken).transferFrom(msg.sender, address(this), _stableAmount);\\n    //     return _addLiquidity(address(this), msg.sender, _pairIndex, msg.value, _stableAmount);\\n    // }\\n\\n    function addLiquidityForAccount(\\n        address _funder,\\n        address _account,\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) external returns (uint256) {\\n        return _addLiquidity(_funder, _account, _pairIndex, _indexAmount, _stableAmount, data);\\n    }\\n\\n    function removeLiquidity(\\n        address _receiver,\\n        uint256 _pairIndex,\\n        uint256 _amount,\\n        bytes calldata data\\n    ) external returns (uint256 receivedIndexAmount, uint256 receivedStableAmount) {\\n        (receivedIndexAmount, receivedStableAmount) = _removeLiquidity(_receiver, _pairIndex, _amount, data);\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        // if (receivedIndexAmount > 0 && pair.indexToken == weth) {\\n        //     IWETH(weth).withdraw(receivedIndexAmount);\\n        //     payable(msg.sender).sendValue(receivedIndexAmount);\\n        // }\\n        if (receivedStableAmount > 0) {\\n            IERC20(pair.stableToken).transfer(msg.sender, receivedStableAmount);\\n        }\\n        return (receivedIndexAmount, receivedStableAmount);\\n    }\\n\\n    // function removeLiquidityForAccount(\\n    //     address _account,\\n    //     address _receiver,\\n    //     uint256 _pairIndex,\\n    //     uint256 _amount\\n    // ) external returns (uint256, uint256) {\\n    //     return _removeLiquidity(_account, _receiver, _pairIndex, _amount);\\n    // }\\n\\n    // function swapInEth(\\n    //     uint256 _pairIndex,\\n    //     uint256 _minOut\\n    // ) external payable returns (uint256 amountIn, uint256 amountOut) {\\n    //     IPool.Pair memory pair = getPair(_pairIndex);\\n    //     require(pair.indexToken == weth && pair.pairToken != address(0), 'invalid pair');\\n\\n    //     IWETH(weth).deposit{value: msg.value}();\\n    //     IERC20(weth).approve(address(this), msg.value);\\n\\n    //     (amountIn, amountOut) = _swap(address(this), msg.sender, _pairIndex, false, msg.value, _minOut);\\n\\n    //     // send last eth back\\n    //     if (amountIn < msg.value) {\\n    //         uint256 lastETH = msg.value - amountIn;\\n    //         IWETH(weth).withdraw(lastETH);\\n    //         payable(msg.sender).sendValue(lastETH);\\n    //     }\\n    //     return (amountIn, amountOut);\\n    // }\\n\\n    function swap(\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        bytes calldata data\\n    ) external returns (uint256 amountIn, uint256 amountOut) {\\n        (amountIn, amountOut) = _swap(msg.sender, address(this), _pairIndex, _isBuy, _amountIn, _minOut, data);\\n        // if (amountOut > 0 && _isBuy && getPair(_pairIndex).indexToken == weth) {\\n        // IWETH(weth).withdraw(amountOut);\\n        // payable(msg.sender).sendValue(amountOut);\\n        // }\\n        return (amountIn, amountOut);\\n    }\\n\\n    function swapForAccount(\\n        address _funder,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        bytes calldata data\\n    ) external returns (uint256 amountIn, uint256 amountOut) {\\n        return _swap(_funder, _receiver, _pairIndex, _isBuy, _amountIn, _minOut, data);\\n    }\\n\\n    function _swap(\\n        address _funder,\\n        address _receiver,\\n        uint256 _pairIndex,\\n        bool _isBuy,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        bytes calldata data\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        require(_amountIn > 0, 'swap invalid amount in');\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'swap invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n\\n        // total delta\\n        uint256 indexTotalDelta = vault.indexTotalAmount.mulPrice(price);\\n        uint256 stableTotalDelta = vault.stableTotalAmount;\\n\\n        uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n\\n        if (_isBuy) {\\n            // index out stable in\\n            require(expectStableDelta > stableTotalDelta, 'no need stable token');\\n\\n            uint256 stableInDelta = _amountIn;\\n            stableInDelta = stableInDelta.min(expectStableDelta - stableTotalDelta);\\n\\n            amountOut = stableInDelta.divPrice(price);\\n            uint256 availableIndex = vault.indexTotalAmount - vault.indexReservedAmount;\\n\\n            require(availableIndex > 0, 'no available index token');\\n\\n            amountOut = amountOut.min(availableIndex);\\n            amountIn = amountOut.divPrice(price);\\n\\n            require(amountOut >= _minOut, 'insufficient minOut');\\n\\n            liqiitySwap(_pairIndex, _isBuy, amountIn, amountOut);\\n            IERC20(pair.indexToken).safeTransfer(_receiver, amountOut);\\n            ISwapCallback(msg.sender).swapCallback(pair.indexToken, pair.stableToken, 0, amountIn, data);\\n        } else {\\n            // index in stable out\\n            require(expectIndexDelta > indexTotalDelta, 'no need index token');\\n\\n            uint256 indexInDelta = _amountIn.mulPrice(price);\\n            indexInDelta = indexInDelta.min(expectIndexDelta - indexTotalDelta);\\n\\n            amountOut = indexInDelta;\\n            uint256 availableStable = vault.stableTotalAmount - vault.stableReservedAmount;\\n\\n            require(availableStable > 0, 'no stable token');\\n\\n            amountOut = amountOut.min(availableStable);\\n            amountIn = amountOut.divPrice(price);\\n            ISwapCallback(msg.sender).swapCallback(pair.indexToken, pair.stableToken, amountIn, 0, data);\\n            IERC20(pair.stableToken).safeTransfer(_receiver, amountOut);\\n        }\\n\\n        emit Swap(_funder, _receiver, _pairIndex, _isBuy, amountIn, amountOut);\\n    }\\n\\n    function _transferToken(\\n        address indexToken,\\n        address stableToken,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        bytes calldata data\\n    ) internal {\\n        uint256 balanceIndexBefore;\\n        uint256 balanceStableBefore;\\n        if (indexAmount > 0) balanceIndexBefore = IERC20(indexToken).balanceOf(address(this));\\n        if (stableAmount > 0) balanceStableBefore = IERC20(stableToken).balanceOf(address(this));\\n        IliquityCallback(msg.sender).addLiquityCallback(indexAmount, stableAmount, data);\\n\\n        if (indexAmount > 0)\\n            require(balanceIndexBefore.add(indexAmount) <= IERC20(indexToken).balanceOf(address(this)), 'ti');\\n        if (stableAmount > 0) {\\n            require(balanceStableBefore.add(stableAmount) <= IERC20(stableToken).balanceOf(address(this)), 'ts');\\n        }\\n    }\\n\\n    function _addLiquidity(\\n        address recipient,\\n        address _account,\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) private returns (uint256 mintAmount) {\\n        require(_indexAmount > 0 || _stableAmount > 0, 'invalid amount');\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n        _transferToken(pair.indexToken, pair.stableToken, _indexAmount, _stableAmount, data);\\n\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        // transfer fee\\n        uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n        uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n\\n        IERC20(pair.indexToken).safeTransfer(feeReceiver0, indexFeeAmount.mulPercentage(pair.lpFeeDistributeP));\\n        IERC20(pair.indexToken).safeTransfer(\\n            feeReceiver1,\\n            indexFeeAmount.mulPercentage(PrecisionUtils.percentage() - pair.lpFeeDistributeP)\\n        );\\n        IERC20(pair.stableToken).safeTransfer(feeReceiver0, stableFeeAmount.mulPercentage(pair.lpFeeDistributeP));\\n        IERC20(pair.stableToken).safeTransfer(\\n            feeReceiver1,\\n            stableFeeAmount.mulPercentage(PrecisionUtils.percentage() - pair.lpFeeDistributeP)\\n        );\\n\\n        afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n        afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n\\n        // usdt value of reserve\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n        // usdt value of deposit\\n        uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n\\n        // calculate deposit usdt value without slippage\\n        uint256 slipDelta;\\n        address slipToken;\\n        uint256 slipAmount;\\n        if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n            // after deposit\\n            uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n            uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n\\n            // expect delta\\n            uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n            uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n            uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n\\n            (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n            if (indexTotalDelta > expectIndexDelta) {\\n                uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta\\n                    ? (indexDepositDelta - needSwapIndexDelta)\\n                    : indexDepositDelta;\\n\\n                slipDelta =\\n                    swapIndexDelta -\\n                    AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                slipToken = pair.indexToken;\\n                slipAmount = _getAmount(slipDelta, price);\\n\\n                afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                IERC20(pair.indexToken).safeTransfer(feeReceiver0, slipAmount.mulPercentage(pair.lpFeeDistributeP));\\n                IERC20(pair.indexToken).safeTransfer(\\n                    feeReceiver1,\\n                    slipAmount.mulPercentage(PrecisionUtils.percentage() - pair.lpFeeDistributeP)\\n                );\\n            } else if (stableTotalDelta > expectStableDelta) {\\n                uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta\\n                    ? (afterFeeStableAmount - needSwapStableDelta)\\n                    : afterFeeStableAmount;\\n\\n                slipDelta =\\n                    swapStableDelta -\\n                    _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n                slipToken = pair.stableToken;\\n                slipAmount = slipDelta;\\n\\n                afterFeeStableAmount = afterFeeStableAmount - slipDelta;\\n                IERC20(pair.stableToken).safeTransfer(feeReceiver0, slipDelta.mulPercentage(pair.lpFeeDistributeP));\\n                IERC20(pair.stableToken).safeTransfer(\\n                    feeReceiver1,\\n                    slipDelta.mulPercentage(PrecisionUtils.percentage() - pair.lpFeeDistributeP)\\n                );\\n            }\\n        }\\n        // mint lp\\n        mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n        IBaseToken(pair.pairToken).mint(_account, mintAmount);\\n\\n        _increaseTotalAmount(_pairIndex, afterFeeIndexAmount, afterFeeStableAmount);\\n\\n        emit AddLiquidity(\\n            recipient,\\n            _account,\\n            _pairIndex,\\n            _indexAmount,\\n            _stableAmount,\\n            mintAmount,\\n            indexFeeAmount,\\n            stableFeeAmount,\\n            slipToken,\\n            slipAmount\\n        );\\n\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(\\n        address _receiver,\\n        uint256 _pairIndex,\\n        uint256 _amount,\\n        bytes calldata data\\n    ) private returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        require(_amount > 0, 'invalid amount');\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n\\n        (receiveIndexTokenAmount, receiveStableTokenAmount) = getReceivedAmount(_pairIndex, _amount);\\n\\n        require(\\n            receiveIndexTokenAmount <= vault.indexTotalAmount - vault.indexReservedAmount,\\n            'insufficient indexToken amount'\\n        );\\n        require(\\n            receiveStableTokenAmount <= vault.stableTotalAmount - vault.stableReservedAmount,\\n            'insufficient stableToken amount'\\n        );\\n\\n        _decreaseTotalAmount(_pairIndex, receiveIndexTokenAmount, receiveStableTokenAmount);\\n        IliquityCallback(msg.sender).removeLiquityCallback(pair.pairToken, _amount, data);\\n        IPoolToken(pair.pairToken).burn(_amount);\\n        IERC20(pair.indexToken).safeTransfer(_receiver, receiveIndexTokenAmount);\\n        IERC20(pair.stableToken).safeTransfer(_receiver, receiveStableTokenAmount);\\n\\n        emit RemoveLiquidity(\\n            msg.sender,\\n            _receiver,\\n            _pairIndex,\\n            receiveIndexTokenAmount,\\n            receiveStableTokenAmount,\\n            _amount\\n        );\\n\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function lpFairPrice(uint256 _pairIndex) public view returns (uint256) {\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n        uint256 price = _getPrice(pair.indexToken);\\n        uint256 lpFairDelta = _getDelta(vault.indexTotalAmount, price) + vault.stableTotalAmount;\\n        return\\n            lpFairDelta > 0\\n                ? Math.mulDiv(lpFairDelta, PRICE_PRECISION, IERC20(pair.pairToken).totalSupply())\\n                : 1 * PRICE_PRECISION;\\n    }\\n\\n    function _getDelta(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function _getAmount(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    // calculate lp amount for add liquidity\\n    function getMintLpAmount(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount\\n    ) external view returns (uint256 mintAmount, address slipToken, uint256 slipAmount) {\\n        if (_indexAmount == 0 && _stableAmount == 0) return (0, address(0), 0);\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n        uint256 afterFeeIndexAmount;\\n        uint256 afterFeeStableAmount;\\n\\n        {\\n            // transfer fee\\n            uint256 indexFeeAmount = _indexAmount.mulPercentage(pair.addLpFeeP);\\n            uint256 stableFeeAmount = _stableAmount.mulPercentage(pair.addLpFeeP);\\n\\n            afterFeeIndexAmount = _indexAmount - indexFeeAmount;\\n            afterFeeStableAmount = _stableAmount - stableFeeAmount;\\n        }\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        // calculate deposit usdt value without slippage\\n        uint256 slipDelta;\\n\\n        // usdt value of deposit\\n        uint256 indexDepositDelta = _getDelta(afterFeeIndexAmount, price);\\n\\n        {\\n            uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n\\n            if (indexReserveDelta + vault.stableTotalAmount > 0) {\\n                // after deposit\\n                uint256 indexTotalDelta = indexReserveDelta + indexDepositDelta;\\n                uint256 stableTotalDelta = vault.stableTotalAmount + afterFeeStableAmount;\\n\\n                uint256 totalDelta = (indexTotalDelta + stableTotalDelta);\\n                uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n                uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n\\n                (uint256 reserveA, uint256 reserveB) = AMMUtils.getReserve(pair.kOfSwap, price, PRICE_PRECISION);\\n                if (indexTotalDelta > expectIndexDelta) {\\n                    uint256 needSwapIndexDelta = indexTotalDelta - expectIndexDelta;\\n                    uint256 swapIndexDelta = indexDepositDelta > needSwapIndexDelta\\n                        ? (indexDepositDelta - needSwapIndexDelta)\\n                        : indexDepositDelta;\\n\\n                    slipDelta =\\n                        swapIndexDelta -\\n                        AMMUtils.getAmountOut(_getAmount(swapIndexDelta, price), reserveA, reserveB);\\n                    slipAmount = _getAmount(slipDelta, price);\\n                    slipToken = pair.indexToken;\\n\\n                    afterFeeIndexAmount = afterFeeIndexAmount - slipAmount;\\n                } else if (stableTotalDelta > expectStableDelta) {\\n                    uint256 needSwapStableDelta = stableTotalDelta - expectStableDelta;\\n                    uint256 swapStableDelta = afterFeeStableAmount > needSwapStableDelta\\n                        ? (afterFeeStableAmount - needSwapStableDelta)\\n                        : afterFeeStableAmount;\\n\\n                    slipDelta =\\n                        swapStableDelta -\\n                        _getDelta(AMMUtils.getAmountOut(swapStableDelta, reserveB, reserveA), price);\\n                    slipAmount = slipDelta;\\n                    slipToken = pair.stableToken;\\n\\n                    afterFeeStableAmount = afterFeeStableAmount - slipAmount;\\n                }\\n            }\\n        }\\n\\n        // mint lp\\n        mintAmount = _getAmount(indexDepositDelta + afterFeeStableAmount - slipDelta, lpFairPrice(_pairIndex));\\n\\n        return (mintAmount, slipToken, slipAmount);\\n    }\\n\\n    // calculate deposit amount for add liquidity\\n    function getDepositAmount(\\n        uint256 _pairIndex,\\n        uint256 _lpAmount\\n    ) external view returns (uint256 depositIndexAmount, uint256 depositStableAmount) {\\n        if (_lpAmount == 0) return (0, 0);\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n        uint256 depositDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n\\n        // expect delta\\n        uint256 totalDelta = (indexReserveDelta + stableReserveDelta + depositDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n\\n        uint256 depositIndexTokenDelta;\\n        uint256 depositStableTokenDelta;\\n\\n        if (expectIndexDelta >= indexReserveDelta) {\\n            uint256 extraIndexReserveDelta = expectIndexDelta - indexReserveDelta;\\n            if (extraIndexReserveDelta >= depositDelta) {\\n                depositIndexTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = extraIndexReserveDelta;\\n                depositStableTokenDelta = depositDelta - extraIndexReserveDelta;\\n            }\\n        } else {\\n            uint256 extraStableReserveDelta = expectStableDelta - stableReserveDelta;\\n            if (extraStableReserveDelta >= depositDelta) {\\n                depositStableTokenDelta = depositDelta;\\n            } else {\\n                depositIndexTokenDelta = depositDelta - extraStableReserveDelta;\\n                depositStableTokenDelta = extraStableReserveDelta;\\n            }\\n        }\\n        depositIndexAmount = _getAmount(depositIndexTokenDelta, price);\\n        depositStableAmount = depositStableTokenDelta;\\n\\n        // add fee\\n        depositIndexAmount = depositIndexAmount.divPercentage(PrecisionUtils.percentage() - pair.addLpFeeP);\\n        depositStableAmount = depositStableAmount.divPercentage(PrecisionUtils.percentage() - pair.addLpFeeP);\\n\\n        return (depositIndexAmount, depositStableAmount);\\n    }\\n\\n    // calculate amount for remove liquidity\\n    function getReceivedAmount(\\n        uint256 _pairIndex,\\n        uint256 _lpAmount\\n    ) public view returns (uint256 receiveIndexTokenAmount, uint256 receiveStableTokenAmount) {\\n        if (_lpAmount == 0) return (0, 0);\\n\\n        IPool.Pair memory pair = getPair(_pairIndex);\\n        require(pair.pairToken != address(0), 'invalid pair');\\n\\n        IPool.Vault memory vault = getVault(_pairIndex);\\n\\n        // usdt value of reserve\\n        uint256 price = _getPrice(pair.indexToken);\\n        require(price > 0, 'invalid price');\\n\\n        uint256 indexReserveDelta = _getDelta(vault.indexTotalAmount, price);\\n        uint256 stableReserveDelta = vault.stableTotalAmount;\\n\\n        uint256 receiveDelta = _getDelta(_lpAmount, lpFairPrice(_pairIndex));\\n\\n        // expect delta\\n        uint256 totalDelta = (indexReserveDelta + stableReserveDelta - receiveDelta);\\n        uint256 expectIndexDelta = totalDelta.mulPercentage(pair.expectIndexTokenP);\\n        uint256 expectStableDelta = totalDelta - expectIndexDelta;\\n\\n        // received delta of indexToken and stableToken\\n        uint256 receiveIndexTokenDelta;\\n        uint256 receiveStableTokenDelta;\\n\\n        if (indexReserveDelta > expectIndexDelta) {\\n            uint256 extraIndexReserveDelta = indexReserveDelta - expectIndexDelta;\\n            if (extraIndexReserveDelta >= receiveDelta) {\\n                receiveIndexTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = extraIndexReserveDelta;\\n                receiveStableTokenDelta = receiveDelta - extraIndexReserveDelta;\\n            }\\n        } else {\\n            uint256 extraStableReserveDelta = stableReserveDelta - expectStableDelta;\\n            if (extraStableReserveDelta >= receiveDelta) {\\n                receiveStableTokenDelta = receiveDelta;\\n            } else {\\n                receiveIndexTokenDelta = receiveDelta - extraStableReserveDelta;\\n                receiveStableTokenDelta = extraStableReserveDelta;\\n            }\\n        }\\n        receiveIndexTokenAmount = _getAmount(receiveIndexTokenDelta, price);\\n        receiveStableTokenAmount = receiveStableTokenDelta;\\n\\n        return (receiveIndexTokenAmount, receiveStableTokenAmount);\\n    }\\n\\n    function _getPrice(address _token) internal view returns (uint256) {\\n        return IOraclePriceFeed(ADDRESS_PROVIDER.getPriceOracle()).getPrice(_token);\\n    }\\n}\\n\",\"keccak256\":\"0x746aa403fde71ae822410ca2498e31e4a82c6e0e8dd9c4b80246771f7239f6e2\",\"license\":\"MIT\"},\"contracts/token/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IBaseToken.sol\\\";\\n\\nabstract contract BaseToken is IBaseToken, ERC20, Ownable {\\n\\n    bool public privateTransferMode;\\n\\n    mapping(address => bool) public miners;\\n    mapping (address => bool) public isHandler;\\n\\n    modifier onlyMiner() {\\n        require(miners[msg.sender], 'miner forbidden');\\n        _;\\n    }\\n\\n    function setPrivateTransferMode(bool _privateTransferMode) external onlyOwner {\\n        privateTransferMode = _privateTransferMode;\\n    }\\n\\n    function setMiner(address account, bool enable) external virtual onlyOwner {\\n        miners[account] = enable;\\n    }\\n\\n    function setHandler(address _handler, bool enable) external onlyOwner {\\n        isHandler[_handler] = enable;\\n    }\\n\\n    function mint(address to, uint256 amount) public virtual onlyMiner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public virtual onlyMiner {\\n        _burn(account, amount);\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        if (privateTransferMode) {\\n            require(isHandler[msg.sender], \\\"msg.sender not whitelisted\\\");\\n        }\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        if (privateTransferMode) {\\n            require(isHandler[msg.sender], \\\"msg.sender not whitelisted\\\");\\n        }\\n        _spendAllowance(from, msg.sender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb74684d3b42a0fbcbd102d427e13ddd7c31f615f881fb746e8f2af3b123c4b19\",\"license\":\"UNLICENSED\"},\"contracts/token/PairToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BaseToken.sol\\\";\\n\\ncontract PairToken is BaseToken {\\n\\n    address public token0;\\n    address public token1;\\n\\n    constructor(address _token0, address _token1) ERC20(\\\"MYX LPs\\\", \\\"MYX-LP\\\") {\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x35fadcc024bb3e62ef08c92673576ee6b56c58dd2753ffd6c5ca5e8cb5fd6119\",\"license\":\"UNLICENSED\"},\"contracts/token/interfaces/IBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IBaseToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function setMiner(address account, bool enable) external;\\n}\\n\",\"keccak256\":\"0xb3e3ca88dcd7ccfa258c11bdee2a13a0e0dd9e2f983a91c6121e725218b81e5b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60406101c081526004908136101561001657600080fd5b60009160e08335811c90816302805454146121605781630da67fe7146120d35781630e72150f146120885781631848effa146120435781631c27b53e14611fe15781631f49703414611f7b578163293315f214611f5d5781632d23f44914611e5157816330a66e1514611d63578163346d5d7514611d49578163424b8d2314611ce8578163456914b2146119bf57816346ea87af146119815781634b57f96e146119595781634c3c0f581461191e57816354ab60f9146118635781635b4e215e1461173f57816360dc001a1461164b57816365ded096146113d25781636a3056cc146113a5578163714b008f146112545781637522bbc11461122a5781637734bd46146111e05781637c7c829d146111295781637f1b4a24146110dc5781638327f0e114610f8157816386dcb95e14610e5557816388e4048e14610e105781638c64ea4a14610db257816392771c3c14610d985781639403b63414610d3f57816395082d2514610d165781639b0f8cb814610b4a5781639c3d577014610af9578163b543013114610aa6578163b6f3e08714610784578163b81b2b7114610764578163b91ac788146106d6578163bdf391cc1461064d578163d0c54a741461061d578163d296326214610549578163d2b1e6ec1461051f578163d355a9b4146104a9578163d7a1c1ea1461042b57508063daf092571461040d578063f1bd27a8146103e05763ff4faf291461022a57600080fd5b346103dc576101403660031901126103dc576101203660231901126103dc5781516351331ad760e01b81526001600160a01b039290602090818185817f000000000000000000000000000000000000000000000000000000000000000089165afa9081156103a5578591839188916103af575b506024855180948193637be53ca160e01b8352338a840152165afa9081156103a557916102d86007926102f695948991610378575b506123a1565b84358752528420928060018501541615159081610368575b506124a1565b60e4359061031161271080841115908161035a575b506124e0565b60a4358015158091036103565760038401805460ff60a01b191660a09290921b60ff60a01b1691909117905560c4359083015560058201556101043560069091015580f35b8480fd5b90506101043511153861030b565b90506002840154161515386102f0565b6103989150833d851161039e575b6103908183612349565b810190612389565b386102d2565b503d610386565b83513d88823e3d90fd5b6103cf9150823d84116103d5575b6103c78183612349565b81019061236a565b3861029d565b503d6103bd565b8280fd5b50503461040957816003193601126104095760095490516001600160a01b039091168152602090f35b5080fd5b50503461040957816003193601126104095760209051620f42408152f35b8385849234610409573660031901126104a15761044661225c565b9061044f612272565b916064359182151583036104a45760c435906001600160401b0382116104a15750610495949561048191369101612219565b93909260a435926084359260443591612727565b82519182526020820152f35b80fd5b600080fd5b90503461051b57602036600319011261051b578261010094833581526001602052208054936001820154936002830154906003840154908401549160058501549360076006870154960154978151998a5260208a01528801526060870152608086015260a085015260c0840152820152f35b8380fd5b50505034610409578160031936011261040957600b5490516001600160a01b039091168152602090f35b828486346104a15760203660031901126104a15780829160c0835161056d8161232e565b82815282602082015282858201528260608201528260808201528260a08201520152833581526003602052208151916105a58361232e565b81549384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c0600660058801549760a08a0198895201549701968752825197885251602088015251908601525160608501525160808401525160a08301525160c0820152f35b84346104a15761064a61062f366121ff565b9161064560018060a01b0360095416331461251a565b612575565b80f35b91939050346104a15760203660031901126104a1575061067061012093356123dd565b908251928251845260018060a01b039081602085015116602086015281818501511690850152606083015116606084015260808201511515608084015260a082015160a084015260c082015160c084015280820151908301526101008091015190820152f35b90503461051b57602036600319011261051b578261012094833581526007602052209081549360018060a01b0360ff8160018601541695826002870154169260038701549187015493600588015495600760068a01549901549981519b8c5260208c01528a01528116606089015260a01c161515608087015260a086015260c0850152830152610100820152f35b505050346104095781600319360112610409576020906006549051908152f35b505090346103dc57806003193601126103dc5761079f61225c565b916107a8612272565b82516351331ad760e01b81526001600160a01b03936020929091838186817f00000000000000000000000000000000000000000000000000000000000000008a165afa908115610a9c57908692918991610a7f575b508484518092637be53ca160e01b82523389830152816024968792165afa9081156109b9579161083788939284938c91610a6857506123a1565b16961694868614610a335785151580610a2a575b156109fa578588526005845282882087600052845260ff8360002054166109c357825193630b04656760e21b85528686860152878386015280856044818c867f0000000000000000000000000000000000000000000000000000000000000000165af19485156109b957899561099a575b508689526005815283892088600052815283600020600160ff19825416179055600760065491888b52878152858b208a6000528152828660002055828b5252838920908155600360018201916001600160601b0360a01b928984825416179055600281018a84825416179055019185169082541617905560065493600019851461098957505060018301600655516001600160a01b0391909116815260208101919091527feda679f3434de965730a28b8b694f2a348c09a2c1bb3e226633b6af24841adc190604090a380f35b634e487b7160e01b88526011905286fd5b816109b29296503d87116103d5576103c78183612349565b93386108bc565b84513d8b823e3d90fd5b5060649392601392519362461bcd60e51b8552840152820152721c185a5c88185b1c9958591e481b1a5cdd1959606a1b6044820152fd5b5060649392600c92519362461bcd60e51b85528401528201526b7a65726f206164647265737360a01b6044820152fd5b5086151561084b565b5060649392601192519362461bcd60e51b8552840152820152706964656e746963616c206164647265737360781b6044820152fd5b6103989150883d8a1161039e576103908183612349565b610a969150853d87116103d5576103c78183612349565b386107fd565b83513d8a823e3d90fd5b5050346103dc5760a03660031901126103dc57610ac1612288565b90608435936001600160401b0385116104a15750610ae6610495939436908301612219565b9290916064359160443591353033612727565b50505034610409578060031936011261040957602091610b1761225c565b82610b20612272565b9260018060a01b03809316815260058652209116600052825260ff81600020541690519015158152f35b9290503461051b57606036600319011261051b57610b66612272565b92604435908115158092036104a45782516351331ad760e01b815286956001600160a01b0392909160209190828189817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610cef57859184918b91610cf9575b508851637be53ca160e01b8152338b8201529283916024918391165afa908115610cef578593899361010060078b8e610c11610c8c9883988391610a6857506123a1565b8835815282865220855193610c2585612312565b8154855289600183015416809686015289600283015416809786015260038201549860ff606087019a8c81168c5260a01c161515608087015282015460a0860152600582015460c0860152600682015490850152015491015215159081610ce557506124a1565b511690813b15610ce15786604492819587519889968795631e2c2eb160e21b8752169085015260248401525af1908115610cd85750610cc85750f35b610cd1906122e4565b6104a15780f35b513d84823e3d90fd5b8680fd5b90501515386102f0565b87513d8b823e3d90fd5b610d109150823d84116103d5576103c78183612349565b38610bcd565b50505034610409578160031936011261040957602090516c0c9f2c9cd04674edea400000008152f35b505091346104a15760203660031901126104a1575060a0610d6260c09335612688565b825192815184526020820151602085015280820151908401526060810151606084015260808101516080840152015160a0820152f35b8385346104a15750610495610dac36612246565b9061437d565b505090346103dc5760203660031901126103dc578060c09383358152600860205220805492600182015492600283015490600560038501549385015494015494815196875260208701528501526060840152608083015260a0820152f35b50505034610409578160031936011261040957517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346103dc57816003193601126103dc57610e6f61225c565b91610e78612272565b81516351331ad760e01b81526001600160a01b039391929160209190828282817f00000000000000000000000000000000000000000000000000000000000000008a165afa918215610f7757918392918794928a92610f55575b5060249086519586938492637be53ca160e01b84523390840152165afa928315610f4c575090610f0b92918792610f2f575b50506123a1565b816001600160601b0360a01b931683600a541617600a551690600b541617600b5580f35b610f459250803d1061039e576103908183612349565b3880610f04565b513d88823e3d90fd5b6024919250610f7090843d86116103d5576103c78183612349565b9190610ed2565b84513d8a823e3d90fd5b505090346103dc576101203660031901126103dc576101003660231901126103dc5780516351331ad760e01b8152602091906001600160a01b0390838186817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156103a55790849187916110bf575b506024845180948193637be53ca160e01b8352338a840152165afa9081156110b5579061102991869161109e57506123a1565b600160c4359261104b612710808611159081611090575b8161035a57506124e0565b8435865252832091602435835560443560018401556064356002840155608435600384015560a43590830155600582015560e435600682015560076101043591015580f35b80915060e435111590611040565b6103989150843d861161039e576103908183612349565b82513d87823e3d90fd5b6110d69150823d84116103d5576103c78183612349565b38610ff6565b5050346103dc57816003193601126103dc57602092826110fa61225c565b91611103612272565b6001600160a01b0393841682529386522091166000908152908352819020549051908152f35b50505034610409577f56150ce04aef562b211a1147ad2dad770a18c937c2a5309f2a476929bbcb07976111da9161115f366121ff565b91949061117760018060a01b0360095416331461251a565b85875260086020528387206111b86111b26003600184019361119a8686546125f0565b80955501936111aa8786546125f0565b8095556125fd565b946125fd565b9451948594859094939260609260808301968352602083015260408201520152565b0390a280f35b5050346103dc5760203660031901126103dc576080928291358152600260205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b50505034610409578160031936011261040957600a5490516001600160a01b039091168152602090f35b90503461051b5761010036600319011261051b573660231901126103dc5781516351331ad760e01b8152602092906001600160a01b0390848185817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156103a5579085918791611388575b506024845180948193637be53ca160e01b83523389840152165afa9081156110b557906112f891869161137157506123a1565b60036084359361131a612710808711159081611363575b8161135657506124e0565b8335865252832091602435835560443560018401556064356002840155600383015560a4359082015560c4356005820155600660e43591015580f35b905060e43511153861030b565b80915060a43511159061130f565b6103989150853d871161039e576103908183612349565b61139f9150823d84116103d5576103c78183612349565b386112c5565b84346104a15761064a6113b7366121ff565b916113cd60018060a01b0360095416331461251a565b61260e565b5050346103dc5760803660031901126103dc578035916113f0612288565b6044356064359361140c60018060a01b0360095416331461251a565b858752602092600884528488208551611424816122f7565b8154815260018201549186820192835260028101549384898401526005600383015492836060860152878101546080860152015460a084015260001461155957506114739250519051906125f0565b851161151657506080939291856008928160005283835284600020600281549101906114a0838354612552565b8092558651926000845285840152868301526060820152600080516020614559833981519152968791a285600052526111da81600020926114f360026114e78387546125f0565b958681550154916125fd565b925193849384606091949392608082019582526000602083015260408201520152565b835162461bcd60e51b8152908101839052601b60248201527f7377617020696e64657820746f6b656e206e6f7420656e6f75676800000000006044820152606490fd5b915050611565916125f0565b851161160857506080939291856008928160005283835284600020600261158d838354612552565b918281550154908651928352600085840152868301526060820152600080516020614559833981519152968791a285600052526111da81600020926115e5600285549501916115dd8184546125f0565b8093556125fd565b925193849384606091949392608082019560008352602083015260408201520152565b835162461bcd60e51b8152908101839052601c60248201527f7377617020737461626c6520746f6b656e206e6f7420656e6f756768000000006044820152606490fd5b5050346103dc5760208060031936011261051b5761166761225c565b83516351331ad760e01b81526001600160a01b039391929190828183817f000000000000000000000000000000000000000000000000000000000000000089165afa801561173557859284928992611713575b5060249088519485938492637be53ca160e01b84523390840152165afa918215611709576116f2939495508692610f2f5750506123a1565b166001600160601b0360a01b600954161760095580f35b85513d88823e3d90fd5b602491925061172e90843d86116103d5576103c78183612349565b91906116ba565b86513d89823e3d90fd5b505090346103dc5760a03660031901126103dc5760803660231901126103dc5780516351331ad760e01b81526020906001600160a01b0390828186817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561185957908391879161183c575b506024855180948193637be53ca160e01b8352338a840152165afa90811561183257600292916117e791879161037857506123a1565b6024359361180161271080871115908161182557506124e0565b35855252822090815560443560018201556064356002820155600360843591015580f35b905060443511153861030b565b83513d87823e3d90fd5b6118539150823d84116103d5576103c78183612349565b386117b1565b84513d88823e3d90fd5b828585346104095761187436612246565b61188c60018060a09594951b0360095416331461251a565b8284526008602052818420600560028201916118a9848454612552565b80935501928354938385019487858712911290801582169115161761190b5784905551918252602082019290925260408101919091527fefd935e60c4eff76b8f62741f2003dd00361087e92324f8f701c349954a2b5fe9080606081016111da565b634e487b7160e01b875260118852602487fd5b505050346104095760609061193b611935366121ff565b91613fb6565b83519283526001600160a01b03909116602083015291810191909152f35b505091346104a15760203660031901126104a1575061197a60209235613edf565b9051908152f35b505050346104095760203660031901126104095760209160ff9082906001600160a01b036119ad61225c565b16815280855220541690519015158152f35b505082346104a15760803660031901126104a1576119db61225c565b9060243591604435916064356001600160401b03811161040957611a029036908701612219565b959094611a108515156133b4565b611a19816123dd565b93606085019560018060a01b0395611a358789511615156133f1565b611a3e84612688565b97611a49838661437d565b9a909b8a519a8d611a6060209d8e840151906125f0565b10611ca5578e810151606090910151611a78916125f0565b8c11611c6157611a898c8e8961260e565b89835116333b15611c5d579089918f611ac790519485938493638019bf8b60e01b85528d850152896024850152606060448501526064840191612706565b038183335af18015611c535790899291611c40575b505116803b15610ce15786809160248e5180948193630852cd8d60e31b8352888c8401525af18015611c3657938a95938d8d948a8c958e9b99611c08575b50509181611b478a868881968f98611b3f8d611b819f9e9c8f9e809d85015116612e95565b015116612e95565b8051948552898b86015284015216907f6291bcce50c38c39d79a98ff5fad7f35319722e73285b50a6140dbfac75d511e60603392a46123dd565b948983611b96575b8984868351928352820152f35b90950151895163a9059cbb60e01b815233928101928352602083019390935291948592169082908590829060400103925af1908115611bfd5750611be0575b808284828089611b89565b611bf690823d841161039e576103908183612349565b5084611bd5565b8651903d90823e3d90fd5b939799509450945050611c1d919597506122e4565b611c3257868895938a95938d8d948a38611b1a565b8580fd5b8c513d89823e3d90fd5b611c4c909891986122e4565b968d611adc565b8d513d8a823e3d90fd5b8980fd5b508c5162461bcd60e51b81528088018b9052601f60248201527f696e73756666696369656e7420737461626c65546f6b656e20616d6f756e74006044820152606490fd5b8e5162461bcd60e51b8152808a018d9052601e60248201527f696e73756666696369656e7420696e646578546f6b656e20616d6f756e7400006044820152606490fd5b505091346104a15760c03660031901126104a157611d0461225c565b92611d0d612272565b9160a435906001600160401b0382116104a1575091611d356020959261197a94369101612219565b929091608435916064359160443591613468565b8385346104a15750610495611d5d36612246565b90614225565b9190503461051b57602036600319011261051b57828461010095848351611d89816122c8565b82815282602082015282858201528260608201528260808201528260a08201528260c0820152015282358152600160205220835191611dc7836122c8565b8154948584526001830154916020850192835260028401549180860192835260038501549160608701928352850154926080870193845260058601549460a0880195865288600760068901549860c08b01998a52015498019788528251998a525160208a015251908801525160608701525160808601525160a08501525160c08401525190820152f35b8285853461040957611e6236612246565b9091611e7960018060a01b0360095416331461251a565b828452600860205280842060028101908154611e996003830154826125f0565b8511611f1a5790611eac856005936125f0565b80935501928354938185039487831281871281169187139015161761190b5791611efe6111da92867fefd935e60c4eff76b8f62741f2003dd00361087e92324f8f701c349954a2b5fe979695556125fd565b9251938493846040919493926060820195825260208201520152565b835162461bcd60e51b81526020818a0152601760248201527f737461626c6520746f6b656e206e6f7420656e6f7567680000000000000000006044820152606490fd5b50505034610409578160031936011261040957602090516127108152f35b939050346104a15760203660031901126104a1578290823581526003602052208054926001820154926002830154600384015491840154926006600586015495015495815197885260208801528601526060850152608084015260a083015260c0820152f35b505090346103dc5760207f63eff9ad83aa78e212443a2702156d22d36e10bc8a296255ad3728c445726b439161201636612246565b8092919561202f60018060a01b0360095416331461251a565b86885260088552828820015551908152a280f35b50505034610409578160031936011261040957517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b505091346104a15760803660031901126104a157606435906001600160401b0382116104a157506020926120c261197a9236908301612219565b916044359060243590353333613468565b5050346103dc5760203660031901126103dc57828291608094606084516120f981612297565b828152826020820152828682015201523581526002602052209080519061211f82612297565b825492838352600181015460208401908152606060036002840154938587019485520154940193845282519485525160208501525190830152516060820152f35b50505034610409577f56150ce04aef562b211a1147ad2dad770a18c937c2a5309f2a476929bbcb07976111da612195366121ff565b929091946121ae60018060a01b0360095416331461251a565b8587526008602052808720600360018201916121cb868454612552565b80935501916121db868454612552565b80935551948594859094939260609260808301968352602083015260408201520152565b60609060031901126104a457600435906024359060443590565b9181601f840112156104a4578235916001600160401b0383116104a457602083818601950101116104a457565b60409060031901126104a4576004359060243590565b600435906001600160a01b03821682036104a457565b602435906001600160a01b03821682036104a457565b6024359081151582036104a457565b608081019081106001600160401b038211176122b257604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176122b257604052565b6001600160401b0381116122b257604052565b60c081019081106001600160401b038211176122b257604052565b61012081019081106001600160401b038211176122b257604052565b60e081019081106001600160401b038211176122b257604052565b90601f801991011681019081106001600160401b038211176122b257604052565b908160209103126104a457516001600160a01b03811681036104a45790565b908160209103126104a4575180151581036104a45790565b156123a857565b60405162461bcd60e51b815260206004820152600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b60408051916123eb83612312565b60009081845281602085015281838501528160608501528160808501528160a08501528160c08501528160e0850152816101008095015281526007602052209060076040519261243a84612312565b8054845260018101546001600160a01b0390811660208601526002820154811660408601526003820154908116606086015260a090811c60ff1615156080860152600482015490850152600581015460c0850152600681015460e085015201549082015290565b156124a857565b60405162461bcd60e51b815260206004820152601060248201526f1c185a5c881b9bdd08195e1a5cdd195960821b6044820152606490fd5b156124e757565b60405162461bcd60e51b815260206004820152600b60248201526a657863656564203130302560a81b6044820152606490fd5b1561252157565b60405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b6044820152606490fd5b9190820180921161255f57565b634e487b7160e01b600052601160045260246000fd5b91600080516020614559833981519152918360005260086020526125db604060002060026125a4848354612552565b9182815501906125b5858354612552565b809255604051948594859094939260609260808301968352602083015260408201520152565b0390a2565b9061271091820391821161255f57565b9190820391821161255f57565b600160ff1b811461255f5760000390565b9190600080516020614559833981519152918360005260086020526125db60406000209261266461265e60026126458488546125f0565b9687815501926126568685546125f0565b8094556125fd565b936125fd565b93604051948594859094939260609260808301968352602083015260408201520152565b60a06040918251612698816122f7565b60009281848093528260208201528286820152826060820152826080820152015281526008602052206005604051916126d0836122f7565b8054835260018101546020840152600281015460408401526003810154606084015260048101546080840152015460a082015290565b908060209392818452848401376000828201840152601f01601f1916010190565b93969795909194976000918815612e5757612741876123dd565b60608101519091906001600160a01b031615612e1e5761276088612688565b6020830151612777906001600160a01b0316614483565b9a6127838c835161310c565b60408301516127928183612552565b916127ab6127a460c0890151856131c7565b80946125f0565b928b15612c6e57505080821115612c32576127ea926127ce8f926127dc946125f0565b80821015612c2b575061322f565b9160208151910151906125f0565b8015612be65780821015612bdf57505b612805819b8261322f565b9b8110612ba45761282160018060a01b0360095416331461251a565b8885526008602052604085209460405161283a816122f7565b8654815260018701549060208101918252600288015497886040830152600560038201549182606085015260048101546080850152015460a08301528a600014612a9f575061289292939495969750519051906125f0565b8211612a5a5788815260086020526040812081815492612a46575091898d61296793600260809998979601906128c9838354612552565b8092556040519260008452602084015260408301526060820152600080516020614559833981519152978891a2896000526008602052896040600020966002612913848a546125f0565b9889815501549760009861294e612929866125fd565b9160405193849384606091949392608082019582526000602083015260408201520152565b0390a25b602084015187906001600160a01b0316612e95565b60208201516040909201516001600160a01b0390811693921691333b1561035657916129ca8594928d969460405197889586956345fc75ad60e01b875260048701526024860152866044860152606485015260a0608485015260a4840191612706565b038183335af1908115612a3a5750916060917f2424e4440d8e90b9be053a61916674e21e7603a28f7dccf3ff7b88b755c2e61993612a2b575b505b604080519415158552602085018a905284018890526001600160a01b03908116941692a4565b612a34906122e4565b38612a03565b604051903d90823e3d90fd5b634e487b7160e01b81526011600452602490fd5b60405162461bcd60e51b815260206004820152601b60248201527f7377617020696e64657820746f6b656e206e6f7420656e6f75676800000000006044820152606490fd5b915050612aac91966125f0565b8111612b5f5761296790896080818f818a52600860205260408a206002612ad4838354612552565b918281550154906040519283528b602084015260408301526060820152600080516020614559833981519152928391a28188526008602052604088209760028954919901612b238582546125f0565b809155612b57612b32866125fd565b9160405193849384606091949392608082019560008352602083015260408201520152565b0390a2612952565b60405162461bcd60e51b815260206004820152601c60248201527f7377617020737461626c6520746f6b656e206e6f7420656e6f756768000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d081b5a5b93dd5d606a1b6044820152606490fd5b90506127fa565b60405162461bcd60e51b815260206004820152601860248201527f6e6f20617661696c61626c6520696e64657820746f6b656e00000000000000006044820152606490fd5b905061322f565b60405162461bcd60e51b81526020600482015260146024820152733737903732b2b21039ba30b13632903a37b5b2b760611b6044820152606490fd5b93925093949e50508282979596971115612de357612cb492612c938e612c999361310c565b926125f0565b80821015612ddb5750915b60606040820151910151906125f0565b8015612da45780821015612d9c5750925b612cd0849a8561322f565b60208401516040850151919c6001600160a01b03928316939290911691333b156103565791612d368594928f969460405197889586956345fc75ad60e01b875260048701526024860152604485015285606485015260a0608485015260a4840191612706565b038183335af1908115612a3a575092847f2424e4440d8e90b9be053a61916674e21e7603a28f7dccf3ff7b88b755c2e6199593612d8893606096612d8d575b50604001516001600160a01b0316612e95565b612a05565b612d96906122e4565b38612d75565b905092612cc5565b60405162461bcd60e51b815260206004820152600f60248201526e37379039ba30b13632903a37b5b2b760891b6044820152606490fd5b905091612ca4565b60405162461bcd60e51b81526020600482015260136024820152723737903732b2b21034b73232bc103a37b5b2b760691b6044820152606490fd5b60405162461bcd60e51b815260206004820152601160248201527039bbb0b81034b73b30b634b2103830b4b960791b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527539bbb0b81034b73b30b634b21030b6b7bab73a1034b760511b6044820152606490fd5b6040805163a9059cbb60e01b60208083019182526001600160a01b0395909516602483015260448083019690965294815294939091601f199190612eda606488612349565b83516001600160401b03979093916001600160a01b031690848601898111868210176122b25786528685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152600080948192519082855af1913d15613009573d988911612ff557869798612f5f8798612f6d985193601f8401160183612349565b81528093883d92013e613018565b805190838215928315612fdd575b50505015612f87575050565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b612fed9350820181019101612389565b388381612f7b565b634e487b7160e01b84526041600452602484fd5b509150612f6d93949596506060915b9192901561307a575081511561302c575090565b3b156130355790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561308d5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106130d3575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506130b0565b81156130f6570490565b634e487b7160e01b600052601260045260246000fd5b90600019818309818302918280831092039180830392146131b1576c0c9f2c9cd04674edea400000009082821115613174577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b50506c0c9f2c9cd04674edea4000000091500490565b9060001981830981830291828083109203918083039214613224576127109082821115613174577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b906c0c9f2c9cd04674edea400000009060001982840992828102928380861095039480860395146132b45784831115613174578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906132c192506130ec565b90565b906127109060001982840992828102928380861095039480860395146132b45784831115613174578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b9160001982840992828102928380861095039480860395146132b45784831115613174578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b156133bb57565b60405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b156133f857565b60405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103830b4b960a11b6044820152606490fd5b1561343357565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606490fd5b959394929561016052610180526101a0528360e052600093159081158092613c8e575b613494906133b4565b6134bc6134a36101a0516123dd565b60c0819052606001516001600160a01b031615156133f1565b6134c86101a051612688565b9260c0518360018060a01b0360208301511691604060018060a01b03910151169388938996613c28575b88613bb7575b333b15611c5d57613536918a9160405193849283926307b3f34760e21b845260e05160048501528d6024850152606060448501526064840191612706565b038183335af18015613bac57613b99575b50613aea575b50508380613a3d575b50505082610140528260a05260e060c05101613580613578825160e0516131c7565b9151846131c7565b60c0516020810151600a54610100928301519394936135b7926001600160a01b039081169216906135b190866131c7565b91612e95565b60c0516020810151600b54918301516135eb926001600160a01b039283169216906135b1906135e5906125e0565b866131c7565b60c0516040810151600a5491830151613616926001600160a01b039283169216906135b190876131c7565b60c0516040810151600b549183015161364a926001600160a01b039283169216906135b190613644906125e0565b876131c7565b6136568260e0516125f0565b6101405261366483866125f0565b60a05260c0516020015161368e90613684906001600160a01b0316614483565b808352151561342c565b61369a8151855161310c565b906136a981516101405161310c565b610120528691876080526040889601906136c4825182612552565b6137ff575b5050506136e76136f9916136e260a05161012051612552565b6125f0565b6136f36101a051613edf565b9061322f565b60c051606001519095906001600160a01b0316803b15610409576040516340c10f1960e01b8152610180516001600160a01b03166004820152602481018890529082908290604490829084905af180156137f4576137e0575b505061376760a051610140516101a051612575565b6040519360e051855260208501528460408501526060840152608083015260018060a01b036080511660a083015260c08201526101a0519060018060a01b036101805116907fc826382e93639d859a4edb6417a74d592d691ac2a0e04706872fddb582dae91360e060018060a01b03610160511692a490565b6137ea82916122e4565b6104a15780613752565b6040513d84823e3d90fd5b6138156138209161012098939594985190612552565b9360a0519051612552565b9261382b8482612552565b9161383e6127a460c080510151856131c7565b93613850895160a060c0510151613c97565b9590968585116000146139455750505050926138a16136e7936138796138a7946136f9976125f0565b61012051908082111561393e5761388f916125f0565b925b61389c8a518561322f565b613e6e565b906125f0565b60c051602001516001600160a01b03166080528551613937906138ca908361322f565b966138d888610140516125f0565b6101405260c0516020810151600a5491830151613907926001600160a01b039283169216906135b1908c6131c7565b60c0516135b161393160018060a01b036020840151169360018060a01b03600b54169301516125e0565b8a6131c7565b91386136c9565b5092613891565b809297955081939a96945011613967575b50505050506136e76136f991613937565b6136e79498506136f99550916139a76139876138a1936139ac96956125f0565b60a0519080821115613a365761399c916125f0565b935b8a519285613e6e565b61310c565b60018060a01b03604060c051015116608052613a2d81966139cf8360a0516125f0565b60a05260c0516040810151600a54918301516139fd926001600160a01b039283169216906135b190876131c7565b60c0516135b1613a2760018060a01b036040840151169360018060a01b03600b54169301516125e0565b856131c7565b91388080613956565b509361399e565b613a4b602091602494612552565b91604051938480926370a0823160e01b82523060048301525afa918215613adf578592613aab575b5011613a8157388083613556565b60405162461bcd60e51b8152602060048201526002602482015261747360f01b6044820152606490fd5b9091506020813d602011613ad7575b81613ac760209383612349565b810103126104a457519038613a73565b3d9150613aba565b6040513d87823e3d90fd5b6020613afb60249360e05190612552565b91604051938480926370a0823160e01b82523060048301525afa918215613b8e578792613b5a575b5011613b3057388061354d565b60405162461bcd60e51b8152602060048201526002602482015261746960f01b6044820152606490fd5b9091506020813d602011613b86575b81613b7660209383612349565b810103126104a457519038613b23565b3d9150613b69565b6040513d89823e3d90fd5b613ba5909891986122e4565b9638613547565b6040513d8b823e3d90fd5b6040516370a0823160e01b8152306004820152909650602081602481895afa908115613c1d578a91613beb575b50956134f8565b90506020813d602011613c15575b81613c0660209383612349565b81010312611c5d575138613be4565b3d9150613bf9565b6040513d8c823e3d90fd5b6040516370a0823160e01b8152306004820152909450602081602481875afa908115613c1d578a91613c5c575b50936134f2565b90506020813d602011613c86575b81613c7760209383612349565b81010312611c5d575138613c55565b3d9150613c6a565b5083151561348b565b91908015613cf6578215613cc557613cba613cb5613cc1928561310c565b613d2b565b80936130ec565b9190565b60405162461bcd60e51b8152602060048201526009602482015268496e76616c6964206b60b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606490fd5b8015613e6857613df6816000908360801c80613e5c575b508060401c80613e4f575b508060201c80613e42575b508060101c80613e35575b508060081c80613e28575b508060041c80613e1b575b508060021c80613e0e575b50600191828092811c613e07575b1c1b613d9e81856130ec565b01811c613dab81856130ec565b01811c613db881856130ec565b01811c613dc581856130ec565b01811c613dd281856130ec565b01811c613ddf81856130ec565b01811c613dec81856130ec565b01901c80926130ec565b80821015613e02575090565b905090565b0181613d92565b6002915091019038613d84565b6004915091019038613d79565b6008915091019038613d6e565b6010915091019038613d63565b6020915091019038613d58565b6040915091019038613d4d565b91505060809038613d42565b50600090565b90918115613ed75782151580613ece575b15613e9757613e91826132c194612552565b9161333e565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207265736572766560881b6044820152606490fd5b50801515613e7f565b505050600090565b90613ef2613eec836123dd565b92612688565b91613f2260018060a01b03936040613f19613f1287602087015116614483565b835161310c565b91015190612552565b908115613fa257606001516040516318160ddd60e01b81529360209185916004918391165afa928315613f9657600093613f63575b50916132c1919261322f565b6020813d8211613f8e575b81613f7b60209383612349565b8101031261051b575192506132c1613f57565b3d9150613f6e565b6040513d6000823e3d90fd5b506c0c9f2c9cd04674edea40000000925050565b6000938493909284919080158061421d575b61421057613fd5846123dd565b9160018060a01b03613fee8160608601511615156133f1565b61401e613ffa87612688565b9361401860e08701612c936140108251856131c7565b9151876131c7565b936125f0565b936020810161402f83825116614483565b9161403b83151561342c565b87614046848761310c565b96604061405486835161310c565b910190614062825182612552565b61408f575b505050505050505061408a93926136e26136f39361408493612552565b91613edf565b929190565b89979e919294976140aa979e978a6140b1939d96989d612552565b9351612552565b956140bc8784612552565b936140d56140ce60c0890151876131c7565b80966125f0565b966140e48d60a0830151613c97565b98909987871160001461416b57505050505050946141496141426136e2966138a16136f39b976140849b9761408a9f9e9b61415498614122916125f0565b9050808911156141635761413690896125f0565b925b61389c8c8561322f565b968761322f565b9b8c9151169c6125f0565b505b9383969782963880614067565b508792614138565b939a50939550989e97949f509a9492508181116141a0575b505050505050505061408a93926136e26136f39361408493614156565b899e506136e296979d5061408a9b9a50936139a76141ed946136f39b6140849b98956141d26138a1966141fc9a6125f0565b905080821115614209576141e5916125f0565b945b85613e6e565b80946040829c0151169b6125f0565b9483969782953880614183565b50946141e7565b5050925050915080918190565b508115613fc8565b919091821561437457614237816123dd565b9260018060a01b036142508160608701511615156133f1565b61429661426b61425f85612688565b92602088015116614483565b9261427784151561342c565b614290604061428786865161310c565b94015195613edf565b9061310c565b906142aa826142a58684612552565b612552565b6142c26142bb60c0890151836131c7565b80926125f0565b600095869184841061433957505050906142db916125f0565b81811061431f575060e0916142ef9161322f565b93019283519061271091820382811161255f5761430b916132c4565b9351810390811161255f576132c1916132c4565b6142ef919350916143338360e094956125f0565b9361322f565b919650915061434892506125f0565b81811061435d575060e0916142ef919361322f565b925060e09161436f846142ef936125f0565b61322f565b50600091508190565b919080156143745761438e836123dd565b60608101516001600160a01b0391906143aa90831615156133f1565b6143ea6143c56143b987612688565b93602084015116614483565b936143d185151561342c565b61429060406143e187875161310c565b95015197613edf565b9161441161440a60c0614401866136e28b87612552565b940151846131c7565b80936125f0565b6000908197848411600014614451575050509061442d916125f0565b81811061443f575090613cc19161322f565b613cc1929194508061433391956125f0565b919750915061446092506125f0565b818110614473575090613cc1919361322f565b93509061436f84613cc1936125f0565b604051631f94a27560e31b815260206001600160a01b0381836004817f000000000000000000000000000000000000000000000000000000000000000085165afa928315613f9657600093614536575b5060248293948260405196879485936341976e0960e01b8552166004840152165afa908115613f965760009161450a575b50905090565b82813d831161452f575b61451e8183612349565b810103126104a15750518038614504565b503d614514565b829350614551602491843d86116103d5576103c78183612349565b93506144d356fe20f7411220a575a66d53613925a30fcd2faeb040572d77208808a70a0de8f0b7a2646970667358221220b81e2eeeced08ae0d262310f2ce12b66b28783b63e4167be53433330f58cf58864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9127,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "isHandler",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9586,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "tradingConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TradingConfig)7789_storage)"
      },
      {
        "astId": 9591,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "tradingFeeConfigs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(TradingFeeConfig)7798_storage)"
      },
      {
        "astId": 9596,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "fundingFeeConfigs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(FundingFeeConfig)7813_storage)"
      },
      {
        "astId": 9602,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "pairIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9608,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "isPairListed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9610,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "pairsCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9615,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "pairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Pair)7772_storage)"
      },
      {
        "astId": 9620,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "vaults",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Vault)7858_storage)"
      },
      {
        "astId": 9622,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "tradingVault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9624,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "feeReceiver0",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9626,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "feeReceiver1",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(FundingFeeConfig)7813_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.FundingFeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingFeeConfig)7813_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)7772_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)7772_storage"
      },
      "t_mapping(t_uint256,t_struct(TradingConfig)7789_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.TradingConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TradingConfig)7789_storage"
      },
      "t_mapping(t_uint256,t_struct(TradingFeeConfig)7798_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.TradingFeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TradingFeeConfig)7798_storage"
      },
      "t_mapping(t_uint256,t_struct(Vault)7858_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)7858_storage"
      },
      "t_struct(FundingFeeConfig)7813_storage": {
        "encoding": "inplace",
        "label": "struct IPool.FundingFeeConfig",
        "members": [
          {
            "astId": 7800,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "minFundingRate",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 7802,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maxFundingRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 7804,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "defaultFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 7806,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "fundingWeightFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7808,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "liquidityPremiumFactor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7810,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "interest",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 7812,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "lpDistributeP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Pair)7772_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Pair",
        "members": [
          {
            "astId": 7755,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "pairIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7757,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "indexToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7759,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "stableToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7761,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "pairToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7763,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "enable",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7765,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "kOfSwap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7767,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "expectIndexTokenP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7769,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "addLpFeeP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7771,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "lpFeeDistributeP",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(TradingConfig)7789_storage": {
        "encoding": "inplace",
        "label": "struct IPool.TradingConfig",
        "members": [
          {
            "astId": 7774,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "minLeverage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7776,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7778,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "minTradeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7780,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maxTradeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7782,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maxPositionAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7784,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maintainMarginRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7786,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "priceSlipP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7788,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "maxPriceDeviationP",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(TradingFeeConfig)7798_storage": {
        "encoding": "inplace",
        "label": "struct IPool.TradingFeeConfig",
        "members": [
          {
            "astId": 7791,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "takerFeeP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7793,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "makerFeeP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7795,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "lpFeeDistributeP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7797,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "keeperFeeDistributeP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Vault)7858_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Vault",
        "members": [
          {
            "astId": 7847,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "indexTotalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7849,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "indexReservedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7851,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "stableTotalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7853,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "stableReservedAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7855,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "averagePrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7857,
            "contract": "contracts/pool/Pool.sol:Pool",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}