{
  "address": "0xA4899D35897033b927acFCf422bc745916139776",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPairInfo",
          "name": "_pairInfo",
          "type": "address"
        },
        {
          "internalType": "contract IPairVault",
          "name": "_pairVault",
          "type": "address"
        },
        {
          "internalType": "contract IOrderManager",
          "name": "_orderManager",
          "type": "address"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "_tradingVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTimeDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTimeDelay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeADLAndDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderManager",
      "outputs": [
        {
          "internalType": "contract IOrderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IPairInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVault",
      "outputs": [
        {
          "internalType": "contract IPairVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "setPricesAndExecuteADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "increaseOrderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decreaseOrderIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPricesAndExecuteLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increaseEndIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseEndIndex",
          "type": "uint256"
        }
      ],
      "name": "setPricesAndExecuteMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "setPricesAndLiquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTimeDelay",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTimeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe74b9c85728218bac75d8644a131135d7db76029820eb6c008192ad8078c93af",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA4899D35897033b927acFCf422bc745916139776",
    "transactionIndex": 0,
    "gasUsed": "5523524",
    "logsBloom": "0x
    "blockHash": "0x446eefd2620e9f3aa037d7022dbd56e5581be996f9a24dc7e4c98138d1549c78",
    "transactionHash": "0xe74b9c85728218bac75d8644a131135d7db76029820eb6c008192ad8078c93af",
    "logs": [],
    "blockNumber": 108,
    "cumulativeGasUsed": "5523524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "0x1c85638e118b37167e9298c2268758e058DdfDA0",
    "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
    "0x7A9Ec1d04904907De0ED7b6839CcdD59c3716AC9",
    60
  ],
  "numDeployments": 1,
  "solcInputHash": "3bfb618664e377f23f48757fd7cd2af1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPairInfo\",\"name\":\"_pairInfo\",\"type\":\"address\"},{\"internalType\":\"contract IPairVault\",\"name\":\"_pairVault\",\"type\":\"address\"},{\"internalType\":\"contract IOrderManager\",\"name\":\"_orderManager\",\"type\":\"address\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"_tradingVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTimeDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeADLAndDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderManager\",\"outputs\":[{\"internalType\":\"contract IOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IPairInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVault\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"setPricesAndExecuteADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"increaseOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decreaseOrderIds\",\"type\":\"uint256[]\"}],\"name\":\"setPricesAndExecuteLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseEndIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseEndIndex\",\"type\":\"uint256\"}],\"name\":\"setPricesAndExecuteMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"setPricesAndLiquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"updateMaxTimeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IExecutor {\\n\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    function increaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function maxTimeDelay() external view returns(uint256);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external;\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external;\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external;\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42f3f275dce06e62f4cc4d36c9c046a967654f06e27a2974a8eda5bc29274563\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIndexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IIndexPriceFeed {\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\\n    function lastUpdatedAt() external view returns (uint256);\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xc78259afb2d8179075b97c3021eac6a508196df97429f0778a2a41684cc9c867\",\"license\":\"MIT\"},\"contracts/interfaces/IOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOraclePriceFeed {\\n\\n    function getPrice(address _token) external view returns (uint256);\\n    function getIndexPrice(address _token, uint256 _referencePrice) external view returns (uint256);\\n\\n\\n    function getPrimaryPrice(address _token) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ac72f22ea80e64abc0138d2a4e7976b7efcf4b089faa217a66e4271f7ca46cb\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IOrderManager {\\n\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns(uint256);\\n    function decreaseMarketOrdersIndex() external view returns(uint256);\\n    function increaseLimitOrdersIndex() external view returns(uint256);\\n    function decreaseLimitOrdersIndex() external view returns(uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\\n\\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function cancelAllPositionOrders(address account, uint256 pairIndex, bool isLong) external;\\n\\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n}\\n\",\"keccak256\":\"0xb8554ea433fc00fc7eac6139ccef089330c9ae9cd96e4cb8cbdeeaa9090bb82f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface IPositionManager {\\n    event UpdatePairInfo(address oldPairInfo, address newPairInfo);\\n\\n    event UpdatePairVault(address oldPairVault, address newPairVault);\\n\\n    event UpdateTradingFeeReceiver(address oldReceiver, address newReceiver);\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (uint256 tradingFee);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updatePairInfo(address newPairInfo) external;\\n\\n    function updatePairVault(address newPairVault) external;\\n\\n    function updateTradingFeeReceiver(address newReceiver) external;\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n\\n    function getValidPrice(address token, uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aeac3a43af593e2c7c43e9d16f170eea508da26168e4ac05c15e263ff4f3ece\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x597b4bc00af260288b97774c276f76a8969bc1668bc3939e13152653404aa343\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Int256Utils {\\n\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns(uint256) {\\n        return a >= 0 ? uint256(a) : uint256(- a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns(int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns(int256) {\\n        return a > b ? a : b;\\n    }\\n\\n\\n    function toString(int256 amount) internal pure returns(string memory) {\\n        return string.concat(amount >= 0 ? \\\"\\\" : \\\"-\\\", abs(amount).toString());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xde88274144fb4613d79874c067290771291acff5be2883e89c46b9a89c54129c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/PrecisionUtils.sol\\\";\\nimport \\\"../libraries/Int256Utils.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\nimport \\\"../libraries/PositionKey.sol\\\";\\nimport 'hardhat/console.sol';\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n     function get(\\n        mapping(bytes32 => Info) storage self,\\n       address _account, uint256 _pairIndex, bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(mapping(bytes32 => Info) storage self,bytes32 key)internal view returns (Position.Info storage position){\\n         position = self[key];\\n\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount,uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice || self.averagePrice == 0) {\\n            return 0;\\n        }\\n\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = - int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256  price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, \\\"decrease amount exceed position\\\");\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, \\\"collateral not enough for decrease\\\");\\n\\n        // pnl\\n        if (_sizeAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self, _sizeAmount, price);\\n        }\\n\\n        require(totalCollateral >= 0, \\\"collateral not enough for pnl\\\");\\n\\n        require(afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage\\n            && afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage, \\\"leverage incorrect\\\");\\n        require(afterPosition <= maxPositionAmount, \\\"exceed max position\\\");\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe37dda35b2eaa18bcf4aa524ffe80fac3c391e5f2b8fa9f4ea8765a7219530ce\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\nlibrary PositionKey {\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(bool _isIncrease, TradingTypes.TradeType _tradeType, uint256 _orderId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14b07e1484e9a71f8b74c0e7e77c0850c3172e0d1ee821197e104266f2399ef1\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PrecisionUtils {\\n\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function oneHundredPercentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x6c58914975858e04c202d6815fbb7c47be8dc8ef5c51cda9dcf70e853139febb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0x6dbfdfe9e3efa5876b6bdf69eba75e537b8541ebdb145ba2b177fa1d384fb396\",\"license\":\"UNLICENSED\"},\"contracts/pair/interfaces/IPairInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPairInfo {\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    struct Pair {\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate; // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate; // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate; // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor; // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor; // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        uint256 lpDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns (Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns (TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns (TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns (FundingFeeConfig memory);\\n}\\n\",\"keccak256\":\"0x0386c82ba0511ec563f23f2a08e929f4e2ae70a8a57c10540259a46f0619e0c2\",\"license\":\"MIT\"},\"contracts/pair/interfaces/IPairVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IPairVault {\\n    struct Vault {\\n        uint256 indexTotalAmount;               // total amount of tokens\\n        uint256 indexReservedAmount;            // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns(Vault memory vault);\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n    function swap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n}\\n\",\"keccak256\":\"0x19c2daec07bc3e3e7a8eac919831c09b67cdf0bd5f84a75bcf441fc1a9244719\",\"license\":\"UNLICENSED\"},\"contracts/trading/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../libraries/Position.sol';\\nimport '../interfaces/IExecutor.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\nimport '../interfaces/IOrderManager.sol';\\nimport '../interfaces/IPositionManager.sol';\\nimport '../interfaces/IIndexPriceFeed.sol';\\nimport '../pair/interfaces/IPairInfo.sol';\\nimport '../pair/interfaces/IPairVault.sol';\\nimport '../interfaces/IPositionManager.sol';\\nimport '../interfaces/IOraclePriceFeed.sol';\\n\\ncontract Executor is IExecutor {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for Position.Info;\\n\\n    uint256 public override increaseMarketOrderStartIndex;\\n    uint256 public override decreaseMarketOrderStartIndex;\\n\\n    uint256 public override maxTimeDelay;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    IOrderManager public orderManager;\\n    IPairInfo public pairInfo;\\n    IPairVault public pairVault;\\n    IPositionManager public positionManager;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPairInfo _pairInfo,\\n        IPairVault _pairVault,\\n        IOrderManager _orderManager,\\n        IPositionManager _tradingVault,\\n        uint256 _maxTimeDelay\\n    ) {\\n        ADDRESS_PROVIDER = addressProvider;\\n        pairInfo = _pairInfo;\\n        pairVault = _pairVault;\\n        orderManager = _orderManager;\\n        positionManager = _tradingVault;\\n        maxTimeDelay = _maxTimeDelay;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPositionKeeper() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), 'onlyPositionKeeper');\\n        _;\\n    }\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external override onlyPoolAdmin {\\n        uint256 oldDelay = maxTimeDelay;\\n        maxTimeDelay = newMaxTimeDelay;\\n        emit UpdateMaxTimeDelay(oldDelay, newMaxTimeDelay);\\n    }\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseMarketOrders(increaseEndIndex);\\n        this.executeDecreaseMarketOrders(decreaseEndIndex);\\n    }\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseLimitOrders(increaseOrderIds);\\n        this.executeDecreaseLimitOrders(decreaseOrderIds);\\n    }\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        uint256 index = increaseMarketOrderStartIndex;\\n        uint256 length = orderManager.increaseMarketOrdersIndex();\\n\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeIncreaseOrder(index, TradingTypes.TradeType.MARKET) {} catch Error(string memory reason) {\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, true);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeIncreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {} catch Error(\\n                string memory reason\\n            ) {}\\n        }\\n    }\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external onlyPositionKeeper {\\n        TradingTypes.IncreasePositionOrder memory order = orderManager.getIncreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // check pair enable\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // check account enable\\n        require(!positionManager.isFrozen(order.account), 'account is frozen');\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        // IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.isLong\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                        order.openPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                        order.openPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(order.isLong ? price >= order.openPrice : price <= order.openPrice, 'not reach trigger price');\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (order.isLong) {\\n                price = order.openPrice.min(price);\\n            } else {\\n                price = order.openPrice.max(price);\\n            }\\n        }\\n\\n        // get position\\n        Position.Info memory position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n\\n        // check position and leverage\\n        (uint256 afterPosition, ) = position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            true,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n        require(afterPosition > 0, 'zero position amount');\\n\\n        // check tp sl\\n        require(\\n            order.tp == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.TP),\\n            'tp already exists'\\n        );\\n        require(\\n            order.sl == 0 || !orderManager.positionHasTpSl(position.key, TradingTypes.TradeType.SL),\\n            'sl already exists'\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = positionManager.netExposureAmountChecker(order.pairIndex);\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                require(order.sizeAmount <= availableIndex, 'lp index token not enough');\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                require(\\n                    order.sizeAmount <= uint256(preNetExposureAmountChecker) + availableStable.divPrice(price),\\n                    'lp stable token not enough'\\n                );\\n            }\\n        } else {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                require(\\n                    order.sizeAmount <= uint256(-preNetExposureAmountChecker) + availableIndex,\\n                    'lp index token not enough'\\n                );\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                require(order.sizeAmount <= availableStable.divPrice(price), 'lp stable token not enough');\\n            }\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            positionManager.transferTokenTo(pair.stableToken, address(positionManager), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee) = positionManager.increasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                _orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        if (order.tp > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.TP,\\n                    collateral: 0,\\n                    openPrice: order.tpPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.tp),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n        if (order.sl > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.SL,\\n                    collateral: 0,\\n                    openPrice: order.slPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(order.sl),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n        }\\n\\n        // delete order\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeIncreaseMarketOrders(_orderId);\\n        } else if (_tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeIncreaseLimitOrders(_orderId);\\n        }\\n\\n        emit ExecuteIncreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            _tradeType,\\n            order.collateral,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        uint256 index = decreaseMarketOrderStartIndex;\\n        uint256 length = orderManager.decreaseMarketOrdersIndex();\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeDecreaseOrder(index, TradingTypes.TradeType.MARKET) {} catch Error(string memory reason) {\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, false);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeDecreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {} catch Error(\\n                string memory reason\\n            ) {}\\n        }\\n    }\\n\\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external onlyPositionKeeper {\\n        _executeDecreaseOrder(_orderId, _tradeType);\\n    }\\n\\n    function _executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) internal {\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // get pair\\n        uint256 pairIndex = order.pairIndex;\\n        IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n\\n        // get position\\n        Position.Info memory position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n        if (position.positionAmount == 0) {\\n            return;\\n        }\\n\\n        // check trading amount\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(pairIndex);\\n\\n        order.sizeAmount = order.sizeAmount.min(position.positionAmount);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n        // IPairInfo.Pair memory pair = pairInfo.getPair(pairIndex);\\n        // check price\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.abovePrice\\n                    ? price.mulPercentage(PrecisionUtils.oneHundredPercentage() - tradingConfig.priceSlipP) <=\\n                        order.triggerPrice\\n                    : price.mulPercentage(PrecisionUtils.oneHundredPercentage() + tradingConfig.priceSlipP) >=\\n                        order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(\\n                order.abovePrice ? price <= order.triggerPrice : price >= order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (!order.isLong) {\\n                price = order.triggerPrice.min(price);\\n            } else {\\n                price = order.triggerPrice.max(price);\\n            }\\n        }\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n\\n        // check position and leverage\\n        position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            false,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n\\n        IPairVault.Vault memory lpVault = pairVault.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = positionManager.netExposureAmountChecker(order.pairIndex);\\n        bool needADL;\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                needADL = order.sizeAmount > availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                needADL = order.sizeAmount > uint256(preNetExposureAmountChecker) + availableStable.divPrice(price);\\n            }\\n        } else {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                needADL = order.sizeAmount > uint256(-preNetExposureAmountChecker) + availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                needADL = order.sizeAmount > availableStable.divPrice(price);\\n            }\\n        }\\n\\n        if (needADL) {\\n            orderManager.setOrderNeedADL(_orderId, order.tradeType, needADL);\\n\\n            emit ExecuteDecreaseOrder(\\n                order.account,\\n                _orderId,\\n                pairIndex,\\n                order.tradeType,\\n                order.isLong,\\n                order.sizeAmount,\\n                price,\\n                0,\\n                needADL,\\n                0,\\n                0\\n            );\\n            return;\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            IPairInfo.Pair memory pair = pairInfo.getPair(position.pairIndex);\\n            positionManager.transferTokenTo(pair.stableToken, address(pairVault), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee, int256 pnl) = positionManager.decreasePosition(\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        // delete order\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeDecreaseMarketOrders(_orderId);\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        } else {\\n            orderManager.setPositionHasTpSl(position.key, order.tradeType, false);\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        }\\n\\n        // remove decrease order\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        if (position.positionAmount == 0) {\\n            // cancel all decrease order\\n            bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n            IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\\n\\n            for (uint256 i = 0; i < orders.length; i++) {\\n                IOrderManager.PositionOrder memory positionOrder = orders[i];\\n                if (!positionOrder.isIncrease) {\\n                    orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\\n                }\\n            }\\n        }\\n\\n        emit ExecuteDecreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            order.tradeType,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            pnl,\\n            needADL,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.liquidatePositions(positionKeys);\\n    }\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external onlyPositionKeeper {\\n        for (uint256 i = 0; i < positionKeys.length; i++) {\\n            _liquidatePosition(positionKeys[i]);\\n        }\\n    }\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeADLAndDecreaseOrder(positionKeys, sizeAmounts, orderId, tradeType);\\n    }\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) public onlyPositionKeeper {\\n        require(_positionKeys.length == _sizeAmounts.length, 'length not match');\\n\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        require(order.needADL, 'no need ADL');\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(order.pairIndex);\\n\\n        Position.Info[] memory adlPositions = new Position.Info[](_positionKeys.length);\\n        uint256 sumAmount;\\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\\n            Position.Info memory position = positionManager.getPositionByKey(_positionKeys[i]);\\n            require(_sizeAmounts[i] <= position.positionAmount, 'ADL size exceeds position');\\n            require(_sizeAmounts[i] <= tradingConfig.maxTradeAmount, 'exceeds max trade amount');\\n            sumAmount += _sizeAmounts[i];\\n            adlPositions[i] = position;\\n        }\\n\\n        require(sumAmount == order.sizeAmount, 'ADL position amount not match decrease order');\\n        IPairInfo.Pair memory pair = pairInfo.getPair(order.pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, order.pairIndex, !order.isLong);\\n\\n        for (uint256 i = 0; i < adlPositions.length; i++) {\\n            Position.Info memory adlPosition = adlPositions[i];\\n            uint256 orderId = orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: adlPosition.account,\\n                    pairIndex: adlPosition.pairIndex,\\n                    tradeType: TradingTypes.TradeType.MARKET,\\n                    collateral: 0,\\n                    openPrice: price,\\n                    isLong: adlPosition.isLong,\\n                    sizeAmount: -int256(adlPosition.positionAmount),\\n                    tpPrice: 0,\\n                    tp: 0,\\n                    slPrice: 0,\\n                    sl: 0\\n                })\\n            );\\n            _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n        }\\n        _executeDecreaseOrder(_orderId, order.tradeType);\\n    }\\n\\n    function _liquidatePosition(bytes32 _positionKey) internal {\\n        Position.Info memory position = positionManager.getPositionByKey(_positionKey);\\n\\n        if (position.positionAmount == 0) {\\n            return;\\n        }\\n        IPairInfo.Pair memory pair = pairInfo.getPair(position.pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, position.pairIndex, position.isLong);\\n\\n        int256 unrealizedPnl = position.getUnrealizedPnl(position.positionAmount, price);\\n        int256 exposureAsset = int256(position.collateral) + unrealizedPnl;\\n\\n        IPairInfo.TradingConfig memory tradingConfig = pairInfo.getTradingConfig(position.pairIndex);\\n\\n        bool needLiquidate;\\n        if (exposureAsset <= 0) {\\n            needLiquidate = true;\\n        } else {\\n            uint256 riskRate = position.positionAmount.mulPrice(position.averagePrice)\\n                .mulPercentage(tradingConfig.maintainMarginRate)\\n                .calculatePercentage(uint256(exposureAsset));\\n            needLiquidate = riskRate >= PrecisionUtils.oneHundredPercentage();\\n        }\\n        if (!needLiquidate) {\\n            return;\\n        }\\n\\n        // cancel all positionOrders\\n        orderManager.cancelAllPositionOrders(position.account, position.pairIndex, position.isLong);\\n\\n        uint256 orderId = orderManager.createOrder(\\n            TradingTypes.CreateOrderRequest({\\n                account: position.account,\\n                pairIndex: position.pairIndex,\\n                tradeType: TradingTypes.TradeType.MARKET,\\n                collateral: 0,\\n                openPrice: price,\\n                isLong: position.isLong,\\n                sizeAmount: -int256(position.positionAmount),\\n                tpPrice: 0,\\n                tp: 0,\\n                slPrice: 0,\\n                sl: 0\\n            })\\n        );\\n\\n        _executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n\\n        emit LiquidatePosition(\\n            _positionKey,\\n            position.account,\\n            position.pairIndex,\\n            position.isLong,\\n            position.positionAmount,\\n            position.collateral,\\n            price,\\n            orderId\\n        );\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xff47a010b7117710995b286b9916b6f2405852978050d045622c347d5426d39e\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200014557601f6200622938819003918201601f19168301916001600160401b038311848410176200014a5780849260c09460405283398101031262000145578051906001600160a01b03908183168303620001455760208101519082821680920362000145576040810151838116809103620001455760608201519184831680930362000145576080810151948516809503620001455760a001519460805260018060a01b03199283600454161760045582600554161760055581600354161760035560065416176006556002556040516160c8908162000161823960805181818161013701528181610312015281816105a8015281816107a801528181610a0901528181610b57015281816113010152818161143401528181611548015281816116d6015281816118fc01528181611bbe01528181611e9b0152611f8e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c9081631848effa14611f7a57508063531d87c114611e6a5780635be766c314611e4c578063791b98bc14611e23578063a31a7b4414611dfa578063a776034014611b22578063afb566e414611854578063b298f25a14611684578063be39f3aa14611513578063bfa5ea9914611403578063c04c0f58146112af578063cb0269c914611291578063d4053f7b14611274578063da9d857b14610aea578063e70da1b5146109d9578063ef09314a14610741578063efc95de814610556578063f2ac5dfe1461028e578063f9b6117f14610265578063fc2a5b1d1461023c5763fdc860f01461010857600080fd5b346102395761011636612158565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561022e57859187916101f4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101e95785946101aa575b50506101a26101a793612198565b614f2c565b80f35b90809450813d83116101e2575b6101c18183612054565b810103126101de576101a26101d86101a79461218b565b93610194565b8380fd5b503d6101b7565b6040513d87823e3d90fd5b82819392503d8311610227575b61020b8183612054565b810103126102235761021d8591612177565b38610169565b8580fd5b503d610201565b6040513d88823e3d90fd5b80fd5b50346102395780600319360112610239576004546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576003546040516001600160a01b039091168152602090f35b503461023957608036600319011261023957806001600160401b0360043581811161045e576102c190369060040161208c565b90602435818111610551576102da9036906004016120fa565b90606435908111610551576102f39036906004016120fa565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561050f57839187918a9161051a575b506024604051809481936335d2155560e11b8352336004840152165afa801561050f57869189916104cd575b5091610387600493612198565b8551855114806104c5575b61039b906121d9565b604051635ed6d55b60e11b815292839182905afa9081156104ba578791610481575b501691823b15610223576103ee92869283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af1908115610476578491610462575b5050303b1561045e57610430918391604051938492839263180981eb60e31b845260048401526024830190612216565b038183305af18015610453576104435750f35b61044c90611fbd565b6102395780f35b6040513d84823e3d90fd5b5050fd5b61046b90611fbd565b61045e578238610400565b6040513d86823e3d90fd5b90508481813d83116104b3575b6104988183612054565b810103126104af576104a990612177565b386103bd565b8680fd5b503d61048e565b6040513d89823e3d90fd5b506001610392565b82819392503d8311610508575b6104e48183612054565b81010312610504576004916103876104fc889361218b565b91935061037a565b8780fd5b503d6104da565b6040513d8a823e3d90fd5b92505081813d831161054a575b6105318183612054565b8101031261050457856105448492612177565b3861034e565b503d610527565b505050fd5b50346102395760208060031936011261073d576004356001600160401b038111610739576105889036906004016120fa565b6040516351331ad760e01b815290916001600160a01b03919080826004817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156101e9578592610702575b508060405180936335d2155560e11b8252336004830152816024968792165afa9081156101e95785916106cb575b506106129150612198565b825b82518110156106c7576106278184612544565b51303b156106c35760405190630fdc860f60e41b82526004820152600190818482015285808260448183305af191826106af575b50506106a5576106696122cb565b6308c379a014610691575b610686576106819061237c565b610614565b6040513d85823e3d90fd5b6106996122e9565b15610674575083610674565b506106819061237c565b6106b890611fbd565b61022357853861065b565b8480fd5b8380f35b905081813d83116106fb575b6106e18183612054565b810103126101de576106f56106129161218b565b38610607565b503d6106d7565b9080925081813d8311610732575b61071a8183612054565b810103126106c35761072b90612177565b90386105d9565b503d610710565b8280fd5b5080fd5b50346102395760a036600319011261023957806001600160401b0360043581811161045e5761077490369060040161208c565b9060243590811161045e5761078d9036906004016120fa565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104ba578491849189916109a2575b506024604051809481936335d2155560e11b8352336004840152165afa80156104ba5783918891610964575b509161081d600493612198565b86518651148061095c575b610831906121d9565b604051635ed6d55b60e11b815292839182905afa91821561022e578692610926575b50501691823b156105515761088592849283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af1801561045357610912575b5050303b156102395760405163531d87c160e01b815260643560048201528190818160248183305af18015610453576108fe575b5050303b156102395760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610453576104435750f35b61090790611fbd565b6102395780386108c8565b61091b90611fbd565b610239578038610894565b90809250813d8311610955575b61093d8183612054565b810103126106c35761094e90612177565b3880610853565b503d610933565b506001610828565b82819392503d831161099b575b61097b8183612054565b810103126104af5760049161081d610993859361218b565b919350610810565b503d610971565b92505081813d83116109d2575b6109b98183612054565b810103126104af57826109cc8592612177565b386107e4565b503d6109af565b5034610239576109e836612158565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561022e5785918791610ab4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101e9578594610a79575b5050610a746101a793612198565b6129c3565b90809450813d8311610aad575b610a908183612054565b810103126101de57610a74610aa76101a79461218b565b93610a66565b503d610a86565b82819392503d8311610ae3575b610acb8183612054565b8101031261022357610add8591612177565b38610a3b565b503d610ac1565b5034610239576080366003190112610239576001600160401b0360043581811161073957610b1c9036906004016120fa565b9060243590811161073957610b359036906004016120fa565b6064359160048310156101de576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101e9578591611235575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa80156101e95785906111fa575b610bd09150612198565b80518251036111c2576003546040516340b4605b60e11b815260443560048201529384916001600160a01b031690610c0c9060248401906122a8565b8160446101609687935afa9384156101e9578594611193575b505061014083015115611160576004805460408581015190516330a66e1560e01b8152928301526001600160a01b03169061010081602481855afa90811561022e57869161112f575b508251919492610c7d83612075565b92610c8b6040519485612054565b808452610c9a601f1991612075565b01875b8181106110d257505060065487946001600160a01b039091169190855b8251871015610e2757610ccd8784612544565b519660405197636468402960e11b8952600489015261014088602481885afa978815610e1c578b98610de9575b50610d05818a612544565b5160a089015110610da457610d1a818a612544565b51606087015110610d5f57610d3d610d5992610d36838c612544565b519061256e565b97610d488289612544565b52610d538188612544565b5061237c565b95610cba565b60405162461bcd60e51b815260206004820152601860248201527f65786365656473206d617820747261646520616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f41444c2073697a65206578636565647320706f736974696f6e000000000000006044820152606490fd5b610e0e9198506101403d61014011610e15575b610e068183612054565b81019061273e565b9638610cfa565b503d610dfc565b6040513d8d823e3d90fd5b908884878c9460c08501510361107857849260e06040860151602460405180948193632f7ce47360e21b835260048301525afa92831561047657610eb2936020928691611049575b505160408781015160e0890151915163179a09e360e01b81526001600160a01b039093166004840152602483015215604482015293849190829081906064820190565b03915afa918215610686578392611012575b50825b8151811015610fe357836020610f7b610ee08486612544565b5160018060a01b03600354169060018060a01b03848201511690604081015190610f1460a060608301511515920151612876565b9160405193610f2285612002565b84528684015286604084015286606084015289608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af19081156101e9578591610fa5575b5090610f9b610fa092614082565b61237c565b610ec7565b919450506020813d602011610fdb575b81610fc260209383612054565b81010312610fd65751859390610f9b610f8d565b600080fd5b3d9150610fb5565b8360608601516004811015610ffe576101a790604435614f2c565b634e487b7160e01b82526021600452602482fd5b925090506020823d602011611041575b8161102f60209383612054565b81010312610fd6578391519085610ec4565b3d9150611022565b61106b915060e03d60e011611071575b6110638183612054565b8101906125b7565b88610e6f565b503d611059565b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b602090604098939698516110e581611fe6565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610c9d565b61115391506101003d61010011611159575b61114b8183612054565b81019061262d565b38610c6e565b503d611141565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b6111b3929450803d106111bb575b6111ab8183612054565b810190613fd6565b913880610c25565b503d6111a1565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d60201161122d575b8161121460209383612054565b810103126106c357611228610bd09161218b565b610bc6565b3d9150611207565b90506020813d60201161126c575b8161125060209383612054565b810103126106c3576020611265602492612177565b9150610b8f565b3d9150611243565b503461023957806003193601126102395760209054604051908152f35b50346102395780600319360112610239576020600254604051908152f35b50346102395760209081600319360112610239576004356001600160401b03811161073d576112e29036906004016120fa565b6040516351331ad760e01b815290926001600160a01b039181816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156104765790829185916113cd575b506024604051809581936335d2155560e11b8352336004840152165afa908115610686578391611396575b5061136b9150612198565b805b82518110156113925780610f9b61138761138d9386612544565b51615c55565b61136d565b5080f35b905081813d83116113c6575b6113ac8183612054565b8101031261073d576113c061136b9161218b565b38611360565b503d6113a2565b82819392503d83116113fc575b6113e48183612054565b810103126101de576113f68291612177565b38611335565b503d6113da565b50346102395760208060031936011261073d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561047657829185916114dd575b506024604051809581936335d2155560e11b8352336004840152165afa9081156106865783916114a6575b8361149b83612198565b6101a7600435613e32565b905081813d83116114d6575b6114bc8183612054565b8101031261073d576114d061149b9161218b565b38611491565b503d6114b2565b82819392503d831161150c575b6114f48183612054565b810103126101de576115068291612177565b38611466565b503d6114ea565b50346102395760208060031936011261073d576040516351331ad760e01b815260048035916001600160a01b039184908290817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101e9578491869161164e575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610476578491611619575b50156115e4577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160025491816002558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d8311611647575b6116308183612054565b810103126101de576116419061218b565b386115a5565b503d611626565b82819392503d831161167d575b6116658183612054565b810103126106c3576116778491612177565b3861157a565b503d61165b565b50346102395760208060031936011261073d576004356001600160401b038111610739576116b69036906004016120fa565b6040516351331ad760e01b815290916001600160a01b03919080826004817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156101e957859261181d575b508060405180936335d2155560e11b8252336004830152816024968792165afa9081156101e95785916117e6575b506117409150612198565b825b82518110156106c7576117558184612544565b51303b156106c3576040519063e70da1b560e01b82526004820152600190818482015285808260448183305af191826117d2575b50506117c8576117976122cb565b6308c379a0146117b4575b610686576117af9061237c565b611742565b6117bc6122e9565b156117a25750836117a2565b506117af9061237c565b6117db90611fbd565b610223578538611789565b905081813d8311611816575b6117fc8183612054565b810103126101de576118106117409161218b565b38611735565b503d6117f2565b9080925081813d831161184d575b6118358183612054565b810103126106c35761184690612177565b9038611707565b503d61182b565b5034610239578060031960e036820112611b1f576001600160401b036004358181116105515761188890369060040161208c565b916024358281116106c3576118a19036906004016120fa565b91606435818111610223576118ba9036906004016120fa565b90608435908111610223576118d39036906004016120fa565b9360c4359360048510156104af576040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa908115610e1c57849184918d91611ae8575b506024604051809481936335d2155560e11b8352336004840152165afa8015610e1c5783918c91611aa6575b5091611971600493612198565b865186511480611a9e575b611985906121d9565b604051635ed6d55b60e11b815292839182905afa918215611a93578a92611a59575b50501691823b15610504576119d992889283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af190811561022e578691611a45575b5050303b156106c3578492610430611a32611a2394604051978896879663da9d857b60e01b8852608060048901526084880190612216565b91868303016024870152612216565b9160a435604485015260648401906122a8565b611a4e90611fbd565b6106c35784386119eb565b90809250813d8311611a8c575b611a708183612054565b81010312611a8857611a8190612177565b38806119a7565b8880fd5b503d611a66565b6040513d8c823e3d90fd5b50600161197c565b82819392503d8311611ae1575b611abd8183612054565b81010312611add57600491611971611ad5859361218b565b919350611964565b8a80fd5b503d611ab3565b92505081813d8311611b18575b611aff8183612054565b81010312611add5782611b128592612177565b38611938565b503d611af5565b50fd5b50346102395760a0366003190112610239576001600160401b039060043582811161073d57611b5590369060040161208c565b9160243581811161073957611b6e9036906004016120fa565b6064358281116101de57611b869036906004016120fa565b916084359081116101de57611b9f9036906004016120fa565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561050f57839187918a91611dc3575b506024604051809481936335d2155560e11b8352336004840152165afa90811561050f579086918991611d85575b5091611c35600493612198565b895185511480611d7d575b611c49906121d9565b604051635ed6d55b60e11b815292839182905afa9081156104ba578791611d48575b501690813b1561022357958591611c9d9783604051809a81958294631e09986f60e21b8452604435916004850161224a565b03925af1801561047657611d34575b839450303b156105515783611cdc916040518093819263594c792d60e11b83528660048401526024830190612216565b038183305af1908115610476578491611d20575b5050303b1561045e576104309183916040519384928392631df92bbd60e31b845260048401526024830190612216565b611d2990611fbd565b61045e578238611cf0565b929093611d4090611fbd565b918390611cac565b90508481813d8311611d76575b611d5f8183612054565b810103126104af57611d7090612177565b38611c6b565b503d611d55565b506001611c40565b82819392503d8311611dbc575b611d9c8183612054565b8101031261050457600491611c35611db4889361218b565b919350611c28565b503d611d92565b92505081813d8311611df3575b611dda8183612054565b810103126105045785611ded8492612177565b38611bfa565b503d611dd0565b50346102395780600319360112610239576005546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576006546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576020600154604051908152f35b50346102395760208060031936011261073d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa80156104765782918591611f44575b506024604051809581936335d2155560e11b8352336004840152165afa908115610686578391611f0d575b83611f0283612198565b6101a76004356123a1565b905081813d8311611f3d575b611f238183612054565b8101031261073d57611f37611f029161218b565b38611ef8565b503d611f19565b82819392503d8311611f73575b611f5b8183612054565b810103126101de57611f6d8291612177565b38611ecd565b503d611f51565b90503461073d578160031936011261073d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160401b038111611fd057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b03821117611fd057604052565b61016081019081106001600160401b03821117611fd057604052565b60e081019081106001600160401b03821117611fd057604052565b606081019081106001600160401b03821117611fd057604052565b90601f801991011681019081106001600160401b03821117611fd057604052565b6001600160401b038111611fd05760051b60200190565b81601f82011215610fd6578035916120a383612075565b926120b16040519485612054565b808452602092838086019260051b820101928311610fd6578301905b8282106120db575050505090565b81356001600160a01b0381168103610fd65781529083019083016120cd565b81601f82011215610fd65780359161211183612075565b9261211f6040519485612054565b808452602092838086019260051b820101928311610fd6578301905b828210612149575050505090565b8135815290830190830161213b565b6040906003190112610fd657600435906024356004811015610fd65790565b51906001600160a01b0382168203610fd657565b51908115158203610fd657565b1561219f57565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b156121e057565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b828110612236575050505090565b835185529381019392810192600101612228565b9392916060850191606086528051809352608086019260208092019060005b81811061228b575050508583039086015260409161228691612216565b930152565b82516001600160a01b031686529483019491830191600101612269565b9060048210156122b55752565b634e487b7160e01b600052602160045260246000fd5b60009060033d116122d857565b905060046000803e60005160e01c90565b600060443d1061234657604051600319913d83016004833e81516001600160401b03918282113d60248401111761234957818401948551938411612351573d85010160208487010111612349575061234692910160200190612054565b90565b949350505050565b50949350505050565b919261237560409295946060850196855260208501906122a8565b1515910152565b600019811461238b5760010190565b634e487b7160e01b600052601160045260246000fd5b60009081549060018060a01b036003602082825416936040948551928380926386249bab60e01b825260049586915afa90811561253a578891612509575b50808710156124ff578082116124f7575b50945b8581106124035750505050505050565b303b156104af57845163e70da1b560e01b8152818382015260249088828201526044908981838183305af190816124e8575b506124dd576001916124456122cb565b6308c379a01461246e575b50506124645761245f9061237c565b6123f3565b84513d88823e3d90fd5b6124766122e9565b156124505790915088918686541690813b15611add576064868c809460018995838f51998a98899763c250985960e01b89528801528601528401525af180156124d3576124c4575b80612450565b6124cd90611fbd565b386124be565b87513d8b823e3d90fd5b505061245f9061237c565b6124f190611fbd565b38612435565b9050386123f0565b5050505050505050565b90506020813d8211612532575b8161252360209383612054565b810103126105045751386123df565b3d9150612516565b86513d8a823e3d90fd5b80518210156125585760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820180921161238b57565b1561258257565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b908160e0910312610fd65760c0604051916125d18361201e565b6125da81612177565b83526125e860208201612177565b60208401526125f960408201612177565b604084015261260a6060820161218b565b60608401526080810151608084015260a081015160a0840152015160c082015290565b80916101009283910312610fd657604051918201908282106001600160401b03831117611fd05760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b156126ab57565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b156126ec57565b60405162461bcd60e51b815260206004820152601760248201527f6e6f7420726561636820747269676765722070726963650000000000000000006044820152606490fd5b9190820391821161238b57565b9081610140910312610fd6576040519061275782611fe6565b8051825261276760208201612177565b6020830152604081015160408301526127826060820161218b565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b908160c0910312610fd6576040519060c08201908282106001600160401b03831117611fd05760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b1561283157565b60405162461bcd60e51b815260206004820152601a60248201527f6c7020737461626c6520746f6b656e206e6f7420656e6f7567680000000000006044820152606490fd5b600160ff1b811461238b5760000390565b1561288e57565b60405162461bcd60e51b815260206004820152601960248201527f6c7020696e64657820746f6b656e206e6f7420656e6f756768000000000000006044820152606490fd5b60048210156122b55752565b91909160c08060e083019460018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261292a608082015160808601906122a8565b60a081015160a08501520151910152565b81516001600160a01b0316815260208083015190820152604080830151610160830194939161296d91908401906122a8565b606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080910151910152565b600354906000916040519163f9d244fd60e01b83528060048401526129eb60248401866122a8565b6101a080846044816001600160a01b0387165afa9384156101e95785946137e8575b505060208301516001600160a01b0316156137e15760048510156137cd5784156137ab575b604083810151600480549251632f7ce47360e21b81529081018290529094916001600160a01b031660e082602481845afa9182156104ba57879261378a575b50606082015115613745576006546020848101516040516372c1cc1b60e11b81526001600160a01b039182166004820152921692919081602481865afa90811561335a57899161370b575b506136d257610100602491604051928380926330a66e1560e01b82528b60048301525afa90811561050f5788916136b1575b50612b0760e0850151801590811561368b575b506126a4565b825160c085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018990521515604482015295602087606481865afa96871561335a578997613657575b5086606086015160048110156135bd57158015613640575b156136115760c0860151156135e55760c083015161271080828103116135d157612ba491612b98910383613bec565b60a088015110156126e5565b606086015160048110156135bd57600114613572575b50602085015160408087015160c0880151915163bc95baad60e01b81526001600160a01b0390931660048401526024830152151560448201529161014083606481875afa928315611a93578a9361354b575b50612c4090612c1f8960e0890151613c91565b5060808701519060e088015181519060806020840151930151938c88613922565b501561350f5761012085015115801561348b575b1561345257610160850151159182156133cd575b50501561339457600554604051632500ed8d60e21b8152600481018890529060c090829060249082906001600160a01b03165afa90811561050f578891613365575b506040840151604051906301fd38f760e01b82526004820152602081602481865afa90811561335a578991613328575b508881126132c65760c08501511561328a5750612d01816020612d0d935191015190612731565b60e08501511115612887565b60808301519187831361320c575b50506006546020830151608084015160e085015160c0860151604080516370bf730b60e11b81526001600160a01b039586166004820152602481018c9052604481019490945260648401929092521515608483015260a482018890529097935091879160c49183918b91165af195861561320057809581976131c5575b506003546020840151604085015160c086015160608701516001600160a01b03948516949093169290151560048210156131b15790612e009160e08901519360405195612de48761201e565b86526020860152604085015260016060850152608084016128d3565b8660a083015260c0820152813b1561073957612e3583928392604051948580948193632670e98d60e01b8352600483016128df565b03925af180156104535790829161319d575b50610120840151806130ba575b5061016084015180612fd7575b505087612f47576003546001600160a01b0316803b1561073d57818091602460405180948193633e5005e560e01b83528a60048401525af1801561045357612f33575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b612f1060018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a015260608901906122a8565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b612f3d8291611fbd565b6102395780612ea4565b60018814612f81575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e72979593612ed2565b6003546001600160a01b0316803b1561073d5781809160246040518094819363121494ed60e31b83528a60048401525af1801561045357612fc3575b50612f50565b612fcd8291611fbd565b6102395780612fbd565b600354602086810151604088015161014089015160c08a01519395613079956001600160a01b03908116959416931515919061301290612876565b926040519461302086612002565b85528785015260036040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af180156104535761308f575b8190612e61565b602090813d83116130b3575b6130a58183612054565b81010312610fd65738613088565b503d61309b565b600354602086810151604088015161010089015160c08a0151939561315c956001600160a01b0390811695941693151591906130f590612876565b926040519461310386612002565b85528785015260026040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af1801561045357613172575b8190612e54565b602090813d8311613196575b6131888183612054565b81010312610fd6573861316b565b503d61317e565b6131a690611fbd565b610239578038612e47565b634e487b7160e01b86526021600452602486fd5b955095506040853d6040116131f8575b816131e260409383612054565b8101031261022357602085519501519538612d98565b3d91506131d5565b604051903d90823e3d90fd5b602001516001600160a01b031691613223906138df565b91813b1561050457604051630d172a0160e01b81526001600160a01b0391821660048201529082166024820152604481019290925286908290606490829084905af1801561022e57613277575b8080612d1b565b61328390959195611fbd565b9338613270565b6132ba6132a483606060406132c196015191015190612731565b916132b48960e089015194613d0f565b9061256e565b101561282a565b612d0d565b60c085015115613301576132fa6132e78360206132c1955191015190612731565b6132f560e088015193612876565b61256e565b1015612887565b5061331981606060406132c194015191015190612731565b6132ba8760e087015192613d0f565b90506020813d602011613352575b8161334360209383612054565b81010312611a88575138612cda565b3d9150613336565b6040513d8b823e3d90fd5b613387915060c03d60c01161338d575b61337f8183612054565b8101906127c8565b38612caa565b503d613375565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b51604051630bc628fb60e01b81526004810191909152600360248201529150602090829060449082906001600160a01b03165afa90811561050f578891613418575b50153880612c68565b90506020813d60201161344a575b8161343360209383612054565b81010312610504576134449061218b565b3861340f565b3d9150613426565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b508151604051630bc628fb60e01b81526004810191909152600260248201526020816044816001600160a01b0386165afa908115611a93578a916134d1575b5015612c54565b90506020813d602011613507575b816134ec60209383612054565b81010312613503576134fd9061218b565b386134ca565b8980fd5b3d91506134df565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612c4091935061356b906101403d61014011610e1557610e068183612054565b9290612c0c565b60c08601519197911561359f575060a0850151908082101561359857505b955b38612bba565b9050613590565b60a08601519150808211156135b657505b95613592565b90506135b0565b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8c52601160045260248cfd5b60c083015161271081810181116135d157612ba491613605910183613bec565b60a088015111156126e5565b60c0860151156136305761362b60a08701518210156126e5565b612ba4565b61362b60a08701518211156126e5565b50606086015160048110156135bd57600114612b69565b9096506020813d602011613683575b8161367360209383612054565b81010312611a8857519538612b51565b3d9150613666565b60408401518110159150816136a2575b5038612b01565b9050606083015110153861369b565b6136cc91506101003d610100116111595761114b8183612054565b38612aee565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d60201161373d575b8161372660209383612054565b81010312611a88576137379061218b565b38612abc565b3d9150613719565b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b6137a491925060e03d60e011611071576110638183612054565b9038612a71565b6137c86137c06101808501516002549061256e565b42111561257b565b612a32565b634e487b7160e01b84526021600452602484fd5b5050505050565b908092945081813d83116138d8575b6138018183612054565b810103126106c3576040519182018281106001600160401b038211176138c4576040528051825261383460208201612177565b602083015260408101516040830152606081015160048110156102235760608301526080810151608083015260a081015160a083015261387660c0820161218b565b60c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152913880612a0d565b634e487b7160e01b86526041600452602486fd5b503d6137f7565b600081126138ea5790565b61234690612876565b9190916000838201938412911290801582169115161761238b57565b8181029291811591840414171561238b57565b949196959390926139378160a088015161256e565b978815613ae45761394c9060808801516138f3565b9560008712613a945781613a76575b505060008512613a31576139809061397b84613976886138df565b613d0f565b61390f565b8610159182613a15575b5050156139db5783116139a057612346906138df565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613a27925061397b90613976866138df565b841115388061398a565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b84613a8c939792613a8692613b58565b906138f3565b93388061395b565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b9491969593909260a0860181815110613b1357816139379151612731565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c08101908151908185148015613be4575b613bda576060015115613bb05750805180841115613b98575061234692613b92915190612731565b90613c91565b613bab92915061234693613b9291612731565b612876565b83811115613bc7575061234692613b929151612731565b613bab929150613b929061234694612731565b5050505050600090565b508115613b6a565b9060001981830981830291828083109203918083039214613c86576127109082821115613c49577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b9060001981830981830291828083109203918083039214613cf9576c0c9f2c9cd04674edea400000009082821115613c49577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b906c0c9f2c9cd04674edea40000000906000198284099282810292838086109503948086039514613d945784831115613c49578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505080925015613da2570490565b634e487b7160e01b600052601260045260246000fd5b90612710906000198284099282810292838086109503948086039514613d945784831115613c49578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b600180546003805460408051631ca37ea160e11b8152909593946001600160a01b03949092600492906020908290859082908a165afa908115613fcb57600091613f9a575b50808710156124ff57808211613f92575b50945b858110613e9b5750505050505050565b303b15610fd6578651630fdc860f60e41b81528183820152602490600082820152604490600081838183305af19081613f83575b50613f78578491613ede6122cb565b6308c379a014613f08575b5050613efd57613ef89061237c565b613e8b565b86513d6000823e3d90fd5b613f106122e9565b15613ee9579091506000918787541690813b156101de57606486858094818f95818b9751998a98899763c250985960e01b89528801528601528401525af18015613f6e57613f5f575b80613ee9565b613f6890611fbd565b38613f59565b89513d84823e3d90fd5b5050613ef89061237c565b613f8c90611fbd565b38613ecf565b905038613e88565b906020823d8211613fc3575b81613fb360209383612054565b8101031261023957505138613e77565b3d9150613fa6565b88513d6000823e3d90fd5b9081610160910312610fd65760405190613fef82612002565b80518252613fff60208201612177565b60208301526040810151604083015260608101516004811015610fd65760608301526080810151608083015260a081015160a083015260c081015160c083015261404b60e0820161218b565b60e083015261010061405e81830161218b565b90830152610120808201519083015261407b61014080920161218b565b9082015290565b6003546040516340b4605b60e11b8152600481018390526000602482018190529092916001600160a01b03169061016084604481855afa938415614f1f578194614efc575b5060208401516001600160a01b031615614ef65760608401516004811015610ffe5715614edc575b60408401519360018060a01b036004541660405193632f7ce47360e21b855286600486015260e085602481855afa948515610476578495614ebb575b50600654602084015160408086015160e0870151915163bc95baad60e01b81526001600160a01b039384166004820152602481019190915290151560448201529691169061014087606481855afa96871561022e578697614e98575b5060a087015115614e8d57610100602494604051958680926330a66e1560e01b82528d60048301525afa93841561022e578694614e6a575b506141ee60c086015160a0890151808210600014614e6357505b8060c08801528015908115614e3e57506126a4565b5160e085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018a90521515604482015292602084606481855afa93841561022e578694614e0a575b508360608601516004811015614a2a57158015614df3575b15614dc35761010086015115614da35760c08201516127108082810311614d8f5761427f91612b98910383613bec565b60608601516004811015614a2a57600114614d3e575b506142c9906142a88560c0880151613c91565b5060808601519060c08701518151906080602084015193015193888c613af5565b5050600554604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561022e578691614d1f575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa91821561022e578692614ceb575b50858212614c9c5760e0850151614c6d5761435991506020815191015190612731565b60c08401511190815b614b7957505082608083015113614a84575b6006546020830151608084015160c085015160e08601516040516387d4f0d560e01b81526001600160a01b039485166004820152602481018c9052604481019390935260648301919091521515608482015260a481018490529691606091889160c49183918991165af192831561047657849585978695614a3e575b50606082015160048110156145ec576148fa57506003546001600160a01b0316803b156102235785809160246040518094819363be82e5b160e01b83528860048401525af1801561022e579086916148e6575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156148d2576144ad9086519260c088015194604051966144928861201e565b8752602087015260408601528a6060860152608085016128d3565b60a083015260c0820152813b156104af576144e187928392604051948580948193632670e98d60e01b8352600483016128df565b03925af1801561022e579086916148be575b5050600654602082015160408084015160e0850151915163bc95baad60e01b81526001600160a01b03938416600482015260248101919091529015156044820152916101409183916064918391165afa90811561022e579060a091879161489d575b50015115614600575b602081015160608201516001600160a01b039091169860048210156145ec57916145c36000805160206160738339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a01906122a8565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a015115156040519160208301936bffffffffffffffffffffffff199060601b168452603483015260f81b60548201526035815261465281612039565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611a93578a98614760575b50895b8851811015614751576146a1818a612544565b516060810151156146bc575b506146b79061237c565b61468e565b60018060a01b036003541690608060a0820151910151600481101561473d579082918e933b156101de57606484928361471095604051968795869463c250985960e01b8652600486015260248501906122a8565b8160448401525af1801561045357614729575b506146ad565b61473290611fbd565b611add578a38614723565b634e487b7160e01b8e52602160045260248efd5b5091939650919497939661455e565b9097503d808b833e6147728183612054565b6020828281010312611add578151906001600160401b03821161489957808301601f8385010112156148995781830151906147ac82612075565b936147ba6040519586612054565b8285526020850193828201602060e086028385010101116148955793602085830101945b602060e08602828501010186106147fc57505050505050963861468b565b60e086858501031261489157604051916148158361201e565b61481e87612177565b8352602087015160208401526148366040880161218b565b60408401526148476060880161218b565b6060840152608087015192600484101561488b57602060e09282829660808695015260a08b015160a082015260c08b015160c08201528152019701969250506147de565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b6148b891506101403d61014011610e1557610e068183612054565b38614555565b6148c790611fbd565b6106c35784386144f3565b634e487b7160e01b8a52602160045260248afd5b6148ef90611fbd565b6106c3578438614443565b606082015160048110156145ec5760010361496a57506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e57908691614956575b5050614446565b61495f90611fbd565b6106c357843861494f565b60035490516060830151916001600160a01b03166004831015614a2a57803b15610504579160648892836149b9956040519687958694634136de9f60e01b8652600486015260248501906122a8565b8160448401525af1801561022e57908691614a16575b50506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e57908691614956575050614446565b614a1f90611fbd565b6106c35784386149cf565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011614a7c575b81614a5d60609383612054565b810103126101de578451956040602087015196015196959693386143f0565b3d9150614a50565b600480546040868101519051632f7ce47360e21b81529283015260e090829060249082906001600160a01b03165afa908115610476578491614b5a575b5060065460209091015160055460808501516001600160a01b03928316938316929190911690614af0906138df565b92823b156104af57604051630d172a0160e01b81526001600160a01b03918216600482015291166024820152604481019290925284908290606490829084905af1801561047657908491614b46575b5050614374565b614b4f90611fbd565b610739578238614b3f565b614b73915060e03d60e011611071576110638183612054565b38614ac1565b90945060608392949693015160048110156145ec57813b156104af5785614bba9288928360405180968195829463c1872cf360e01b84528b6004850161235a565b03925af1801561022e57614c5a575b50602081015160608201516001600160a01b039091169660048210156145ec5791614c2d6000805160206160738339815191529896949261016098969460c060e0850151151594015194604051998a5260208a0152604089015260608801906122a8565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b614c6690959195611fbd565b9338614bc9565b614c848160606040614c9494015191015190612731565b916132b48560c088015194613d0f565b109081614362565b60e0850151614cc757614cb9816020614c94935191015190612731565b6132f560c087015193612876565b614cdc91506060604082015191015190612731565b614c948360c086015192613d0f565b9091506020813d602011614d17575b81614d0760209383612054565b8101031261022357519038614336565b3d9150614cfa565b614d38915060c03d60c01161338d5761337f8183612054565b38614306565b936142c9919460e087015115600014614d71575060a08601519080821015614d6a57505b935b90614295565b9050614d62565b60a0870151915080821115614d8857505b93614d64565b9050614d82565b634e487b7160e01b89526011600452602489fd5b60c08201516127108181018111614d8f5761427f91613605910183613bec565b61010086015115614de357614dde60a08701518211156126e5565b61427f565b614dde60a08701518210156126e5565b5060608601516004811015614a2a5760011461424f565b9093506020813d602011614e36575b81614e2660209383612054565b8101031261022357519238614237565b3d9150614e19565b6040870151811015915081614e54575038612b01565b9050606086015110153861369b565b90506141d9565b614e869194506101003d610100116111595761114b8183612054565b92386141bf565b505050505050505050565b614eb49197506101403d61014011610e1557610e068183612054565b9538614187565b614ed591955060e03d60e011611071576110638183612054565b933861412b565b614ef16137c06101208601516002549061256e565b6140ef565b50505050565b614f189194506101603d610160116111bb576111ab8183612054565b92386140c7565b50604051903d90823e3d90fd5b6003546000614f52604051946340b4605b60e11b865284600487015260248601906122a8565b610160846044816001600160a01b0386165afa938415614f1f578194615c32575b5060208401516001600160a01b031615614ef65760608401516004811015610ffe5715615c18575b60408401519360018060a01b036004541660405193632f7ce47360e21b855286600486015260e085602481855afa948515610476578495615bf7575b50600654602084015160408086015160e0870151915163bc95baad60e01b81526001600160a01b039384166004820152602481019190915290151560448201529691169061014087606481855afa96871561022e578697615bd4575b5060a087015115614e8d57610100602494604051958680926330a66e1560e01b82528d60048301525afa93841561022e578694615bb1575b5061509960c086015160a0890151808210600014614e6357508060c08801528015908115614e3e57506126a4565b5160e085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018a90521515604482015292602084606481855afa93841561022e578694615b7d575b508360608601516004811015614a2a57158015615b66575b15615b365761010086015115615b165760c08201516127108082810311614d8f5761512a91612b98910383613bec565b60608601516004811015614a2a57600114615ac5575b50615153906142a88560c0880151613c91565b5050600554604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561022e578691615aa6575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa91821561022e578692615a72575b50858212615a315760e0850151615a12576151e391506020815191015190612731565b60c08401511190815b61594d57505082608083015113615858575b6006546020830151608084015160c085015160e08601516040516387d4f0d560e01b81526001600160a01b039485166004820152602481018c9052604481019390935260648301919091521515608482015260a481018490529691606091889160c49183918991165af192831561047657849585978695615812575b50606082015160048110156145ec576156e257506003546001600160a01b0316803b156102235785809160246040518094819363be82e5b160e01b83528860048401525af1801561022e579086916156ce575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156148d25761531c9086519260c088015194604051966144928861201e565b60a083015260c0820152813b156104af5761535087928392604051948580948193632670e98d60e01b8352600483016128df565b03925af1801561022e579086916156ba575b5050600654602082015160408084015160e0850151915163bc95baad60e01b81526001600160a01b03938416600482015260248101919091529015156044820152916101409183916064918391165afa90811561022e579060a0918791615699575b5001511561543157602081015160608201516001600160a01b039091169860048210156145ec57916145c36000805160206160738339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a01906122a8565b9693979491602088979492970151604089015160e08a015115156040519160208301936bffffffffffffffffffffffff199060601b168452603483015260f81b60548201526035815261548381612039565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611a93578a9861556e575b50895b8851811015614751576154d2818a612544565b516060810151156154ed575b506154e89061237c565b6154bf565b60018060a01b036003541690608060a0820151910151600481101561473d579082918e933b156101de57606484928361554195604051968795869463c250985960e01b8652600486015260248501906122a8565b8160448401525af180156104535761555a575b506154de565b61556390611fbd565b611add578a38615554565b9097503d808b833e6155808183612054565b6020828281010312611add578151906001600160401b03821161489957808301601f8385010112156148995781830151906155ba82612075565b936155c86040519586612054565b8285526020850193828201602060e086028385010101116148955793602085830101945b602060e086028285010101861061560a5750505050505096386154bc565b60e086858501031261489157604051916156238361201e565b61562c87612177565b8352602087015160208401526156446040880161218b565b60408401526156556060880161218b565b6060840152608087015192600484101561488b57602060e09282829660808695015260a08b015160a082015260c08b015160c08201528152019701969250506155ec565b6156b491506101403d61014011610e1557610e068183612054565b386153c4565b6156c390611fbd565b6106c3578438615362565b6156d790611fbd565b6106c35784386152cd565b606082015160048110156145ec5760010361575257506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e5790869161573e575b50506152d0565b61574790611fbd565b6106c3578438615737565b60035490516060830151916001600160a01b03166004831015614a2a57803b15610504579160648892836157a1956040519687958694634136de9f60e01b8652600486015260248501906122a8565b8160448401525af1801561022e579086916157fe575b50506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e5790869161573e5750506152d0565b61580790611fbd565b6106c35784386157b7565b9650935095506060853d606011615850575b8161583160609383612054565b810103126101de5784519560406020870151960151969596933861527a565b3d9150615824565b600480546040868101519051632f7ce47360e21b81529283015260e090829060249082906001600160a01b03165afa90811561047657849161592e575b5060065460209091015160055460808501516001600160a01b039283169383169291909116906158c4906138df565b92823b156104af57604051630d172a0160e01b81526001600160a01b03918216600482015291166024820152604481019290925284908290606490829084905af180156104765790849161591a575b50506151fe565b61592390611fbd565b610739578238615913565b615947915060e03d60e011611071576110638183612054565b38615895565b90945060608392949693015160048110156145ec576001600160a01b0382163b156104af57856159979288928360405180968195829463c1872cf360e01b84528b6004850161235a565b03926001600160a01b03165af1801561022e57614c5a5750602081015160608201516001600160a01b039091169660048210156145ec5791614c2d6000805160206160738339815191529896949261016098969460c060e0850151151594015194604051998a5260208a0152604089015260608801906122a8565b614c848160606040615a2994015191015190612731565b1090816151ec565b60e0850151615a4e57614cb9816020615a29935191015190612731565b615a6391506060604082015191015190612731565b615a298360c086015192613d0f565b9091506020813d602011615a9e575b81615a8e60209383612054565b81010312610223575190386151c0565b3d9150615a81565b615abf915060c03d60c01161338d5761337f8183612054565b38615190565b93615153919460e087015115600014615af8575060a08601519080821015615af157505b935b90615140565b9050615ae9565b60a0870151915080821115615b0f57505b93615aeb565b9050615b09565b60c08201516127108181018111614d8f5761512a91613605910183613bec565b61010086015115615b5657615b5160a08701518211156126e5565b61512a565b615b5160a08701518210156126e5565b5060608601516004811015614a2a576001146150fa565b9093506020813d602011615ba9575b81615b9960209383612054565b81010312610223575192386150e2565b3d9150615b8c565b615bcd9194506101003d610100116111595761114b8183612054565b923861506b565b615bf09197506101403d61014011610e1557610e068183612054565b9538615033565b615c1191955060e03d60e011611071576110638183612054565b9338614fd7565b615c2d6137c06101208601516002549061256e565b614f9b565b615c4e9194506101603d610160116111bb576111ab8183612054565b9238614f73565b600654604051636468402960e11b8152600481018390526001600160a01b03909116929190600061014082602481885afa918215614f1f57819261604f575b5060a08201511561604857600480546040848101519051632f7ce47360e21b8152928301526001600160a01b03169060e081602481855afa9081156106865796602091615d279798859161602a575b50516040868101516060880151915163179a09e360e01b81526001600160a01b03909316600484015260248301521515604482015296879190829081906064820190565b03915afa948515610453578295615ff6575b50615d56615d4c8660a086015186613b58565b60808501516138f3565b9061010060408501516024604051809481936330a66e1560e01b835260048301525afa908115610686578391615fd5575b50828213615fa157505060015b15614ef6576003546020830151604084015160608501511515926001600160a01b039081169216823b156106c357604051638ffb8b2f60e01b81526001600160a01b039190911660048201526024810191909152911515604483015282908290606490829084905af1801561045357615f92575b5090816020615ea760018060a01b036003541660018060a01b038386015116604086015160608701511515615e4060a0890151612876565b9160405193615e4e85612002565b8452868401528660408401528660608401528a608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af19283156132005792615f3c575b50907faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb79936101009392615eea83614082565b60018060a01b036020820151169060408101516060820151151590608060a084015193015193604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152a1565b9291506020833d602011615f8a575b81615f5860209383612054565b81010312610fd657915190917faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb79615eb8565b3d9150615f4b565b615f9b90611fbd565b38615e08565b61271091615fc9615fce9260a0615fc08189015160c08a015190613c91565b91015190613bec565b613db8565b1015615d94565b615ff091506101003d610100116111595761114b8183612054565b38615d87565b9094506020813d602011616022575b8161601260209383612054565b8101031261073d57519338615d39565b3d9150616005565b616042915060e03d8111611071576110638183612054565b38615ce3565b5050509050565b61606b9192506101403d61014011610e1557610e068183612054565b9038615c9456fe9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee0613a26469706673582212202a7f6a179fd1e13dd42aa23a6da4cd1f7c941c7aa262669045ea30cd3a06073564736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081631848effa14611f7a57508063531d87c114611e6a5780635be766c314611e4c578063791b98bc14611e23578063a31a7b4414611dfa578063a776034014611b22578063afb566e414611854578063b298f25a14611684578063be39f3aa14611513578063bfa5ea9914611403578063c04c0f58146112af578063cb0269c914611291578063d4053f7b14611274578063da9d857b14610aea578063e70da1b5146109d9578063ef09314a14610741578063efc95de814610556578063f2ac5dfe1461028e578063f9b6117f14610265578063fc2a5b1d1461023c5763fdc860f01461010857600080fd5b346102395761011636612158565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561022e57859187916101f4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101e95785946101aa575b50506101a26101a793612198565b614f2c565b80f35b90809450813d83116101e2575b6101c18183612054565b810103126101de576101a26101d86101a79461218b565b93610194565b8380fd5b503d6101b7565b6040513d87823e3d90fd5b82819392503d8311610227575b61020b8183612054565b810103126102235761021d8591612177565b38610169565b8580fd5b503d610201565b6040513d88823e3d90fd5b80fd5b50346102395780600319360112610239576004546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576003546040516001600160a01b039091168152602090f35b503461023957608036600319011261023957806001600160401b0360043581811161045e576102c190369060040161208c565b90602435818111610551576102da9036906004016120fa565b90606435908111610551576102f39036906004016120fa565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561050f57839187918a9161051a575b506024604051809481936335d2155560e11b8352336004840152165afa801561050f57869189916104cd575b5091610387600493612198565b8551855114806104c5575b61039b906121d9565b604051635ed6d55b60e11b815292839182905afa9081156104ba578791610481575b501691823b15610223576103ee92869283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af1908115610476578491610462575b5050303b1561045e57610430918391604051938492839263180981eb60e31b845260048401526024830190612216565b038183305af18015610453576104435750f35b61044c90611fbd565b6102395780f35b6040513d84823e3d90fd5b5050fd5b61046b90611fbd565b61045e578238610400565b6040513d86823e3d90fd5b90508481813d83116104b3575b6104988183612054565b810103126104af576104a990612177565b386103bd565b8680fd5b503d61048e565b6040513d89823e3d90fd5b506001610392565b82819392503d8311610508575b6104e48183612054565b81010312610504576004916103876104fc889361218b565b91935061037a565b8780fd5b503d6104da565b6040513d8a823e3d90fd5b92505081813d831161054a575b6105318183612054565b8101031261050457856105448492612177565b3861034e565b503d610527565b505050fd5b50346102395760208060031936011261073d576004356001600160401b038111610739576105889036906004016120fa565b6040516351331ad760e01b815290916001600160a01b03919080826004817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156101e9578592610702575b508060405180936335d2155560e11b8252336004830152816024968792165afa9081156101e95785916106cb575b506106129150612198565b825b82518110156106c7576106278184612544565b51303b156106c35760405190630fdc860f60e41b82526004820152600190818482015285808260448183305af191826106af575b50506106a5576106696122cb565b6308c379a014610691575b610686576106819061237c565b610614565b6040513d85823e3d90fd5b6106996122e9565b15610674575083610674565b506106819061237c565b6106b890611fbd565b61022357853861065b565b8480fd5b8380f35b905081813d83116106fb575b6106e18183612054565b810103126101de576106f56106129161218b565b38610607565b503d6106d7565b9080925081813d8311610732575b61071a8183612054565b810103126106c35761072b90612177565b90386105d9565b503d610710565b8280fd5b5080fd5b50346102395760a036600319011261023957806001600160401b0360043581811161045e5761077490369060040161208c565b9060243590811161045e5761078d9036906004016120fa565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104ba578491849189916109a2575b506024604051809481936335d2155560e11b8352336004840152165afa80156104ba5783918891610964575b509161081d600493612198565b86518651148061095c575b610831906121d9565b604051635ed6d55b60e11b815292839182905afa91821561022e578692610926575b50501691823b156105515761088592849283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af1801561045357610912575b5050303b156102395760405163531d87c160e01b815260643560048201528190818160248183305af18015610453576108fe575b5050303b156102395760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610453576104435750f35b61090790611fbd565b6102395780386108c8565b61091b90611fbd565b610239578038610894565b90809250813d8311610955575b61093d8183612054565b810103126106c35761094e90612177565b3880610853565b503d610933565b506001610828565b82819392503d831161099b575b61097b8183612054565b810103126104af5760049161081d610993859361218b565b919350610810565b503d610971565b92505081813d83116109d2575b6109b98183612054565b810103126104af57826109cc8592612177565b386107e4565b503d6109af565b5034610239576109e836612158565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561022e5785918791610ab4575b506024604051809481936335d2155560e11b8352336004840152165afa9384156101e9578594610a79575b5050610a746101a793612198565b6129c3565b90809450813d8311610aad575b610a908183612054565b810103126101de57610a74610aa76101a79461218b565b93610a66565b503d610a86565b82819392503d8311610ae3575b610acb8183612054565b8101031261022357610add8591612177565b38610a3b565b503d610ac1565b5034610239576080366003190112610239576001600160401b0360043581811161073957610b1c9036906004016120fa565b9060243590811161073957610b359036906004016120fa565b6064359160048310156101de576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101e9578591611235575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa80156101e95785906111fa575b610bd09150612198565b80518251036111c2576003546040516340b4605b60e11b815260443560048201529384916001600160a01b031690610c0c9060248401906122a8565b8160446101609687935afa9384156101e9578594611193575b505061014083015115611160576004805460408581015190516330a66e1560e01b8152928301526001600160a01b03169061010081602481855afa90811561022e57869161112f575b508251919492610c7d83612075565b92610c8b6040519485612054565b808452610c9a601f1991612075565b01875b8181106110d257505060065487946001600160a01b039091169190855b8251871015610e2757610ccd8784612544565b519660405197636468402960e11b8952600489015261014088602481885afa978815610e1c578b98610de9575b50610d05818a612544565b5160a089015110610da457610d1a818a612544565b51606087015110610d5f57610d3d610d5992610d36838c612544565b519061256e565b97610d488289612544565b52610d538188612544565b5061237c565b95610cba565b60405162461bcd60e51b815260206004820152601860248201527f65786365656473206d617820747261646520616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f41444c2073697a65206578636565647320706f736974696f6e000000000000006044820152606490fd5b610e0e9198506101403d61014011610e15575b610e068183612054565b81019061273e565b9638610cfa565b503d610dfc565b6040513d8d823e3d90fd5b908884878c9460c08501510361107857849260e06040860151602460405180948193632f7ce47360e21b835260048301525afa92831561047657610eb2936020928691611049575b505160408781015160e0890151915163179a09e360e01b81526001600160a01b039093166004840152602483015215604482015293849190829081906064820190565b03915afa918215610686578392611012575b50825b8151811015610fe357836020610f7b610ee08486612544565b5160018060a01b03600354169060018060a01b03848201511690604081015190610f1460a060608301511515920151612876565b9160405193610f2285612002565b84528684015286604084015286606084015289608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af19081156101e9578591610fa5575b5090610f9b610fa092614082565b61237c565b610ec7565b919450506020813d602011610fdb575b81610fc260209383612054565b81010312610fd65751859390610f9b610f8d565b600080fd5b3d9150610fb5565b8360608601516004811015610ffe576101a790604435614f2c565b634e487b7160e01b82526021600452602482fd5b925090506020823d602011611041575b8161102f60209383612054565b81010312610fd6578391519085610ec4565b3d9150611022565b61106b915060e03d60e011611071575b6110638183612054565b8101906125b7565b88610e6f565b503d611059565b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b602090604098939698516110e581611fe6565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610c9d565b61115391506101003d61010011611159575b61114b8183612054565b81019061262d565b38610c6e565b503d611141565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b6111b3929450803d106111bb575b6111ab8183612054565b810190613fd6565b913880610c25565b503d6111a1565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d60201161122d575b8161121460209383612054565b810103126106c357611228610bd09161218b565b610bc6565b3d9150611207565b90506020813d60201161126c575b8161125060209383612054565b810103126106c3576020611265602492612177565b9150610b8f565b3d9150611243565b503461023957806003193601126102395760209054604051908152f35b50346102395780600319360112610239576020600254604051908152f35b50346102395760209081600319360112610239576004356001600160401b03811161073d576112e29036906004016120fa565b6040516351331ad760e01b815290926001600160a01b039181816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156104765790829185916113cd575b506024604051809581936335d2155560e11b8352336004840152165afa908115610686578391611396575b5061136b9150612198565b805b82518110156113925780610f9b61138761138d9386612544565b51615c55565b61136d565b5080f35b905081813d83116113c6575b6113ac8183612054565b8101031261073d576113c061136b9161218b565b38611360565b503d6113a2565b82819392503d83116113fc575b6113e48183612054565b810103126101de576113f68291612177565b38611335565b503d6113da565b50346102395760208060031936011261073d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561047657829185916114dd575b506024604051809581936335d2155560e11b8352336004840152165afa9081156106865783916114a6575b8361149b83612198565b6101a7600435613e32565b905081813d83116114d6575b6114bc8183612054565b8101031261073d576114d061149b9161218b565b38611491565b503d6114b2565b82819392503d831161150c575b6114f48183612054565b810103126101de576115068291612177565b38611466565b503d6114ea565b50346102395760208060031936011261073d576040516351331ad760e01b815260048035916001600160a01b039184908290817f000000000000000000000000000000000000000000000000000000000000000086165afa80156101e9578491869161164e575b50602460405180948193637be53ca160e01b8352336004840152165afa908115610476578491611619575b50156115e4577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160025491816002558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d8311611647575b6116308183612054565b810103126101de576116419061218b565b386115a5565b503d611626565b82819392503d831161167d575b6116658183612054565b810103126106c3576116778491612177565b3861157a565b503d61165b565b50346102395760208060031936011261073d576004356001600160401b038111610739576116b69036906004016120fa565b6040516351331ad760e01b815290916001600160a01b03919080826004817f000000000000000000000000000000000000000000000000000000000000000087165afa9182156101e957859261181d575b508060405180936335d2155560e11b8252336004830152816024968792165afa9081156101e95785916117e6575b506117409150612198565b825b82518110156106c7576117558184612544565b51303b156106c3576040519063e70da1b560e01b82526004820152600190818482015285808260448183305af191826117d2575b50506117c8576117976122cb565b6308c379a0146117b4575b610686576117af9061237c565b611742565b6117bc6122e9565b156117a25750836117a2565b506117af9061237c565b6117db90611fbd565b610223578538611789565b905081813d8311611816575b6117fc8183612054565b810103126101de576118106117409161218b565b38611735565b503d6117f2565b9080925081813d831161184d575b6118358183612054565b810103126106c35761184690612177565b9038611707565b503d61182b565b5034610239578060031960e036820112611b1f576001600160401b036004358181116105515761188890369060040161208c565b916024358281116106c3576118a19036906004016120fa565b91606435818111610223576118ba9036906004016120fa565b90608435908111610223576118d39036906004016120fa565b9360c4359360048510156104af576040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa908115610e1c57849184918d91611ae8575b506024604051809481936335d2155560e11b8352336004840152165afa8015610e1c5783918c91611aa6575b5091611971600493612198565b865186511480611a9e575b611985906121d9565b604051635ed6d55b60e11b815292839182905afa918215611a93578a92611a59575b50501691823b15610504576119d992889283604051809681958294631e09986f60e21b8452604435916004850161224a565b03925af190811561022e578691611a45575b5050303b156106c3578492610430611a32611a2394604051978896879663da9d857b60e01b8852608060048901526084880190612216565b91868303016024870152612216565b9160a435604485015260648401906122a8565b611a4e90611fbd565b6106c35784386119eb565b90809250813d8311611a8c575b611a708183612054565b81010312611a8857611a8190612177565b38806119a7565b8880fd5b503d611a66565b6040513d8c823e3d90fd5b50600161197c565b82819392503d8311611ae1575b611abd8183612054565b81010312611add57600491611971611ad5859361218b565b919350611964565b8a80fd5b503d611ab3565b92505081813d8311611b18575b611aff8183612054565b81010312611add5782611b128592612177565b38611938565b503d611af5565b50fd5b50346102395760a0366003190112610239576001600160401b039060043582811161073d57611b5590369060040161208c565b9160243581811161073957611b6e9036906004016120fa565b6064358281116101de57611b869036906004016120fa565b916084359081116101de57611b9f9036906004016120fa565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561050f57839187918a91611dc3575b506024604051809481936335d2155560e11b8352336004840152165afa90811561050f579086918991611d85575b5091611c35600493612198565b895185511480611d7d575b611c49906121d9565b604051635ed6d55b60e11b815292839182905afa9081156104ba578791611d48575b501690813b1561022357958591611c9d9783604051809a81958294631e09986f60e21b8452604435916004850161224a565b03925af1801561047657611d34575b839450303b156105515783611cdc916040518093819263594c792d60e11b83528660048401526024830190612216565b038183305af1908115610476578491611d20575b5050303b1561045e576104309183916040519384928392631df92bbd60e31b845260048401526024830190612216565b611d2990611fbd565b61045e578238611cf0565b929093611d4090611fbd565b918390611cac565b90508481813d8311611d76575b611d5f8183612054565b810103126104af57611d7090612177565b38611c6b565b503d611d55565b506001611c40565b82819392503d8311611dbc575b611d9c8183612054565b8101031261050457600491611c35611db4889361218b565b919350611c28565b503d611d92565b92505081813d8311611df3575b611dda8183612054565b810103126105045785611ded8492612177565b38611bfa565b503d611dd0565b50346102395780600319360112610239576005546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576006546040516001600160a01b039091168152602090f35b50346102395780600319360112610239576020600154604051908152f35b50346102395760208060031936011261073d576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa80156104765782918591611f44575b506024604051809581936335d2155560e11b8352336004840152165afa908115610686578391611f0d575b83611f0283612198565b6101a76004356123a1565b905081813d8311611f3d575b611f238183612054565b8101031261073d57611f37611f029161218b565b38611ef8565b503d611f19565b82819392503d8311611f73575b611f5b8183612054565b810103126101de57611f6d8291612177565b38611ecd565b503d611f51565b90503461073d578160031936011261073d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160401b038111611fd057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b03821117611fd057604052565b61016081019081106001600160401b03821117611fd057604052565b60e081019081106001600160401b03821117611fd057604052565b606081019081106001600160401b03821117611fd057604052565b90601f801991011681019081106001600160401b03821117611fd057604052565b6001600160401b038111611fd05760051b60200190565b81601f82011215610fd6578035916120a383612075565b926120b16040519485612054565b808452602092838086019260051b820101928311610fd6578301905b8282106120db575050505090565b81356001600160a01b0381168103610fd65781529083019083016120cd565b81601f82011215610fd65780359161211183612075565b9261211f6040519485612054565b808452602092838086019260051b820101928311610fd6578301905b828210612149575050505090565b8135815290830190830161213b565b6040906003190112610fd657600435906024356004811015610fd65790565b51906001600160a01b0382168203610fd657565b51908115158203610fd657565b1561219f57565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b156121e057565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b828110612236575050505090565b835185529381019392810192600101612228565b9392916060850191606086528051809352608086019260208092019060005b81811061228b575050508583039086015260409161228691612216565b930152565b82516001600160a01b031686529483019491830191600101612269565b9060048210156122b55752565b634e487b7160e01b600052602160045260246000fd5b60009060033d116122d857565b905060046000803e60005160e01c90565b600060443d1061234657604051600319913d83016004833e81516001600160401b03918282113d60248401111761234957818401948551938411612351573d85010160208487010111612349575061234692910160200190612054565b90565b949350505050565b50949350505050565b919261237560409295946060850196855260208501906122a8565b1515910152565b600019811461238b5760010190565b634e487b7160e01b600052601160045260246000fd5b60009081549060018060a01b036003602082825416936040948551928380926386249bab60e01b825260049586915afa90811561253a578891612509575b50808710156124ff578082116124f7575b50945b8581106124035750505050505050565b303b156104af57845163e70da1b560e01b8152818382015260249088828201526044908981838183305af190816124e8575b506124dd576001916124456122cb565b6308c379a01461246e575b50506124645761245f9061237c565b6123f3565b84513d88823e3d90fd5b6124766122e9565b156124505790915088918686541690813b15611add576064868c809460018995838f51998a98899763c250985960e01b89528801528601528401525af180156124d3576124c4575b80612450565b6124cd90611fbd565b386124be565b87513d8b823e3d90fd5b505061245f9061237c565b6124f190611fbd565b38612435565b9050386123f0565b5050505050505050565b90506020813d8211612532575b8161252360209383612054565b810103126105045751386123df565b3d9150612516565b86513d8a823e3d90fd5b80518210156125585760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820180921161238b57565b1561258257565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b908160e0910312610fd65760c0604051916125d18361201e565b6125da81612177565b83526125e860208201612177565b60208401526125f960408201612177565b604084015261260a6060820161218b565b60608401526080810151608084015260a081015160a0840152015160c082015290565b80916101009283910312610fd657604051918201908282106001600160401b03831117611fd05760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b156126ab57565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b156126ec57565b60405162461bcd60e51b815260206004820152601760248201527f6e6f7420726561636820747269676765722070726963650000000000000000006044820152606490fd5b9190820391821161238b57565b9081610140910312610fd6576040519061275782611fe6565b8051825261276760208201612177565b6020830152604081015160408301526127826060820161218b565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b908160c0910312610fd6576040519060c08201908282106001600160401b03831117611fd05760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b1561283157565b60405162461bcd60e51b815260206004820152601a60248201527f6c7020737461626c6520746f6b656e206e6f7420656e6f7567680000000000006044820152606490fd5b600160ff1b811461238b5760000390565b1561288e57565b60405162461bcd60e51b815260206004820152601960248201527f6c7020696e64657820746f6b656e206e6f7420656e6f756768000000000000006044820152606490fd5b60048210156122b55752565b91909160c08060e083019460018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261292a608082015160808601906122a8565b60a081015160a08501520151910152565b81516001600160a01b0316815260208083015190820152604080830151610160830194939161296d91908401906122a8565b606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080910151910152565b600354906000916040519163f9d244fd60e01b83528060048401526129eb60248401866122a8565b6101a080846044816001600160a01b0387165afa9384156101e95785946137e8575b505060208301516001600160a01b0316156137e15760048510156137cd5784156137ab575b604083810151600480549251632f7ce47360e21b81529081018290529094916001600160a01b031660e082602481845afa9182156104ba57879261378a575b50606082015115613745576006546020848101516040516372c1cc1b60e11b81526001600160a01b039182166004820152921692919081602481865afa90811561335a57899161370b575b506136d257610100602491604051928380926330a66e1560e01b82528b60048301525afa90811561050f5788916136b1575b50612b0760e0850151801590811561368b575b506126a4565b825160c085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018990521515604482015295602087606481865afa96871561335a578997613657575b5086606086015160048110156135bd57158015613640575b156136115760c0860151156135e55760c083015161271080828103116135d157612ba491612b98910383613bec565b60a088015110156126e5565b606086015160048110156135bd57600114613572575b50602085015160408087015160c0880151915163bc95baad60e01b81526001600160a01b0390931660048401526024830152151560448201529161014083606481875afa928315611a93578a9361354b575b50612c4090612c1f8960e0890151613c91565b5060808701519060e088015181519060806020840151930151938c88613922565b501561350f5761012085015115801561348b575b1561345257610160850151159182156133cd575b50501561339457600554604051632500ed8d60e21b8152600481018890529060c090829060249082906001600160a01b03165afa90811561050f578891613365575b506040840151604051906301fd38f760e01b82526004820152602081602481865afa90811561335a578991613328575b508881126132c65760c08501511561328a5750612d01816020612d0d935191015190612731565b60e08501511115612887565b60808301519187831361320c575b50506006546020830151608084015160e085015160c0860151604080516370bf730b60e11b81526001600160a01b039586166004820152602481018c9052604481019490945260648401929092521515608483015260a482018890529097935091879160c49183918b91165af195861561320057809581976131c5575b506003546020840151604085015160c086015160608701516001600160a01b03948516949093169290151560048210156131b15790612e009160e08901519360405195612de48761201e565b86526020860152604085015260016060850152608084016128d3565b8660a083015260c0820152813b1561073957612e3583928392604051948580948193632670e98d60e01b8352600483016128df565b03925af180156104535790829161319d575b50610120840151806130ba575b5061016084015180612fd7575b505087612f47576003546001600160a01b0316803b1561073d57818091602460405180948193633e5005e560e01b83528a60048401525af1801561045357612f33575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b612f1060018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a015260608901906122a8565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b612f3d8291611fbd565b6102395780612ea4565b60018814612f81575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e72979593612ed2565b6003546001600160a01b0316803b1561073d5781809160246040518094819363121494ed60e31b83528a60048401525af1801561045357612fc3575b50612f50565b612fcd8291611fbd565b6102395780612fbd565b600354602086810151604088015161014089015160c08a01519395613079956001600160a01b03908116959416931515919061301290612876565b926040519461302086612002565b85528785015260036040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af180156104535761308f575b8190612e61565b602090813d83116130b3575b6130a58183612054565b81010312610fd65738613088565b503d61309b565b600354602086810151604088015161010089015160c08a0151939561315c956001600160a01b0390811695941693151591906130f590612876565b926040519461310386612002565b85528785015260026040850152876060850152608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af1801561045357613172575b8190612e54565b602090813d8311613196575b6131888183612054565b81010312610fd6573861316b565b503d61317e565b6131a690611fbd565b610239578038612e47565b634e487b7160e01b86526021600452602486fd5b955095506040853d6040116131f8575b816131e260409383612054565b8101031261022357602085519501519538612d98565b3d91506131d5565b604051903d90823e3d90fd5b602001516001600160a01b031691613223906138df565b91813b1561050457604051630d172a0160e01b81526001600160a01b0391821660048201529082166024820152604481019290925286908290606490829084905af1801561022e57613277575b8080612d1b565b61328390959195611fbd565b9338613270565b6132ba6132a483606060406132c196015191015190612731565b916132b48960e089015194613d0f565b9061256e565b101561282a565b612d0d565b60c085015115613301576132fa6132e78360206132c1955191015190612731565b6132f560e088015193612876565b61256e565b1015612887565b5061331981606060406132c194015191015190612731565b6132ba8760e087015192613d0f565b90506020813d602011613352575b8161334360209383612054565b81010312611a88575138612cda565b3d9150613336565b6040513d8b823e3d90fd5b613387915060c03d60c01161338d575b61337f8183612054565b8101906127c8565b38612caa565b503d613375565b60405162461bcd60e51b8152602060048201526011602482015270736c20616c72656164792065786973747360781b6044820152606490fd5b51604051630bc628fb60e01b81526004810191909152600360248201529150602090829060449082906001600160a01b03165afa90811561050f578891613418575b50153880612c68565b90506020813d60201161344a575b8161343360209383612054565b81010312610504576134449061218b565b3861340f565b3d9150613426565b60405162461bcd60e51b8152602060048201526011602482015270747020616c72656164792065786973747360781b6044820152606490fd5b508151604051630bc628fb60e01b81526004810191909152600260248201526020816044816001600160a01b0386165afa908115611a93578a916134d1575b5015612c54565b90506020813d602011613507575b816134ec60209383612054565b81010312613503576134fd9061218b565b386134ca565b8980fd5b3d91506134df565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b612c4091935061356b906101403d61014011610e1557610e068183612054565b9290612c0c565b60c08601519197911561359f575060a0850151908082101561359857505b955b38612bba565b9050613590565b60a08601519150808211156135b657505b95613592565b90506135b0565b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8c52601160045260248cfd5b60c083015161271081810181116135d157612ba491613605910183613bec565b60a088015111156126e5565b60c0860151156136305761362b60a08701518210156126e5565b612ba4565b61362b60a08701518211156126e5565b50606086015160048110156135bd57600114612b69565b9096506020813d602011613683575b8161367360209383612054565b81010312611a8857519538612b51565b3d9150613666565b60408401518110159150816136a2575b5038612b01565b9050606083015110153861369b565b6136cc91506101003d610100116111595761114b8183612054565b38612aee565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d60201161373d575b8161372660209383612054565b81010312611a88576137379061218b565b38612abc565b3d9150613719565b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b6137a491925060e03d60e011611071576110638183612054565b9038612a71565b6137c86137c06101808501516002549061256e565b42111561257b565b612a32565b634e487b7160e01b84526021600452602484fd5b5050505050565b908092945081813d83116138d8575b6138018183612054565b810103126106c3576040519182018281106001600160401b038211176138c4576040528051825261383460208201612177565b602083015260408101516040830152606081015160048110156102235760608301526080810151608083015260a081015160a083015261387660c0820161218b565b60c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152913880612a0d565b634e487b7160e01b86526041600452602486fd5b503d6137f7565b600081126138ea5790565b61234690612876565b9190916000838201938412911290801582169115161761238b57565b8181029291811591840414171561238b57565b949196959390926139378160a088015161256e565b978815613ae45761394c9060808801516138f3565b9560008712613a945781613a76575b505060008512613a31576139809061397b84613976886138df565b613d0f565b61390f565b8610159182613a15575b5050156139db5783116139a057612346906138df565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b613a27925061397b90613976866138df565b841115388061398a565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b84613a8c939792613a8692613b58565b906138f3565b93388061395b565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b9491969593909260a0860181815110613b1357816139379151612731565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c08101908151908185148015613be4575b613bda576060015115613bb05750805180841115613b98575061234692613b92915190612731565b90613c91565b613bab92915061234693613b9291612731565b612876565b83811115613bc7575061234692613b929151612731565b613bab929150613b929061234694612731565b5050505050600090565b508115613b6a565b9060001981830981830291828083109203918083039214613c86576127109082821115613c49577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b9060001981830981830291828083109203918083039214613cf9576c0c9f2c9cd04674edea400000009082821115613c49577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b906c0c9f2c9cd04674edea40000000906000198284099282810292838086109503948086039514613d945784831115613c49578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505080925015613da2570490565b634e487b7160e01b600052601260045260246000fd5b90612710906000198284099282810292838086109503948086039514613d945784831115613c49578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b600180546003805460408051631ca37ea160e11b8152909593946001600160a01b03949092600492906020908290859082908a165afa908115613fcb57600091613f9a575b50808710156124ff57808211613f92575b50945b858110613e9b5750505050505050565b303b15610fd6578651630fdc860f60e41b81528183820152602490600082820152604490600081838183305af19081613f83575b50613f78578491613ede6122cb565b6308c379a014613f08575b5050613efd57613ef89061237c565b613e8b565b86513d6000823e3d90fd5b613f106122e9565b15613ee9579091506000918787541690813b156101de57606486858094818f95818b9751998a98899763c250985960e01b89528801528601528401525af18015613f6e57613f5f575b80613ee9565b613f6890611fbd565b38613f59565b89513d84823e3d90fd5b5050613ef89061237c565b613f8c90611fbd565b38613ecf565b905038613e88565b906020823d8211613fc3575b81613fb360209383612054565b8101031261023957505138613e77565b3d9150613fa6565b88513d6000823e3d90fd5b9081610160910312610fd65760405190613fef82612002565b80518252613fff60208201612177565b60208301526040810151604083015260608101516004811015610fd65760608301526080810151608083015260a081015160a083015260c081015160c083015261404b60e0820161218b565b60e083015261010061405e81830161218b565b90830152610120808201519083015261407b61014080920161218b565b9082015290565b6003546040516340b4605b60e11b8152600481018390526000602482018190529092916001600160a01b03169061016084604481855afa938415614f1f578194614efc575b5060208401516001600160a01b031615614ef65760608401516004811015610ffe5715614edc575b60408401519360018060a01b036004541660405193632f7ce47360e21b855286600486015260e085602481855afa948515610476578495614ebb575b50600654602084015160408086015160e0870151915163bc95baad60e01b81526001600160a01b039384166004820152602481019190915290151560448201529691169061014087606481855afa96871561022e578697614e98575b5060a087015115614e8d57610100602494604051958680926330a66e1560e01b82528d60048301525afa93841561022e578694614e6a575b506141ee60c086015160a0890151808210600014614e6357505b8060c08801528015908115614e3e57506126a4565b5160e085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018a90521515604482015292602084606481855afa93841561022e578694614e0a575b508360608601516004811015614a2a57158015614df3575b15614dc35761010086015115614da35760c08201516127108082810311614d8f5761427f91612b98910383613bec565b60608601516004811015614a2a57600114614d3e575b506142c9906142a88560c0880151613c91565b5060808601519060c08701518151906080602084015193015193888c613af5565b5050600554604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561022e578691614d1f575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa91821561022e578692614ceb575b50858212614c9c5760e0850151614c6d5761435991506020815191015190612731565b60c08401511190815b614b7957505082608083015113614a84575b6006546020830151608084015160c085015160e08601516040516387d4f0d560e01b81526001600160a01b039485166004820152602481018c9052604481019390935260648301919091521515608482015260a481018490529691606091889160c49183918991165af192831561047657849585978695614a3e575b50606082015160048110156145ec576148fa57506003546001600160a01b0316803b156102235785809160246040518094819363be82e5b160e01b83528860048401525af1801561022e579086916148e6575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156148d2576144ad9086519260c088015194604051966144928861201e565b8752602087015260408601528a6060860152608085016128d3565b60a083015260c0820152813b156104af576144e187928392604051948580948193632670e98d60e01b8352600483016128df565b03925af1801561022e579086916148be575b5050600654602082015160408084015160e0850151915163bc95baad60e01b81526001600160a01b03938416600482015260248101919091529015156044820152916101409183916064918391165afa90811561022e579060a091879161489d575b50015115614600575b602081015160608201516001600160a01b039091169860048210156145ec57916145c36000805160206160738339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a01906122a8565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a015115156040519160208301936bffffffffffffffffffffffff199060601b168452603483015260f81b60548201526035815261465281612039565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611a93578a98614760575b50895b8851811015614751576146a1818a612544565b516060810151156146bc575b506146b79061237c565b61468e565b60018060a01b036003541690608060a0820151910151600481101561473d579082918e933b156101de57606484928361471095604051968795869463c250985960e01b8652600486015260248501906122a8565b8160448401525af1801561045357614729575b506146ad565b61473290611fbd565b611add578a38614723565b634e487b7160e01b8e52602160045260248efd5b5091939650919497939661455e565b9097503d808b833e6147728183612054565b6020828281010312611add578151906001600160401b03821161489957808301601f8385010112156148995781830151906147ac82612075565b936147ba6040519586612054565b8285526020850193828201602060e086028385010101116148955793602085830101945b602060e08602828501010186106147fc57505050505050963861468b565b60e086858501031261489157604051916148158361201e565b61481e87612177565b8352602087015160208401526148366040880161218b565b60408401526148476060880161218b565b6060840152608087015192600484101561488b57602060e09282829660808695015260a08b015160a082015260c08b015160c08201528152019701969250506147de565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b6148b891506101403d61014011610e1557610e068183612054565b38614555565b6148c790611fbd565b6106c35784386144f3565b634e487b7160e01b8a52602160045260248afd5b6148ef90611fbd565b6106c3578438614443565b606082015160048110156145ec5760010361496a57506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e57908691614956575b5050614446565b61495f90611fbd565b6106c357843861494f565b60035490516060830151916001600160a01b03166004831015614a2a57803b15610504579160648892836149b9956040519687958694634136de9f60e01b8652600486015260248501906122a8565b8160448401525af1801561022e57908691614a16575b50506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e57908691614956575050614446565b614a1f90611fbd565b6106c35784386149cf565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011614a7c575b81614a5d60609383612054565b810103126101de578451956040602087015196015196959693386143f0565b3d9150614a50565b600480546040868101519051632f7ce47360e21b81529283015260e090829060249082906001600160a01b03165afa908115610476578491614b5a575b5060065460209091015160055460808501516001600160a01b03928316938316929190911690614af0906138df565b92823b156104af57604051630d172a0160e01b81526001600160a01b03918216600482015291166024820152604481019290925284908290606490829084905af1801561047657908491614b46575b5050614374565b614b4f90611fbd565b610739578238614b3f565b614b73915060e03d60e011611071576110638183612054565b38614ac1565b90945060608392949693015160048110156145ec57813b156104af5785614bba9288928360405180968195829463c1872cf360e01b84528b6004850161235a565b03925af1801561022e57614c5a575b50602081015160608201516001600160a01b039091169660048210156145ec5791614c2d6000805160206160738339815191529896949261016098969460c060e0850151151594015194604051998a5260208a0152604089015260608801906122a8565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b614c6690959195611fbd565b9338614bc9565b614c848160606040614c9494015191015190612731565b916132b48560c088015194613d0f565b109081614362565b60e0850151614cc757614cb9816020614c94935191015190612731565b6132f560c087015193612876565b614cdc91506060604082015191015190612731565b614c948360c086015192613d0f565b9091506020813d602011614d17575b81614d0760209383612054565b8101031261022357519038614336565b3d9150614cfa565b614d38915060c03d60c01161338d5761337f8183612054565b38614306565b936142c9919460e087015115600014614d71575060a08601519080821015614d6a57505b935b90614295565b9050614d62565b60a0870151915080821115614d8857505b93614d64565b9050614d82565b634e487b7160e01b89526011600452602489fd5b60c08201516127108181018111614d8f5761427f91613605910183613bec565b61010086015115614de357614dde60a08701518211156126e5565b61427f565b614dde60a08701518210156126e5565b5060608601516004811015614a2a5760011461424f565b9093506020813d602011614e36575b81614e2660209383612054565b8101031261022357519238614237565b3d9150614e19565b6040870151811015915081614e54575038612b01565b9050606086015110153861369b565b90506141d9565b614e869194506101003d610100116111595761114b8183612054565b92386141bf565b505050505050505050565b614eb49197506101403d61014011610e1557610e068183612054565b9538614187565b614ed591955060e03d60e011611071576110638183612054565b933861412b565b614ef16137c06101208601516002549061256e565b6140ef565b50505050565b614f189194506101603d610160116111bb576111ab8183612054565b92386140c7565b50604051903d90823e3d90fd5b6003546000614f52604051946340b4605b60e11b865284600487015260248601906122a8565b610160846044816001600160a01b0386165afa938415614f1f578194615c32575b5060208401516001600160a01b031615614ef65760608401516004811015610ffe5715615c18575b60408401519360018060a01b036004541660405193632f7ce47360e21b855286600486015260e085602481855afa948515610476578495615bf7575b50600654602084015160408086015160e0870151915163bc95baad60e01b81526001600160a01b039384166004820152602481019190915290151560448201529691169061014087606481855afa96871561022e578697615bd4575b5060a087015115614e8d57610100602494604051958680926330a66e1560e01b82528d60048301525afa93841561022e578694615bb1575b5061509960c086015160a0890151808210600014614e6357508060c08801528015908115614e3e57506126a4565b5160e085015160405163179a09e360e01b81526001600160a01b039092166004830152602482018a90521515604482015292602084606481855afa93841561022e578694615b7d575b508360608601516004811015614a2a57158015615b66575b15615b365761010086015115615b165760c08201516127108082810311614d8f5761512a91612b98910383613bec565b60608601516004811015614a2a57600114615ac5575b50615153906142a88560c0880151613c91565b5050600554604051632500ed8d60e21b8152600481018a90529060c090829060249082906001600160a01b03165afa90811561022e578691615aa6575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa91821561022e578692615a72575b50858212615a315760e0850151615a12576151e391506020815191015190612731565b60c08401511190815b61594d57505082608083015113615858575b6006546020830151608084015160c085015160e08601516040516387d4f0d560e01b81526001600160a01b039485166004820152602481018c9052604481019390935260648301919091521515608482015260a481018490529691606091889160c49183918991165af192831561047657849585978695615812575b50606082015160048110156145ec576156e257506003546001600160a01b0316803b156102235785809160246040518094819363be82e5b160e01b83528860048401525af1801561022e579086916156ce575b50505b60018060a01b036003541660018060a01b03602083015116604083015160e08401511515606085015160048110156148d25761531c9086519260c088015194604051966144928861201e565b60a083015260c0820152813b156104af5761535087928392604051948580948193632670e98d60e01b8352600483016128df565b03925af1801561022e579086916156ba575b5050600654602082015160408084015160e0850151915163bc95baad60e01b81526001600160a01b03938416600482015260248101919091529015156044820152916101409183916064918391165afa90811561022e579060a0918791615699575b5001511561543157602081015160608201516001600160a01b039091169860048210156145ec57916145c36000805160206160738339815191529a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a01906122a8565b9693979491602088979492970151604089015160e08a015115156040519160208301936bffffffffffffffffffffffff199060601b168452603483015260f81b60548201526035815261548381612039565b519020968960018060a01b0360035416986024604051809b8193634cc42b5160e01b835260048301525afa978815611a93578a9861556e575b50895b8851811015614751576154d2818a612544565b516060810151156154ed575b506154e89061237c565b6154bf565b60018060a01b036003541690608060a0820151910151600481101561473d579082918e933b156101de57606484928361554195604051968795869463c250985960e01b8652600486015260248501906122a8565b8160448401525af180156104535761555a575b506154de565b61556390611fbd565b611add578a38615554565b9097503d808b833e6155808183612054565b6020828281010312611add578151906001600160401b03821161489957808301601f8385010112156148995781830151906155ba82612075565b936155c86040519586612054565b8285526020850193828201602060e086028385010101116148955793602085830101945b602060e086028285010101861061560a5750505050505096386154bc565b60e086858501031261489157604051916156238361201e565b61562c87612177565b8352602087015160208401526156446040880161218b565b60408401526156556060880161218b565b6060840152608087015192600484101561488b57602060e09282829660808695015260a08b015160a082015260c08b015160c08201528152019701969250506155ec565b6156b491506101403d61014011610e1557610e068183612054565b386153c4565b6156c390611fbd565b6106c3578438615362565b6156d790611fbd565b6106c35784386152cd565b606082015160048110156145ec5760010361575257506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e5790869161573e575b50506152d0565b61574790611fbd565b6106c3578438615737565b60035490516060830151916001600160a01b03166004831015614a2a57803b15610504579160648892836157a1956040519687958694634136de9f60e01b8652600486015260248501906122a8565b8160448401525af1801561022e579086916157fe575b50506003546001600160a01b0316803b15610223578580916024604051809481936304d3cb8160e41b83528860048401525af1801561022e5790869161573e5750506152d0565b61580790611fbd565b6106c35784386157b7565b9650935095506060853d606011615850575b8161583160609383612054565b810103126101de5784519560406020870151960151969596933861527a565b3d9150615824565b600480546040868101519051632f7ce47360e21b81529283015260e090829060249082906001600160a01b03165afa90811561047657849161592e575b5060065460209091015160055460808501516001600160a01b039283169383169291909116906158c4906138df565b92823b156104af57604051630d172a0160e01b81526001600160a01b03918216600482015291166024820152604481019290925284908290606490829084905af180156104765790849161591a575b50506151fe565b61592390611fbd565b610739578238615913565b615947915060e03d60e011611071576110638183612054565b38615895565b90945060608392949693015160048110156145ec576001600160a01b0382163b156104af57856159979288928360405180968195829463c1872cf360e01b84528b6004850161235a565b03926001600160a01b03165af1801561022e57614c5a5750602081015160608201516001600160a01b039091169660048210156145ec5791614c2d6000805160206160738339815191529896949261016098969460c060e0850151151594015194604051998a5260208a0152604089015260608801906122a8565b614c848160606040615a2994015191015190612731565b1090816151ec565b60e0850151615a4e57614cb9816020615a29935191015190612731565b615a6391506060604082015191015190612731565b615a298360c086015192613d0f565b9091506020813d602011615a9e575b81615a8e60209383612054565b81010312610223575190386151c0565b3d9150615a81565b615abf915060c03d60c01161338d5761337f8183612054565b38615190565b93615153919460e087015115600014615af8575060a08601519080821015615af157505b935b90615140565b9050615ae9565b60a0870151915080821115615b0f57505b93615aeb565b9050615b09565b60c08201516127108181018111614d8f5761512a91613605910183613bec565b61010086015115615b5657615b5160a08701518211156126e5565b61512a565b615b5160a08701518210156126e5565b5060608601516004811015614a2a576001146150fa565b9093506020813d602011615ba9575b81615b9960209383612054565b81010312610223575192386150e2565b3d9150615b8c565b615bcd9194506101003d610100116111595761114b8183612054565b923861506b565b615bf09197506101403d61014011610e1557610e068183612054565b9538615033565b615c1191955060e03d60e011611071576110638183612054565b9338614fd7565b615c2d6137c06101208601516002549061256e565b614f9b565b615c4e9194506101603d610160116111bb576111ab8183612054565b9238614f73565b600654604051636468402960e11b8152600481018390526001600160a01b03909116929190600061014082602481885afa918215614f1f57819261604f575b5060a08201511561604857600480546040848101519051632f7ce47360e21b8152928301526001600160a01b03169060e081602481855afa9081156106865796602091615d279798859161602a575b50516040868101516060880151915163179a09e360e01b81526001600160a01b03909316600484015260248301521515604482015296879190829081906064820190565b03915afa948515610453578295615ff6575b50615d56615d4c8660a086015186613b58565b60808501516138f3565b9061010060408501516024604051809481936330a66e1560e01b835260048301525afa908115610686578391615fd5575b50828213615fa157505060015b15614ef6576003546020830151604084015160608501511515926001600160a01b039081169216823b156106c357604051638ffb8b2f60e01b81526001600160a01b039190911660048201526024810191909152911515604483015282908290606490829084905af1801561045357615f92575b5090816020615ea760018060a01b036003541660018060a01b038386015116604086015160608701511515615e4060a0890151612876565b9160405193615e4e85612002565b8452868401528660408401528660608401528a608084015260a083015260c08201528460e08201528461010082015284610120820152846101408201526040519485809481936302b9d03760e11b83526004830161293b565b03925af19283156132005792615f3c575b50907faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb79936101009392615eea83614082565b60018060a01b036020820151169060408101516060820151151590608060a084015193015193604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152a1565b9291506020833d602011615f8a575b81615f5860209383612054565b81010312610fd657915190917faac40228c5d58dfc6360c331165fa5a8fa13f51c87a6124cb1999a4c6117bb79615eb8565b3d9150615f4b565b615f9b90611fbd565b38615e08565b61271091615fc9615fce9260a0615fc08189015160c08a015190613c91565b91015190613bec565b613db8565b1015615d94565b615ff091506101003d610100116111595761114b8183612054565b38615d87565b9094506020813d602011616022575b8161601260209383612054565b8101031261073d57519338615d39565b3d9150616005565b616042915060e03d8111611071576110638183612054565b38615ce3565b5050509050565b61606b9192506101403d61014011610e1557610e068183612054565b9038615c9456fe9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee0613a26469706673582212202a7f6a179fd1e13dd42aa23a6da4cd1f7c941c7aa262669045ea30cd3a06073564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25193,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "increaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25196,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "decreaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25199,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "maxTimeDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25205,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "orderManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOrderManager)17081"
      },
      {
        "astId": 25208,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "pairInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPairInfo)24068"
      },
      {
        "astId": 25211,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "pairVault",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPairVault)24214"
      },
      {
        "astId": 25214,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "positionManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPositionManager)17384"
      }
    ],
    "types": {
      "t_contract(IOrderManager)17081": {
        "encoding": "inplace",
        "label": "contract IOrderManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPairInfo)24068": {
        "encoding": "inplace",
        "label": "contract IPairInfo",
        "numberOfBytes": "20"
      },
      "t_contract(IPairVault)24214": {
        "encoding": "inplace",
        "label": "contract IPairVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)17384": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}