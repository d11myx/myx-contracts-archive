{
  "address": "0x5302E909d1e93e30F05B5D6Eea766363D14F9892",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IOrderManager",
          "name": "_orderManager",
          "type": "address"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "_positionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateExecuteRouter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeADLAndDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderManager",
      "outputs": [
        {
          "internalType": "contract IOrderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "setPricesAndExecuteADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "increaseOrderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decreaseOrderIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPricesAndExecuteLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increaseEndIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseEndIndex",
          "type": "uint256"
        }
      ],
      "name": "setPricesAndExecuteMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "setPricesAndLiquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad86984d30acc83de507057908d913f5334d5e1b8c119280e730a866ad7c1cda",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5302E909d1e93e30F05B5D6Eea766363D14F9892",
    "transactionIndex": 0,
    "gasUsed": "1910267",
    "logsBloom": "0x
    "blockHash": "0x616d573a789bc36eb8cfeb83dff8cc0eccb6ad3b17f38e74f8ffbe679bf6316e",
    "transactionHash": "0xad86984d30acc83de507057908d913f5334d5e1b8c119280e730a866ad7c1cda",
    "logs": [],
    "blockNumber": 155,
    "cumulativeGasUsed": "1910267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD471836031dc5108809D173A067e8486B9047A3",
    "0x6C2d83262fF84cBaDb3e416D527403135D757892",
    "0xFD6F7A6a5c21A3f503EBaE7a473639974379c351"
  ],
  "numDeployments": 1,
  "solcInputHash": "dbd8b9bdf15109328226d3d4a4bdaf81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IOrderManager\",\"name\":\"_orderManager\",\"type\":\"address\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"_positionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateExecuteRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"executeADLAndDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderManager\",\"outputs\":[{\"internalType\":\"contract IOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"setPricesAndExecuteADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"increaseOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decreaseOrderIds\",\"type\":\"uint256[]\"}],\"name\":\"setPricesAndExecuteLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseEndIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseEndIndex\",\"type\":\"uint256\"}],\"name\":\"setPricesAndExecuteMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"setPricesAndLiquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n\\n}\\n\",\"keccak256\":\"0xe583a160315a55007948afb2339b9b67601ff1d57584921d04d892db1557e5e9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IExecutor {\\n\\n    event UpdateExecuteRouter(address oldAddress, address newAddress);\\n\\n    function increaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external;\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external;\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external;\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x410c1b89dc5dd7fad879c0e630a38ca14161857b3c6b921692bdf64ded01bb41\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIndexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IIndexPriceFeed {\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\\n    function lastUpdatedAt() external view returns (uint256);\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xc78259afb2d8179075b97c3021eac6a508196df97429f0778a2a41684cc9c867\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IOrderManager {\\n\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns(uint256);\\n    function decreaseMarketOrdersIndex() external view returns(uint256);\\n    function increaseLimitOrdersIndex() external view returns(uint256);\\n    function decreaseLimitOrdersIndex() external view returns(uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns(bool);\\n\\n    function getPositionOrders(bytes32 key) external view returns(PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function getIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n    function getDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n}\\n\",\"keccak256\":\"0x1b815e8558fb7886c8b9d358986242362043f457767252c680fa8ef2a2f8a728\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TradingTypes.sol\\\";\\n\\ninterface IPositionManager {\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function executeIncreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory _tokens,\\n        uint256[] memory _prices,\\n        uint256 _timestamp,\\n        bytes32[] memory _positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory _positionKeys) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external;\\n\\n    function getValidPrice(uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a95674d49193dd5454e32253d5e157d138f7bff46257d5c9ec30c09501c7307\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n    function contractWhiteList(address) external view returns (bool);\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n\\n    function addContractWhiteList(address target) external;\\n\\n    function removeContractWhiteList(address target) external;\\n}\\n\",\"keccak256\":\"0xbdc36b44d3b4f20937e76a8d72a334dee7a12c98ad888fb77a8a98494ef8cb6b\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n\\n    enum TradeType {MARKET, LIMIT, TP, SL}\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        int256 sizeAmount;             // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;             // pair index\\n        TradeType tradeType;           // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice;             // 1e30, price\\n        bool isLong;                   // long or short\\n        uint256 sizeAmount;            // size\\n        uint256 tpPrice;               // 1e30, tp price\\n        uint256 tp;                    // tp size\\n        uint256 slPrice;               // 1e30, sl price\\n        uint256 sl;                    // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;             // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice;          // 1e30, price\\n        uint256 sizeAmount;            // size\\n        bool isLong;\\n    }\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        bool isLong;\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;              // pair index\\n        TradeType tradeType;            // 0: MARKET, 1: LIMIT\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 openPrice;              // 1e30 Market acceptable price/Limit opening price\\n        bool isLong;                    // Long/short\\n        uint256 sizeAmount;             // Number of positions\\n        uint256 tpPrice;                // Stop profit price 1e30\\n        uint256 tp;                     // The number of profit stops\\n        uint256 slPrice;                // Stop price 1e30\\n        uint256 sl;                     // Stop loss quantity\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral;              // 1e18 Margin amount\\n        uint256 triggerPrice;            // Limit trigger price\\n        uint256 sizeAmount;              // Number of customs documents\\n        bool isLong;\\n        bool abovePrice;                 // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0xae53ed399a2f12c87f4476563e06ba5ff839db466d17b17690453c63bae65fc8\",\"license\":\"UNLICENSED\"},\"contracts/trading/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IExecutor.sol\\\";\\nimport \\\"../interfaces/IAddressesProvider.sol\\\";\\nimport \\\"../interfaces/IRoleManager.sol\\\";\\nimport \\\"../interfaces/IOrderManager.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"../interfaces/IIndexPriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Executor is IExecutor {\\n\\n    uint256 public increaseMarketOrderStartIndex;\\n    uint256 public decreaseMarketOrderStartIndex;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    IOrderManager public orderManager;\\n    IPositionManager public positionManager;\\n\\n    constructor(IAddressesProvider addressProvider, IOrderManager _orderManager, IPositionManager _positionManager) {\\n        ADDRESS_PROVIDER = addressProvider;\\n        orderManager = _orderManager;\\n        positionManager = _positionManager;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), \\\"onlyPoolAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPositionKeeper() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), \\\"onlyPositionKeeper\\\");\\n        _;\\n    }\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseMarketOrders(increaseEndIndex);\\n        this.executeDecreaseMarketOrders(decreaseEndIndex);\\n    }\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseLimitOrders(increaseOrderIds);\\n        this.executeDecreaseLimitOrders(decreaseOrderIds);\\n    }\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        console.log(\\\"executeIncreaseMarketOrders endIndex\\\", endIndex, \\\"timestamp\\\", block.timestamp);\\n        uint256 index = increaseMarketOrderStartIndex;\\n        uint256 length = orderManager.increaseMarketOrdersIndex();\\n\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try positionManager.executeIncreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log();\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeIncreaseMarketOrder error \\\", reason);\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, true);\\n            }\\n            increaseMarketOrderStartIndex++;\\n        }\\n    }\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        console.log(\\\"executeIncreaseLimitOrders timestamp\\\", block.timestamp);\\n\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try positionManager.executeIncreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log();\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeIncreaseLimitOrders error \\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external onlyPositionKeeper {\\n        positionManager.executeIncreaseOrder(orderId, tradeType);\\n    }\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper {\\n        console.log(\\\"executeDecreaseMarketOrders endIndex\\\", endIndex, \\\"timestamp\\\", block.timestamp);\\n        uint256 index = decreaseMarketOrderStartIndex;\\n        uint256 length = orderManager.decreaseMarketOrdersIndex();\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try positionManager.executeDecreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log(\\\"executeDecreaseMarketOrders success index\\\", index, \\\"endIndex\\\", endIndex);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseMarketOrders error \\\", reason);\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, false);\\n            }\\n            decreaseMarketOrderStartIndex++;\\n        }\\n    }\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper {\\n        console.log(\\\"executeDecreaseLimitOrders timestamp\\\", block.timestamp);\\n\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try positionManager.executeDecreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log(\\\"executeDecreaseLimitOrders success index\\\", orderIds[i]);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseLimitOrders error \\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external onlyPositionKeeper {\\n        positionManager.executeDecreaseOrder(orderId, tradeType);\\n    }\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        positionManager.liquidatePositions(positionKeys);\\n    }\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external onlyPositionKeeper {\\n        positionManager.liquidatePositions(positionKeys);\\n    }\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external onlyPositionKeeper {\\n        require(tokens.length == prices.length && tokens.length >= 0, \\\"invalid params\\\");\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        positionManager.executeADLAndDecreaseOrder(positionKeys, sizeAmounts, orderId, tradeType);\\n    }\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) public onlyPositionKeeper {\\n        positionManager.executeADLAndDecreaseOrder(\\n            positionKeys,\\n            sizeAmounts,\\n            orderId,\\n            tradeType\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4fbb690cf7ff189b8d860843b88262bec82dbb1d92179338997021c569a59676\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346100fc57601f620021e338819003918201601f19168301916001600160401b03831184841017610101578084926060946040528339810103126100fc5780516001600160a01b03919082811681036100fc576020820151918383168093036100fc57604001519283168093036100fc5760805260018060a01b03199081600254161760025560035416176003556040516120cb9081620001188239608051818181610118015281816102fb01528181610513015281816107cb015281816109c401528181610af201528181610c1801528181610d1a01528181610e0c015281816110a0015281816112ca0152818161151d01526115bf0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081631848effa146115ab57508063531d87c1146114ee5780635be766c3146114cf578063791b98bc146114a6578063a77603401461123257838163afb566e414610fff57508063b298f25a14610dbe578063bfa5ea9914610ceb57838163c04c0f5814610bca57508063d4053f7b14610bad57838163da9d857b14610a7d578163e70da1b514610991578163ef09314a1461076757508063efc95de8146104c657838163f2ac5dfe1461027b57508063f9b6117f1461024e5763fdc860f0146100e657600080fd5b82913461024a576100f636611756565b82516351331ad760e01b8152909391906001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561021357839183918a9161021d575b5060248851809481936335d2155560e11b8352338b840152165afa9182156102135790610183929189926101e6575b50506117ac565b60035416803b156101e2578592836044926101b587519889968795630fdc860f60e41b875286015260248501906118bc565b5af19081156101d957506101c65750f35b6101cf906115ee565b6101d65780f35b80fd5b513d84823e3d90fd5b8580fd5b6102059250803d1061020c575b6101fd818361164d565b810190611794565b388061017c565b503d6101f3565b86513d8a823e3d90fd5b61023d9150823d8411610243575b610235818361164d565b810190611775565b3861014d565b503d61022b565b5050fd5b50503461027757816003193601126102775760025490516001600160a01b039091168152602090f35b5080fd5b9290503461024a57608036600319011261024a576001600160401b039180358381116104c2576102ae9036908301611685565b6024358481116101e2576102c590369084016116f8565b936064359081116101e2576102dd90369084016116f8565b83516351331ad760e01b815260209591926001600160a01b039290917f000000000000000000000000000000000000000000000000000000000000000084169088818881855afa90811561049b5785918a918c916104a5575b5060248a51809481936335d2155560e11b8352338d840152165afa90811561049b579161036d8a9289948d9161047e575b506117ac565b845184511480610476575b610381906117ed565b8851635ed6d55b60e11b815292839182905afa90811561046c579084918a9161044f575b501691823b1561044b576103d4928992838951809681958294631e09986f60e21b8452604435918d850161185e565b03925af180156104415790879161042d575b505060035416803b156101e25761041a9486809486519788958694859363180981eb60e31b8552840152602483019061182a565b03925af19081156101d957506101c65750f35b610436906115ee565b6101e25785386103e6565b85513d89823e3d90fd5b8880fd5b6104669150893d8b1161024357610235818361164d565b386103a5565b87513d8b823e3d90fd5b506001610378565b6104959150843d861161020c576101fd818361164d565b38610367565b88513d8c823e3d90fd5b6104bc9150823d841161024357610235818361164d565b38610336565b8480fd5b509034610763576020806003193601126107275782356001600160401b0381116104c2576104f790369085016116f8565b82516351331ad760e01b81526001600160a01b039490838183817f00000000000000000000000000000000000000000000000000000000000000008a165afa9081156104415790869392918891610746575b5084865180926335d2155560e11b82523385830152816024978892165afa908115610213579061057f91899161072f57506117ac565b6105c8855161058d81611617565b8481527f6578656375746544656372656173654c696d69744f72646572732074696d65738682015263074616d760e41b878201524290611f87565b86805b835181101561072b5787600354166105e38286611be3565b51813b156107275783808893604482948d519586938492630fdc860f60e41b84528c840152600180998401525af19182610713575b50506106b2576106266118df565b6308c379a01461064f575b6106435761063e9061196e565b6105cb565b508551903d90823e3d90fd5b6106576118fd565b80610663575b50610631565b90506106ac8391895161067581611617565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f728a820152600160fd1b8b820152611fdf565b3861065d565b508061070e6106c461063e9387611be3565b5189516106d081611617565b602881527f6578656375746544656372656173654c696d69744f72646572732073756363658a820152670e6e640d2dcc8caf60c31b8b820152611f87565b61196e565b61071c906115ee565b610727578338610618565b8380fd5b5080f35b6104959150863d881161020c576101fd818361164d565b61075d9150853d871161024357610235818361164d565b38610549565b8280fd5b9290503461024a5760a036600319011261024a576001600160401b0382358181116104c2576107999036908501611685565b906024359081116104c2576107b190369085016116f8565b82516351331ad760e01b81526001600160a01b03906020907f000000000000000000000000000000000000000000000000000000000000000083169082818981855afa90811561046c57849184918b91610974575b5088516335d2155560e11b8152338b8201529283916024918391165afa90811561046c579161083e84928a948c9161047e57506117ac565b86518651148061096c575b610852906117ed565b8751635ed6d55b60e11b815292839182905afa91821561021357889261094f575b50501691823b156101e2576108a3928692838651809681958294631e09986f60e21b8452604435918c850161185e565b03925af180156109315790849161093b575b5050303b1561024a57805163531d87c160e01b815260643583820152838160248183305af180156109315790849161091d575b5050303b1561024a5780519163bfa5ea9960e01b835260843590830152828260248183305af19081156101d957506101c65750f35b610926906115ee565b61024a5782386108e8565b82513d86823e3d90fd5b610944906115ee565b61024a5782386108b5565b6109659250803d1061024357610235818361164d565b3880610873565b506001610849565b61098b9150823d841161024357610235818361164d565b38610806565b9290503461024a576109a236611756565b82516351331ad760e01b8152909391906001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561021357839183918a91610a60575b5060248851809481936335d2155560e11b8352338b840152165afa9182156102135790610a2e929189926101e65750506117ac565b60035416803b156101e2578592836044926101b58751988996879563e70da1b560e01b875286015260248501906118bc565b610a779150823d841161024357610235818361164d565b386109f9565b9290503461024a57608036600319011261024a576001600160401b0382358181116104c257610aaf90369085016116f8565b906024359081116104c257610ac790369085016116f8565b9260643593818510156101e25783516351331ad760e01b81526001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561046c57839183918b91610b90575b5060248951809481936335d2155560e11b8352338b840152165afa91821561046c5790610b5c92918a926101e65750506117ac565b6003541690813b15610b8c5786809461041a87519889968795869463da9d857b60e01b8652604435928601611ec5565b8680fd5b610ba79150823d841161024357610235818361164d565b38610b27565b505034610277578160031936011261027757602091549051908152f35b9290503461024a5760209182600319360112610ce65780356001600160401b0381116104c257610bfd90369083016116f8565b82516351331ad760e01b81526001600160a01b0390858185817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561044157829187918991610cc9575b5060248751809481936335d2155560e11b8352338a840152165afa9081156104415790610c80918891610cb257506117ac565b60035416803b156101e25761041a9486809486519788958694859363180981eb60e31b8552840152602483019061182a565b6104959150873d891161020c576101fd818361164d565b610ce09150823d841161024357610235818361164d565b38610c4d565b505050fd5b5034610763576020806003193601126107275782516351331ad760e01b81526001600160a01b039190818185817f000000000000000000000000000000000000000000000000000000000000000087165afa8015610db45782918791610d97575b5060248651809581936335d2155560e11b83523389840152165afa938415610d8e575092610d8591610d8b9486926101e65750506117ac565b35611c0d565b80f35b513d86823e3d90fd5b610dae9150823d841161024357610235818361164d565b38610d4c565b85513d88823e3d90fd5b509034610763576020806003193601126107275782356001600160401b0381116104c257610def90369085016116f8565b82516351331ad760e01b81526001600160a01b03948691848183817f00000000000000000000000000000000000000000000000000000000000000008b165afa908115610ff5579083929188959491610fd8575b5085875180926335d2155560e11b82523385830152816024988992165afa908115610fce5790610e79918491610cb257506117ac565b610ec28651610e8781611617565b8581527f65786563757465496e6372656173654c696d69744f72646572732074696d65738782015263074616d760e41b888201524290611f87565b815b8351811015610fca578760035416610edc8286611be3565b51813b156104c25784808893604482948d51958693849263e70da1b560e01b84528b840152600180998401525af19182610fb6575b5050610fa957610f1f6118df565b6308c379a014610f46575b610f3c57610f379061196e565b610ec4565b86513d84823e3d90fd5b610f4e6118fd565b80610f5a575b50610f2a565b9050610fa384918951610f6c81611617565b602181527f65786563757465496e6372656173654c696d69744f7264657273206572726f728a820152600160fd1b8b820152611fdf565b38610f54565b50610f379061070e611f00565b610fbf906115ee565b6104c2578438610f11565b8280f35b87513d85823e3d90fd5b610fef9150863d881161024357610235818361164d565b38610e43565b86513d85823e3d90fd5b9290503461024a5760e036600319011261024a576001600160401b0382358181116104c2576110319036908501611685565b926024358281116101e25761104990369083016116f8565b606435838111610b8c5761106090369084016116f8565b92608435908111610b8c5761107890369084016116f8565b9060c435958387101561122e5785516351331ad760e01b81526001600160a01b0392906020907f000000000000000000000000000000000000000000000000000000000000000085169082818981855afa90811561120757869184918e91611211575b508b516335d2155560e11b8152338b8201529283916024918391165afa908115611207579161111384928a948f9161047e57506117ac565b8551855114806111ff575b611127906117ed565b8a51635ed6d55b60e11b815292839182905afa9182156111f557908592918c926111d8575b50501691823b156111d45761117c928a92838a51809681958294631e09986f60e21b8452604435918d850161185e565b03925af18015610213579088916111c0575b50506003541690813b15610b8c5786809461041a87519889968795869463da9d857b60e01b865260a435928601611ec5565b6111c9906115ee565b610b8c57863861118e565b8980fd5b6111ee9250803d1061024357610235818361164d565b388061114c565b89513d8d823e3d90fd5b50600161111e565b8a513d8e823e3d90fd5b6112289150823d841161024357610235818361164d565b386110db565b8780fd5b509190346102775760a0366003190112610277576001600160401b03908335828111610727576112659036908601611685565b936024358381116104c25761127d90369083016116f8565b6064358481116101e25761129490369084016116f8565b936084359081116101e2576112ac90369084016116f8565b83516351331ad760e01b8152909460209290916001600160a01b03907f000000000000000000000000000000000000000000000000000000000000000082169085818881855afa90811561049b57839187918c91611489575b5060248a51809481936335d2155560e11b8352338d840152165afa90811561049b579161133b879289948d9161047e57506117ac565b8b5185511480611481575b61134f906117ed565b8851635ed6d55b60e11b815292839182905afa90811561046c578991611464575b501690813b1561122e579787916113a099838851809c81958294631e09986f60e21b8452604435918c850161185e565b03925af1801561144657611450575b859650303b156101e257856113dd9185518093819263594c792d60e11b83528688840152602483019061182a565b038183305af1801561144657908691611432575b5050303b156104c257849161141d84519586938493631df92bbd60e31b8552840152602483019061182a565b038183305af19081156101d957506101c65750f35b61143b906115ee565b6104c25784386113f1565b84513d88823e3d90fd5b94909561145c906115ee565b9385906113af565b61147b9150853d871161024357610235818361164d565b38611370565b506001611346565b6114a09150823d841161024357610235818361164d565b38611305565b50503461027757816003193601126102775760035490516001600160a01b039091168152602090f35b5050346102775781600319360112610277576020906001549051908152f35b5034610763576020806003193601126107275782516351331ad760e01b81526001600160a01b039190818185817f000000000000000000000000000000000000000000000000000000000000000087165afa8015610db4578291879161158e575b5060248651809581936335d2155560e11b83523389840152165afa938415610d8e57509261158891610d8b9486926101e65750506117ac565b35611993565b6115a59150823d841161024357610235818361164d565b3861154f565b8490346102775781600319360112610277577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160401b03811161160157604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761160157604052565b604081019081106001600160401b0382111761160157604052565b90601f801991011681019081106001600160401b0382111761160157604052565b6001600160401b0381116116015760051b60200190565b81601f820112156116f35780359161169c8361166e565b926116aa604051948561164d565b808452602092838086019260051b8201019283116116f3578301905b8282106116d4575050505090565b81356001600160a01b03811681036116f35781529083019083016116c6565b600080fd5b81601f820112156116f35780359161170f8361166e565b9261171d604051948561164d565b808452602092838086019260051b8201019283116116f3578301905b828210611747575050505090565b81358152908301908301611739565b60409060031901126116f3576004359060243560048110156116f35790565b908160209103126116f357516001600160a01b03811681036116f35790565b908160209103126116f3575180151581036116f35790565b156117b357565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b156117f457565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b82811061184a575050505090565b83518552938101939281019260010161183c565b9392916060850191606086528051809352608086019260208092019060005b81811061189f575050508583039086015260409161189a9161182a565b930152565b82516001600160a01b03168652948301949183019160010161187d565b9060048210156118c95752565b634e487b7160e01b600052602160045260246000fd5b60009060033d116118ec57565b905060046000803e60005160e01c90565b600060443d1061195a57604051600319913d83016004833e81516001600160401b03918282113d60248401111761195d57818401948551938411611965573d8501016020848701011161195d575061195a9291016020019061164d565b90565b949350505050565b50949350505050565b600019811461197d5760010190565b634e487b7160e01b600052601160045260246000fd5b9060408051926119a284611617565b602493848152611a076020917f65786563757465496e6372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b8582015284516119ea81611632565b6009815268074696d657374616d760bc1b84820152844292612034565b600094855460018060a01b0383600295828754168851928380926386249bab60e01b825260049586915afa9081156111f5578b91611bb2575b5080851015611ba557808211611b9d575b505b808410611a665750505050505050509050565b898360035416803b1561027757818a51809263e70da1b560e01b82528887830152828a8301528160449586925af19081611b8e575b50611b8057600190611aab6118df565b6308c379a014611acd575b5061046c575b611ac68a5461196e565b8a55611a53565b611ad56118fd565b9081611ae2575b50611ab6565b909150611b2c8c928b51611af581611617565b602181527f65786563757465496e6372656173654d61726b65744f72646572206572726f728b820152600160fd1b8d820152611fdf565b8b858a5416803b1561027757606486838a938f8d978360019251998a98899763c250985960e01b89528801528601528401525af1801561120757611b71575b80611adc565b611b7a906115ee565b38611b6b565b50611b89611f00565b611abc565b611b97906115ee565b38611a9b565b905038611a51565b5050505050505050509050565b90508681813d8311611bdc575b611bc9818361164d565b81010312611bd8575138611a40565b8a80fd5b503d611bbf565b8051821015611bf75760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6040805191611c1b83611617565b602492838152611c636020917f6578656375746544656372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b8582015284516119ea81611632565b60019384548260018060a01b039460029580875416885193848092631ca37ea160e11b825260049687915afa908115611eba57600091611e8d575b5080851015611e8157808311611e79575b505b818410611cc357505050505050505050565b8060035416803b156116f357600090818a518092630fdc860f60e41b82528888830152828a8301528160449586925af19081611e6a575b50611df5578990611d096118df565b6308c379a014611d36575b50611d2b575b611d24895461196e565b8955611cb1565b87513d6000823e3d90fd5b611d3e6118fd565b9081611d4b575b50611d14565b909150611d976000928b51611d5f81611617565b602281527f6578656375746544656372656173654d61726b65744f7264657273206572726f8b82015261039160f51b8d820152611fdf565b8289541690813b156107635786606487858b958f829683809251998a98899763c250985960e01b89528801528601528401525af18015611deb57611ddc575b80611d45565b611de5906115ee565b38611dd6565b8a513d84823e3d90fd5b50611e65828951611e0581611617565b602981527f6578656375746544656372656173654d61726b65744f7264657273207375636389820152680cae6e640d2dcc8caf60bb1b8b820152868b5191611e4c83611632565b60088352670cadcc892dcc8caf60c31b8b840152612034565b611d1a565b611e73906115ee565b38611cfa565b915038611caf565b50505050505050505050565b908782813d8311611eb3575b611ea3818361164d565b810103126101d657505138611c9e565b503d611e99565b89513d6000823e3d90fd5b611ef1611efe94969593611ee360609460808552608085019061182a565b90838203602085015261182a565b95604082015201906118bc565b565b604051602081016351973ec960e01b81526004825260408201908282106001600160401b0383111761160157600092839260405251906a636f6e736f6c652e6c6f675afa50565b919082519283825260005b848110611f73575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611f52565b600091908291611fcc6040518092611fb86020830195632d839cb360e21b8752604060248501526064840190611f47565b90604483015203601f19810183528261164d565b51906a636f6e736f6c652e6c6f675afa50565b60009190612026611fcc84936040519283916120146020840196634b5c427760e01b8852604060248601526064850190611f47565b83810360231901604485015290611f47565b03601f19810183528261164d565b90611fcc60009493859461208160405194859361206a602086019863c67ea9d160e01b8a526080602488015260a4870190611f47565b916044860152602319858303016064860152611f47565b90608483015203601f19810183528261164d56fea2646970667358221220b07eefac023fe5a0c8326e430b96ef3129dec6c50bdfd1816fc3a2f7913dc11564736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081631848effa146115ab57508063531d87c1146114ee5780635be766c3146114cf578063791b98bc146114a6578063a77603401461123257838163afb566e414610fff57508063b298f25a14610dbe578063bfa5ea9914610ceb57838163c04c0f5814610bca57508063d4053f7b14610bad57838163da9d857b14610a7d578163e70da1b514610991578163ef09314a1461076757508063efc95de8146104c657838163f2ac5dfe1461027b57508063f9b6117f1461024e5763fdc860f0146100e657600080fd5b82913461024a576100f636611756565b82516351331ad760e01b8152909391906001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561021357839183918a9161021d575b5060248851809481936335d2155560e11b8352338b840152165afa9182156102135790610183929189926101e6575b50506117ac565b60035416803b156101e2578592836044926101b587519889968795630fdc860f60e41b875286015260248501906118bc565b5af19081156101d957506101c65750f35b6101cf906115ee565b6101d65780f35b80fd5b513d84823e3d90fd5b8580fd5b6102059250803d1061020c575b6101fd818361164d565b810190611794565b388061017c565b503d6101f3565b86513d8a823e3d90fd5b61023d9150823d8411610243575b610235818361164d565b810190611775565b3861014d565b503d61022b565b5050fd5b50503461027757816003193601126102775760025490516001600160a01b039091168152602090f35b5080fd5b9290503461024a57608036600319011261024a576001600160401b039180358381116104c2576102ae9036908301611685565b6024358481116101e2576102c590369084016116f8565b936064359081116101e2576102dd90369084016116f8565b83516351331ad760e01b815260209591926001600160a01b039290917f000000000000000000000000000000000000000000000000000000000000000084169088818881855afa90811561049b5785918a918c916104a5575b5060248a51809481936335d2155560e11b8352338d840152165afa90811561049b579161036d8a9289948d9161047e575b506117ac565b845184511480610476575b610381906117ed565b8851635ed6d55b60e11b815292839182905afa90811561046c579084918a9161044f575b501691823b1561044b576103d4928992838951809681958294631e09986f60e21b8452604435918d850161185e565b03925af180156104415790879161042d575b505060035416803b156101e25761041a9486809486519788958694859363180981eb60e31b8552840152602483019061182a565b03925af19081156101d957506101c65750f35b610436906115ee565b6101e25785386103e6565b85513d89823e3d90fd5b8880fd5b6104669150893d8b1161024357610235818361164d565b386103a5565b87513d8b823e3d90fd5b506001610378565b6104959150843d861161020c576101fd818361164d565b38610367565b88513d8c823e3d90fd5b6104bc9150823d841161024357610235818361164d565b38610336565b8480fd5b509034610763576020806003193601126107275782356001600160401b0381116104c2576104f790369085016116f8565b82516351331ad760e01b81526001600160a01b039490838183817f00000000000000000000000000000000000000000000000000000000000000008a165afa9081156104415790869392918891610746575b5084865180926335d2155560e11b82523385830152816024978892165afa908115610213579061057f91899161072f57506117ac565b6105c8855161058d81611617565b8481527f6578656375746544656372656173654c696d69744f72646572732074696d65738682015263074616d760e41b878201524290611f87565b86805b835181101561072b5787600354166105e38286611be3565b51813b156107275783808893604482948d519586938492630fdc860f60e41b84528c840152600180998401525af19182610713575b50506106b2576106266118df565b6308c379a01461064f575b6106435761063e9061196e565b6105cb565b508551903d90823e3d90fd5b6106576118fd565b80610663575b50610631565b90506106ac8391895161067581611617565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f728a820152600160fd1b8b820152611fdf565b3861065d565b508061070e6106c461063e9387611be3565b5189516106d081611617565b602881527f6578656375746544656372656173654c696d69744f72646572732073756363658a820152670e6e640d2dcc8caf60c31b8b820152611f87565b61196e565b61071c906115ee565b610727578338610618565b8380fd5b5080f35b6104959150863d881161020c576101fd818361164d565b61075d9150853d871161024357610235818361164d565b38610549565b8280fd5b9290503461024a5760a036600319011261024a576001600160401b0382358181116104c2576107999036908501611685565b906024359081116104c2576107b190369085016116f8565b82516351331ad760e01b81526001600160a01b03906020907f000000000000000000000000000000000000000000000000000000000000000083169082818981855afa90811561046c57849184918b91610974575b5088516335d2155560e11b8152338b8201529283916024918391165afa90811561046c579161083e84928a948c9161047e57506117ac565b86518651148061096c575b610852906117ed565b8751635ed6d55b60e11b815292839182905afa91821561021357889261094f575b50501691823b156101e2576108a3928692838651809681958294631e09986f60e21b8452604435918c850161185e565b03925af180156109315790849161093b575b5050303b1561024a57805163531d87c160e01b815260643583820152838160248183305af180156109315790849161091d575b5050303b1561024a5780519163bfa5ea9960e01b835260843590830152828260248183305af19081156101d957506101c65750f35b610926906115ee565b61024a5782386108e8565b82513d86823e3d90fd5b610944906115ee565b61024a5782386108b5565b6109659250803d1061024357610235818361164d565b3880610873565b506001610849565b61098b9150823d841161024357610235818361164d565b38610806565b9290503461024a576109a236611756565b82516351331ad760e01b8152909391906001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561021357839183918a91610a60575b5060248851809481936335d2155560e11b8352338b840152165afa9182156102135790610a2e929189926101e65750506117ac565b60035416803b156101e2578592836044926101b58751988996879563e70da1b560e01b875286015260248501906118bc565b610a779150823d841161024357610235818361164d565b386109f9565b9290503461024a57608036600319011261024a576001600160401b0382358181116104c257610aaf90369085016116f8565b906024359081116104c257610ac790369085016116f8565b9260643593818510156101e25783516351331ad760e01b81526001600160a01b0390602090818186817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561046c57839183918b91610b90575b5060248951809481936335d2155560e11b8352338b840152165afa91821561046c5790610b5c92918a926101e65750506117ac565b6003541690813b15610b8c5786809461041a87519889968795869463da9d857b60e01b8652604435928601611ec5565b8680fd5b610ba79150823d841161024357610235818361164d565b38610b27565b505034610277578160031936011261027757602091549051908152f35b9290503461024a5760209182600319360112610ce65780356001600160401b0381116104c257610bfd90369083016116f8565b82516351331ad760e01b81526001600160a01b0390858185817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561044157829187918991610cc9575b5060248751809481936335d2155560e11b8352338a840152165afa9081156104415790610c80918891610cb257506117ac565b60035416803b156101e25761041a9486809486519788958694859363180981eb60e31b8552840152602483019061182a565b6104959150873d891161020c576101fd818361164d565b610ce09150823d841161024357610235818361164d565b38610c4d565b505050fd5b5034610763576020806003193601126107275782516351331ad760e01b81526001600160a01b039190818185817f000000000000000000000000000000000000000000000000000000000000000087165afa8015610db45782918791610d97575b5060248651809581936335d2155560e11b83523389840152165afa938415610d8e575092610d8591610d8b9486926101e65750506117ac565b35611c0d565b80f35b513d86823e3d90fd5b610dae9150823d841161024357610235818361164d565b38610d4c565b85513d88823e3d90fd5b509034610763576020806003193601126107275782356001600160401b0381116104c257610def90369085016116f8565b82516351331ad760e01b81526001600160a01b03948691848183817f00000000000000000000000000000000000000000000000000000000000000008b165afa908115610ff5579083929188959491610fd8575b5085875180926335d2155560e11b82523385830152816024988992165afa908115610fce5790610e79918491610cb257506117ac565b610ec28651610e8781611617565b8581527f65786563757465496e6372656173654c696d69744f72646572732074696d65738782015263074616d760e41b888201524290611f87565b815b8351811015610fca578760035416610edc8286611be3565b51813b156104c25784808893604482948d51958693849263e70da1b560e01b84528b840152600180998401525af19182610fb6575b5050610fa957610f1f6118df565b6308c379a014610f46575b610f3c57610f379061196e565b610ec4565b86513d84823e3d90fd5b610f4e6118fd565b80610f5a575b50610f2a565b9050610fa384918951610f6c81611617565b602181527f65786563757465496e6372656173654c696d69744f7264657273206572726f728a820152600160fd1b8b820152611fdf565b38610f54565b50610f379061070e611f00565b610fbf906115ee565b6104c2578438610f11565b8280f35b87513d85823e3d90fd5b610fef9150863d881161024357610235818361164d565b38610e43565b86513d85823e3d90fd5b9290503461024a5760e036600319011261024a576001600160401b0382358181116104c2576110319036908501611685565b926024358281116101e25761104990369083016116f8565b606435838111610b8c5761106090369084016116f8565b92608435908111610b8c5761107890369084016116f8565b9060c435958387101561122e5785516351331ad760e01b81526001600160a01b0392906020907f000000000000000000000000000000000000000000000000000000000000000085169082818981855afa90811561120757869184918e91611211575b508b516335d2155560e11b8152338b8201529283916024918391165afa908115611207579161111384928a948f9161047e57506117ac565b8551855114806111ff575b611127906117ed565b8a51635ed6d55b60e11b815292839182905afa9182156111f557908592918c926111d8575b50501691823b156111d45761117c928a92838a51809681958294631e09986f60e21b8452604435918d850161185e565b03925af18015610213579088916111c0575b50506003541690813b15610b8c5786809461041a87519889968795869463da9d857b60e01b865260a435928601611ec5565b6111c9906115ee565b610b8c57863861118e565b8980fd5b6111ee9250803d1061024357610235818361164d565b388061114c565b89513d8d823e3d90fd5b50600161111e565b8a513d8e823e3d90fd5b6112289150823d841161024357610235818361164d565b386110db565b8780fd5b509190346102775760a0366003190112610277576001600160401b03908335828111610727576112659036908601611685565b936024358381116104c25761127d90369083016116f8565b6064358481116101e25761129490369084016116f8565b936084359081116101e2576112ac90369084016116f8565b83516351331ad760e01b8152909460209290916001600160a01b03907f000000000000000000000000000000000000000000000000000000000000000082169085818881855afa90811561049b57839187918c91611489575b5060248a51809481936335d2155560e11b8352338d840152165afa90811561049b579161133b879289948d9161047e57506117ac565b8b5185511480611481575b61134f906117ed565b8851635ed6d55b60e11b815292839182905afa90811561046c578991611464575b501690813b1561122e579787916113a099838851809c81958294631e09986f60e21b8452604435918c850161185e565b03925af1801561144657611450575b859650303b156101e257856113dd9185518093819263594c792d60e11b83528688840152602483019061182a565b038183305af1801561144657908691611432575b5050303b156104c257849161141d84519586938493631df92bbd60e31b8552840152602483019061182a565b038183305af19081156101d957506101c65750f35b61143b906115ee565b6104c25784386113f1565b84513d88823e3d90fd5b94909561145c906115ee565b9385906113af565b61147b9150853d871161024357610235818361164d565b38611370565b506001611346565b6114a09150823d841161024357610235818361164d565b38611305565b50503461027757816003193601126102775760035490516001600160a01b039091168152602090f35b5050346102775781600319360112610277576020906001549051908152f35b5034610763576020806003193601126107275782516351331ad760e01b81526001600160a01b039190818185817f000000000000000000000000000000000000000000000000000000000000000087165afa8015610db4578291879161158e575b5060248651809581936335d2155560e11b83523389840152165afa938415610d8e57509261158891610d8b9486926101e65750506117ac565b35611993565b6115a59150823d841161024357610235818361164d565b3861154f565b8490346102775781600319360112610277577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160401b03811161160157604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761160157604052565b604081019081106001600160401b0382111761160157604052565b90601f801991011681019081106001600160401b0382111761160157604052565b6001600160401b0381116116015760051b60200190565b81601f820112156116f35780359161169c8361166e565b926116aa604051948561164d565b808452602092838086019260051b8201019283116116f3578301905b8282106116d4575050505090565b81356001600160a01b03811681036116f35781529083019083016116c6565b600080fd5b81601f820112156116f35780359161170f8361166e565b9261171d604051948561164d565b808452602092838086019260051b8201019283116116f3578301905b828210611747575050505090565b81358152908301908301611739565b60409060031901126116f3576004359060243560048110156116f35790565b908160209103126116f357516001600160a01b03811681036116f35790565b908160209103126116f3575180151581036116f35790565b156117b357565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b156117f457565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b82811061184a575050505090565b83518552938101939281019260010161183c565b9392916060850191606086528051809352608086019260208092019060005b81811061189f575050508583039086015260409161189a9161182a565b930152565b82516001600160a01b03168652948301949183019160010161187d565b9060048210156118c95752565b634e487b7160e01b600052602160045260246000fd5b60009060033d116118ec57565b905060046000803e60005160e01c90565b600060443d1061195a57604051600319913d83016004833e81516001600160401b03918282113d60248401111761195d57818401948551938411611965573d8501016020848701011161195d575061195a9291016020019061164d565b90565b949350505050565b50949350505050565b600019811461197d5760010190565b634e487b7160e01b600052601160045260246000fd5b9060408051926119a284611617565b602493848152611a076020917f65786563757465496e6372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b8582015284516119ea81611632565b6009815268074696d657374616d760bc1b84820152844292612034565b600094855460018060a01b0383600295828754168851928380926386249bab60e01b825260049586915afa9081156111f5578b91611bb2575b5080851015611ba557808211611b9d575b505b808410611a665750505050505050509050565b898360035416803b1561027757818a51809263e70da1b560e01b82528887830152828a8301528160449586925af19081611b8e575b50611b8057600190611aab6118df565b6308c379a014611acd575b5061046c575b611ac68a5461196e565b8a55611a53565b611ad56118fd565b9081611ae2575b50611ab6565b909150611b2c8c928b51611af581611617565b602181527f65786563757465496e6372656173654d61726b65744f72646572206572726f728b820152600160fd1b8d820152611fdf565b8b858a5416803b1561027757606486838a938f8d978360019251998a98899763c250985960e01b89528801528601528401525af1801561120757611b71575b80611adc565b611b7a906115ee565b38611b6b565b50611b89611f00565b611abc565b611b97906115ee565b38611a9b565b905038611a51565b5050505050505050509050565b90508681813d8311611bdc575b611bc9818361164d565b81010312611bd8575138611a40565b8a80fd5b503d611bbf565b8051821015611bf75760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6040805191611c1b83611617565b602492838152611c636020917f6578656375746544656372656173654d61726b65744f726465727320656e644983820152630dcc8caf60e31b8582015284516119ea81611632565b60019384548260018060a01b039460029580875416885193848092631ca37ea160e11b825260049687915afa908115611eba57600091611e8d575b5080851015611e8157808311611e79575b505b818410611cc357505050505050505050565b8060035416803b156116f357600090818a518092630fdc860f60e41b82528888830152828a8301528160449586925af19081611e6a575b50611df5578990611d096118df565b6308c379a014611d36575b50611d2b575b611d24895461196e565b8955611cb1565b87513d6000823e3d90fd5b611d3e6118fd565b9081611d4b575b50611d14565b909150611d976000928b51611d5f81611617565b602281527f6578656375746544656372656173654d61726b65744f7264657273206572726f8b82015261039160f51b8d820152611fdf565b8289541690813b156107635786606487858b958f829683809251998a98899763c250985960e01b89528801528601528401525af18015611deb57611ddc575b80611d45565b611de5906115ee565b38611dd6565b8a513d84823e3d90fd5b50611e65828951611e0581611617565b602981527f6578656375746544656372656173654d61726b65744f7264657273207375636389820152680cae6e640d2dcc8caf60bb1b8b820152868b5191611e4c83611632565b60088352670cadcc892dcc8caf60c31b8b840152612034565b611d1a565b611e73906115ee565b38611cfa565b915038611caf565b50505050505050505050565b908782813d8311611eb3575b611ea3818361164d565b810103126101d657505138611c9e565b503d611e99565b89513d6000823e3d90fd5b611ef1611efe94969593611ee360609460808552608085019061182a565b90838203602085015261182a565b95604082015201906118bc565b565b604051602081016351973ec960e01b81526004825260408201908282106001600160401b0383111761160157600092839260405251906a636f6e736f6c652e6c6f675afa50565b919082519283825260005b848110611f73575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611f52565b600091908291611fcc6040518092611fb86020830195632d839cb360e21b8752604060248501526064840190611f47565b90604483015203601f19810183528261164d565b51906a636f6e736f6c652e6c6f675afa50565b60009190612026611fcc84936040519283916120146020840196634b5c427760e01b8852604060248601526064850190611f47565b83810360231901604485015290611f47565b03601f19810183528261164d565b90611fcc60009493859461208160405194859361206a602086019863c67ea9d160e01b8a526080602488015260a4870190611f47565b916044860152602319858303016064860152611f47565b90608483015203601f19810183528261164d56fea2646970667358221220b07eefac023fe5a0c8326e430b96ef3129dec6c50bdfd1816fc3a2f7913dc11564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13403,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "increaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 13405,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "decreaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13411,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "orderManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOrderManager)5135"
      },
      {
        "astId": 13414,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "positionManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPositionManager)5275"
      }
    ],
    "types": {
      "t_contract(IOrderManager)5135": {
        "encoding": "inplace",
        "label": "contract IOrderManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)5275": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
