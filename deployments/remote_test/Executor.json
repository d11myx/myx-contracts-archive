{
  "address": "0xE292c131BD6229300A99A306acbEC3689a1acE6D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "contract IOrderManager",
          "name": "_orderManager",
          "type": "address"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "_tradingVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTimeDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "needADL",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteDecreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "ExecuteIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTimeDelay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claimTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeADLAndDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeDecreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeDecreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "executeIncreaseLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "executeIncreaseMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "_tradeType",
          "type": "uint8"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMarketOrderStartIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderManager",
      "outputs": [
        {
          "internalType": "contract IOrderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingTypes.TradeType",
          "name": "tradeType",
          "type": "uint8"
        }
      ],
      "name": "setPricesAndExecuteADL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "increaseOrderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decreaseOrderIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPricesAndExecuteLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increaseEndIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseEndIndex",
          "type": "uint256"
        }
      ],
      "name": "setPricesAndExecuteMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "positionKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "setPricesAndLiquidatePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTimeDelay",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTimeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7f65a22764c6375a2a3f92a0635d7b061247101b01b7edfdc5981243ba9b3f6",
  "receipt": {
    "to": null,
    "from": "0xa6932e7D4262A9E7D9f6982Bf8849199ab631686",
    "contractAddress": "0xE292c131BD6229300A99A306acbEC3689a1acE6D",
    "transactionIndex": 0,
    "gasUsed": "5062721",
    "logsBloom": "0x
    "blockHash": "0x937044b7a0d7f3784e527d9280beb7c77cf78fce50943756aa317a7a36cbcfa1",
    "transactionHash": "0xf7f65a22764c6375a2a3f92a0635d7b061247101b01b7edfdc5981243ba9b3f6",
    "logs": [],
    "blockNumber": 929,
    "cumulativeGasUsed": "5062721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb07fB1a2F76574FD5243C1aA25Bb992cE9490B9C",
    "0xD2605f821EDB524958dbc6202E692f21802369E1",
    "0xeC672E5D027D456be20bE0DdB978e2925372B686",
    "0x68dceA198f713F30Ae88CAd713298A9006D09A63",
    60
  ],
  "numDeployments": 1,
  "solcInputHash": "e56e9f0b846e55f25388e85bcfa6efa0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract IOrderManager\",\"name\":\"_orderManager\",\"type\":\"address\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"_tradingVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needADL\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"ExecuteIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTimeDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claimTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeADLAndDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeDecreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"executeIncreaseLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"executeIncreaseMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"_tradeType\",\"type\":\"uint8\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMarketOrderStartIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderManager\",\"outputs\":[{\"internalType\":\"contract IOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingTypes.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"name\":\"setPricesAndExecuteADL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"increaseOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decreaseOrderIds\",\"type\":\"uint256[]\"}],\"name\":\"setPricesAndExecuteLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseEndIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseEndIndex\",\"type\":\"uint256\"}],\"name\":\"setPricesAndExecuteMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"positionKeys\",\"type\":\"bytes32[]\"}],\"name\":\"setPricesAndLiquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"updateMaxTimeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trading/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    function getIndexPriceOracle() external view returns (address);\\n\\n    function setIndexPriceOracle(address newIndexPriceOracle) external;\\n\\n    function getRoleManager() external view returns (address);\\n\\n    function setRolManager(address) external;\\n}\\n\",\"keccak256\":\"0xa8384ca808dfa6c2b68b61e7f33da9aa32f828cb40e8d6876d1c0b9ca379f267\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../libraries/TradingTypes.sol';\\n\\ninterface IExecutor {\\n    event UpdateMaxTimeDelay(uint256 oldDelay, uint256 newDelay);\\n\\n    event ExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        int256 pnl,\\n        bool needADL,\\n        uint256 tradingFee,\\n        int256 fundingFee\\n    );\\n\\n    function increaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrderStartIndex() external view returns (uint256);\\n\\n    function maxTimeDelay() external view returns (uint256);\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external;\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external;\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external;\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeIncreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external;\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external;\\n\\n    function executeDecreaseOrder(uint256 orderId, TradingTypes.TradeType tradeType) external;\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external;\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external;\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external;\\n\\n    function claimTradingFee(address claimToken) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdbd09f1be3dfe5984be56a067ee4bab336cc0dcad50469343c4eeb2786534571\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIndexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IIndexPriceFeed {\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice);\\n\\n    function lastUpdatedAt() external view returns (uint256);\\n\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0x66a43b59aa6b0f3d29547723e865649eac2ab4cbfec31277335e3e3f72314f43\",\"license\":\"MIT\"},\"contracts/interfaces/IOrderManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../libraries/TradingTypes.sol';\\n\\ninterface IOrderManager {\\n    event UpdatePositionManager(address oldAddress, address newAddress);\\n\\n    event CreateIncreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        uint256 pairIndex,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 openPrice,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 tpPrice,\\n        uint256 tpAmount,\\n        uint256 slPrice,\\n        uint256 slAmount\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address account,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType,\\n        int256 collateral,\\n        uint256 pairIndex,\\n        uint256 openPrice,\\n        uint256 sizeAmount,\\n        bool isLong,\\n        bool abovePrice\\n    );\\n\\n    event CancelIncreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n    event CancelDecreaseOrder(address account, uint256 orderId, TradingTypes.TradeType tradeType);\\n\\n    struct PositionOrder {\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        bool isIncrease;\\n        TradingTypes.TradeType tradeType;\\n        uint256 orderId;\\n        uint256 sizeAmount;\\n    }\\n\\n    function increaseMarketOrdersIndex() external view returns (uint256);\\n\\n    function decreaseMarketOrdersIndex() external view returns (uint256);\\n\\n    function increaseLimitOrdersIndex() external view returns (uint256);\\n\\n    function decreaseLimitOrdersIndex() external view returns (uint256);\\n\\n    function positionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType) external view returns (bool);\\n\\n    function getOrderTpSl(bytes32 orderKey) external view returns (TradingTypes.OrderWithTpSl memory);\\n\\n    function getPositionOrders(bytes32 key) external view returns (PositionOrder[] memory);\\n\\n    function updatePositionManager(address newAddress) external;\\n\\n    function createOrder(TradingTypes.CreateOrderRequest memory request) external returns (uint256 orderId);\\n\\n    function cancelOrder(uint256 orderId, TradingTypes.TradeType tradeType, bool isIncrease) external;\\n\\n    function cancelAllPositionOrders(address account, uint256 pairIndex, bool isLong) external;\\n\\n    function getIncreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external view returns (TradingTypes.IncreasePositionOrder memory order);\\n\\n    function getDecreaseOrder(\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external view returns (TradingTypes.DecreasePositionOrder memory order);\\n\\n    function addOrderToPosition(PositionOrder memory order) external;\\n\\n    function removeOrderFromPosition(PositionOrder memory order) external;\\n\\n    function setPositionHasTpSl(bytes32 key, TradingTypes.TradeType tradeType, bool has) external;\\n\\n    function removeIncreaseMarketOrders(uint256 orderId) external;\\n\\n    function removeIncreaseLimitOrders(uint256 orderId) external;\\n\\n    function removeDecreaseMarketOrders(uint256 orderId) external;\\n\\n    function removeDecreaseLimitOrders(uint256 orderId) external;\\n\\n    function setOrderNeedADL(uint256 orderId, TradingTypes.TradeType tradeType, bool needADL) external;\\n\\n    function saveOrderTpSl(bytes32 orderKey, TradingTypes.OrderWithTpSl memory tpSl) external;\\n\\n    function removeOrderTpSl(bytes32 orderKey) external;\\n}\\n\",\"keccak256\":\"0xc8dec31ce4a89f0a69641a3788c0bd3b38f031939786bac90efc91fe32651411\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPool {\\n\\n    // Events\\n    event PairAdded(address indexed indexToken, address indexed stableToken, address lpToken, uint256 index);\\n\\n    event UpdateTotalAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexTotalAmount,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateReserveAmount(\\n        uint256 indexed pairIndex,\\n        int256 indexAmount,\\n        int256 stableAmount,\\n        uint256 indexReservedAmount,\\n        uint256 stableReservedAmount\\n    );\\n\\n    event UpdateProfit(\\n        uint256 indexed pairIndex,\\n        int256 profit,\\n        int256 realisedPnl,\\n        uint256 stableTotalAmount\\n    );\\n\\n    event UpdateAveragePrice(\\n        uint256 indexed pairIndex,\\n        uint256 averagePrice\\n    );\\n\\n    event Swap(\\n        address indexed funder,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        bool isBuy, // buy indexToken with stableToken\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    event AddLiquidity(\\n        address indexed funder,\\n        address indexed account,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount,\\n        uint256 indexFeeAmount,\\n        uint256 stableFeeAmount,\\n        address slipToken,\\n        uint256 slipFeeAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed account,\\n        address indexed receiver,\\n        uint256 indexed pairIndex,\\n        uint256 indexAmount,\\n        uint256 stableAmount,\\n        uint256 lpAmount\\n    );\\n\\n    struct Pair {\\n        uint256 pairIndex;\\n        address indexToken;\\n        address stableToken;\\n        address pairToken;\\n        bool enable;\\n        uint256 kOfSwap; //Initial k value of liquidity\\n        uint256 expectIndexTokenP; //  10000 for 100%\\n        uint256 addLpFeeP; // Add liquidity fee\\n        uint256 lpFeeDistributeP;\\n    }\\n\\n    struct TradingConfig {\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 minTradeAmount;\\n        uint256 maxTradeAmount;\\n        uint256 maxPositionAmount;\\n        uint256 maintainMarginRate; // Maintain the margin rate of 10000 for 100%\\n        uint256 priceSlipP; // Price slip point\\n        uint256 maxPriceDeviationP; // Maximum offset of index price\\n    }\\n\\n    struct TradingFeeConfig {\\n        // fee\\n        uint256 takerFeeP;\\n        uint256 makerFeeP;\\n        // distribute\\n        uint256 lpFeeDistributeP;\\n        uint256 keeperFeeDistributeP;\\n    }\\n\\n    struct FundingFeeConfig {\\n        // factor\\n        int256 minFundingRate; // Minimum capital rate 1,000,000 for 100%\\n        int256 maxFundingRate; // The maximum capital rate is 1,000,000 for 100%\\n        int256 defaultFundingRate; // default capital rate  1,000,000 for 100%\\n        uint256 fundingWeightFactor; // The weight coefficient of the fund rate of both sides is 10000 for 100%\\n        uint256 liquidityPremiumFactor; // The coefficient of liquidity to premium is 10,000 for 100%\\n        int256 interest;\\n        uint256 lpDistributeP;\\n    }\\n\\n    function getPair(uint256) external view returns (Pair memory);\\n\\n    function getTradingConfig(uint256 _pairIndex) external view returns (TradingConfig memory);\\n\\n    function getTradingFeeConfig(uint256) external view returns (TradingFeeConfig memory);\\n\\n    function getFundingFeeConfig(uint256) external view returns (FundingFeeConfig memory);\\n\\n    struct Vault {\\n        uint256 indexTotalAmount; // total amount of tokens\\n        uint256 indexReservedAmount; // amount of tokens reserved for open positions\\n        uint256 stableTotalAmount;\\n        uint256 stableReservedAmount;\\n        uint256 averagePrice;\\n        int256 realisedPnl;\\n    }\\n\\n    function getVault(uint256 _pairIndex) external view returns (Vault memory vault);\\n\\n    function increaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseTotalAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function increaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function decreaseReserveAmount(uint256 _pairToken, uint256 _indexAmount, uint256 _stableAmount) external;\\n\\n    function updateAveragePrice(uint256 _pairIndex, uint256 _averagePrice) external;\\n\\n    function increaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function decreaseProfit(uint256 _pairIndex, uint256 _profit) external;\\n\\n    function liqiitySwap(uint256 _pairIndex, bool _buyIndexToken, uint256 _amountIn, uint256 _amountOut) external;\\n     function addLiquidity(\\n        uint256 _pairIndex,\\n        uint256 _indexAmount,\\n        uint256 _stableAmount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdedcca21e3b8cd208cce3501e185a0f7260ef30c2f4a2f658e3ca829b0cba401\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '../libraries/Position.sol';\\n\\ninterface IPositionManager {\\n\\n    event UpdateFundingInterval(uint256 oldInterval, uint256 newInterval);\\n\\n    event IncreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        int256 collateral,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        uint256 transferOut\\n    );\\n\\n    event DecreasePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        int256 collateral,\\n        uint256 sizeAmount,\\n        uint256 price,\\n        uint256 tradingFee,\\n        int256 fundingFee,\\n        int256 realisedPnl,\\n        uint256 transferOut\\n    );\\n\\n    event UpdatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 collateral,\\n        uint256 positionAmount,\\n        uint256 averagePrice,\\n        int256 entryFundingRate,\\n        uint256 entryFundingTime,\\n        int256 realisedPnl,\\n        uint256 price\\n    );\\n\\n    event ClosePosition(bytes32 positionKey, address account, uint256 pairIndex, bool isLong);\\n\\n    event UpdateFundingRate(uint256 pairIndex, int256 fundingRate, uint256 lastFundingTime);\\n\\n    event NeedBuyIndexToken(uint256 pairIndex, uint256 profit, uint256 lastFundingTime);\\n\\n    function isFrozen(address account) external view returns (bool);\\n\\n    function netExposureAmountChecker(uint256 pairIndex) external view returns (int256);\\n\\n    function longTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function shortTracker(uint256 pairIndex) external view returns (uint256);\\n\\n    function stakingTradingFee(address _token) external view returns (uint256);\\n\\n    function keeperTradingFee(address _token, address _account) external view returns (uint256);\\n\\n    function getTradingFee(\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (uint256 tradingFee);\\n\\n    function claimStakingTradingFee(address claimToken) external returns (uint256);\\n\\n    function claimKeeperTradingFee(address claimToken, address keeper) external returns (uint256);\\n\\n    function getFundingFee(\\n        bool _increase,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong,\\n        uint256 _sizeAmount\\n    ) external view returns (int256);\\n\\n    function getCurrentFundingRate(uint256 _pairIndex) external view returns (int256);\\n\\n    function getPosition(\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) external view returns (Position.Info memory);\\n\\n    function getPositionByKey(bytes32 key) external view returns (Position.Info memory);\\n\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) external pure returns (bytes32);\\n\\n    function updateFundingInterval(uint256 newInterval) external;\\n\\n    function increasePosition(\\n        address _keeper,\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee);\\n\\n    function decreasePosition(\\n        address _keeper,\\n        address _account,\\n        uint256 _pairIndex,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _isLong,\\n        uint256 _price\\n    ) external returns (uint256 tradingFee, int256 fundingFee, int256 pnl);\\n\\n    function updateCumulativeFundingRate(uint256 _pairIndex, uint256 _price) external;\\n\\n    function transferTokenTo(address token, address to, uint256 amount) external;\\n\\n    function getValidPrice(address token, uint256 _pairIndex, bool _isLong) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x685de7e4794f75b40ce1b7e12dc8025d75173b421abef5ec8080defbe3bde29f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function addAdmin(address) external;\\n\\n    function removeAdmin(address) external;\\n\\n    function isAdmin(address) external view returns (bool);\\n\\n    function addPoolAdmin(address poolAdmin) external;\\n\\n    function removePoolAdmin(address poolAdmin) external;\\n\\n    function isPoolAdmin(address poolAdmin) external view returns (bool);\\n\\n    function addOperator(address operator) external;\\n\\n    function removeOperator(address operator) external;\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function addTreasurer(address treasurer) external;\\n\\n    function removeTreasurer(address treasurer) external;\\n\\n    function isTreasurer(address treasurer) external view returns (bool);\\n\\n    function addKeeper(address) external;\\n\\n    function removeKeeper(address) external;\\n\\n    function isKeeper(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c62451d195ef51205ba29bafb92b799d4d6c3c158829d8f25faee0b7f422d77\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Int256Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary Int256Utils {\\n    using Strings for uint256;\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function toString(int256 amount) internal pure returns (string memory) {\\n        return string.concat(amount >= 0 ? '' : '-', abs(amount).toString());\\n    }\\n}\\n\",\"keccak256\":\"0x476512ef796febc141171c86f74261c6e24e6112b5adc13b790a43c00551e2f7\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '../libraries/PrecisionUtils.sol';\\nimport '../libraries/Int256Utils.sol';\\nimport '../libraries/TradingTypes.sol';\\nimport '../libraries/PositionKey.sol';\\nimport 'hardhat/console.sol';\\n\\nlibrary Position {\\n    using Int256Utils for int256;\\n    using Math for uint256;\\n    using PrecisionUtils for uint256;\\n\\n    struct Info {\\n        bytes32 key;\\n        address account;\\n        uint256 pairIndex;\\n        bool isLong;\\n        uint256 collateral;\\n        uint256 positionAmount;\\n        uint256 averagePrice;\\n        int256 entryFundingRate;\\n        uint256 entryFundingTime;\\n        int256 realisedPnl;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address _account,\\n        uint256 _pairIndex,\\n        bool _isLong\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[PositionKey.getPositionKey(_account, _pairIndex, _isLong)];\\n    }\\n\\n    function getPositionByKey(\\n        mapping(bytes32 => Info) storage self,\\n        bytes32 key\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[key];\\n    }\\n\\n    function getUnrealizedPnl(Info memory self, uint256 _sizeAmount, uint256 price) internal pure returns (int256 pnl) {\\n        if (price == self.averagePrice || self.averagePrice == 0) {\\n            return 0;\\n        }\\n\\n        if (self.isLong) {\\n            if (price > self.averagePrice) {\\n                pnl = int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            } else {\\n                pnl = -int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            }\\n        } else {\\n            if (self.averagePrice > price) {\\n                pnl = int256(_sizeAmount.mulPrice(self.averagePrice - price));\\n            } else {\\n                pnl = -int256(_sizeAmount.mulPrice(price - self.averagePrice));\\n            }\\n        }\\n\\n        return pnl;\\n    }\\n\\n    function validLeverage(\\n        Info memory self,\\n        uint256 price,\\n        int256 _collateral,\\n        uint256 _sizeAmount,\\n        bool _increase,\\n        uint256 minLeverage,\\n        uint256 maxLeverage,\\n        uint256 maxPositionAmount\\n    ) internal view returns (uint256, uint256) {\\n        // position >= decrease size\\n        require(_increase ? true : self.positionAmount >= _sizeAmount, 'decrease amount exceed position');\\n\\n        uint256 afterPosition = _increase ? self.positionAmount + _sizeAmount : self.positionAmount - _sizeAmount;\\n\\n        // close position\\n        if (afterPosition == 0) {\\n            return (0, 0);\\n        }\\n\\n        // check collateral\\n        int256 totalCollateral = int256(self.collateral) + _collateral;\\n        require(totalCollateral >= 0, 'collateral not enough for decrease');\\n\\n        // pnl\\n        if (_sizeAmount > 0) {\\n            totalCollateral += getUnrealizedPnl(self, _sizeAmount, price);\\n        }\\n\\n        require(totalCollateral >= 0, 'collateral not enough for pnl');\\n\\n        require(\\n            afterPosition >= totalCollateral.abs().divPrice(price) * minLeverage &&\\n                afterPosition <= totalCollateral.abs().divPrice(price) * maxLeverage,\\n            'leverage incorrect'\\n        );\\n        require(afterPosition <= maxPositionAmount, 'exceed max position');\\n\\n        return (afterPosition, totalCollateral.abs());\\n    }\\n}\\n\",\"keccak256\":\"0xa613e340ad511c906e834100ddd395d3b7154ee363191015c8590341886bcd99\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '../libraries/TradingTypes.sol';\\n\\nlibrary PositionKey {\\n    function getPositionKey(address _account, uint256 _pairIndex, bool _isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _pairIndex, _isLong));\\n    }\\n\\n    function getOrderKey(\\n        bool _isIncrease,\\n        TradingTypes.TradeType _tradeType,\\n        uint256 _orderId\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_isIncrease, _tradeType, _orderId));\\n    }\\n}\\n\",\"keccak256\":\"0xc932698e473e56cf911cae7dbe66bdea538cc5eb6cec5f011ba45f961015b0e4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PrecisionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nlibrary PrecisionUtils {\\n    uint256 public constant ONE_HUNDRED_PERCENTAGE = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n\\n    function mulPrice(uint256 amount, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, price, PRICE_PRECISION);\\n    }\\n\\n    function divPrice(uint256 delta, uint256 price) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, price);\\n    }\\n\\n    function calculatePrice(uint256 delta, uint256 amount) internal pure returns (uint256) {\\n        return Math.mulDiv(delta, PRICE_PRECISION, amount);\\n    }\\n\\n    function mulPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, percentage, ONE_HUNDRED_PERCENTAGE);\\n    }\\n\\n    function divPercentage(uint256 amount, uint256 percentage) internal pure returns (uint256) {\\n        return Math.mulDiv(amount, ONE_HUNDRED_PERCENTAGE, percentage);\\n    }\\n\\n    function calculatePercentage(uint256 amount0, uint256 amount1) internal pure returns (uint256) {\\n        return Math.mulDiv(amount0, ONE_HUNDRED_PERCENTAGE, amount1);\\n    }\\n\\n    function percentage() internal pure returns (uint256) {\\n        return ONE_HUNDRED_PERCENTAGE;\\n    }\\n\\n    function fundingRatePrecision() internal pure returns (uint256) {\\n        return FUNDING_RATE_PRECISION;\\n    }\\n\\n    function pricePrecision() internal pure returns (uint256) {\\n        return PRICE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xadfaf40535bc6d38097a71bdb78d51e6f8b28c73add432ed1373fcbb1931ed85\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TradingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary TradingTypes {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT,\\n        TP,\\n        SL\\n    }\\n\\n    struct CreateOrderRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        int256 sizeAmount; // size\\n    }\\n\\n    struct OrderWithTpSl {\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n    }\\n\\n    struct IncreasePositionWithTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT 2: TP 3: SL\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 openPrice; // 1e30, price\\n        bool isLong; // long or short\\n        uint256 sizeAmount; // size\\n        uint256 tpPrice; // 1e30, tp price\\n        uint256 tp; // tp size\\n        uint256 slPrice; // 1e30, sl price\\n        uint256 sl; // sl size\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 collateral amount\\uff0cnegative number is withdrawal\\n        uint256 triggerPrice; // 1e30, price\\n        uint256 sizeAmount; // size\\n        bool isLong;\\n    }\\n\\n    struct CreateTpSlRequest {\\n        address account;\\n        uint256 pairIndex; // pair index\\n        bool isLong;\\n        uint256 tpPrice; // Stop profit price 1e30\\n        uint256 tp; // The number of profit stops\\n        uint256 slPrice; // Stop price 1e30\\n        uint256 sl; // Stop loss quantity\\n    }\\n\\n    struct IncreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex; // pair index\\n        TradeType tradeType; // 0: MARKET, 1: LIMIT\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 openPrice; // 1e30 Market acceptable price/Limit opening price\\n        bool isLong; // Long/short\\n        uint256 sizeAmount; // Number of positions\\n        uint256 blockTime;\\n    }\\n\\n    struct DecreasePositionOrder {\\n        uint256 orderId;\\n        address account;\\n        uint256 pairIndex;\\n        TradeType tradeType;\\n        int256 collateral; // 1e18 Margin amount\\n        uint256 triggerPrice; // Limit trigger price\\n        uint256 sizeAmount; // Number of customs documents\\n        bool isLong;\\n        bool abovePrice; // Above or below the trigger price\\n        // Market order: open long true empty false\\n        // Limit order: open multiple false empty true\\n        // Stop profit: multiple single false empty single true\\n        // Stop loss: multiple orders true and short orders false\\n        uint256 blockTime;\\n        bool needADL;\\n    }\\n}\\n\",\"keccak256\":\"0xc83309e62878ac41fb82ae5753f303424594e55710442f4f0f3e23afc9d25a47\",\"license\":\"UNLICENSED\"},\"contracts/trading/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport '../libraries/Position.sol';\\n\\nimport '../interfaces/IExecutor.sol';\\nimport '../interfaces/IAddressesProvider.sol';\\nimport '../interfaces/IRoleManager.sol';\\nimport '../interfaces/IOrderManager.sol';\\nimport '../interfaces/IPositionManager.sol';\\nimport '../interfaces/IIndexPriceFeed.sol';\\nimport '../interfaces/IPool.sol';\\nimport {LiquidationLogic} from './logic/LiquidationLogic.sol';\\n\\ncontract Executor is IExecutor, Pausable {\\n    using SafeERC20 for IERC20;\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for Position.Info;\\n\\n    uint256 public override increaseMarketOrderStartIndex;\\n    uint256 public override decreaseMarketOrderStartIndex;\\n\\n    uint256 public override maxTimeDelay;\\n\\n    IAddressesProvider public immutable ADDRESS_PROVIDER;\\n\\n    IOrderManager public orderManager;\\n    IPool public pool;\\n    IPositionManager public positionManager;\\n\\n    constructor(\\n        IAddressesProvider addressProvider,\\n        IPool _pool,\\n        IOrderManager _orderManager,\\n        IPositionManager _tradingVault,\\n        uint256 _maxTimeDelay\\n    ) {\\n        ADDRESS_PROVIDER = addressProvider;\\n        pool = _pool;\\n        orderManager = _orderManager;\\n        positionManager = _tradingVault;\\n        maxTimeDelay = _maxTimeDelay;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isAdmin(msg.sender), 'onlyAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPoolAdmin() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isPoolAdmin(msg.sender), 'onlyPoolAdmin');\\n        _;\\n    }\\n\\n    modifier onlyPositionKeeper() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender), 'onlyPositionKeeper');\\n        _;\\n    }\\n\\n    modifier onlyPositionKeeperOrSelf() {\\n        require(IRoleManager(ADDRESS_PROVIDER.getRoleManager()).isKeeper(msg.sender) || msg.sender == address(this), 'onlyPositionKeeper');\\n        _;\\n    }\\n\\n    function updateMaxTimeDelay(uint256 newMaxTimeDelay) external override whenNotPaused onlyPoolAdmin {\\n        uint256 oldDelay = maxTimeDelay;\\n        maxTimeDelay = newMaxTimeDelay;\\n        emit UpdateMaxTimeDelay(oldDelay, newMaxTimeDelay);\\n    }\\n\\n    function setPricesAndExecuteMarketOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256 increaseEndIndex,\\n        uint256 decreaseEndIndex\\n    ) external onlyPositionKeeper whenNotPaused {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseMarketOrders(increaseEndIndex);\\n        this.executeDecreaseMarketOrders(decreaseEndIndex);\\n    }\\n\\n    function setPricesAndExecuteLimitOrders(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        uint256[] memory increaseOrderIds,\\n        uint256[] memory decreaseOrderIds\\n    ) external onlyPositionKeeper whenNotPaused {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeIncreaseLimitOrders(increaseOrderIds);\\n        this.executeDecreaseLimitOrders(decreaseOrderIds);\\n    }\\n\\n    function executeIncreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper whenNotPaused {\\n        uint256 index = increaseMarketOrderStartIndex;\\n        uint256 length = orderManager.increaseMarketOrdersIndex();\\n\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeIncreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log(\\\"executeIncreaseMarketOrders completed. index:\\\", index);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeIncreaseMarketOrders error:\\\", reason);\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, true);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeIncreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper whenNotPaused {\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeIncreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log(\\\"executeIncreaseLimitOrders completed. index:\\\", orderIds[i]);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeIncreaseLimitOrders error:\\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeIncreaseOrder(\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external onlyPositionKeeper whenNotPaused {\\n        TradingTypes.IncreasePositionOrder memory order = orderManager.getIncreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // check pair enable\\n        uint256 pairIndex = order.pairIndex;\\n        IPool.Pair memory pair = pool.getPair(pairIndex);\\n        require(pair.enable, 'trade pair not supported');\\n\\n        // check account enable\\n        require(!positionManager.isFrozen(order.account), 'account is frozen');\\n\\n        // check trading amount\\n        IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(pairIndex);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n\\n        // check price\\n        // IPool.Pair memory pair = pool.getPair(pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.isLong\\n                    ? price.mulPercentage(PrecisionUtils.percentage() - tradingConfig.priceSlipP) <=\\n                        order.openPrice\\n                    : price.mulPercentage(PrecisionUtils.percentage() + tradingConfig.priceSlipP) >=\\n                        order.openPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(order.isLong ? price >= order.openPrice : price <= order.openPrice, 'not reach trigger price');\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (order.isLong) {\\n                price = order.openPrice.min(price);\\n            } else {\\n                price = order.openPrice.max(price);\\n            }\\n        }\\n\\n        // get position\\n        Position.Info memory position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n\\n        // check position and leverage\\n        (uint256 afterPosition, ) = position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            true,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n        require(afterPosition > 0, 'zero position amount');\\n\\n        IPool.Vault memory lpVault = pool.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = positionManager.netExposureAmountChecker(order.pairIndex);\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                require(order.sizeAmount <= availableIndex, 'lp index token not enough');\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                require(\\n                    order.sizeAmount <= uint256(preNetExposureAmountChecker) + availableStable.divPrice(price),\\n                    'lp stable token not enough'\\n                );\\n            }\\n        } else {\\n            if (order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                require(\\n                    order.sizeAmount <= uint256(-preNetExposureAmountChecker) + availableIndex,\\n                    'lp index token not enough'\\n                );\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                require(order.sizeAmount <= availableStable.divPrice(price), 'lp stable token not enough');\\n            }\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            positionManager.transferTokenTo(pair.stableToken, address(positionManager), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee) = positionManager.increasePosition(\\n            tx.origin,\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                true,\\n                order.tradeType,\\n                _orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        bytes32 orderKey = PositionKey.getOrderKey(true, order.tradeType, _orderId);\\n        TradingTypes.OrderWithTpSl memory orderTpSl = orderManager.getOrderTpSl(orderKey);\\n        if (orderTpSl.tp > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.TP,\\n                    collateral: 0,\\n                    openPrice: orderTpSl.tpPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(orderTpSl.tp)\\n                })\\n            );\\n        }\\n        if (orderTpSl.sl > 0) {\\n            orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: order.account,\\n                    pairIndex: order.pairIndex,\\n                    tradeType: TradingTypes.TradeType.SL,\\n                    collateral: 0,\\n                    openPrice: orderTpSl.slPrice,\\n                    isLong: order.isLong,\\n                    sizeAmount: -int256(orderTpSl.sl)\\n                })\\n            );\\n        }\\n\\n        orderManager.removeOrderTpSl(orderKey);\\n\\n        // delete order\\n        if (_tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeIncreaseMarketOrders(_orderId);\\n        } else if (_tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeIncreaseLimitOrders(_orderId);\\n        }\\n\\n        emit ExecuteIncreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            _tradeType,\\n            order.collateral,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function executeDecreaseMarketOrders(uint256 endIndex) external onlyPositionKeeper whenNotPaused {\\n        uint256 index = decreaseMarketOrderStartIndex;\\n        uint256 length = orderManager.decreaseMarketOrdersIndex();\\n        if (index >= length) {\\n            return;\\n        }\\n        if (endIndex > length) {\\n            endIndex = length;\\n        }\\n\\n        while (index < endIndex) {\\n            try this.executeDecreaseOrder(index, TradingTypes.TradeType.MARKET) {\\n                console.log(\\\"executeDecreaseMarketOrders completed. index:\\\", index);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseMarketOrders error:\\\", reason);\\n                orderManager.cancelOrder(index, TradingTypes.TradeType.MARKET, false);\\n            }\\n            index++;\\n        }\\n    }\\n\\n    function executeDecreaseLimitOrders(uint256[] memory orderIds) external onlyPositionKeeper whenNotPaused {\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            try this.executeDecreaseOrder(orderIds[i], TradingTypes.TradeType.LIMIT) {\\n                console.log(\\\"executeDecreaseLimitOrders completed. index:\\\", orderIds[i]);\\n            } catch Error(string memory reason) {\\n                console.log(\\\"executeDecreaseLimitOrders error:\\\", reason);\\n            }\\n        }\\n    }\\n\\n    function executeDecreaseOrder(\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) external onlyPositionKeeperOrSelf whenNotPaused {\\n        _executeDecreaseOrder(_orderId, _tradeType);\\n    }\\n\\n    function _executeDecreaseOrder(uint256 _orderId, TradingTypes.TradeType _tradeType) internal {\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n\\n        if (order.account == address(0)) {\\n            return;\\n        }\\n\\n        // expire\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            require(order.blockTime + maxTimeDelay >= block.timestamp, 'order expired');\\n        }\\n\\n        // get pair\\n        uint256 pairIndex = order.pairIndex;\\n        IPool.Pair memory pair = pool.getPair(pairIndex);\\n\\n        // get position\\n        Position.Info memory position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n        if (position.positionAmount == 0) {\\n            return;\\n        }\\n\\n        // check trading amount\\n        IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(pairIndex);\\n\\n        order.sizeAmount = order.sizeAmount.min(position.positionAmount);\\n        require(\\n            order.sizeAmount == 0 ||\\n                (order.sizeAmount >= tradingConfig.minTradeAmount && order.sizeAmount <= tradingConfig.maxTradeAmount),\\n            'invalid trade size'\\n        );\\n        // IPool.Pair memory pair = pool.getPair(pairIndex);\\n        // check price\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, pairIndex, order.isLong);\\n        if (order.tradeType == TradingTypes.TradeType.MARKET || order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            require(\\n                order.abovePrice\\n                    ? price.mulPercentage(PrecisionUtils.percentage() - tradingConfig.priceSlipP) <=\\n                        order.triggerPrice\\n                    : price.mulPercentage(PrecisionUtils.percentage() + tradingConfig.priceSlipP) >=\\n                        order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        } else {\\n            require(\\n                order.abovePrice ? price <= order.triggerPrice : price >= order.triggerPrice,\\n                'not reach trigger price'\\n            );\\n        }\\n\\n        // compare openPrice and oraclePrice\\n        if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            if (!order.isLong) {\\n                price = order.triggerPrice.min(price);\\n            } else {\\n                price = order.triggerPrice.max(price);\\n            }\\n        }\\n\\n        uint256 sizeDelta = order.sizeAmount.mulPrice(price);\\n\\n        // check position and leverage\\n        position.validLeverage(\\n            price,\\n            order.collateral,\\n            order.sizeAmount,\\n            false,\\n            tradingConfig.minLeverage,\\n            tradingConfig.maxLeverage,\\n            tradingConfig.maxPositionAmount\\n        );\\n\\n        IPool.Vault memory lpVault = pool.getVault(pairIndex);\\n\\n        int256 preNetExposureAmountChecker = positionManager.netExposureAmountChecker(order.pairIndex);\\n        bool needADL;\\n        if (preNetExposureAmountChecker >= 0) {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                needADL = order.sizeAmount > availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                needADL = order.sizeAmount > uint256(preNetExposureAmountChecker) + availableStable.divPrice(price);\\n            }\\n        } else {\\n            if (!order.isLong) {\\n                uint256 availableIndex = lpVault.indexTotalAmount - lpVault.indexReservedAmount;\\n                needADL = order.sizeAmount > uint256(-preNetExposureAmountChecker) + availableIndex;\\n            } else {\\n                uint256 availableStable = lpVault.stableTotalAmount - lpVault.stableReservedAmount;\\n                needADL = order.sizeAmount > availableStable.divPrice(price);\\n            }\\n        }\\n\\n        if (needADL) {\\n            orderManager.setOrderNeedADL(_orderId, order.tradeType, needADL);\\n\\n            emit ExecuteDecreaseOrder(\\n                order.account,\\n                _orderId,\\n                pairIndex,\\n                order.tradeType,\\n                order.isLong,\\n                order.sizeAmount,\\n                price,\\n                0,\\n                needADL,\\n                0,\\n                0\\n            );\\n            return;\\n        }\\n\\n        // transfer collateral\\n        if (order.collateral > 0) {\\n            IPool.Pair memory pair = pool.getPair(position.pairIndex);\\n            positionManager.transferTokenTo(pair.stableToken, address(pool), order.collateral.abs());\\n        }\\n        (uint256 tradingFee, int256 fundingFee, int256 pnl) = positionManager.decreasePosition(\\n            tx.origin,\\n            order.account,\\n            pairIndex,\\n            order.collateral,\\n            order.sizeAmount,\\n            order.isLong,\\n            price\\n        );\\n\\n        // delete order\\n        if (order.tradeType == TradingTypes.TradeType.MARKET) {\\n            orderManager.removeDecreaseMarketOrders(_orderId);\\n        } else if (order.tradeType == TradingTypes.TradeType.LIMIT) {\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        } else {\\n            orderManager.setPositionHasTpSl(position.key, order.tradeType, false);\\n            orderManager.removeDecreaseLimitOrders(_orderId);\\n        }\\n\\n        // remove decrease order\\n        orderManager.removeOrderFromPosition(\\n            IOrderManager.PositionOrder(\\n                order.account,\\n                order.pairIndex,\\n                order.isLong,\\n                false,\\n                order.tradeType,\\n                order.orderId,\\n                order.sizeAmount\\n            )\\n        );\\n\\n        position = positionManager.getPosition(order.account, order.pairIndex, order.isLong);\\n\\n        if (position.positionAmount == 0) {\\n            // cancel all decrease order\\n            bytes32 key = PositionKey.getPositionKey(order.account, order.pairIndex, order.isLong);\\n            IOrderManager.PositionOrder[] memory orders = orderManager.getPositionOrders(key);\\n\\n            for (uint256 i = 0; i < orders.length; i++) {\\n                IOrderManager.PositionOrder memory positionOrder = orders[i];\\n                if (!positionOrder.isIncrease) {\\n                    orderManager.cancelOrder(positionOrder.orderId, positionOrder.tradeType, false);\\n                }\\n            }\\n        }\\n\\n        emit ExecuteDecreaseOrder(\\n            order.account,\\n            _orderId,\\n            pairIndex,\\n            order.tradeType,\\n            order.isLong,\\n            order.sizeAmount,\\n            price,\\n            pnl,\\n            needADL,\\n            tradingFee,\\n            fundingFee\\n        );\\n    }\\n\\n    function setPricesAndLiquidatePositions(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys\\n    ) external onlyPositionKeeper whenNotPaused {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.liquidatePositions(positionKeys);\\n    }\\n\\n    function liquidatePositions(bytes32[] memory positionKeys) external onlyPositionKeeper whenNotPaused {\\n        for (uint256 i = 0; i < positionKeys.length; i++) {\\n            Position.Info memory position = positionManager.getPositionByKey(positionKeys[i]);\\n            LiquidationLogic.liquidatePosition(position, this, pool, orderManager, positionManager, positionKeys[i]);\\n        }\\n    }\\n\\n    function setPricesAndExecuteADL(\\n        address[] memory tokens,\\n        uint256[] memory prices,\\n        uint256 timestamp,\\n        bytes32[] memory positionKeys,\\n        uint256[] memory sizeAmounts,\\n        uint256 orderId,\\n        TradingTypes.TradeType tradeType\\n    ) external onlyPositionKeeper whenNotPaused {\\n        require(tokens.length == prices.length && tokens.length >= 0, 'invalid params');\\n\\n        IIndexPriceFeed(ADDRESS_PROVIDER.getIndexPriceOracle()).setPrices(tokens, prices, timestamp);\\n\\n        this.executeADLAndDecreaseOrder(positionKeys, sizeAmounts, orderId, tradeType);\\n    }\\n\\n    function executeADLAndDecreaseOrder(\\n        bytes32[] memory _positionKeys,\\n        uint256[] memory _sizeAmounts,\\n        uint256 _orderId,\\n        TradingTypes.TradeType _tradeType\\n    ) public onlyPositionKeeper whenNotPaused {\\n        require(_positionKeys.length == _sizeAmounts.length, 'length not match');\\n\\n        TradingTypes.DecreasePositionOrder memory order = orderManager.getDecreaseOrder(_orderId, _tradeType);\\n        require(order.needADL, 'no need ADL');\\n\\n        IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(order.pairIndex);\\n\\n        Position.Info[] memory adlPositions = new Position.Info[](_positionKeys.length);\\n        uint256 sumAmount;\\n        for (uint256 i = 0; i < _positionKeys.length; i++) {\\n            Position.Info memory position = positionManager.getPositionByKey(_positionKeys[i]);\\n            require(_sizeAmounts[i] <= position.positionAmount, 'ADL size exceeds position');\\n            require(_sizeAmounts[i] <= tradingConfig.maxTradeAmount, 'exceeds max trade amount');\\n            sumAmount += _sizeAmounts[i];\\n            adlPositions[i] = position;\\n        }\\n\\n        require(sumAmount == order.sizeAmount, 'ADL position amount not match decrease order');\\n        IPool.Pair memory pair = pool.getPair(order.pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, order.pairIndex, !order.isLong);\\n\\n        for (uint256 i = 0; i < adlPositions.length; i++) {\\n            Position.Info memory adlPosition = adlPositions[i];\\n            uint256 orderId = orderManager.createOrder(\\n                TradingTypes.CreateOrderRequest({\\n                    account: adlPosition.account,\\n                    pairIndex: adlPosition.pairIndex,\\n                    tradeType: TradingTypes.TradeType.MARKET,\\n                    collateral: 0,\\n                    openPrice: price,\\n                    isLong: adlPosition.isLong,\\n                    sizeAmount: -int256(adlPosition.positionAmount)\\n                })\\n            );\\n            this.executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n        }\\n        this.executeDecreaseOrder(_orderId, order.tradeType);\\n    }\\n\\n    function claimTradingFee(address claimToken) external override onlyPositionKeeper whenNotPaused returns (uint256) {\\n        return positionManager.claimKeeperTradingFee(claimToken, msg.sender);\\n    }\\n\\n    function setPaused() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function setUnPaused() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xe32994dade62986571b4ee7a1a38ea2c95f88ee61c7c9b8b369701d9508d672f\",\"license\":\"UNLICENSED\"},\"contracts/trading/logic/LiquidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../../libraries/Position.sol';\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IPositionManager.sol\\\";\\nimport \\\"../../interfaces/IOrderManager.sol\\\";\\nimport \\\"../../interfaces/IExecutor.sol\\\";\\n\\nlibrary LiquidationLogic {\\n    using PrecisionUtils for uint256;\\n    using Math for uint256;\\n    using Int256Utils for int256;\\n    using Position for Position.Info;\\n\\n    event LiquidatePosition(\\n        bytes32 positionKey,\\n        address account,\\n        uint256 pairIndex,\\n        bool isLong,\\n        uint256 sizeAmount,\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 orderId\\n    );\\n\\n    function liquidatePosition(\\n        Position.Info memory position,\\n        IExecutor executor,\\n        IPool pool,\\n        IOrderManager orderManager,\\n        IPositionManager positionManager,\\n        bytes32 _positionKey\\n    ) external {\\n//        Position.Info memory position = positionManager.getPositionByKey(_positionKey);\\n\\n        if (position.positionAmount == 0) {\\n            return;\\n        }\\n        IPool.Pair memory pair = pool.getPair(position.pairIndex);\\n        uint256 price = positionManager.getValidPrice(pair.indexToken, position.pairIndex, position.isLong);\\n\\n        int256 unrealizedPnl = position.getUnrealizedPnl(position.positionAmount, price);\\n        uint256 tradingFee = positionManager.getTradingFee(position.pairIndex, position.isLong, position.positionAmount);\\n        int256 fundingFee = positionManager.getFundingFee(false, position.account, position.pairIndex, position.isLong, position.positionAmount);\\n        int256 exposureAsset = int256(position.collateral) + unrealizedPnl - int256(tradingFee) + (position.isLong ? -fundingFee : fundingFee);\\n\\n        IPool.TradingConfig memory tradingConfig = pool.getTradingConfig(position.pairIndex);\\n\\n        bool needLiquidate;\\n        if (exposureAsset <= 0) {\\n            needLiquidate = true;\\n        } else {\\n            uint256 riskRate = position\\n                .positionAmount\\n                .mulPrice(position.averagePrice)\\n                .mulPercentage(tradingConfig.maintainMarginRate)\\n                .calculatePercentage(uint256(exposureAsset));\\n            needLiquidate = riskRate >= PrecisionUtils.percentage();\\n        }\\n        if (!needLiquidate) {\\n            return;\\n        }\\n\\n        // cancel all positionOrders\\n        orderManager.cancelAllPositionOrders(position.account, position.pairIndex, position.isLong);\\n\\n        uint256 orderId = orderManager.createOrder(\\n            TradingTypes.CreateOrderRequest({\\n                account: position.account,\\n                pairIndex: position.pairIndex,\\n                tradeType: TradingTypes.TradeType.MARKET,\\n                collateral: 0,\\n                openPrice: price,\\n                isLong: position.isLong,\\n                sizeAmount: -int256(position.positionAmount)\\n            })\\n        );\\n\\n        executor.executeDecreaseOrder(orderId, TradingTypes.TradeType.MARKET);\\n\\n        emit LiquidatePosition(\\n            _positionKey,\\n            position.account,\\n            position.pairIndex,\\n            position.isLong,\\n            position.positionAmount,\\n            position.collateral,\\n            price,\\n            orderId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe1954d54b7f35d8b57aa9355a7469a896bf7f0296ae64aaacb4fc6e8ab962a40\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200014b57601f62005a4638819003918201601f19168301916001600160401b03831184841017620001505780849260a0946040528339810103126200014b578051906001600160a01b039081831683036200014b576020810151908282168092036200014b576040810151908382168092036200014b5760608101519384168094036200014b57608001519360ff196000541660005560805260018060a01b03199182600554161760055581600454161760045560065416176006556003556040516158df90816200016782396080518181816101580152818161031f015281816105bd0152818161086301528181610acc01528181610c2201528181611442015281816116c1015281816117e30152818161197101528181611c4301528181611f0a015281816121e80152818161230001528181612466015281816125c8015261265c0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816303897a95146126205750806316f0115b146125f75780631848effa146125b2578063349fdb091461243557806337a66d85146122cf578063531d87c1146121b75780635be766c3146121995780635c975abb14612177578063791b98bc1461214e578063a776034014611e6e578063afb566e414611b9b578063b298f25a1461191f578063be39f3aa146117a8578063bfa5ea9914611690578063c04c0f58146113f0578063cb0269c9146113d2578063d4053f7b146113b4578063da9d857b14610bb5578063e70da1b514610a9c578063ef09314a146107fc578063efc95de81461056b578063f2ac5dfe1461029b578063f9b6117f146102725763fdc860f01461012957600080fd5b3461026f5761013736612963565b6040516351331ad760e01b81526001600160a01b03929060209081816004817f000000000000000000000000000000000000000000000000000000000000000089165afa8015610264578291879161022a575b506024604051809781936335d2155560e11b8352336004840152165afa90811561021f5785916101e4575b506101d8935080156101db575b6101cb906129e7565b6101d36129a3565b614869565b80f35b503330146101c2565b905083813d8311610218575b6101fa818361285f565b810103126102145761020e6101d893612996565b386101b5565b8380fd5b503d6101f0565b6040513d87823e3d90fd5b82819392503d831161025d575b610241818361285f565b81010312610259576102538291612982565b3861018a565b8580fd5b503d610237565b6040513d88823e3d90fd5b80fd5b503461026f578060031936011261026f576004546040516001600160a01b039091168152602090f35b503461026f57608036600319011261026f57806001600160401b03600435818111610473576102ce903690600401612897565b90602435818111610566576102e7903690600401612905565b9060643590811161056657610300903690600401612905565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052457839187918a9161052f575b506024604051809481936335d2155560e11b8352336004840152165afa801561052457869189916104e2575b50916103946004936129e7565b61039c6129a3565b8551855114806104da575b6103b090612a28565b604051635ed6d55b60e11b815292839182905afa9081156104cf578791610496575b501691823b156102595761040392869283604051809681958294631e09986f60e21b84526044359160048501612a99565b03925af190811561048b578491610477575b5050303b1561047357610445918391604051938492839263180981eb60e31b845260048401526024830190612a65565b038183305af18015610468576104585750f35b610461906127c8565b61026f5780f35b6040513d84823e3d90fd5b5050fd5b610480906127c8565b610473578238610415565b6040513d86823e3d90fd5b90508481813d83116104c8575b6104ad818361285f565b810103126104c4576104be90612982565b386103d2565b8680fd5b503d6104a3565b6040513d89823e3d90fd5b5060016103a7565b82819392503d831161051d575b6104f9818361285f565b81010312610519576004916103946105118893612996565b919350610387565b8780fd5b503d6104ef565b6040513d8a823e3d90fd5b92505081813d831161055f575b610546818361285f565b8101031261051957856105598492612982565b3861035b565b503d61053c565b505050fd5b503461026f576020806003193601126107f8576004356001600160401b0381116107f45761059d903690600401612905565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561021f5785916107bf575b508260405180926335d2155560e11b8252336004830152816024958692165afa801561021f578590610785575b61062591506129e7565b61062d6129a3565b835b8351811015610781576106428185612e0e565b51303b156102595760405190630fdc860f60e41b82526004820152600190818482015286808260448183305af1918261076d575b505061070657610684612b1a565b6308c379a0146106a1575b61048b5761069c90612ba9565b61062f565b6106a9612b38565b806106b5575b5061068f565b905061070086916040516106c881612844565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f7287820152601d60f91b6040820152615854565b386106af565b508061076861071861069c9387612e0e565b5160405161072581612844565b602c81527f6578656375746544656372656173654c696d69744f726465727320636f6d706c878201526b32ba32b2171034b73232bc1d60a11b60408201526157fc565b612ba9565b610776906127c8565b6104c4578638610676565b8480f35b508281813d83116107b8575b61079b818361285f565b810103126107b4576107af61062591612996565b61061b565b8480fd5b503d610791565b90508281813d83116107ed575b6107d6818361285f565b810103126107b4576107e790612982565b386105ee565b503d6107cc565b8280fd5b5080fd5b503461026f5760a036600319011261026f57806001600160401b036004358181116104735761082f903690600401612897565b9060243590811161047357610848903690600401612905565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104cf57849184918991610a65575b506024604051809481936335d2155560e11b8352336004840152165afa80156104cf5783918891610a27575b50916108d86004936129e7565b6108e06129a3565b865186511480610a1f575b6108f490612a28565b604051635ed6d55b60e11b815292839182905afa9182156102645786926109e9575b50501691823b156105665761094892849283604051809681958294631e09986f60e21b84526044359160048501612a99565b03925af18015610468576109d5575b5050303b1561026f5760405163531d87c160e01b815260643560048201528190818160248183305af18015610468576109c1575b5050303b1561026f5760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610468576104585750f35b6109ca906127c8565b61026f57803861098b565b6109de906127c8565b61026f578038610957565b90809250813d8311610a18575b610a00818361285f565b810103126107b457610a1190612982565b3880610916565b503d6109f6565b5060016108eb565b82819392503d8311610a5e575b610a3e818361285f565b810103126104c4576004916108d8610a568593612996565b9193506108cb565b503d610a34565b92505081813d8311610a95575b610a7c818361285f565b810103126104c45782610a8f8592612982565b3861089f565b503d610a72565b503461026f57610aab36612963565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102645785918791610b7f575b506024604051809481936335d2155560e11b8352336004840152165afa93841561021f578594610b44575b5050610b376101d8936129e7565b610b3f6129a3565b613277565b90809450813d8311610b78575b610b5b818361285f565b8101031261021457610b37610b726101d894612996565b93610b29565b503d610b51565b82819392503d8311610bae575b610b96818361285f565b8101031261025957610ba88591612982565b38610afe565b503d610b8c565b503461026f57608036600319011261026f576001600160401b036004358181116107f457610be7903690600401612905565b906024359081116107f457610c00903690600401612905565b606435916004831015610214576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561021f578591611375575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa801561021f57859061133a575b610c9b91506129e7565b610ca36129a3565b805182510361130257610cdd9260018060a01b03600454166040519485926340b4605b60e11b845260443560048501526024840190612af7565b8160446101609687935afa93841561021f5785946112d3575b5050610140830151156112a05760018060a01b03600554166040840151604051906330a66e1560e01b8252600482015261010081602481855afa90811561026457869161126f575b508251919492610d4d83612880565b92610d5b604051948561285f565b808452610d6a601f1991612880565b01875b81811061121257505060065487946001600160a01b039091169190855b8251871015610ef757610d9d8784612e0e565b519660405197636468402960e11b8952600489015261014088602481885afa978815610eec578b98610eb9575b50610dd5818a612e0e565b5160a089015110610e7457610dea818a612e0e565b51606087015110610e2f57610e0d610e2992610e06838c612e0e565b5190612e38565b97610e188289612e0e565b52610e238188612e0e565b50612ba9565b95610d8a565b60405162461bcd60e51b815260206004820152601860248201527f65786365656473206d617820747261646520616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f41444c2073697a65206578636565647320706f736974696f6e000000000000006044820152606490fd5b610ede9198506101403d61014011610ee5575b610ed6818361285f565b81019061301f565b9638610dca565b503d610ecc565b6040513d8d823e3d90fd5b908884878c9460c0850151036111b85784926101206040860151602460405180948193632f7ce47360e21b835260048301525afa92831561048b57610f85936020928691611187575b5082015160408781015160e0890151915163179a09e360e01b81526001600160a01b039093166004840152602483015215604482015293849190829081906064820190565b03915afa91821561117c578392611145575b50825b81518110156110dc57836020611033610fb38486612e0e565b5160018060a01b03600454169060018060a01b038482015116906040810151906060908782820151151592610fec60a080940151613157565b9460405196610ffa8861280d565b8752898701528160408701528501528a608085015283015260c0820152604051948580948193635b47525960e11b83526004830161321c565b03925af190811561021f5785916110a2575b50303b156107b45760405190630fdc860f60e41b8252600482015260006024820152848160448183305af190811561021f57859161108e575b505061108990612ba9565b610f9a565b611097906127c8565b61021457838761107e565b9450506020843d6020116110d4575b816110be6020938361285f565b810103126110cf5785935187611045565b600080fd5b3d91506110b1565b8360608601516004811015611131578190303b1561112e57604051630fdc860f60e41b8152604435600482015290611118906024830190612af7565b818160448183305af18015610468576104585750f35b50fd5b634e487b7160e01b82526021600452602482fd5b925090506020823d602011611174575b816111626020938361285f565b810103126110cf578391519085610f97565b3d9150611155565b6040513d85823e3d90fd5b6111ab91506101203d610120116111b1575b6111a3818361285f565b810190612e81565b88610f40565b503d611199565b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b60209060409893969851611225816127f1565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610d6d565b61129391506101003d61010011611299575b61128b818361285f565b810190612f0e565b38610d3e565b503d611281565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b6112f3929450803d106112fb575b6112eb818361285f565b8101906147ad565b913880610cf6565b503d6112e1565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d60201161136d575b816113546020938361285f565b810103126107b457611368610c9b91612996565b610c91565b3d9150611347565b90506020813d6020116113ac575b816113906020938361285f565b810103126107b45760206113a5602492612982565b9150610c5a565b3d9150611383565b503461026f578060031936011261026f576020600154604051908152f35b503461026f578060031936011261026f576020600354604051908152f35b503461026f576020806003193601126107f8576004356001600160401b0381116107f457611422903690600401612905565b6040516351331ad760e01b81526001600160a01b039184919084826004817f000000000000000000000000000000000000000000000000000000000000000088165afa801561117c5784928491611658575b508560405180926335d2155560e11b8252336004830152816024988992165afa801561048b578490611622575b6114ab91506129e7565b6114b36129a3565b735a7D373dbf6090720067Cd9C66d4b40952F1c28d94835b82518110156107815783600654166114e38285612e0e565b519060405191636468402960e11b835260048301526101409182818a81855afa928315610524578893611603575b505085600554169086600454166115288588612e0e565b51928b3b156115ff5761012060405195638545be9160e01b8752805160048801528a89820151168d880152604081015160448801526060810151151560648801526080810151608488015260a081015160a488015260c081015160c488015260e081015160e48801526101008101516101048801520151610124860152306101448601526101648501526101848401526101a48301526101c482015285816101e4818b5af49081156102645786916115eb575b50506115e690612ba9565b6114cb565b6115f4906127c8565b6107b45784386115db565b8980fd5b61161a929350803d10610ee557610ed6818361285f565b903880611511565b508581813d8311611651575b611638818361285f565b810103126102145761164c6114ab91612996565b6114a1565b503d61162e565b809350868092503d8311611689575b611671818361285f565b810103126107f4576116838492612982565b38611474565b503d611667565b503461026f576020806003193601126107f8576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561048b5782918591611772575b506024604051809581936335d2155560e11b8352336004840152165afa90811561117c57839161173b575b83611728836129e7565b6117306129a3565b6101d8600435614572565b905081813d831161176b575b611751818361285f565b810103126107f85761176561172891612996565b3861171e565b503d611747565b82819392503d83116117a1575b611789818361285f565b810103126102145761179b8291612982565b386116f3565b503d61177f565b503461026f576020806003193601126107f8576004356117c66129a3565b6040516351331ad760e01b81526001600160a01b039083816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561021f57849186916118e9575b50602460405180948193637be53ca160e01b8352336004840152165afa90811561048b5784916118b4575b501561187f577fc4f93ed7d82b431d36b3c7670e42f8d5d8f19375008e1ab63c1f63c52e5c3f349160409160035491816003558351928352820152a180f35b60405162461bcd60e51b815260048101839052600d60248201526c37b7363ca837b7b620b236b4b760991b6044820152606490fd5b90508281813d83116118e2575b6118cb818361285f565b81010312610214576118dc90612996565b38611840565b503d6118c1565b82819392503d8311611918575b611900818361285f565b810103126107b4576119128491612982565b38611815565b503d6118f6565b503461026f576020806003193601126107f8576004356001600160401b0381116107f457611951903690600401612905565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561021f578591611b66575b508260405180926335d2155560e11b8252336004830152816024958692165afa801561021f578590611b30575b6119d991506129e7565b6119e16129a3565b835b8351811015610781576119f68185612e0e565b51303b15610259576040519063e70da1b560e01b82526004820152600190818482015286808260448183305af19182611b1c575b5050611aba57611a38612b1a565b6308c379a014611a55575b61048b57611a5090612ba9565b6119e3565b611a5d612b38565b80611a69575b50611a43565b9050611ab48691604051611a7c81612844565b602181527f65786563757465496e6372656173654c696d69744f7264657273206572726f7287820152601d60f91b6040820152615854565b38611a63565b5080610768611acc611a509387612e0e565b51604051611ad981612844565b602c81527f65786563757465496e6372656173654c696d69744f726465727320636f6d706c878201526b32ba32b2171034b73232bc1d60a11b60408201526157fc565b611b25906127c8565b6104c4578638611a2a565b508281813d8311611b5f575b611b46818361285f565b810103126107b457611b5a6119d991612996565b6119cf565b503d611b3c565b90508281813d8311611b94575b611b7d818361285f565b810103126107b457611b8e90612982565b386119a2565b503d611b73565b503461026f578060031960e03682011261112e576001600160401b0360043581811161056657611bcf903690600401612897565b916024358281116107b457611be8903690600401612905565b9160643581811161025957611c01903690600401612905565b9060843590811161025957611c1a903690600401612905565b9360c4359360048510156104c4576040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa908115610eec57849184918d91611e37575b506024604051809481936335d2155560e11b8352336004840152165afa8015610eec5783918c91611df5575b5091611cb86004936129e7565b611cc06129a3565b865186511480611ded575b611cd490612a28565b604051635ed6d55b60e11b815292839182905afa918215611de2578a92611da8575b50501691823b1561051957611d2892889283604051809681958294631e09986f60e21b84526044359160048501612a99565b03925af1908115610264578691611d94575b5050303b156107b4578492610445611d81611d7294604051978896879663da9d857b60e01b8852608060048901526084880190612a65565b91868303016024870152612a65565b9160a43560448501526064840190612af7565b611d9d906127c8565b6107b4578438611d3a565b90809250813d8311611ddb575b611dbf818361285f565b81010312611dd757611dd090612982565b3880611cf6565b8880fd5b503d611db5565b6040513d8c823e3d90fd5b506001611ccb565b82819392503d8311611e30575b611e0c818361285f565b81010312611e2c57600491611cb8611e248593612996565b919350611cab565b8a80fd5b503d611e02565b92505081813d8311611e67575b611e4e818361285f565b81010312611e2c5782611e618592612982565b38611c7f565b503d611e44565b503461026f5760a036600319011261026f576001600160401b03906004358281116107f857611ea1903690600401612897565b916024358181116107f457611eba903690600401612905565b60643582811161021457611ed2903690600401612905565b9160843590811161021457611eeb903690600401612905565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052457839187918a91612117575b506024604051809481936335d2155560e11b8352336004840152165afa9081156105245790869189916120d9575b5091611f816004936129e7565b611f896129a3565b8951855114806120d1575b611f9d90612a28565b604051635ed6d55b60e11b815292839182905afa9081156104cf57879161209c575b501690813b1561025957958591611ff19783604051809a81958294631e09986f60e21b84526044359160048501612a99565b03925af1801561048b57612088575b839450303b156105665783612030916040518093819263594c792d60e11b83528660048401526024830190612a65565b038183305af190811561048b578491612074575b5050303b15610473576104459183916040519384928392631df92bbd60e31b845260048401526024830190612a65565b61207d906127c8565b610473578238612044565b929093612094906127c8565b918390612000565b90508481813d83116120ca575b6120b3818361285f565b810103126104c4576120c490612982565b38611fbf565b503d6120a9565b506001611f94565b82819392503d8311612110575b6120f0818361285f565b8101031261051957600491611f816121088893612996565b919350611f74565b503d6120e6565b92505081813d8311612147575b61212e818361285f565b8101031261051957856121418492612982565b38611f46565b503d612124565b503461026f578060031936011261026f576006546040516001600160a01b039091168152602090f35b503461026f578060031936011261026f5760ff60209154166040519015158152f35b503461026f578060031936011261026f576020600254604051908152f35b503461026f576020806003193601126107f8576040516351331ad760e01b81526001600160a01b03919081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561048b5782918591612299575b506024604051809581936335d2155560e11b8352336004840152165afa90811561117c578391612262575b8361224f836129e7565b6122576129a3565b6101d8600435612bce565b905081813d8311612292575b612278818361285f565b810103126107f85761228c61224f91612996565b38612245565b503d61226e565b82819392503d83116122c8575b6122b0818361285f565b81010312610214576122c28291612982565b3861221a565b503d6122a6565b503461026f578060031936011261026f576040516351331ad760e01b81526001600160a01b039060209081816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561048b57829185916123ff575b50602460405180958193630935e01b60e21b8352336004840152165afa91821561117c5783926123a5575b506123887f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25892615784565b6123906129a3565b825460ff19166001178355604051338152a180f35b91508082813d83116123f8575b6123bc818361285f565b810103126107f4576123886123f17f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25893612996565b925061235d565b503d6123b2565b82819392503d831161242e575b612416818361285f565b81010312610214576124288291612982565b38612332565b503d61240c565b503461026f578060031936011261026f576040516351331ad760e01b81526020906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa801561048b578391859161257c575b50602460405180948193630935e01b60e21b8352336004840152165afa801561117c578390612546575b6124cc9150615784565b815460ff81161561250a5760ff191682556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9190a180f35b60405162461bcd60e51b815260048101839052601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b508181813d8311612575575b61255c818361285f565b810103126107f4576125706124cc91612996565b6124c2565b503d612552565b82819392503d83116125ab575b612593818361285f565b81010312610214576125a58391612982565b38612498565b503d612589565b503461026f578060031936011261026f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461026f578060031936011261026f576005546040516001600160a01b039091168152602090f35b823461026f57602091826003193601126107f8576001600160a01b036004358181169290839003610214576351331ad760e01b815284816004817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561048b57829186918691612791575b506024604051809481936335d2155560e11b8352336004840152165afa90811561048b57918493918693859161274f575b50906126cf6044926129e7565b6126d76129a3565b60065416916040519485938492634850097560e01b845260048401523360248401525af1918215612743578092612713575b5050604051908152f35b9091508282813d831161273c575b61272b818361285f565b8101031261026f5750518280612709565b503d612721565b604051903d90823e3d90fd5b929450509181813d831161278a575b612768818361285f565b810103126102145791604485926126cf6127828796612996565b9192506126c2565b503d61275e565b92505081813d83116127c1575b6127a8818361285f565b8101031261021457846127bb8392612982565b87612691565b503d61279e565b6001600160401b0381116127db57604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b038211176127db57604052565b60e081019081106001600160401b038211176127db57604052565b61012081019081106001600160401b038211176127db57604052565b606081019081106001600160401b038211176127db57604052565b90601f801991011681019081106001600160401b038211176127db57604052565b6001600160401b0381116127db5760051b60200190565b81601f820112156110cf578035916128ae83612880565b926128bc604051948561285f565b808452602092838086019260051b8201019283116110cf578301905b8282106128e6575050505090565b81356001600160a01b03811681036110cf5781529083019083016128d8565b81601f820112156110cf5780359161291c83612880565b9261292a604051948561285f565b808452602092838086019260051b8201019283116110cf578301905b828210612954575050505090565b81358152908301908301612946565b60409060031901126110cf576004359060243560048110156110cf5790565b51906001600160a01b03821682036110cf57565b519081151582036110cf57565b60ff600054166129af57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b156129ee57565b60405162461bcd60e51b815260206004820152601260248201527137b7363ca837b9b4ba34b7b725b2b2b832b960711b6044820152606490fd5b15612a2f57565b60405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b6044820152606490fd5b90815180825260208080930193019160005b828110612a85575050505090565b835185529381019392810192600101612a77565b9392916060850191606086528051809352608086019260208092019060005b818110612ada5750505085830390860152604091612ad591612a65565b930152565b82516001600160a01b031686529483019491830191600101612ab8565b906004821015612b045752565b634e487b7160e01b600052602160045260246000fd5b60009060033d11612b2757565b905060046000803e60005160e01c90565b600060443d10612b9557604051600319913d83016004833e81516001600160401b03918282113d602484011117612b9857818401948551938411612ba0573d85010160208487010111612b985750612b959291016020019061285f565b90565b949350505050565b50949350505050565b6000198114612bb85760010190565b634e487b7160e01b600052601160045260246000fd5b600180549060018060a01b03906004908282541691604095865180946386249bab60e01b8252818460209788935afa908115612e0357600091612dd6575b5080871015612dcc57808211612dc4575b50945b858110612c305750505050505050565b303b156110cf57865163e70da1b560e01b81528183820152602490600082820152604490600081838183305af19081612db5575b50612d5d578491612c73612b1a565b6308c379a014612c9d575b5050612c9257612c8d90612ba9565b612c20565b86513d6000823e3d90fd5b612ca5612b38565b9182612cb2575b50612c7e565b90919250612cff6000938b51612cc781612844565b602281527f65786563757465496e6372656173654d61726b65744f7264657273206572726f8a82015261391d60f11b8d820152615854565b8785541690813b15610214576064868580948a8f95838b9751998a98899763c250985960e01b89528801528601528401525af18015612d5357612d44575b8080612cac565b612d4d906127c8565b38612d3d565b89513d84823e3d90fd5b505080610768612c8d928951612d7281612844565b602d81527f65786563757465496e6372656173654d61726b65744f726465727320636f6d70888201526c3632ba32b2171034b73232bc1d60991b8b8201526157fc565b612dbe906127c8565b38612c64565b905038612c1d565b5050505050505050565b908582813d8311612dfc575b612dec818361285f565b8101031261026f57505138612c0c565b503d612de2565b88513d6000823e3d90fd5b8051821015612e225760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b91908201809211612bb857565b15612e4c57565b60405162461bcd60e51b815260206004820152600d60248201526c1bdc99195c88195e1c1a5c9959609a1b6044820152606490fd5b90816101209103126110cf5760405190612e9a82612828565b80518252612eaa60208201612982565b6020830152612ebb60408201612982565b6040830152612ecc60608201612982565b6060830152612edd60808201612996565b608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015290565b809161010092839103126110cf57604051918201908282106001600160401b038311176127db5760e091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b15612f8c57565b60405162461bcd60e51b8152602060048201526012602482015271696e76616c69642074726164652073697a6560701b6044820152606490fd5b15612fcd57565b60405162461bcd60e51b815260206004820152601760248201527f6e6f7420726561636820747269676765722070726963650000000000000000006044820152606490fd5b91908203918211612bb857565b90816101409103126110cf5760405190613038826127f1565b8051825261304860208201612982565b60208301526040810151604083015261306360608201612996565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519082015290565b908160c09103126110cf576040519060c08201908282106001600160401b038311176127db5760a0916040528051835260208101516020840152604081015160408401526060810151606084015260808101516080840152015160a082015290565b1561311257565b60405162461bcd60e51b815260206004820152601a60248201527f6c7020737461626c6520746f6b656e206e6f7420656e6f7567680000000000006044820152606490fd5b600160ff1b8114612bb85760000390565b1561316f57565b60405162461bcd60e51b815260206004820152601960248201527f6c7020696e64657820746f6b656e206e6f7420656e6f756768000000000000006044820152606490fd5b6004821015612b045752565b91909160c08060e083019460018060a01b0381511684526020810151602085015260408101511515604085015260608101511515606085015261320b60808201516080860190612af7565b60a081015160a08501520151910152565b81516001600160a01b031681526020808301519082015260408083015160e08301949360c092839261325091860190612af7565b606081015160608501526080810151608085015260a0810151151560a08501520151910152565b6004549060446101206000936040519283809263f9d244fd60e01b82528660048301526132a7602483018a612af7565b6001600160a01b03165afa90811561117c578391613fec575b5060208101516001600160a01b031615613fe6576004841015613fd2578315613fb0575b60408101519160018060a01b036005541691604051632f7ce47360e21b815284600482015261012081602481875afa908115610264578691613f8f575b50608081015115613f4a576006546020838101516040516372c1cc1b60e11b81526001600160a01b0391821660048201529216919081602481855afa908115610524578891613f10575b50613ed7576040516330a66e1560e01b8152600481018790529461010086602481845afa958615610524578896613eb4575b506133b660e08501518015908115613e8e575b50612f85565b60208381015160c086015160405163179a09e360e01b81526001600160a01b039092166004830152602482018a905215156044820152969087606481865afa968715613cdc578997613e5a575b508660608601516004811015613dc057158015613e43575b15613e145760c086015115613de85760c08201516127108082810311613dd4576134569161344a9103836143a6565b60a08801511015612fc6565b60608601516004811015613dc057600114613d75575b50602085015160408087015160c0880151915163bc95baad60e01b81526001600160a01b0390931660048401526024830152151560448201529061014082606481875afa918215611de257906134f292918b92613d52575b506134d38960e089015161444b565b50608087015160e08801518251918b60806020860151950151956140dc565b5015613d165760c060249160405192838092632500ed8d60e21b82528b60048301525afa908115610524578891613ce7575b506040840151604051906301fd38f760e01b82526004820152602081602481865afa908115613cdc578991613caa575b50888112613c485760c085015115613c0c575061357b816020613587935191015190613012565b60e08501511115613168565b608083015191878313613b8e575b50506006546020830151608084015160e085015160c0860151604080516325584bd760e21b81523260048201526001600160a01b039586166024820152604481018c905260648101949094526084840192909252151560a483015260c482018890529097935091879160e49183918b91165af19586156127435780958197613b53575b5060018060a01b036004541660018060a01b03602085015116604085015160c086015115156060870151906004821015613b3f57906136809160e089015193604051956136648761280d565b86526020860152604085015260016060850152608084016131b4565b8660a083015260c0820152813b156107f4576136b583928392604051948580948193632670e98d60e01b8352600483016131c0565b03925af1801561046857908291613b2b575b505060608301516004811015611131576040516020810191600160f81b835260f81b60218201528560228201526022815261370181612844565b51902060048054604051631995c72560e01b81529182018390526001600160a01b0316608082602481845afa91821561048b579084918293613ab2575b506020830151806139ee575b505090606081015180613927575b50506004546001600160a01b0316919050813b156107f457829160248392604051948593849263eea0bfab60e01b845260048401525af1801561046857908291613913575b505087613883576004546001600160a01b0316803b156107f857818091602460405180948193633e5005e560e01b83528a60048401525af180156104685761386f575b5050916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e729795935b61384c60018060a01b036020840151169760808401519260e060c08601511515950151956040519a8b5260208b015260408a01526060890190612af7565b608087015260a086015260c085015260e0840152610100830152610120820152a1565b61387982916127c8565b61026f57806137e0565b600188146138bd575b50916101409593917f462ad18c79032b6336d456416b46e1012c8ed1c03cd3ff073957ae8834539e7297959361380e565b6004546001600160a01b0316803b156107f85781809160246040518094819363121494ed60e31b83528a60048401525af18015610468576138ff575b5061388c565b61390982916127c8565b61026f57806138f9565b61391c906127c8565b61026f57803861379d565b6020916139ac9160018060a01b03600454169160018060a01b03858b015116916040808c015192015161396060c08d0151151592613157565b926040519461396e8661280d565b85528785015260036040850152876060850152608084015260a083015260c0820152604051948580948193635b47525960e11b83526004830161321c565b03925af1801561117c576139c3575b808391613758565b602090813d83116139e7575b6139d9818361285f565b810103126110cf57386139bb565b503d6139cf565b602091613a679160018060a01b03848b0151169060408b0151908b613a1b60c08a51920151151592613157565b9260405194613a298661280d565b85528785015260026040850152876060850152608084015260a083015260c0820152604051948580948193635b47525960e11b83526004830161321c565b03925af1801561048b5790849291613a83575b8092919261374a565b6020809293503d8311613aab575b613a9b818361285f565b810103126110cf57829038613a7a565b503d613a91565b915091506080813d608011613b23575b81613acf6080938361285f565b81010312610214576040518060808101106001600160401b036080830111176127db57606085926080830160405280518352602081015160208401526040810151604084015201516060820152913861373e565b3d9150613ac2565b613b34906127c8565b61026f5780386136c7565b634e487b7160e01b86526021600452602486fd5b955095506040853d604011613b86575b81613b706040938361285f565b8101031261025957602085519501519538613618565b3d9150613b63565b604001516001600160a01b031691613ba590614099565b91813b1561051957604051630d172a0160e01b81526001600160a01b0391821660048201529082166024820152604481019290925286908290606490829084905af1801561026457613bf9575b8080613595565b613c05909591956127c8565b9338613bf2565b613c3c613c268360606040613c4396015191015190613012565b91613c368960e0890151946144c9565b90612e38565b101561310b565b613587565b60c085015115613c8357613c7c613c69836020613c43955191015190613012565b613c7760e088015193613157565b612e38565b1015613168565b50613c9b8160606040613c4394015191015190613012565b613c3c8760e0870151926144c9565b90506020813d602011613cd4575b81613cc56020938361285f565b81010312611dd7575138613554565b3d9150613cb8565b6040513d8b823e3d90fd5b613d09915060c03d60c011613d0f575b613d01818361285f565b8101906130a9565b38613524565b503d613cf7565b60405162461bcd60e51b81526020600482015260146024820152731e995c9bc81c1bdcda5d1a5bdb88185b5bdd5b9d60621b6044820152606490fd5b613d6e9192506101403d61014011610ee557610ed6818361285f565b90386134c4565b60c086015191979115613da2575060a08501519080821015613d9b57505b955b3861346c565b9050613d93565b60a0860151915080821115613db957505b95613d95565b9050613db3565b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8c52601160045260248cfd5b60c08201516127108181018111613dd45761345691613e089101836143a6565b60a08801511115612fc6565b60c086015115613e3357613e2e60a0870151821015612fc6565b613456565b613e2e60a0870151821115612fc6565b5060608601516004811015613dc05760011461341b565b9096506020813d602011613e86575b81613e766020938361285f565b81010312611dd757519538613403565b3d9150613e69565b6040890151811015915081613ea5575b50386133b0565b90506060880151101538613e9e565b613ed09196506101003d610100116112995761128b818361285f565b943861339d565b60405162461bcd60e51b815260206004820152601160248201527030b1b1b7bab73a1034b990333937bd32b760791b6044820152606490fd5b90506020813d602011613f42575b81613f2b6020938361285f565b8101031261051957613f3c90612996565b3861336b565b3d9150613f1e565b60405162461bcd60e51b815260206004820152601860248201527f74726164652070616972206e6f7420737570706f7274656400000000000000006044820152606490fd5b613faa91506101203d610120116111b1576111a3818361285f565b38613321565b613fcd613fc561010083015160035490612e38565b421115612e45565b6132e4565b634e487b7160e01b83526021600452602483fd5b50505050565b9050610120813d61012011614091575b8161400a610120938361285f565b810103126107f4576040519061401f82612828565b8051825261402f60208201612982565b602083015260408101516040830152606081015160048110156107b45760608301526080810151608083015260a081015160a083015261407160c08201612996565b60c083015260e081015160e08301526101008091015190820152386132c0565b3d9150613ffc565b600081126140a45790565b612b9590613157565b91909160008382019384129112908015821691151617612bb857565b81810292918115918404141715612bb857565b949196959390926140f18160a0880151612e38565b97881561429e576141069060808801516140ad565b956000871261424e5781614230575b5050600085126141eb5761413a906141358461413088614099565b6144c9565b6140c9565b86101591826141cf575b50501561419557831161415a57612b9590614099565b60405162461bcd60e51b815260206004820152601360248201527232bc31b2b2b21036b0bc103837b9b4ba34b7b760691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152711b195d995c9859d9481a5b98dbdc9c9958dd60721b6044820152606490fd5b6141e192506141359061413086614099565b8411153880614144565b60405162461bcd60e51b815260206004820152601d60248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220706e6c0000006044820152606490fd5b8461424693979261424092614312565b906140ad565b933880614115565b60405162461bcd60e51b815260206004820152602260248201527f636f6c6c61746572616c206e6f7420656e6f75676820666f7220646563726561604482015261736560f01b6064820152608490fd5b505050505050509050600090600090565b9491969593909260a08601818151106142cd57816140f19151613012565b60405162461bcd60e51b815260206004820152601f60248201527f646563726561736520616d6f756e742065786365656420706f736974696f6e006044820152606490fd5b60c0810190815190818514801561439e575b61439457606001511561436a57508051808411156143525750612b959261434c915190613012565b9061444b565b614365929150612b959361434c91613012565b613157565b838111156143815750612b959261434c9151613012565b61436592915061434c90612b9594613012565b5050505050600090565b508115614324565b9060001981830981830291828083109203918083039214614440576127109082821115614403577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505061271091500490565b90600019818309818302918280831092039180830392146144b3576c0c9f2c9cd04674edea400000009082821115614403577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b906c0c9f2c9cd04674edea4000000090600019828409928281029283808610950394808603951461454e5784831115614403578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50508092501561455c570490565b634e487b7160e01b600052601260045260246000fd5b60025460018060a01b036004818154169060409485518093631ca37ea160e11b8252818460209687935afa9081156147a257600091614775575b508086101561476c57808211614764575b50935b8481106145cf57505050505050565b303b156110cf578551630fdc860f60e41b81528183820152602490600082820152604490600081838183305af19081614755575b506146fd57600191614613612b1a565b6308c379a01461463d575b50506146325761462d90612ba9565b6145c0565b85513d6000823e3d90fd5b614645612b38565b9182614652575b5061461e565b9091925061469f6000938a5161466781612844565b602281527f6578656375746544656372656173654d61726b65744f7264657273206572726f8982015261391d60f11b8c820152615854565b8685541690813b15610214576064868580948189958f829051998a98899763c250985960e01b89528801528601528401525af180156146f3576146e4575b808061464c565b6146ed906127c8565b386146dd565b88513d84823e3d90fd5b50508061076861462d92885161471281612844565b602d81527f6578656375746544656372656173654d61726b65744f726465727320636f6d70878201526c3632ba32b2171034b73232bc1d60991b8a8201526157fc565b61475e906127c8565b38614603565b9050386145bd565b50505050505050565b908482813d831161479b575b61478b818361285f565b8101031261026f575051386145ac565b503d614781565b87513d6000823e3d90fd5b809161016092839103126110cf576040519182018281106001600160401b038211176127db57604052805182526147e660208201612982565b602083015260408101516040830152606081015160048110156110cf5760608301526080810151608083015260a081015160a083015260c081015160c083015261483260e08201612996565b60e0830152610100614845818301612996565b908301526101208082015190830152614862610140809201612996565b9082015290565b600454600061488f604051946340b4605b60e11b86528460048701526024860190612af7565b610160846044816001600160a01b0386165afa938415615777578194615754575b5060208401516001600160a01b031615613fe65760608401516004811015611131571561573a575b6040848101516005549151632f7ce47360e21b81526004810182905290956001600160a01b039092169361012082602481885afa91821561048b578492615717575b50600654602084015160408086015160e0870151915163bc95baad60e01b81526001600160a01b039384166004820152602481019190915290151560448201529691169061014087606481855afa9687156102645786976156f4575b5060a0870151156156e9576040516330a66e1560e01b8152600481018a90529361010085602481855afa9485156104cf5787956156c6575b506149dd60c087015160a08a01518082106000146156bf57505b8060c0890152801590811561569a5750612f85565b60209081015160e087015160405163179a09e360e01b81526001600160a01b039092166004830152602482018c905215156044820152949085606481865afa9485156104cf578795615666575b5084606087015160048110156155cb5715801561564f575b1561561f57610100870151156155f35760c082015161271080828103116155df57614a7e91614a729103836143a6565b60a08901511015612fc6565b606087015160048110156155cb579060018a939214615570575b5091614ace60c092602494614ab089868c015161444b565b5060808a0151858b01518251918b60806020860151950151956142af565b505060405192838092632500ed8d60e21b82528d60048301525afa908115610264578691615551575b50602060408601516024604051809581936301fd38f760e01b835260048301525afa91821561026457869261551d575b508582126154ce5760e085015161549f57614b4a91506020815191015190613012565b60c08401511190815b61537c5750508260808301511361528c575b6006546020830151608084015160c085015160e086015160405163cf2003bd60e01b81523260048201526001600160a01b039485166024820152604481018c905260648101939093526084830191909152151560a482015260c481018490529691606091889160e49183918991165af192831561048b57849585978695615246575b5060608201516004811015614df55761510357506004546001600160a01b0316803b156102595785809160246040518094819363be82e5b160e01b83528860048401525af18015610264579086916150ef575b50505b60018060a01b036004541660018060a01b03602083015116604083015160e08401511515606085015160048110156150db57614ca49086519260c08801519460405196614c898861280d565b8752602087015260408601528a6060860152608085016131b4565b60a083015260c0820152813b156104c457614cd887928392604051948580948193632670e98d60e01b8352600483016131c0565b03925af18015610264579086916150c7575b5050600654602082015160408084015160e0850151915163bc95baad60e01b81526001600160a01b03938416600482015260248101919091529015156044820152916101409183916064918391165afa908115610264579060a09187916150a6575b50015115614e09575b602081015160608201516001600160a01b03909116986004821015614df55791614dcc7f9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee06139a989694926101609a98969460c060e08501511515940151946040519b8c5260208c015260408b015260608a0190612af7565b608088015260a087015260c086015260e0850152610100840152610120830152610140820152a1565b634e487b7160e01b87526021600452602487fd5b9693979491602088979492970151604089015160e08a015115156040519160208301936bffffffffffffffffffffffff199060601b168452603483015260f81b605482015260358152614e5b81612844565b519020968960018060a01b0360045416986024604051809b8193634cc42b5160e01b835260048301525afa978815611de2578a98614f69575b50895b8851811015614f5a57614eaa818a612e0e565b51606081015115614ec5575b50614ec090612ba9565b614e97565b60018060a01b036004541690608060a08201519101516004811015614f46579082918e933b15610214576064849283614f1995604051968795869463c250985960e01b865260048601526024850190612af7565b8160448401525af1801561046857614f32575b50614eb6565b614f3b906127c8565b611e2c578a38614f2c565b634e487b7160e01b8e52602160045260248efd5b50919396509194979396614d55565b9097503d808b833e614f7b818361285f565b6020828281010312611e2c578151906001600160401b0382116150a257808301601f8385010112156150a2578183015190614fb582612880565b93614fc3604051958661285f565b8285526020850193828201602060e0860283850101011161509e5793602085830101945b602060e0860282850101018610615005575050505050509638614e94565b60e086858501031261509a576040519161501e8361280d565b61502787612982565b83526020870151602084015261503f60408801612996565b604084015261505060608801612996565b6060840152608087015192600484101561509457602060e09282829660808695015260a08b015160a082015260c08b015160c0820152815201970196925050614fe7565b50508f80fd5b8f80fd5b8e80fd5b8b80fd5b6150c191506101403d61014011610ee557610ed6818361285f565b38614d4c565b6150d0906127c8565b6107b4578438614cea565b634e487b7160e01b8a52602160045260248afd5b6150f8906127c8565b6107b4578438614c3a565b60608201516004811015614df55760010361517357506004546001600160a01b0316803b15610259578580916024604051809481936304d3cb8160e41b83528860048401525af180156102645790869161515f575b5050614c3d565b615168906127c8565b6107b4578438615158565b60018060a01b03600454169051606083015191600483101561523257803b15610519579160648892836151c1956040519687958694634136de9f60e01b865260048601526024850190612af7565b8160448401525af180156102645790869161521e575b50506004546001600160a01b0316803b15610259578580916024604051809481936304d3cb8160e41b83528860048401525af180156102645790869161515f575050614c3d565b615227906127c8565b6107b45784386151d7565b634e487b7160e01b88526021600452602488fd5b9650935095506060853d606011615284575b816152656060938361285f565b8101031261021457845195604060208701519601519695969338614be7565b3d9150615258565b60018060a01b0360055416604085015160405190632f7ce47360e21b8252600482015261012081602481855afa90811561021f57859161535b575b5060065460409091015160808501516001600160a01b03918216939290911691906152f190614099565b92823b156104c457604051630d172a0160e01b81526001600160a01b03918216600482015291166024820152604481019290925284908290606490829084905af1801561048b57908491615347575b5050614b65565b615350906127c8565b6107f4578238615340565b61537691506101203d610120116111b1576111a3818361285f565b386152c7565b9094506060839294969301516004811015614df5576001600160a01b0382163b156104c4576153cb6064889283604051958694859363c1872cf360e01b85528a60048601526024850190612af7565b8a151560448401526001600160a01b03165af180156102645761548c575b50602081015160608201516001600160a01b03909116966004821015614df5579161545f7f9b4ff42a2fc7960edd49c603150f69894e46d386129c040ae7519a427fee06139896949261016098969460c060e0850151151594015194604051998a5260208a015260408901526060880190612af7565b608086015260a085015260c08401528160e0840152151561010083015280610120830152610140820152a1565b615498909591956127c8565b93386153e9565b6154b681606060406154c694015191015190613012565b91613c368560c0880151946144c9565b109081614b53565b60e08501516154f9576154eb8160206154c6935191015190613012565b613c7760c087015193613157565b61550e91506060604082015191015190613012565b6154c68360c0860151926144c9565b9091506020813d602011615549575b816155396020938361285f565b8101031261025957519038614b27565b3d915061552c565b61556a915060c03d60c011613d0f57613d01818361285f565b38614af7565b60c0926024949297614ace9260e08b0151156000146155ad575060a08a015190808210156155a657505b975b9294509250614a98565b905061559a565b60a08b01519150808211156155c457505b9761559c565b90506155be565b634e487b7160e01b89526021600452602489fd5b634e487b7160e01b8a52601160045260248afd5b60c082015161271081810181116155df57614a7e916156139101836143a6565b60a08901511115612fc6565b6101008701511561563f5761563a60a0880151821115612fc6565b614a7e565b61563a60a0880151821015612fc6565b50606087015160048110156155cb57600114614a42565b9094506020813d602011615692575b816156826020938361285f565b810103126104c457519338614a2a565b3d9150615675565b60408801518110159150816156b05750386133b0565b90506060870151101538613e9e565b90506149c8565b6156e29195506101003d610100116112995761128b818361285f565b93386149ae565b505050505050505050565b6157109197506101403d61014011610ee557610ed6818361285f565b9538614976565b6157339192506101203d610120116111b1576111a3818361285f565b903861491a565b61574f613fc561012086015160035490612e38565b6148d8565b6157709194506101603d610160116112fb576112eb818361285f565b92386148b0565b50604051903d90823e3d90fd5b1561578b57565b60405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606490fd5b919082519283825260005b8481106157e8575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016157c7565b600091908291615841604051809261582d6020830195632d839cb360e21b87526040602485015260648401906157bc565b90604483015203601f19810183528261285f565b51906a636f6e736f6c652e6c6f675afa50565b6000919061589b61584184936040519283916158896020840196634b5c427760e01b88526040602486015260648501906157bc565b838103602319016044850152906157bc565b03601f19810183528261285f56fea264697066735822122018709ff69cae5d7a7a788d5ac371ccf4a34c33a5c5c538a393f1cee22eb2532f64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816303897a95146126205750806316f0115b146125f75780631848effa146125b2578063349fdb091461243557806337a66d85146122cf578063531d87c1146121b75780635be766c3146121995780635c975abb14612177578063791b98bc1461214e578063a776034014611e6e578063afb566e414611b9b578063b298f25a1461191f578063be39f3aa146117a8578063bfa5ea9914611690578063c04c0f58146113f0578063cb0269c9146113d2578063d4053f7b146113b4578063da9d857b14610bb5578063e70da1b514610a9c578063ef09314a146107fc578063efc95de81461056b578063f2ac5dfe1461029b578063f9b6117f146102725763fdc860f01461012957600080fd5b3461026f5761013736612963565b6040516351331ad760e01b81526001600160a01b03929060209081816004817f000000000000000000000000000000000000000000000000000000000000000089165afa8015610264578291879161022a575b506024604051809781936335d2155560e11b8352336004840152165afa90811561021f5785916101e4575b506101d8935080156101db575b6101cb906129e7565b6101d36129a3565b614869565b80f35b503330146101c2565b905083813d8311610218575b6101fa818361285f565b810103126102145761020e6101d893612996565b386101b5565b8380fd5b503d6101f0565b6040513d87823e3d90fd5b82819392503d831161025d575b610241818361285f565b81010312610259576102538291612982565b3861018a565b8580fd5b503d610237565b6040513d88823e3d90fd5b80fd5b503461026f578060031936011261026f576004546040516001600160a01b039091168152602090f35b503461026f57608036600319011261026f57806001600160401b03600435818111610473576102ce903690600401612897565b90602435818111610566576102e7903690600401612905565b9060643590811161056657610300903690600401612905565b6040516351331ad760e01b8152909260209290916001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581600481855afa90811561052457839187918a9161052f575b506024604051809481936335d2155560e11b8352336004840152165afa801561052457869189916104e2575b50916103946004936129e7565b61039c6129a3565b8551855114806104da575b6103b090612a28565b604051635ed6d55b60e11b815292839182905afa9081156104cf578791610496575b501691823b156102595761040392869283604051809681958294631e09986f60e21b84526044359160048501612a99565b03925af190811561048b578491610477575b5050303b1561047357610445918391604051938492839263180981eb60e31b845260048401526024830190612a65565b038183305af18015610468576104585750f35b610461906127c8565b61026f5780f35b6040513d84823e3d90fd5b5050fd5b610480906127c8565b610473578238610415565b6040513d86823e3d90fd5b90508481813d83116104c8575b6104ad818361285f565b810103126104c4576104be90612982565b386103d2565b8680fd5b503d6104a3565b6040513d89823e3d90fd5b5060016103a7565b82819392503d831161051d575b6104f9818361285f565b81010312610519576004916103946105118893612996565b919350610387565b8780fd5b503d6104ef565b6040513d8a823e3d90fd5b92505081813d831161055f575b610546818361285f565b8101031261051957856105598492612982565b3861035b565b503d61053c565b505050fd5b503461026f576020806003193601126107f8576004356001600160401b0381116107f45761059d903690600401612905565b6040516351331ad760e01b81529091906001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561021f5785916107bf575b508260405180926335d2155560e11b8252336004830152816024958692165afa801561021f578590610785575b61062591506129e7565b61062d6129a3565b835b8351811015610781576106428185612e0e565b51303b156102595760405190630fdc860f60e41b82526004820152600190818482015286808260448183305af1918261076d575b505061070657610684612b1a565b6308c379a0146106a1575b61048b5761069c90612ba9565b61062f565b6106a9612b38565b806106b5575b5061068f565b905061070086916040516106c881612844565b602181527f6578656375746544656372656173654c696d69744f7264657273206572726f7287820152601d60f91b6040820152615854565b386106af565b508061076861071861069c9387612e0e565b5160405161072581612844565b602c81527f6578656375746544656372656173654c696d69744f726465727320636f6d706c878201526b32ba32b2171034b73232bc1d60a11b60408201526157fc565b612ba9565b610776906127c8565b6104c4578638610676565b8480f35b508281813d83116107b8575b61079b818361285f565b810103126107b4576107af61062591612996565b61061b565b8480fd5b503d610791565b90508281813d83116107ed575b6107d6818361285f565b810103126107b4576107e790612982565b386105ee565b503d6107cc565b8280fd5b5080fd5b503461026f5760a036600319011261026f57806001600160401b036004358181116104735761082f903690600401612897565b9060243590811161047357610848903690600401612905565b6040516351331ad760e01b81526001600160a01b03906020907f00000000000000000000000000000000000000000000000000000000000000008316908281600481855afa9081156104cf57849184918991610a65575b506024604051809481936335d2155560e11b8352336004840152165afa80156104cf5783918891610a27575b50916108d86004936129e7565b6108e06129a3565b865186511480610a1f575b6108f490612a28565b604051635ed6d55b60e11b815292839182905afa9182156102645786926109e9575b50501691823b156105665761094892849283604051809681958294631e09986f60e21b84526044359160048501612a99565b03925af18015610468576109d5575b5050303b1561026f5760405163531d87c160e01b815260643560048201528190818160248183305af18015610468576109c1575b5050303b1561026f5760405163bfa5ea9960e01b815260843560048201528190818160248183305af18015610468576104585750f35b6109ca906127c8565b61026f57803861098b565b6109de906127c8565b61026f578038610957565b90809250813d8311610a18575b610a00818361285f565b810103126107b457610a1190612982565b3880610916565b503d6109f6565b5060016108eb565b82819392503d8311610a5e575b610a3e818361285f565b810103126104c4576004916108d8610a568593612996565b9193506108cb565b503d610a34565b92505081813d8311610a95575b610a7c818361285f565b810103126104c45782610a8f8592612982565b3861089f565b503d610a72565b503461026f57610aab36612963565b6040516351331ad760e01b8152602092906001600160a01b039084816004817f000000000000000000000000000000000000000000000000000000000000000086165afa80156102645785918791610b7f575b506024604051809481936335d2155560e11b8352336004840152165afa93841561021f578594610b44575b5050610b376101d8936129e7565b610b3f6129a3565b613277565b90809450813d8311610b78575b610b5b818361285f565b8101031261021457610b37610b726101d894612996565b93610b29565b503d610b51565b82819392503d8311610bae575b610b96818361285f565b8101031261025957610ba88591612982565b38610afe565b503d610b8c565b503461026f57608036600319011261026f576001600160401b036004358181116107f457610be7903690600401612905565b906024359081116107f457610c00903690600401612905565b606435916004831015610214576040516351331ad760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561021f578591611375575b506040516335d2155560e11b815233600482015290602090829060249082906001600160a01b03165afa801561021f57859061133a575b610c9b91506129e7565b610ca36129a3565b805182510361130257610cdd9260018060a01b03600454166040519485926340b4605b60e11b845260443560048501526024840190612af7565b8160446101609687935afa93841561021f5785946112d3575b5050610140830151156112a05760018060a01b03600554166040840151604051906330a66e1560e01b8252600482015261010081602481855afa90811561026457869161126f575b508251919492610d4d83612880565b92610d5b604051948561285f565b808452610d6a601f1991612880565b01875b81811061121257505060065487946001600160a01b039091169190855b8251871015610ef757610d9d8784612e0e565b519660405197636468402960e11b8952600489015261014088602481885afa978815610eec578b98610eb9575b50610dd5818a612e0e565b5160a089015110610e7457610dea818a612e0e565b51606087015110610e2f57610e0d610e2992610e06838c612e0e565b5190612e38565b97610e188289612e0e565b52610e238188612e0e565b50612ba9565b95610d8a565b60405162461bcd60e51b815260206004820152601860248201527f65786365656473206d617820747261646520616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f41444c2073697a65206578636565647320706f736974696f6e000000000000006044820152606490fd5b610ede9198506101403d61014011610ee5575b610ed6818361285f565b81019061301f565b9638610dca565b503d610ecc565b6040513d8d823e3d90fd5b908884878c9460c0850151036111b85784926101206040860151602460405180948193632f7ce47360e21b835260048301525afa92831561048b57610f85936020928691611187575b5082015160408781015160e0890151915163179a09e360e01b81526001600160a01b039093166004840152602483015215604482015293849190829081906064820190565b03915afa91821561117c578392611145575b50825b81518110156110dc57836020611033610fb38486612e0e565b5160018060a01b03600454169060018060a01b038482015116906040810151906060908782820151151592610fec60a080940151613157565b9460405196610ffa8861280d565b8752898701528160408701528501528a608085015283015260c0820152604051948580948193635b47525960e11b83526004830161321c565b03925af190811561021f5785916110a2575b50303b156107b45760405190630fdc860f60e41b8252600482015260006024820152848160448183305af190811561021f57859161108e575b505061108990612ba9565b610f9a565b611097906127c8565b61021457838761107e565b9450506020843d6020116110d4575b816110be6020938361285f565b810103126110cf5785935187611045565b600080fd5b3d91506110b1565b8360608601516004811015611131578190303b1561112e57604051630fdc860f60e41b8152604435600482015290611118906024830190612af7565b818160448183305af18015610468576104585750f35b50fd5b634e487b7160e01b82526021600452602482fd5b925090506020823d602011611174575b816111626020938361285f565b810103126110cf578391519085610f97565b3d9150611155565b6040513d85823e3d90fd5b6111ab91506101203d610120116111b1575b6111a3818361285f565b810190612e81565b88610f40565b503d611199565b60405162461bcd60e51b815260206004820152602c60248201527f41444c20706f736974696f6e20616d6f756e74206e6f74206d6174636820646560448201526b31b932b0b9b29037b93232b960a11b6064820152608490fd5b60209060409893969851611225816127f1565b8a81528a838201528a60408201528a60608201528a60808201528a60a08201528a60c08201528a60e08201528a6101008201528a6101208201528282880101520196949196610d6d565b61129391506101003d61010011611299575b61128b818361285f565b810190612f0e565b38610d3e565b503d611281565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bc81b9959590810511360aa1b6044820152606490fd5b6112f3929450803d106112fb575b6112eb818361285f565b8101906147ad565b913880610cf6565b503d6112e1565b60405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b6044820152606490fd5b506020813d60201161136d575b816113546020938361285f565b810103126107b457611368610c9b91612996565b610c91565b3d9150611347565b90506020813d6020116113ac575b816113906020938361285f565b810103126107b45760206113a5602492612982565b9150610c5a565b3d9150611383565b503461026f578060031936011261026f576020600154604051908152f35b503461026f578060031936011261026f576020600354604051908152f35b503461026f576020806003193601126107f8576004356001600160401b0381116107f457611422903690600401612905565b6040516351331ad760e01b81526001600160a01b039184919084826004817f000000000000000000000000000000000000000000000000000000000000000088165afa801561117c5784928491611658575b508560405180926335d2155560e11b8252336004830152816024988992165afa801561048b578490611622575b6114ab91506129e7565b6114b36129a3565b73__$1ee2e980a3520e4a8a3e6e6271a4f49a3f$",
  "libraries": {
    "LiquidationLogic": "0x5a7D373dbf6090720067Cd9C66d4b40952F1c28d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4196,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "increaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4199,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "decreaseMarketOrderStartIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4202,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "maxTimeDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4208,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "orderManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOrderManager)2715"
      },
      {
        "astId": 4211,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPool)3012"
      },
      {
        "astId": 4214,
        "contract": "contracts/trading/Executor.sol:Executor",
        "label": "positionManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPositionManager)3318"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOrderManager)2715": {
        "encoding": "inplace",
        "label": "contract IOrderManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)3012": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)3318": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}